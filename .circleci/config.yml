version: 2.1

parameters:
  slack-mentions:
    type: string
    default: 'S01JP5A3ACQ'
  only_for_branches:
    type: string
    default: 'main'

orbs:
  lacework: lacework/lacework@1
  slack: circleci/slack@3.4.2
  jq: circleci/jq@2.1.0
  win: circleci/windows@2.2.0

executors:
  go-executor:
    docker:
      - image: circleci/golang:1.15
    working_directory: /go/src/github.com/lacework/go-sdk
  alpine:
    docker:
      - image: cibuilds/base:latest
    resource_class: small
  arm-linux:
    machine:
      image: ubuntu-2004:202101-01
    resource_class: arm.medium

jobs:
  unit-test:
    executor: go-executor
    steps:
      - checkout
      - run: make prepare
      - run: make lint
      - run: make coverage-ci
      - store_artifacts:
          path: circleci-artifacts
      - run: make fmt-check
      - run: make imports-check
      - slack/status:
          fail_only: true
          mentions: << pipeline.parameters.slack-mentions >>
          only_for_branches: <<pipeline.parameters.only_for_branches>>
  build-cli:
    executor: go-executor
    environment:
      HONEYDATASET: lacework-cli-ci
    steps:
      - checkout
      - run: make prepare
      - run: make build-cli-cross-platform
      - persist_to_workspace:
          root: bin
          paths:
            - lacework-cli-*
      - slack/status:
          fail_only: true
          mentions: << pipeline.parameters.slack-mentions >>
          only_for_branches: <<pipeline.parameters.only_for_branches>>
  integration-test-arm-linux:
    executor: arm-linux
    steps:
      - checkout
      - attach_workspace:
          at: bin
      - run: make integration-only
      - store_artifacts:
          path: circleci-artifacts
      - slack/status:
          fail_only: true
          mentions: << pipeline.parameters.slack-mentions >>
          only_for_branches: <<pipeline.parameters.only_for_branches>>
  integration-test-linux:
    executor: go-executor
    steps:
      - checkout
      - attach_workspace:
          at: bin
      - run:
          command: make integration-only
          no_output_timeout: 30m
      - store_artifacts:
          path: circleci-artifacts
      - slack/status:
          fail_only: true
          mentions: << pipeline.parameters.slack-mentions >>
          only_for_branches: <<pipeline.parameters.only_for_branches>>
  integration-test-windows:
    executor: win/default
    environment:
      GOFLAGS: -mod=vendor
    steps:
      - checkout
      - attach_workspace:
          at: bin
      - run:
          command: |
            $env:LW_CLI_BIN = Join-Path (Get-Location).Path "bin\\lacework-cli-windows-amd64.exe"
            go test -v github.com/lacework/go-sdk/integration -timeout 30m
          no_output_timeout: 30m
      - store_artifacts:
          path: circleci-artifacts
  verify-release:
    executor: alpine
    steps:
      - checkout
      - run: scripts/release.sh verify
  trigger-release:
    executor: alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "ab:67:49:c0:c9:ae:ae:36:98:aa:18:5d:7f:48:fd:b6"
      - run: scripts/release.sh trigger
  release:
    executor: go-executor
    environment:
      HONEYDATASET: lacework-cli-prod
    steps:
      - checkout
      - jq/install
      - slack/notify:
          mentions: << pipeline.parameters.slack-mentions >>
          message: Releasing a new version of the go-sdk repository
      - run: make prepare
      - run: scripts/release.sh publish
      - setup_remote_docker
      - run: scripts/release_containers.sh
      - slack/status:
          mentions: << pipeline.parameters.slack-mentions >>
  vuln-scan-cli:
    executor: lacework/default
    parameters:
      tag:
        type: string
    steps:
      - lacework/ctr-vuln-scan:
          account: CI_ACCOUNT
          api-key: CI_API_KEY
          api-secret: CI_API_SECRET
          registry: index.docker.io
          repository: lacework/lacework-cli
          html: yes
          tag: << parameters.tag >>
      - run:
          command: |
            mkdir  circleci-artifacts/
            if [ `ls -1 lacework-lacework-cli* 2>/dev/null | wc -l ` -gt 0 ]; then
                mv lacework-lacework-cli* circleci-artifacts/
            fi
      - store_artifacts:
          path: circleci-artifacts
      - slack/status:
          fail_only: true
          mentions: << pipeline.parameters.slack-mentions >>
          only_for_branches: <<pipeline.parameters.only_for_branches>>
  trigger-homebrew-update:
    executor: alpine
    steps:
      - run: curl -u "$CIRCLE_TOKEN" https://circleci.com/api/v1.1/project/gh/lacework/homebrew-tap/tree/main -d "build_parameters[CIRCLE_JOB]=update"

workflows:
  version: 2
  build_test_trigger-release:
    jobs:
      - unit-test
      - build-cli
      - integration-test-linux:
          requires:
            - build-cli
      - trigger-release:
          requires:
            - unit-test
            - integration-test-linux
          filters:
            branches:
              only: main

  verify-release:
    jobs:
      - verify-release:
          filters:
             branches:
               only: release

  release-from-tag:
    jobs:
      - release:
          filters:
            tags:
               only: /^v.*/
            branches:
              ignore: /.*/
          context: techally_releases
      - vuln-scan-cli:
          filters:
            tags:
               only: /^v.*/
            branches:
              ignore: /.*/
          requires:
            - release
          matrix:
            parameters:
              tag: ["ubi-8", "centos-8", "debian-10", "ubuntu-1804", "amazonlinux-2"]
      - trigger-homebrew-update:
          filters:
            tags:
               only: /^v.*/
            branches:
              ignore: /.*/
          requires:
            - vuln-scan-cli

  nightly:
    triggers:
      - schedule:
          cron: "0 12 * * *"
          filters:
            branches:
              only: main
    jobs:
      - unit-test
      - build-cli
      - integration-test-linux:
          requires:
            - build-cli
      - integration-test-windows:
          requires:
            - build-cli
      - integration-test-arm-linux:
          requires:
            - build-cli

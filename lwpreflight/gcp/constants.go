package gcp

type IntegrationType string

const (
	Agentless IntegrationType = "gcp_agentless"
	AuditLog  IntegrationType = "gcp_audit_log"
	Config    IntegrationType = "gcp_config"
)

// TODO: add org-level required permissions

var RequiredPermissions = map[IntegrationType][]string{
	Agentless: {
		"cloudscheduler.jobs.create",
		"cloudscheduler.jobs.delete",
		"cloudscheduler.jobs.enable",
		"cloudscheduler.jobs.get",
		"cloudscheduler.jobs.list",
		"compute.projects.get",
		"iam.roles.create",
		"iam.roles.delete",
		"iam.roles.get",
		"iam.roles.list",
		"iam.roles.undelete",
		"iam.roles.update",
		"iam.serviceAccountKeys.create",
		"iam.serviceAccountKeys.delete",
		"iam.serviceAccountKeys.get",
		"iam.serviceAccountKeys.list",
		"iam.serviceAccounts.create",
		"iam.serviceAccounts.delete",
		"iam.serviceAccounts.get",
		"iam.serviceAccounts.list",
		"resourcemanager.organizations.get",
		"resourcemanager.organizations.getIamPolicy",
		"resourcemanager.organizations.setIamPolicy",
		"resourcemanager.projects.get",
		"resourcemanager.projects.getIamPolicy",
		"resourcemanager.projects.setIamPolicy",
		"run.jobs.create",
		"run.jobs.delete",
		"run.jobs.get",
		"run.jobs.list",
		"run.operations.get",
		"run.operations.list",
		"secretmanager.secrets.create",
		"secretmanager.secrets.delete",
		"secretmanager.secrets.get",
		"secretmanager.secrets.getIamPolicy",
		"secretmanager.secrets.list",
		"secretmanager.secrets.setIamPolicy",
		"secretmanager.versions.access",
		"secretmanager.versions.add",
		"secretmanager.versions.destroy",
		"secretmanager.versions.enable",
		"secretmanager.versions.get",
		"secretmanager.versions.list",
		"serviceusage.quotas.get",
		"serviceusage.services.get",
		"serviceusage.services.list",
		"storage.buckets.create",
		"storage.buckets.delete",
		"storage.buckets.get",
		"storage.buckets.getIamPolicy",
		"storage.buckets.list",
		"storage.buckets.setIamPolicy",
		"storage.objects.delete",
	},
	AuditLog: {
		"cloudscheduler.locations.list",
		"compute.projects.get",
		"iam.roles.create",
		"iam.roles.delete",
		"iam.roles.get",
		"iam.roles.list",
		"iam.roles.undelete",
		"iam.roles.update",
		"iam.serviceAccountKeys.create",
		"iam.serviceAccountKeys.delete",
		"iam.serviceAccountKeys.get",
		"iam.serviceAccountKeys.list",
		"iam.serviceAccounts.create",
		"iam.serviceAccounts.delete",
		"iam.serviceAccounts.get",
		"iam.serviceAccounts.list",
		"logging.sinks.create",
		"logging.sinks.delete",
		"logging.sinks.get",
		"logging.sinks.list",
		"pubsub.subscriptions.create",
		"pubsub.subscriptions.delete",
		"pubsub.subscriptions.get",
		"pubsub.subscriptions.getIamPolicy",
		"pubsub.subscriptions.list",
		"pubsub.subscriptions.setIamPolicy",
		"pubsub.topics.attachSubscription",
		"pubsub.topics.create",
		"pubsub.topics.delete",
		"pubsub.topics.get",
		"pubsub.topics.getIamPolicy",
		"pubsub.topics.list",
		"pubsub.topics.setIamPolicy",
		"resourcemanager.projects.get",
		"resourcemanager.projects.getIamPolicy",
		"resourcemanager.projects.setIamPolicy",
		"serviceusage.quotas.get",
		"serviceusage.services.get",
		"serviceusage.services.list",
	},
	Config: {
		"cloudscheduler.locations.list",
		"iam.roles.create",
		"iam.roles.delete",
		"iam.roles.get",
		"iam.roles.list",
		"iam.roles.undelete",
		"iam.roles.update",
		"iam.serviceAccountKeys.create",
		"iam.serviceAccountKeys.delete",
		"iam.serviceAccountKeys.disable",
		"iam.serviceAccountKeys.enable",
		"iam.serviceAccountKeys.get",
		"iam.serviceAccountKeys.list",
		"iam.serviceAccounts.create",
		"iam.serviceAccounts.delete",
		"iam.serviceAccounts.disable",
		"iam.serviceAccounts.enable",
		"iam.serviceAccounts.get",
		"iam.serviceAccounts.get",
		"iam.serviceAccounts.getIamPolicy",
		"iam.serviceAccounts.list",
		"iam.serviceAccounts.list",
		"iam.serviceAccounts.setIamPolicy",
		"iam.serviceAccounts.undelete",
		"iam.serviceAccounts.update",
		"monitoring.timeSeries.list",
		"resourcemanager.projects.get",
		"resourcemanager.projects.getIamPolicy",
		"resourcemanager.projects.list",
		"resourcemanager.projects.setIamPolicy",
		"serviceusage.quotas.get",
		"serviceusage.quotas.update",
		"serviceusage.services.disable",
		"serviceusage.services.enable",
		"serviceusage.services.get",
		"serviceusage.services.list",
		"serviceusage.services.use",
	},
}

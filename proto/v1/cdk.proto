//
// Author:: Salim Afiune Maya (<afiune@lacework.net>)
// Copyright:: Copyright 2022, Lacework Inc.
// License:: Apache License, Version 2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

import "google/protobuf/timestamp.proto";

// defines the go package that will be generated with protoc
option go_package = "lacework/go-sdk/cli/cdk/proto/v1;cdk";

package cdk.v1;

// Core service definition
service Core {
  // Sends a ping -> pong between server and client
  //    Component -> CDK Server
  rpc Ping(PingRequest) returns (PongReply) {}

  // Sends a Honeyvent
  rpc Honeyvent(HoneyventRequest) returns (Reply) {}

  // Read from CLI cache
  rpc ReadCache(ReadCacheRequest) returns (ReadCacheResponse) {}

  // Write to CLI cache
  rpc WriteCache(WriteCacheRequest) returns (WriteCacheResult) {}
}

message PingRequest {
  string component_name = 1;
}

message PongReply {
  string message = 1;
}

// Reply is a generic reply for for rpc definitions that only requires
// acknowledgement of the remote procedure
message Reply {}

message HoneyventRequest {
  string feature = 1;
  map<string, string> feature_data = 2;
  string error = 3;
  int64 duration_ms = 4;
}

// WriteCacheRequest is used to submit data that should be written to cache, included its expiry
message WriteCacheRequest {
  // name of the cache key to write
  string key = 1;
  bytes data = 2;
  google.protobuf.Timestamp expires = 3;
}

// ReadCacheRequest is used to fetch data from the cache
message ReadCacheRequest {
  // name of the cache key to read
  string key = 1;
}

// ReadCacheResponse is the response type after a ReadCacheRequest is made
message ReadCacheResponse {
  // hit is true when data was found, false otherwise
  bool hit = 1;
  // empty if cache miss (hit == false)
  bytes data = 2; 
}

// WriteCacheResult is the response type after a WriteCacheRequest is made
message WriteCacheResult {
  bool error = 1;
  // message stores the error body if error == true, otherwise empty
  string message = 2;
}

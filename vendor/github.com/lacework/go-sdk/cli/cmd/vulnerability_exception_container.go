//
// Author:: Darren Murray(<darren.murray@lacework.net>)
// Copyright:: Copyright 2021, Lacework Inc.
// License:: Apache License, Version 2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package cmd

import (
	"strings"

	"github.com/AlecAivazis/survey/v2"

	"github.com/lacework/go-sdk/api"
)

func createContainerVulnerabilityException() (string, error) {
	questions := []*survey.Question{
		{
			Name:     "name",
			Prompt:   &survey.Input{Message: "Name: "},
			Validate: survey.Required,
		},
		{
			Name:     "description",
			Prompt:   &survey.Input{Message: "Description: "},
			Validate: survey.Required,
		},
		{
			Name: "reason",
			Prompt: &survey.Select{
				Message: "Exception Reason: ",
				Options: []string{"Accepted Risk", "False Positive", "Compensating Controls", "Fix Pending", "Other"},
			},
			Validate: survey.Required,
		},
		{
			Name: "includeCriteria",
			Prompt: &survey.MultiSelect{
				Message: "Select Vulnerability Criteria to set: ",
				Options: []string{"CVEs", "Packages", "Severities", "Fixable"}},
			Validate: survey.MinItems(1),
		},
	}

	answers := struct {
		Name            string
		Description     string   `survey:"description"`
		Reason          string   `survey:"reason"`
		Severities      []string `survey:"severities"`
		Cves            string   `survey:"cves"`
		Packages        string   `survey:"packages"`
		Fixable         bool     `survey:"fixable"`
		ImageID         string   `survey:"imageId"`
		ImageTag        string   `survey:"imageTag"`
		Registry        string   `survey:"registry"`
		Repository      string   `survey:"repository"`
		Namespace       string   `survey:"namespace"`
		IncludeCriteria []string `survey:"includeCriteria"`
	}{}

	err := survey.Ask(questions, &answers, survey.WithIcons(promptIconsFunc))
	if err != nil {
		return "", err
	}

	err = askVulnerabilityExceptionCriteria(&answers, answers.IncludeCriteria)
	if err != nil {
		return "", err
	}

	fixable := answers.Fixable
	vulnExCfg := api.VulnerabilityExceptionConfig{
		Description:     answers.Description,
		Type:            api.VulnerabilityExceptionTypeContainer,
		ExceptionReason: api.NewVulnerabilityExceptionReason(answers.Reason),
		Severities:      api.NewVulnerabilityExceptionSeverities(answers.Severities),
		Cve:             strings.Split(answers.Cves, "\n"),
		Package:         transformVulnerabilityExceptionPackages(answers.Packages),
		Fixable:         &fixable,
	}

	// ask the user if they would like to configure a Resource Scope, or many
	scope := false
	err = survey.AskOne(&survey.Confirm{
		Message: "Configure one or more Resource Scope(s)?",
	}, &scope)
	if err != nil {
		return "", err
	}

	if scope {
		err = askVulnerabilityExceptionContainerResourceScope(&answers)
		if err != nil {
			return "", err
		}
		vulnExCfg.ResourceScope = api.VulnerabilityExceptionContainerResourceScope{
			ImageID:    strings.Split(answers.ImageID, "\n"),
			ImageTag:   strings.Split(answers.ImageTag, "\n"),
			Registry:   strings.Split(answers.Registry, "\n"),
			Repository: strings.Split(answers.Repository, "\n"),
			Namespace:  strings.Split(answers.Namespace, "\n"),
		}
	}

	vuln := api.NewVulnerabilityException(answers.Name, vulnExCfg)

	cli.StartProgress("Creating container vulnerability exception...")
	vulnResp, err := cli.LwApi.V2.VulnerabilityExceptions.CreateVulnerabilityExceptionsHost(vuln)
	cli.StopProgress()
	return vulnResp.Data.Guid, err
}

func askVulnerabilityExceptionContainerResourceScope(answers interface{}) error {
	criteria := struct {
		Scope []string `survey:"scope"`
	}{}
	err := survey.Ask([]*survey.Question{
		{
			Name: "scope",
			Prompt: &survey.MultiSelect{
				Message: "Select Resource Scope criteria to set: ",
				Options: []string{"Namespaces", "Image IDs", "Image Tags", "Registries", "Repositories"}},
			Validate: survey.MinItems(1),
		},
	}, &criteria, survey.WithIcons(promptIconsFunc))
	if err != nil {
		return err
	}

	var questions []*survey.Question
	for _, c := range criteria.Scope {
		if c == "Image IDs" {
			questions = append(questions,
				&survey.Question{Name: "imageId",
					Prompt: &survey.Multiline{Message: "List of Image IDs:"},
				})
			continue
		}

		if c == "Image Tags" {
			questions = append(questions,
				&survey.Question{Name: "imageTag",
					Prompt: &survey.Multiline{Message: "List of Image Tags:"},
				})
			continue
		}

		if c == "Registries" {
			questions = append(questions,
				&survey.Question{Name: "registry",
					Prompt: &survey.Multiline{Message: "List of Registries:"}})
			continue
		}

		if c == "Repositories" {
			questions = append(questions,
				&survey.Question{
					Name:   "repository",
					Prompt: &survey.Multiline{Message: "List of Repositories:"},
				})
			continue
		}

		if c == "Namespaces" {
			questions = append(questions,
				&survey.Question{
					Name:   "namespace",
					Prompt: &survey.Multiline{Message: "List of Namespaces:"},
				})
			continue
		}
	}

	return survey.Ask(questions, answers, survey.WithIcons(promptIconsFunc))
}

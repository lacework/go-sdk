package api_test

import (
	"encoding/json"
	"fmt"
	"net/http"
	"testing"

	"github.com/stretchr/testify/assert"

	"github.com/lacework/go-sdk/v2/api"
	"github.com/lacework/go-sdk/v2/internal/lacework"
)

func TestV2VulnerabilityObservations_ImageSummary_SearchAllPages_EmptyData(t *testing.T) {
	fakeServer := lacework.MockServer()
	fakeServer.MockToken("TOKEN")
	fakeServer.MockAPI("VulnerabilityObservations/ImageSummary/search",
		func(w http.ResponseWriter, r *http.Request) {
			assert.Equal(t, "POST", r.Method, "Search() should be a POST method")
			fmt.Fprintf(w, mockPaginationEmptyResponse())
		},
	)
	defer fakeServer.Close()

	c, err := api.NewClient("test",
		api.WithToken("TOKEN"),
		api.WithURL(fakeServer.URL()),
	)
	assert.NoError(t, err)

	response, err := c.V2.VulnerabilityObservations.ImageSummary.SearchAllPages(api.SearchFilter{})
	assert.NoError(t, err)
	assert.NotNil(t, response)
	assert.Equal(t, 0, len(response.Data))
}

func TestV2VulnerabilityObservations_ImageSummary_SearchAllPages(t *testing.T) {
	fakeServer := lacework.MockServer()
	fakeServer.MockToken("TOKEN")
	fakeServer.MockAPI("VulnerabilityObservations/ImageSummary/search",
		func(w http.ResponseWriter, r *http.Request) {
			assert.Equal(t, "POST", r.Method, "Search() should be a POST method")
			fmt.Fprintf(w, mockVulnerabilityObservationsImageSummaryResponse())
		},
	)
	defer fakeServer.Close()

	c, err := api.NewClient("test",
		api.WithToken("TOKEN"),
		api.WithURL(fakeServer.URL()),
	)
	assert.NoError(t, err)

	response, err := c.V2.VulnerabilityObservations.ImageSummary.SearchAllPages(api.SearchFilter{})
	assert.NoError(t, err)
	assert.NotNil(t, response)
	assert.Equal(t, 3, len(response.Data))
}

func TestV2VulnerabilityObservations_ImageSummary_UnmarshalResponse(t *testing.T) {
	var mockResponse api.VulnerabilityObservationsImageSummaryResponse
	err := json.Unmarshal([]byte(mockVulnerabilityObservationsImageSummaryResponse()), &mockResponse)
	assert.NoError(t, err)

	paging := mockResponse.Paging
	assert.Equal(t, 3, paging.Rows)
	assert.Equal(t, 3, paging.TotalRows)
	assert.Empty(t, paging.Urls.NextPage)

	data := mockResponse.Data
	assert.Equal(t, 3, len(data))

	summary := data[0]
	assert.Equal(t, 0, summary.ContainerCount)
	assert.Equal(t, 0, summary.ContainerCount)
	assert.Equal(t, "sha256:8182c226d7d5bc4ce596f31017e62442fd6fdf4796595073d5342094f1b778df", summary.Digest)
	assert.Equal(t, "sha256:3fe1c77b23ca802abf84be74215344a2401457e9112d5f560ea50097679155e9", summary.ImageId)
	assert.Equal(t, "2025-08-06T13:05:05Z", summary.LastScanTime)
	assert.Equal(t, "docker.io", summary.Registry)
	assert.Equal(t, "lacework/jre", summary.Repository)
	assert.Equal(t, "Success", summary.ScanStatus)
	assert.Equal(t, "amazoncorretto8-alpine3.15-stable", summary.Tag)
	assert.Equal(t, 0, summary.VulnCountCritical)
	assert.Equal(t, 0, summary.VulnCountCriticalFixable)
	assert.Equal(t, 1, summary.VulnCountHigh)
	assert.Equal(t, 1, summary.VulnCountHighFixable)
	assert.Equal(t, 0, summary.VulnCountInfo)
	assert.Equal(t, 0, summary.VulnCountInfoFixable)
	assert.Equal(t, 0, summary.VulnCountLow)
	assert.Equal(t, 0, summary.VulnCountLowFixable)
	assert.Equal(t, 0, summary.VulnCountMedium)
	assert.Equal(t, 0, summary.VulnCountMediumFixable)
}

func mockVulnerabilityObservationsImageSummaryResponse() string {
	return `
{
    "paging": {
        "rows": 3,
        "totalRows": 3,
        "urls": {
            "nextPage": null
        }
    },
    "data": [
        {
            "containerCount": 0,
            "digest": "sha256:8182c226d7d5bc4ce596f31017e62442fd6fdf4796595073d5342094f1b778df",
            "imageId": "sha256:3fe1c77b23ca802abf84be74215344a2401457e9112d5f560ea50097679155e9",
            "lastScanTime": "2025-08-06T13:05:05Z",
            "registry": "docker.io",
            "repository": "lacework/jre",
            "scanStatus": "Success",
            "tag": "amazoncorretto8-alpine3.15-stable",
            "vulnCountCritical": 0,
            "vulnCountCriticalFixable": 0,
            "vulnCountHigh": 1,
            "vulnCountHighFixable": 1,
            "vulnCountInfo": 0,
            "vulnCountInfoFixable": 0,
            "vulnCountLow": 0,
            "vulnCountLowFixable": 0,
            "vulnCountMedium": 0,
            "vulnCountMediumFixable": 0
        },
        {
            "containerCount": 0,
            "digest": "sha256:8e6596ca0b60dc3464e286097b33f39012760cca51ba6976c7e8f2ff7a9bce82",
            "imageId": "sha256:819963f636cf5c396c5d7254e00678563e9197b7f16fdf69e7b4858e8a1fdf52",
            "lastScanTime": "2025-08-06T13:05:15Z",
            "registry": "docker.io",
            "repository": "lacework/jre",
            "scanStatus": "Success",
            "tag": "8-alpine3.15-test",
            "vulnCountCritical": 0,
            "vulnCountCriticalFixable": 0,
            "vulnCountHigh": 8,
            "vulnCountHighFixable": 8,
            "vulnCountInfo": 0,
            "vulnCountInfoFixable": 0,
            "vulnCountLow": 1,
            "vulnCountLowFixable": 1,
            "vulnCountMedium": 0,
            "vulnCountMediumFixable": 0
        },
        {
            "containerCount": 0,
            "digest": "sha256:a41ec54e6450ccc66d9f2ff975a0004d889349f3e8f5b086ebe8704e7ae962ac",
            "imageId": "sha256:b167326fa5f713a3cf7d742852967303b1b9301a147f84a0132ae58c47086fb4",
            "lastScanTime": "2025-08-06T13:05:11Z",
            "registry": "docker.io",
            "repository": "lacework/jre",
            "scanStatus": "Success",
            "tag": "alpine-test",
            "vulnCountCritical": 0,
            "vulnCountCriticalFixable": 0,
            "vulnCountHigh": 8,
            "vulnCountHighFixable": 8,
            "vulnCountInfo": 0,
            "vulnCountInfoFixable": 0,
            "vulnCountLow": 1,
            "vulnCountLowFixable": 1,
            "vulnCountMedium": 0,
            "vulnCountMediumFixable": 0
        }
    ]
}
	`
}

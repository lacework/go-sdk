//
// Author:: Darren Murray (<darren.murray@lacework.net>)
// Copyright:: Copyright 2020, Lacework Inc.
// License:: Apache License, Version 2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package cmd

import (
	"os"
	"os/exec"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestFailOnFixable(t *testing.T) {
	mockAssessment := vulAssessment{
		severityRating:        "high",
		fixableSeverityRating: "high",
		fixableVulCount:       2,
	}
	vulCmdState.FailOnFixable = true

	if os.Getenv("EXIT") == "1" {
		mockAssessment.validate()
	}

	cmd := exec.Command(os.Args[0], "-test.run=TestFailOnFixable")
	cmd.Env = append(os.Environ(), "EXIT=1")
	err := cmd.Run()

	//CLI should terminate with exit code 7
	assert.Equal(t, err.Error(), "exit status 7")
	clearVulnFilters()
}

func TestFailOnSeverityWithFixable(t *testing.T) {
	mockAssessment := vulAssessment{
		severityRating:        "high",
		fixableSeverityRating: "high",
		fixableVulCount:       2,
	}
	vulCmdState.FailOnSeverity = "high"
	vulCmdState.FailOnFixable = true

	if os.Getenv("EXIT") == "1" {
		mockAssessment.validate()
	}

	cmd := exec.Command(os.Args[0], "-test.run=TestFailOnSeverityWithFixable")
	cmd.Env = append(os.Environ(), "EXIT=1")
	err := cmd.Run()

	//CLI should terminate with exit code 8
	assert.Equal(t, err.Error(), "exit status 8")
	clearVulnFilters()
}

func TestFailOnSeverity(t *testing.T) {
	mockAssessment := vulAssessment{
		severityRating:        "high",
		fixableSeverityRating: "high",
		fixableVulCount:       2,
	}
	vulCmdState.FailOnSeverity = "high"

	if os.Getenv("EXIT") == "1" {
		mockAssessment.validate()
	}

	cmd := exec.Command(os.Args[0], "-test.run=TestFailOnSeverity")
	cmd.Env = append(os.Environ(), "EXIT=1")
	err := cmd.Run()

	//CLI should terminate with exit code 9
	assert.Equal(t, err.Error(), "exit status 9")
	clearVulnFilters()
}

func clearVulnFilters() {
	vulCmdState.FailOnSeverity = ""
	vulCmdState.FailOnFixable = false
}

//
// Author:: Salim Afiune Maya (<afiune@lacework.net>)
// Copyright:: Copyright 2020, Lacework Inc.
// License:: Apache License, Version 2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package cmd

import (
	"fmt"
	"strings"
	"time"

	"github.com/pkg/errors"
	"github.com/spf13/cobra"
	flag "github.com/spf13/pflag"

	"github.com/lacework/go-sdk/api"
)

var (
	vulCmdState = struct {
		// enable poll mechanism for scans status
		Poll bool

		// pollInterval is the time is seconds to wait between polls
		PollInterval time.Duration

		// when enabled we tread the provided sha256 hash as image id
		ImageID bool

		// display extended details about a vulnerability assessment
		Details bool

		// display only fixable vulnerabilities
		Fixable bool

		// show a list of packages by number of CVEs
		Packages bool

		// start time for listing assessments
		Start string

		// end time for listing assessments
		End string
	}{PollInterval: time.Second * 5}

	// vulnerability represents the vulnerability command that holds both, the host
	// and container sub-commands
	vulnerabilityCmd = &cobra.Command{
		Use:     "vulnerability",
		Aliases: []string{"vuln", "vul"},
		Short:   "container and host vulnerability assessments",
		Long:    "Container and host vulnerability assessments",
	}

	// vulContainerCmd represents the vulnerability container command
	vulContainerCmd = &cobra.Command{
		Use:     "container",
		Aliases: []string{"ctr"},
		Short:   "vulnerability assessment for containers",
		Long: `Request on-demand container vulnerability scans and vizualize previous
assessments from published images.

(*) PREREQUISITE: Your Lacework account should already be configured
with a Container Registry Integration of the container images you are
trying to scan or visualize.

To create a new integration use the following command:

    $ lacework integration create

Or, if you prefer to do it via the WebUI, log in to your account at:

    https://<ACCOUNT>.lacework.net

Then navigate to Settings > Integrations > Container Registry.`,
	}

	// vulHostCmd represents the vulnerability host command
	vulHostCmd = &cobra.Command{
		Use:   "host",
		Short: "vulnerability assessment for hosts",
		Long: `Request on-demand host vulnerability scans and vizualize assessments
from hosts with the Lacework datacollector agent installed.
`,
	}

	// TODO: @afiune marking this command as DEPRECATED.
	// ---------------------------------------------------------------------------------------------
	// TO-BE-REMOVED with issue https://github.com/lacework/go-sdk/issues/162
	vulReportCmd = &cobra.Command{
		Use:    "report <sha256:hash>",
		Hidden: true,
		Long: `(DEPRECATED) This command has been moved, use now the following command:

    $ lacework vulnerability container show-assessment <sha256:hash>`,
		Args: cobra.ExactArgs(1),
		RunE: func(_ *cobra.Command, args []string) error {
			cli.OutputHuman("(DEPRECATED) This command has been moved.\n")
			cli.OutputHuman("(DEPRECATED) Use now the command 'lacework vulnerability container show-assessment %s'\n\n", args[0])
			if cli.JSONOutput() {
				cli.Log.Warnw("this command has been deprecated", "moved_to", "lacework vulnerability container show-assessment")
			}
			return showContainerAssessmentsWithSha256(args[0])
		},
	}
	vulScanCmd = &cobra.Command{
		Use:    "scan",
		Hidden: true,
		Long: `(DEPRECATED) This command has been deprecated, look at the command:

    $ lacework vulnerability container --help`,
	}
	vulScanRunCmd = &cobra.Command{
		Use:    "run <registry> <repository> <tag|digest>",
		Hidden: true,
		Long: `(DEPRECATED) This command has been moved, use now the following command:

    $ lacework vulnerability container scan <registry> <repository> <tag|digest>`,
		Args: cobra.ExactArgs(3),
		RunE: func(_ *cobra.Command, args []string) error {
			cli.OutputHuman("(DEPRECATED) This command has been moved.\n")
			cli.OutputHuman(
				"(DEPRECATED) Use now the command 'lacework vulnerability container scan %s %s %s'\n\n",
				args[0], args[1], args[2],
			)
			if cli.JSONOutput() {
				cli.Log.Warnw("this command has been deprecated", "moved_to", "lacework vulnerability container scan")
			}
			return requestOnDemandContainerVulnerabilityScan(args)
		},
	}
	vulScanShowCmd = &cobra.Command{
		Use:    "show <request_id>",
		Hidden: true,
		Long: `(DEPRECATED) This command has been moved, use now the following command:

    $ lacework vulnerability container scan-status <registry> <repository> <tag|digest>`,
		Args: cobra.ExactArgs(1),
		RunE: func(_ *cobra.Command, args []string) error {
			cli.OutputHuman("(DEPRECATED) This command has been moved.\n")
			cli.OutputHuman("(DEPRECATED) Use now the command 'lacework vulnerability container scan-status %s'\n\n", args[0])
			if cli.JSONOutput() {
				cli.Log.Warnw("this command has been deprecated", "moved_to", "lacework vulnerability container scan-status")
			}
			return checkOnDemandContainerVulnerabilityStatus(args[0])
		},
	}
	// END-OF-COMMANDS-TO-BE-REMOVED with issue https://github.com/lacework/go-sdk/issues/162
	// ---------------------------------------------------------------------------------------------
)

func init() {
	// add the vulnerability command
	rootCmd.AddCommand(vulnerabilityCmd)

	// add sub-commands to the vulnerability command
	vulnerabilityCmd.AddCommand(vulContainerCmd)
	vulnerabilityCmd.AddCommand(vulHostCmd)

	// DEPRECATED commands and flags that will be removed with
	// GH Issue https://github.com/lacework/go-sdk/issues/162
	// ---------------------------------------------------------------------------------------------
	vulnerabilityCmd.AddCommand(vulReportCmd) // TO-BE-REMOVED
	vulnerabilityCmd.AddCommand(vulScanCmd)   // TO-BE-REMOVED
	vulScanCmd.AddCommand(vulScanRunCmd)      // TO-BE-REMOVED
	vulScanCmd.AddCommand(vulScanShowCmd)     // TO-BE-REMOVED
	setPollFlag(
		vulScanRunCmd.Flags(),
		vulScanShowCmd.Flags(),
	)
	setDetailsFlag(
		vulScanRunCmd.Flags(),
		vulScanShowCmd.Flags(),
		vulReportCmd.Flags(), // TO-BE-REMOVED
	)
	setFixableFlag(
		vulScanRunCmd.Flags(),
		vulScanShowCmd.Flags(),
		vulReportCmd.Flags(), // TO-BE-REMOVED
	)
	setPackagesFlag(
		vulScanRunCmd.Flags(),
		vulScanShowCmd.Flags(),
		vulReportCmd.Flags(), // TO-BE-REMOVED
	)
	vulReportCmd.Flags().BoolVar(
		&vulCmdState.ImageID, "image_id", false,
		"tread the provided sha256 hash as image id",
	)
	// END-OF-FLAGS-TO-BE-REMOVED with issue https://github.com/lacework/go-sdk/issues/162
	// ---------------------------------------------------------------------------------------------
}

func setPollFlag(cmds ...*flag.FlagSet) {
	for _, cmd := range cmds {
		if cmd != nil {
			cmd.BoolVar(&vulCmdState.Poll, "poll", false,
				fmt.Sprintf("poll until the vulnerability scan completes (%vs intervals)",
					vulCmdState.PollInterval.Seconds()),
			)
		}
	}
}

func setPackagesFlag(cmds ...*flag.FlagSet) {
	for _, cmd := range cmds {
		if cmd != nil {
			cmd.BoolVar(&vulCmdState.Packages, "packages", false,
				"show a list of packages with CVE count",
			)
		}
	}
}

func setFixableFlag(cmds ...*flag.FlagSet) {
	for _, cmd := range cmds {
		if cmd != nil {
			cmd.BoolVar(&vulCmdState.Fixable, "fixable", false,
				"display only fixable vulnerabilities",
			)
		}
	}
}

func setDetailsFlag(cmds ...*flag.FlagSet) {
	for _, cmd := range cmds {
		if cmd != nil {
			cmd.BoolVar(&vulCmdState.Details, "details", false,
				"increase details of a vulnerability assessment",
			)
		}
	}
}

func pollScanStatus(requestID string) error {
	cli.StartProgress(" Scan running...")

	for {
		assessment, err, retry := checkScanStatus(requestID)
		if err != nil {
			return err
		}

		if retry {
			time.Sleep(vulCmdState.PollInterval)
			continue
		}

		if cli.JSONOutput() {
			return cli.OutputJSON(assessment)
		}

		cli.StopProgress()
		cli.OutputHuman(buildVulnerabilityReport(assessment))
		return nil
	}
}

func checkScanStatus(requestID string) (*api.VulContainerReport, error, bool) {
	cli.Log.Infow("verifying status of vulnerability scan", "request_id", requestID)
	scan, err := cli.LwApi.Vulnerabilities.ScanStatus(requestID)
	if err != nil {
		return nil, errors.Wrap(err, "unable to verify status of the vulnerability scan"), false
	}

	cli.Log.Debugw("vulnerability scan", "details", scan)
	status := scan.CheckStatus()
	switch status {
	case "Success":
		return &scan.Data, nil, false
	case "Scanning":
		return &scan.Data, nil, true
	case "Unsupported":
		return nil, errors.Errorf(
			`unable to run assessment for the provided container image. (unsupported distribution)

For more information about supported distributions, visit:
    https://support.lacework.com/hc/en-us/articles/360035472393-Container-Vulnerability-Assessment-Overview
`,
		), false
	case "NotFound":
		return nil, errors.Errorf(
			"unable to find any vulnerability scan with request id '%s'",
			requestID,
		), false
	case "Failed":
		return nil, errors.New(
			"the vulnerability scan failed to execute. Use '--debug' to troubleshoot.",
		), false
	default:
		return nil, errors.New(
			"unable to get status from vulnerability scan. Use '--debug' to troubleshoot.",
		), false
	}
}

func severityOrder(severity string) int {
	switch strings.ToLower(severity) {
	case "critical":
		return 1
	case "high":
		return 2
	case "medium":
		return 3
	case "low":
		return 4
	case "info":
		return 5
	default:
		return 6
	}
}

func byteCountBinary(b int64) string {
	const unit = 1024
	if b < unit {
		return fmt.Sprintf("%d B", b)
	}
	div, exp := int64(unit), 0
	for n := b / unit; n >= unit; n /= unit {
		div *= unit
		exp++
	}
	return fmt.Sprintf("%.1f %cB", float64(b)/float64(div), "KMGTPE"[exp])
}

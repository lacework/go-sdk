# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto.v1 import cdk_pb2 as proto_dot_v1_dot_cdk__pb2


class CoreStub(object):
    """Core service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ping = channel.unary_unary(
                '/cdk.v1.Core/Ping',
                request_serializer=proto_dot_v1_dot_cdk__pb2.PingRequest.SerializeToString,
                response_deserializer=proto_dot_v1_dot_cdk__pb2.PongReply.FromString,
                )
        self.Honeyvent = channel.unary_unary(
                '/cdk.v1.Core/Honeyvent',
                request_serializer=proto_dot_v1_dot_cdk__pb2.HoneyventRequest.SerializeToString,
                response_deserializer=proto_dot_v1_dot_cdk__pb2.Reply.FromString,
                )


class CoreServicer(object):
    """Core service definition
    """

    def Ping(self, request, context):
        """Sends a ping -> pong between server and client
        Component -> CDK Server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Honeyvent(self, request, context):
        """Sends a Honeyvent
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CoreServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=proto_dot_v1_dot_cdk__pb2.PingRequest.FromString,
                    response_serializer=proto_dot_v1_dot_cdk__pb2.PongReply.SerializeToString,
            ),
            'Honeyvent': grpc.unary_unary_rpc_method_handler(
                    servicer.Honeyvent,
                    request_deserializer=proto_dot_v1_dot_cdk__pb2.HoneyventRequest.FromString,
                    response_serializer=proto_dot_v1_dot_cdk__pb2.Reply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cdk.v1.Core', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Core(object):
    """Core service definition
    """

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cdk.v1.Core/Ping',
            proto_dot_v1_dot_cdk__pb2.PingRequest.SerializeToString,
            proto_dot_v1_dot_cdk__pb2.PongReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Honeyvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cdk.v1.Core/Honeyvent',
            proto_dot_v1_dot_cdk__pb2.HoneyventRequest.SerializeToString,
            proto_dot_v1_dot_cdk__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

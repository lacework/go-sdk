//
// Author:: Salim Afiune Maya (<afiune@lacework.net>)
// Copyright:: Copyright 2020, Lacework Inc.
// License:: Apache License, Version 2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package integration

import (
	"encoding/json"
	"fmt"
	"regexp"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestContainerVulnerabilityCommandAliases(t *testing.T) {
	out, err, exitcode := LaceworkCLI("help", "vulnerability", "container")
	assert.Contains(t, out.String(), "lacework vulnerability container [command]")
	assert.Empty(t, err.String(), "STDERR should be empty")
	assert.Equal(t, 0, exitcode, "EXITCODE is not the expected one")

	out, err, exitcode = LaceworkCLI("help", "vulnerability", "ctr")
	assert.Contains(t, out.String(), "lacework vulnerability container [command]")
	assert.Empty(t, err.String(), "STDERR should be empty")
	assert.Equal(t, 0, exitcode, "EXITCODE is not the expected one")
}

func TestContainerVulnerabilityCommandListAssessments(t *testing.T) {
	out, err, exitcode := LaceworkCLIWithTOMLConfig("vulnerability", "container", "list-assessments")
	expectedHeaders := []string{
		"REGISTRY",
		"REPOSITORY",
		"TAGS",
		"LAST RUN",
		"STATUS",
		"CONTAINERS",
		"VULNERABILITIES",
		"IMAGE DIGEST",
	}
	t.Run("verify table headers", func(t *testing.T) {
		for _, header := range expectedHeaders {
			assert.Contains(t, out.String(), header,
				"STDOUT table headers changed, please check")
		}
	})
	assert.Empty(t,
		err.String(),
		"STDERR should be empty")
	assert.Equal(t, 0, exitcode,
		"EXITCODE is not the expected one")

	// verify that at least our lacework-cli container is listed
	expectedFields := []string{
		"index.docker.io",         // registry
		"techallylw/lacework-cli", // container
		"Success",                 // status
		"sha256:",                 // image digest
	}
	t.Run("verify table headers", func(t *testing.T) {
		for _, field := range expectedFields {
			assert.Contains(t, out.String(), field,
				"STDOUT table does not contain the '"+field+"' field")
		}
	})
}

func TestContainerVulnerabilityCommandScanHumanReadable(t *testing.T) {
	out, err, exitcode := LaceworkCLIWithTOMLConfig(
		"vulnerability", "container", "scan", "index.docker.io", "techallylw/lacework-cli", "latest")

	assert.Contains(t, out.String(), "A new vulnerability scan has been requested. (request_id:",
		"STDOUT changed, please check")
	assert.Contains(t, out.String(), "lacework vulnerability container scan-status",
		"STDOUT changed, please check")
	assert.Empty(t,
		err.String(),
		"STDERR should be empty")
	assert.Equal(t, 0, exitcode,
		"EXITCODE is not the expected one")
}

type containerVulnerabilityScan struct {
	RequestID string `json:"requestId"`
	Status    string `json:"status"`
}

func TestContainerVulnerabilityCommandsEndToEnd(t *testing.T) {
	// we are expecting the following output
	// {
	//   "requestId": "e94f2774-5662-4510-8ebf-2d5e3cd317f6",
	//   "status": "Scanning"
	// }
	out, err, exitcode := LaceworkCLIWithTOMLConfig(
		"vulnerability", "container", "scan", "index.docker.io", "techallylw/lacework-cli", "latest", "--json")
	assert.Empty(t,
		err.String(),
		"STDERR should be empty")
	assert.Equal(t, 0, exitcode,
		"EXITCODE is not the expected one")

	var vulScan containerVulnerabilityScan
	t.Run("inspect json output", func(t *testing.T) {
		err := json.Unmarshal(out.Bytes(), &vulScan)
		assert.Nil(t, err)
		assert.Equal(t, vulScan.Status, "Scanning",
			"Check JSON scan status")
	})

	// check the on-demand scan status
	out, err, exitcode = LaceworkCLIWithTOMLConfig(
		"vulnerability", "container", "scan-status", vulScan.RequestID)
	assert.Empty(t,
		err.String(),
		"STDERR should be empty")
	assert.Equal(t, 0, exitcode,
		"EXITCODE is not the expected one")
	assert.Contains(t, out.String(),
		fmt.Sprintf("The vulnerability scan is still running. (request_id: %s)", vulScan.RequestID),
		"STDOUT changed, please check")
	assert.Contains(t, out.String(), "Use '--poll' to poll until the vulnerability scan completes.",
		"STDOUT changed, please check")

	// check the on-demand scan status and poll until it finishes
	out, err, exitcode = LaceworkCLIWithTOMLConfig(
		"vulnerability", "container", "scan-status", vulScan.RequestID, "--poll")
	assert.Empty(t,
		err.String(),
		"STDERR should be empty")
	assert.Equal(t, 0, exitcode,
		"EXITCODE is not the expected one")

	scanStatusOutput := out.String()
	expectedOutput := []string{
		// headers
		"CONTAINER IMAGE DETAILS",
		"VULNERABILITIES",
		"SEVERITY",
		"COUNT",
		"FIXABLE",

		// fields
		"Registry    index.docker.io",
		"Repository  techallylw/lacework-cli",
		"Tags        latest",
		"Size",
		"ID",
		"Digest",
		"Critical",
		"High",
		"Medium",
		"Low",
		"Info",
	}
	t.Run("verify table headers", func(t *testing.T) {
		for _, str := range expectedOutput {
			assert.Contains(t, scanStatusOutput, str,
				"STDOUT table does not contain the '"+str+"' output")
		}
	})
	assert.Contains(t, scanStatusOutput, "Try using '--details' to increase details shown about the vulnerability report.",
		"STDOUT breadcrumbs changed, please updatet")

	// extract the image id
	m := regexp.MustCompile(`sha256:([0-9a-z])+`)
	imageID := m.FindString(scanStatusOutput)
	assert.NotEmpty(t, imageID, "unable to extract image id")

	// show the results of the on-demand assessment we just ran
	out, err, exitcode = LaceworkCLIWithTOMLConfig(
		"vulnerability", "container", "show-assessment", imageID, "--image_id")
	assert.Empty(t,
		err.String(),
		"STDERR should be empty")
	assert.Equal(t, 0, exitcode,
		"EXITCODE is not the expected one")

	showAssessmentOutput := out.String()
	assert.Contains(t, scanStatusOutput, showAssessmentOutput,
		"STDOUT from scan-status and show-assessment are not the same")
}

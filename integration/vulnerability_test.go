//go:build vulnerability

// Author:: Salim Afiune Maya (<afiune@lacework.net>)
// Copyright:: Copyright 2020, Lacework Inc.
// License:: Apache License, Version 2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package integration

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestVulnerabilityCommandAliases(t *testing.T) {
	out, err, exitcode := LaceworkCLI("help", "vulnerability")
	assert.Contains(t, out.String(), "lacework vulnerability [command]")
	assert.Empty(t, err.String(), "STDERR should be empty")
	assert.Equal(t, 0, exitcode, "EXITCODE is not the expected one")

	out, err, exitcode = LaceworkCLI("help", "vuln")
	assert.Contains(t, out.String(), "lacework vulnerability [command]")
	assert.Empty(t, err.String(), "STDERR should be empty")
	assert.Equal(t, 0, exitcode, "EXITCODE is not the expected one")

	out, err, exitcode = LaceworkCLI("help", "vul")
	assert.Contains(t, out.String(), "lacework vulnerability [command]")
	assert.Empty(t, err.String(), "STDERR should be empty")
	assert.Equal(t, 0, exitcode, "EXITCODE is not the expected one")
}

func TestVulnerabilityCommands(t *testing.T) {
	out, err, exitcode := LaceworkCLI("help", "vulnerability")
	assert.Contains(t, out.String(), "container   Vulnerability assessment for containers")
	assert.Contains(t, out.String(), "host        Vulnerability assessment for hosts")
	assert.Empty(t, err.String(), "STDERR should be empty")
	assert.Equal(t, 0, exitcode, "EXITCODE is not the expected one")
}

func TestHostVulnerabilityCollectorTypeAgentless(t *testing.T) {
	out, err, exitcode := LaceworkCLIWithTOMLConfig("vulnerability", "host", "show", "7900845793106000058", "--collector_type", "Agentless")

	assert.Empty(t, err.String(), "STDERR should be empty")
	assert.Equal(t, 0, exitcode, "EXITCODE is not the expected one")
	assert.Contains(t, out.String(), "Collector Type  Agentless",
		"Collector type should be 'Agentless'")
}

func TestHostVulnerabilityCollectorTypeAgent(t *testing.T) {
	out, err, exitcode := LaceworkCLIWithTOMLConfig("vulnerability", "host", "show", "51", "--collector_type", "Agent")

	assert.Empty(t, err.String(), "STDERR should be empty")
	assert.Equal(t, 0, exitcode, "EXITCODE is not the expected one")
	assert.Contains(t, out.String(), "Collector Type  Agent",
		"Collector type should be 'Agent'")
}

func TestHostVulnerabilityCollectorTypeDefaultNoAgentlessFound(t *testing.T) {
	out, err, exitcode := LaceworkCLIWithTOMLConfig("vulnerability", "host", "show", "1091890496813712264")

	assert.Empty(t, err.String(), "STDERR should be empty")
	assert.Equal(t, 0, exitcode, "EXITCODE is not the expected one")
	assert.Contains(t, out.String(), "Collector Type  Agent",
		"When no results are found, collector should default to 'Agent'")
}

// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src/prelude.isle
// - src/prelude_lower.isle
// - src/isa/x64/inst.isle
// - src/isa/x64/lower.isle
// - /Users/afiune/github/go-sdk/hackathon-wasm/rust/wasmtime_hello/target/debug/build/cranelift-codegen-f5cf6ae366df2f83/out/clif_lower.isle

use super::*; // Pulls in all external types.
use std::marker::PhantomData;

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unit(&mut self) -> Unit;
    fn value_type(&mut self, arg0: Value) -> Type;
    fn u32_add(&mut self, arg0: u32, arg1: u32) -> u32;
    fn s32_add_fallible(&mut self, arg0: u32, arg1: u32) -> Option<u32>;
    fn u32_nonnegative(&mut self, arg0: u32) -> Option<u32>;
    fn offset32(&mut self, arg0: Offset32) -> u32;
    fn u32_lteq(&mut self, arg0: u32, arg1: u32) -> Option<Unit>;
    fn u8_lteq(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_lt(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn simm32(&mut self, arg0: Imm64) -> Option<u32>;
    fn uimm8(&mut self, arg0: Imm64) -> Option<u8>;
    fn u8_and(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_as_u32(&mut self, arg0: u8) -> u32;
    fn u8_as_u64(&mut self, arg0: u8) -> u64;
    fn u16_as_u64(&mut self, arg0: u16) -> u64;
    fn u32_as_u64(&mut self, arg0: u32) -> u64;
    fn i64_as_u64(&mut self, arg0: i64) -> u64;
    fn u64_add(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sub(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_mul(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sdiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_udiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_and(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_or(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_xor(&mut self, arg0: u64, arg1: u64) -> u64;
    fn imm64_shl(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_ushr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_sshr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn u64_not(&mut self, arg0: u64) -> u64;
    fn u64_eq(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_le(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_lt(&mut self, arg0: u64, arg1: u64) -> bool;
    fn i64_sextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> i64;
    fn u64_uextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> u64;
    fn imm64_icmp(&mut self, arg0: Type, arg1: &IntCC, arg2: Imm64, arg3: Imm64) -> Imm64;
    fn u64_is_zero(&mut self, arg0: u64) -> bool;
    fn u64_is_odd(&mut self, arg0: u64) -> bool;
    fn ty_bits(&mut self, arg0: Type) -> u8;
    fn ty_bits_u16(&mut self, arg0: Type) -> u16;
    fn ty_bits_u64(&mut self, arg0: Type) -> u64;
    fn ty_mask(&mut self, arg0: Type) -> u64;
    fn ty_bytes(&mut self, arg0: Type) -> u16;
    fn lane_type(&mut self, arg0: Type) -> Type;
    fn mem_flags_trusted(&mut self) -> MemFlags;
    fn intcc_reverse(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_inverse(&mut self, arg0: &IntCC) -> IntCC;
    fn floatcc_reverse(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_inverse(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_unordered(&mut self, arg0: &FloatCC) -> bool;
    fn fits_in_16(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn lane_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32_or_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_8_or_16(&mut self, arg0: Type) -> Option<Type>;
    fn int_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_float_or_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_not_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_ctor(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128_int(&mut self, arg0: Type) -> Option<Type>;
    fn not_vec32x2(&mut self, arg0: Type) -> Option<Type>;
    fn not_i64x2(&mut self, arg0: Type) -> Option<()>;
    fn u8_from_uimm8(&mut self, arg0: Uimm8) -> u8;
    fn u64_from_bool(&mut self, arg0: bool) -> u64;
    fn u64_from_imm64(&mut self, arg0: Imm64) -> u64;
    fn nonzero_u64_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64_power_of_two(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64(&mut self, arg0: u64) -> Imm64;
    fn imm64_masked(&mut self, arg0: Type, arg1: u64) -> Imm64;
    fn u64_from_ieee32(&mut self, arg0: Ieee32) -> u64;
    fn u64_from_ieee64(&mut self, arg0: Ieee64) -> u64;
    fn multi_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_int_lane(&mut self, arg0: Type) -> Option<u32>;
    fn dynamic_fp_lane(&mut self, arg0: Type) -> Option<u32>;
    fn ty_dyn64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn128_int(&mut self, arg0: Type) -> Option<Type>;
    fn offset32_to_u32(&mut self, arg0: Offset32) -> u32;
    fn intcc_unsigned(&mut self, arg0: &IntCC) -> IntCC;
    fn signed_cond_code(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn trap_code_division_by_zero(&mut self) -> TrapCode;
    fn trap_code_integer_overflow(&mut self) -> TrapCode;
    fn trap_code_bad_conversion_to_integer(&mut self) -> TrapCode;
    fn range(&mut self, arg0: usize, arg1: usize) -> Range;
    fn range_view(&mut self, arg0: Range) -> RangeView;
    fn value_reg(&mut self, arg0: Reg) -> ValueRegs;
    fn value_regs(&mut self, arg0: Reg, arg1: Reg) -> ValueRegs;
    fn value_regs_invalid(&mut self) -> ValueRegs;
    fn output_none(&mut self) -> InstOutput;
    fn output(&mut self, arg0: ValueRegs) -> InstOutput;
    fn output_pair(&mut self, arg0: ValueRegs, arg1: ValueRegs) -> InstOutput;
    fn output_builder_new(&mut self) -> InstOutputBuilder;
    fn output_builder_push(&mut self, arg0: &InstOutputBuilder, arg1: ValueRegs) -> Unit;
    fn output_builder_finish(&mut self, arg0: &InstOutputBuilder) -> InstOutput;
    fn temp_writable_reg(&mut self, arg0: Type) -> WritableReg;
    fn is_valid_reg(&mut self, arg0: Reg) -> bool;
    fn invalid_reg(&mut self) -> Reg;
    fn mark_value_used(&mut self, arg0: Value) -> Unit;
    fn put_in_reg(&mut self, arg0: Value) -> Reg;
    fn put_in_regs(&mut self, arg0: Value) -> ValueRegs;
    fn ensure_in_vreg(&mut self, arg0: Reg, arg1: Type) -> Reg;
    fn value_regs_get(&mut self, arg0: ValueRegs, arg1: usize) -> Reg;
    fn value_regs_len(&mut self, arg0: ValueRegs) -> usize;
    fn preg_to_reg(&mut self, arg0: PReg) -> Reg;
    fn value_list_slice(&mut self, arg0: ValueList) -> ValueSlice;
    fn value_slice_empty(&mut self, arg0: ValueSlice) -> Option<()>;
    fn value_slice_unwrap(&mut self, arg0: ValueSlice) -> Option<(Value, ValueSlice)>;
    fn value_slice_len(&mut self, arg0: ValueSlice) -> usize;
    fn value_slice_get(&mut self, arg0: ValueSlice, arg1: usize) -> Value;
    fn writable_reg_to_reg(&mut self, arg0: WritableReg) -> Reg;
    fn inst_results(&mut self, arg0: Inst) -> ValueSlice;
    fn first_result(&mut self, arg0: Inst) -> Option<Value>;
    fn inst_data(&mut self, arg0: Inst) -> InstructionData;
    fn def_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn zero_value(&mut self, arg0: Value) -> Option<Value>;
    fn is_sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn maybe_uextend(&mut self, arg0: Value) -> Option<Value>;
    fn emit(&mut self, arg0: &MInst) -> Unit;
    fn sink_inst(&mut self, arg0: Inst) -> Unit;
    fn emit_u64_le_const(&mut self, arg0: u64) -> VCodeConstant;
    fn emit_u128_le_const(&mut self, arg0: u128) -> VCodeConstant;
    fn const_to_vconst(&mut self, arg0: Constant) -> VCodeConstant;
    fn avoid_div_traps(&mut self, arg0: Type) -> Option<()>;
    fn tls_model(&mut self, arg0: Type) -> TlsModel;
    fn tls_model_is_elf_gd(&mut self) -> Option<Unit>;
    fn tls_model_is_macho(&mut self) -> Option<Unit>;
    fn tls_model_is_coff(&mut self) -> Option<Unit>;
    fn preserve_frame_pointers(&mut self) -> Option<Unit>;
    fn box_external_name(&mut self, arg0: ExternalName) -> BoxExternalName;
    fn func_ref_data(&mut self, arg0: FuncRef) -> (SigRef, ExternalName, RelocDistance);
    fn symbol_value_data(
        &mut self,
        arg0: GlobalValue,
    ) -> Option<(ExternalName, RelocDistance, i64)>;
    fn reloc_distance_near(&mut self, arg0: RelocDistance) -> Option<()>;
    fn vec_mask_from_immediate(&mut self, arg0: Immediate) -> Option<VecMask>;
    fn u128_from_immediate(&mut self, arg0: Immediate) -> Option<u128>;
    fn u128_from_constant(&mut self, arg0: Constant) -> Option<u128>;
    fn u64_from_constant(&mut self, arg0: Constant) -> Option<u64>;
    fn only_writable_reg(&mut self, arg0: WritableValueRegs) -> Option<WritableReg>;
    fn writable_regs_get(&mut self, arg0: WritableValueRegs, arg1: usize) -> WritableReg;
    fn abi_num_args(&mut self, arg0: Sig) -> usize;
    fn abi_get_arg(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_num_rets(&mut self, arg0: Sig) -> usize;
    fn abi_get_ret(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_ret_arg(&mut self, arg0: Sig) -> Option<ABIArg>;
    fn abi_no_ret_arg(&mut self, arg0: Sig) -> Option<()>;
    fn abi_sized_stack_arg_space(&mut self, arg0: Sig) -> i64;
    fn abi_sized_stack_ret_space(&mut self, arg0: Sig) -> i64;
    fn abi_stackslot_addr(&mut self, arg0: WritableReg, arg1: StackSlot, arg2: Offset32) -> MInst;
    fn abi_dynamic_stackslot_addr(&mut self, arg0: WritableReg, arg1: DynamicStackSlot) -> MInst;
    fn abi_arg_only_slot(&mut self, arg0: &ABIArg) -> Option<ABIArgSlot>;
    fn abi_arg_struct_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, u64)>;
    fn abi_arg_implicit_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, Type)>;
    fn real_reg_to_reg(&mut self, arg0: RealReg) -> Reg;
    fn real_reg_to_writable_reg(&mut self, arg0: RealReg) -> WritableReg;
    fn gen_move(&mut self, arg0: Type, arg1: WritableReg, arg2: Reg) -> MInst;
    fn gen_return(&mut self, arg0: ValueSlice) -> Unit;
    fn jump_table_size(&mut self, arg0: &BoxVecMachLabel) -> u32;
    fn single_target(&mut self, arg0: &MachLabelSlice) -> Option<MachLabel>;
    fn two_targets(&mut self, arg0: &MachLabelSlice) -> Option<(MachLabel, MachLabel)>;
    fn jump_table_targets(&mut self, arg0: &MachLabelSlice)
        -> Option<(MachLabel, BoxVecMachLabel)>;
    fn operand_size_of_type_32_64(&mut self, arg0: Type) -> OperandSize;
    fn raw_operand_size_of_type(&mut self, arg0: Type) -> OperandSize;
    fn put_in_reg_mem_imm(&mut self, arg0: Value) -> RegMemImm;
    fn put_in_reg_mem(&mut self, arg0: Value) -> RegMem;
    fn synthetic_amode_to_reg_mem(&mut self, arg0: &SyntheticAmode) -> RegMem;
    fn amode_to_synthetic_amode(&mut self, arg0: &Amode) -> SyntheticAmode;
    fn amode_with_flags(&mut self, arg0: &Amode, arg1: MemFlags) -> Amode;
    fn amode_imm_reg(&mut self, arg0: u32, arg1: Gpr) -> Amode;
    fn amode_imm_reg_reg_shift(&mut self, arg0: u32, arg1: Gpr, arg2: Gpr, arg3: u8) -> Amode;
    fn sum_extend_fits_in_32_bits(
        &mut self,
        arg0: Type,
        arg1: Imm64,
        arg2: Offset32,
    ) -> Option<u32>;
    fn amode_offset(&mut self, arg0: &Amode, arg1: u32) -> Amode;
    fn zero_offset(&mut self) -> Offset32;
    fn intcc_to_cc(&mut self, arg0: &IntCC) -> CC;
    fn cc_invert(&mut self, arg0: &CC) -> CC;
    fn cc_nz_or_z(&mut self, arg0: &CC) -> Option<CC>;
    fn encode_fcmp_imm(&mut self, arg0: &FcmpImm) -> u8;
    fn encode_round_imm(&mut self, arg0: &RoundImm) -> u8;
    fn imm8_reg_to_imm8_gpr(&mut self, arg0: &Imm8Reg) -> Imm8Gpr;
    fn writable_gpr_to_reg(&mut self, arg0: WritableGpr) -> WritableReg;
    fn writable_xmm_to_reg(&mut self, arg0: WritableXmm) -> WritableReg;
    fn writable_reg_to_xmm(&mut self, arg0: WritableReg) -> WritableXmm;
    fn writable_xmm_to_xmm(&mut self, arg0: WritableXmm) -> Xmm;
    fn writable_gpr_to_gpr(&mut self, arg0: WritableGpr) -> Gpr;
    fn gpr_to_reg(&mut self, arg0: Gpr) -> Reg;
    fn gpr_to_gpr_mem(&mut self, arg0: Gpr) -> GprMem;
    fn gpr_to_gpr_mem_imm(&mut self, arg0: Gpr) -> GprMemImm;
    fn xmm_to_reg(&mut self, arg0: Xmm) -> Reg;
    fn xmm_to_xmm_mem_imm(&mut self, arg0: Xmm) -> XmmMemImm;
    fn xmm_mem_to_xmm_mem_imm(&mut self, arg0: &XmmMem) -> XmmMemImm;
    fn xmm_mem_to_xmm_mem_aligned(&mut self, arg0: &XmmMem) -> XmmMemAligned;
    fn xmm_mem_imm_to_xmm_mem_aligned_imm(&mut self, arg0: &XmmMemImm) -> XmmMemAlignedImm;
    fn temp_writable_gpr(&mut self) -> WritableGpr;
    fn temp_writable_xmm(&mut self) -> WritableXmm;
    fn reg_mem_to_xmm_mem(&mut self, arg0: &RegMem) -> XmmMem;
    fn reg_to_reg_mem_imm(&mut self, arg0: Reg) -> RegMemImm;
    fn gpr_mem_imm_new(&mut self, arg0: &RegMemImm) -> GprMemImm;
    fn xmm_mem_imm_new(&mut self, arg0: &RegMemImm) -> XmmMemImm;
    fn xmm_to_xmm_mem(&mut self, arg0: Xmm) -> XmmMem;
    fn xmm_mem_to_reg_mem(&mut self, arg0: &XmmMem) -> RegMem;
    fn gpr_mem_to_reg_mem(&mut self, arg0: &GprMem) -> RegMem;
    fn xmm_new(&mut self, arg0: Reg) -> Xmm;
    fn gpr_new(&mut self, arg0: Reg) -> Gpr;
    fn reg_mem_to_gpr_mem(&mut self, arg0: &RegMem) -> GprMem;
    fn reg_to_gpr_mem(&mut self, arg0: Reg) -> GprMem;
    fn put_in_xmm_mem(&mut self, arg0: Value) -> XmmMem;
    fn put_in_xmm_mem_imm(&mut self, arg0: Value) -> XmmMemImm;
    fn gpr_to_imm8_gpr(&mut self, arg0: Gpr) -> Imm8Gpr;
    fn imm8_to_imm8_gpr(&mut self, arg0: u8) -> Imm8Gpr;
    fn intcc_without_eq(&mut self, arg0: &IntCC) -> IntCC;
    fn type_register_class(&mut self, arg0: Type) -> Option<RegisterClass>;
    fn avx512vl_enabled(&mut self, arg0: Type) -> bool;
    fn avx512dq_enabled(&mut self, arg0: Type) -> bool;
    fn avx512f_enabled(&mut self, arg0: Type) -> bool;
    fn avx512bitalg_enabled(&mut self, arg0: Type) -> bool;
    fn avx512vbmi_enabled(&mut self, arg0: Type) -> bool;
    fn use_lzcnt(&mut self, arg0: Type) -> bool;
    fn use_bmi1(&mut self, arg0: Type) -> bool;
    fn use_popcnt(&mut self, arg0: Type) -> bool;
    fn use_fma(&mut self) -> bool;
    fn use_sse41(&mut self, arg0: Type) -> bool;
    fn has_avx(&mut self) -> bool;
    fn imm8_from_value(&mut self, arg0: Value) -> Option<Imm8Reg>;
    fn const_to_type_masked_imm8(&mut self, arg0: u64, arg1: Type) -> Imm8Gpr;
    fn shift_mask(&mut self, arg0: Type) -> u32;
    fn shift_amount_masked(&mut self, arg0: Type, arg1: Imm64) -> u32;
    fn simm32_from_value(&mut self, arg0: Value) -> Option<GprMemImm>;
    fn simm32_from_imm64(&mut self, arg0: Imm64) -> Option<GprMemImm>;
    fn sinkable_load(&mut self, arg0: Value) -> Option<SinkableLoad>;
    fn sink_load(&mut self, arg0: &SinkableLoad) -> RegMem;
    fn ext_mode(&mut self, arg0: u16, arg1: u16) -> ExtMode;
    fn gen_call(
        &mut self,
        arg0: SigRef,
        arg1: ExternalName,
        arg2: RelocDistance,
        arg3: ValueSlice,
    ) -> InstOutput;
    fn gen_call_indirect(&mut self, arg0: SigRef, arg1: Value, arg2: ValueSlice) -> InstOutput;
    fn nonzero_u64_fits_in_u32(&mut self, arg0: u64) -> Option<u64>;
    fn fcvt_uint_mask_const(&mut self) -> VCodeConstant;
    fn fcvt_uint_mask_high_const(&mut self) -> VCodeConstant;
    fn iadd_pairwise_mul_const_16(&mut self) -> VCodeConstant;
    fn iadd_pairwise_mul_const_32(&mut self) -> VCodeConstant;
    fn iadd_pairwise_xor_const_32(&mut self) -> VCodeConstant;
    fn iadd_pairwise_addd_const_32(&mut self) -> VCodeConstant;
    fn snarrow_umax_mask(&mut self) -> VCodeConstant;
    fn ty_int_bool_or_ref(&mut self, arg0: Type) -> Option<()>;
    fn atomic_rmw_op_to_mach_atomic_rmw_op(&mut self, arg0: &AtomicRmwOp) -> MachAtomicRmwOp;
    fn emit_div_or_rem(
        &mut self,
        arg0: &DivOrRemKind,
        arg1: Type,
        arg2: WritableGpr,
        arg3: Gpr,
        arg4: Gpr,
    ) -> Unit;
    fn shuffle_0_31_mask(&mut self, arg0: &VecMask) -> VCodeConstant;
    fn shuffle_0_15_mask(&mut self, arg0: &VecMask) -> VCodeConstant;
    fn shuffle_16_31_mask(&mut self, arg0: &VecMask) -> VCodeConstant;
    fn perm_from_mask(&mut self, arg0: &VecMask) -> VCodeConstant;
    fn perm_from_mask_with_zeros(
        &mut self,
        arg0: &VecMask,
    ) -> Option<(VCodeConstant, VCodeConstant)>;
    fn swizzle_zero_mask(&mut self) -> VCodeConstant;
    fn sqmul_round_sat_mask(&mut self) -> VCodeConstant;
    fn uunarrow_umax_mask(&mut self) -> VCodeConstant;
    fn uunarrow_uint_mask(&mut self) -> VCodeConstant;
    fn const_to_synthetic_amode(&mut self, arg0: VCodeConstant) -> SyntheticAmode;
    fn preg_rbp(&mut self) -> PReg;
    fn preg_rsp(&mut self) -> PReg;
    fn preg_pinned(&mut self) -> PReg;
    fn libcall_1(&mut self, arg0: &LibCall, arg1: Reg) -> Reg;
    fn libcall_3(&mut self, arg0: &LibCall, arg1: Reg, arg2: Reg, arg3: Reg) -> Reg;
    fn ishl_i8x16_mask_for_const(&mut self, arg0: u32) -> SyntheticAmode;
    fn ishl_i8x16_mask_table(&mut self) -> SyntheticAmode;
    fn ushr_i8x16_mask_for_const(&mut self, arg0: u32) -> SyntheticAmode;
    fn ushr_i8x16_mask_table(&mut self) -> SyntheticAmode;
    fn vconst_all_ones_or_all_zeros(&mut self, arg0: Constant) -> Option<()>;
    fn sse_insertps_lane_imm(&mut self, arg0: u8) -> u8;
    fn popcount_4bit_table(&mut self) -> VCodeConstant;
    fn popcount_low_mask(&mut self) -> VCodeConstant;
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn unpack_block_array_2(&mut self, arg0: &BlockArray2) -> (BlockCall, BlockCall);
    fn pack_block_array_2(&mut self, arg0: BlockCall, arg1: BlockCall) -> BlockArray2;
}

pub trait ContextIter {
    type Context;
    type Output;
    fn next(&mut self, ctx: &mut Self::Context) -> Option<Self::Output>;
}

pub struct ContextIterWrapper<Item, I: Iterator<Item = Item>, C: Context> {
    iter: I,
    _ctx: PhantomData<C>,
}
impl<Item, I: Iterator<Item = Item>, C: Context> From<I> for ContextIterWrapper<Item, I, C> {
    fn from(iter: I) -> Self {
        Self {
            iter,
            _ctx: PhantomData,
        }
    }
}
impl<Item, I: Iterator<Item = Item>, C: Context> ContextIter for ContextIterWrapper<Item, I, C> {
    type Context = C;
    type Output = Item;
    fn next(&mut self, _ctx: &mut Self::Context) -> Option<Self::Output> {
        self.iter.next()
    }
}

/// Internal type SideEffectNoResult: defined at src/prelude_lower.isle line 282.
#[derive(Clone, Debug)]
pub enum SideEffectNoResult {
    Inst {
        inst: MInst,
    },
    Inst2 {
        inst1: MInst,
        inst2: MInst,
    },
    Inst3 {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
    },
}

/// Internal type ProducesFlags: defined at src/prelude_lower.isle line 324.
#[derive(Clone, Debug)]
pub enum ProducesFlags {
    AlreadyExistingFlags,
    ProducesFlagsSideEffect { inst: MInst },
    ProducesFlagsTwiceSideEffect { inst1: MInst, inst2: MInst },
    ProducesFlagsReturnsReg { inst: MInst, result: Reg },
    ProducesFlagsReturnsResultWithConsumer { inst: MInst, result: Reg },
}

/// Internal type ConsumesFlags: defined at src/prelude_lower.isle line 346.
#[derive(Clone, Debug)]
pub enum ConsumesFlags {
    ConsumesFlagsSideEffect {
        inst: MInst,
    },
    ConsumesFlagsSideEffect2 {
        inst1: MInst,
        inst2: MInst,
    },
    ConsumesFlagsReturnsResultWithProducer {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsReturnsReg {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsTwiceReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        result: ValueRegs,
    },
    ConsumesFlagsFourTimesReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
        inst4: MInst,
        result: ValueRegs,
    },
}

/// Internal type MInst: defined at src/isa/x64/inst.isle line 8.
#[derive(Clone)]
pub enum MInst {
    Nop {
        len: u8,
    },
    AluRmiR {
        size: OperandSize,
        op: AluRmiROpcode,
        src1: Gpr,
        src2: GprMemImm,
        dst: WritableGpr,
    },
    AluRM {
        size: OperandSize,
        op: AluRmiROpcode,
        src1_dst: SyntheticAmode,
        src2: Gpr,
    },
    AluRmRVex {
        size: OperandSize,
        op: AluRmROpcode,
        src1: Gpr,
        src2: Gpr,
        dst: WritableGpr,
    },
    AluConstOp {
        op: AluRmiROpcode,
        size: OperandSize,
        dst: WritableGpr,
    },
    UnaryRmR {
        size: OperandSize,
        op: UnaryRmROpcode,
        src: GprMem,
        dst: WritableGpr,
    },
    Not {
        size: OperandSize,
        src: Gpr,
        dst: WritableGpr,
    },
    Neg {
        size: OperandSize,
        src: Gpr,
        dst: WritableGpr,
    },
    Div {
        size: OperandSize,
        signed: bool,
        divisor: GprMem,
        dividend_lo: Gpr,
        dividend_hi: Gpr,
        dst_quotient: WritableGpr,
        dst_remainder: WritableGpr,
    },
    MulHi {
        size: OperandSize,
        signed: bool,
        src1: Gpr,
        src2: GprMem,
        dst_lo: WritableGpr,
        dst_hi: WritableGpr,
    },
    CheckedDivOrRemSeq {
        kind: DivOrRemKind,
        size: OperandSize,
        dividend_lo: Gpr,
        dividend_hi: Gpr,
        divisor: Gpr,
        dst_quotient: WritableGpr,
        dst_remainder: WritableGpr,
        tmp: OptionWritableGpr,
    },
    SignExtendData {
        size: OperandSize,
        src: Gpr,
        dst: WritableGpr,
    },
    Imm {
        dst_size: OperandSize,
        simm64: u64,
        dst: WritableGpr,
    },
    MovRR {
        size: OperandSize,
        src: Gpr,
        dst: WritableGpr,
    },
    MovFromPReg {
        src: PReg,
        dst: WritableGpr,
    },
    MovToPReg {
        src: Gpr,
        dst: PReg,
    },
    MovzxRmR {
        ext_mode: ExtMode,
        src: GprMem,
        dst: WritableGpr,
    },
    Mov64MR {
        src: SyntheticAmode,
        dst: WritableGpr,
    },
    LoadEffectiveAddress {
        addr: SyntheticAmode,
        dst: WritableGpr,
    },
    MovsxRmR {
        ext_mode: ExtMode,
        src: GprMem,
        dst: WritableGpr,
    },
    MovImmM {
        size: OperandSize,
        simm64: u64,
        dst: SyntheticAmode,
    },
    MovRM {
        size: OperandSize,
        src: Gpr,
        dst: SyntheticAmode,
    },
    ShiftR {
        size: OperandSize,
        kind: ShiftKind,
        src: Gpr,
        num_bits: Imm8Gpr,
        dst: WritableGpr,
    },
    XmmRmiReg {
        opcode: SseOpcode,
        src1: Xmm,
        src2: XmmMemAlignedImm,
        dst: WritableXmm,
    },
    CmpRmiR {
        size: OperandSize,
        opcode: CmpOpcode,
        src: GprMemImm,
        dst: Gpr,
    },
    Setcc {
        cc: CC,
        dst: WritableGpr,
    },
    Bswap {
        size: OperandSize,
        src: Gpr,
        dst: WritableGpr,
    },
    Cmove {
        size: OperandSize,
        cc: CC,
        consequent: GprMem,
        alternative: Gpr,
        dst: WritableGpr,
    },
    XmmCmove {
        ty: Type,
        cc: CC,
        consequent: XmmMemAligned,
        alternative: Xmm,
        dst: WritableXmm,
    },
    Push64 {
        src: GprMemImm,
    },
    Pop64 {
        dst: WritableGpr,
    },
    StackProbeLoop {
        tmp: WritableReg,
        frame_size: u32,
        guard_size: u32,
    },
    XmmRmR {
        op: SseOpcode,
        src1: Xmm,
        src2: XmmMemAligned,
        dst: WritableXmm,
    },
    XmmRmRUnaligned {
        op: SseOpcode,
        src1: Xmm,
        src2: XmmMem,
        dst: WritableXmm,
    },
    XmmConstOp {
        op: SseOpcode,
        dst: WritableXmm,
    },
    XmmRmRBlend {
        op: SseOpcode,
        src1: Xmm,
        src2: XmmMemAligned,
        mask: Xmm,
        dst: WritableXmm,
    },
    XmmRmiRVex {
        op: AvxOpcode,
        src1: Xmm,
        src2: XmmMemImm,
        dst: WritableXmm,
    },
    XmmRmRImmVex {
        op: AvxOpcode,
        src1: Xmm,
        src2: XmmMem,
        dst: WritableXmm,
        imm: u8,
    },
    XmmVexPinsr {
        op: AvxOpcode,
        src1: Xmm,
        src2: GprMem,
        dst: WritableXmm,
        imm: u8,
    },
    XmmRmRVex3 {
        op: AvxOpcode,
        src1: Xmm,
        src2: Xmm,
        src3: XmmMem,
        dst: WritableXmm,
    },
    XmmRmRBlendVex {
        op: AvxOpcode,
        src1: Xmm,
        src2: XmmMem,
        mask: Xmm,
        dst: WritableXmm,
    },
    XmmUnaryRmRVex {
        op: AvxOpcode,
        src: XmmMem,
        dst: WritableXmm,
    },
    XmmUnaryRmRImmVex {
        op: AvxOpcode,
        src: XmmMem,
        dst: WritableXmm,
        imm: u8,
    },
    XmmRmREvex {
        op: Avx512Opcode,
        src1: XmmMem,
        src2: Xmm,
        dst: WritableXmm,
    },
    XmmRmREvex3 {
        op: Avx512Opcode,
        src1: XmmMem,
        src2: Xmm,
        src3: Xmm,
        dst: WritableXmm,
    },
    XmmUnaryRmR {
        op: SseOpcode,
        src: XmmMemAligned,
        dst: WritableXmm,
    },
    XmmUnaryRmRUnaligned {
        op: SseOpcode,
        src: XmmMem,
        dst: WritableXmm,
    },
    XmmUnaryRmRImm {
        op: SseOpcode,
        src: XmmMemAligned,
        imm: u8,
        dst: WritableXmm,
    },
    XmmUnaryRmREvex {
        op: Avx512Opcode,
        src: XmmMem,
        dst: WritableXmm,
    },
    XmmMovRM {
        op: SseOpcode,
        src: Reg,
        dst: SyntheticAmode,
    },
    XmmToGpr {
        op: SseOpcode,
        src: Xmm,
        dst: WritableGpr,
        dst_size: OperandSize,
    },
    XmmToGprImm {
        op: SseOpcode,
        src: Xmm,
        dst: WritableGpr,
        imm: u8,
    },
    GprToXmm {
        op: SseOpcode,
        src: GprMem,
        dst: WritableXmm,
        src_size: OperandSize,
    },
    CvtUint64ToFloatSeq {
        dst_size: OperandSize,
        src: Gpr,
        dst: WritableXmm,
        tmp_gpr1: WritableGpr,
        tmp_gpr2: WritableGpr,
    },
    CvtFloatToSintSeq {
        dst_size: OperandSize,
        src_size: OperandSize,
        is_saturating: bool,
        src: Xmm,
        dst: WritableGpr,
        tmp_gpr: WritableGpr,
        tmp_xmm: WritableXmm,
    },
    CvtFloatToUintSeq {
        dst_size: OperandSize,
        src_size: OperandSize,
        is_saturating: bool,
        src: Xmm,
        dst: WritableGpr,
        tmp_gpr: WritableGpr,
        tmp_xmm: WritableXmm,
        tmp_xmm2: WritableXmm,
    },
    XmmMinMaxSeq {
        size: OperandSize,
        is_min: bool,
        lhs: Xmm,
        rhs: Xmm,
        dst: WritableXmm,
    },
    XmmCmpRmR {
        op: SseOpcode,
        src: XmmMemAligned,
        dst: Xmm,
    },
    XmmRmRImm {
        op: SseOpcode,
        src1: Reg,
        src2: RegMem,
        dst: WritableReg,
        imm: u8,
        size: OperandSize,
    },
    CallKnown {
        dest: ExternalName,
        info: BoxCallInfo,
    },
    CallUnknown {
        dest: RegMem,
        info: BoxCallInfo,
    },
    Args {
        args: VecArgPair,
    },
    Ret {
        rets: VecRetPair,
    },
    JmpKnown {
        dst: MachLabel,
    },
    JmpIf {
        cc: CC,
        taken: MachLabel,
    },
    JmpCond {
        cc: CC,
        taken: MachLabel,
        not_taken: MachLabel,
    },
    JmpTableSeq {
        idx: Reg,
        tmp1: WritableReg,
        tmp2: WritableReg,
        default_target: MachLabel,
        targets: BoxVecMachLabel,
    },
    JmpUnknown {
        target: RegMem,
    },
    TrapIf {
        cc: CC,
        trap_code: TrapCode,
    },
    TrapIfAnd {
        cc1: CC,
        cc2: CC,
        trap_code: TrapCode,
    },
    TrapIfOr {
        cc1: CC,
        cc2: CC,
        trap_code: TrapCode,
    },
    Hlt,
    Ud2 {
        trap_code: TrapCode,
    },
    LoadExtName {
        dst: WritableReg,
        name: BoxExternalName,
        offset: i64,
    },
    LockCmpxchg {
        ty: Type,
        replacement: Reg,
        expected: Reg,
        mem: SyntheticAmode,
        dst_old: WritableReg,
    },
    AtomicRmwSeq {
        ty: Type,
        op: MachAtomicRmwOp,
        mem: SyntheticAmode,
        operand: Reg,
        temp: WritableReg,
        dst_old: WritableReg,
    },
    Fence {
        kind: FenceKind,
    },
    VirtualSPOffsetAdj {
        offset: i64,
    },
    XmmUninitializedValue {
        dst: WritableXmm,
    },
    ElfTlsGetAddr {
        symbol: ExternalName,
        dst: WritableGpr,
    },
    MachOTlsGetAddr {
        symbol: ExternalName,
        dst: WritableGpr,
    },
    CoffTlsGetAddr {
        symbol: ExternalName,
        dst: WritableGpr,
        tmp: WritableGpr,
    },
    Unwind {
        inst: UnwindInst,
    },
    DummyUse {
        reg: Reg,
    },
}

/// Internal type Amode: defined at src/isa/x64/inst.isle line 920.
#[derive(Clone, Debug)]
pub enum Amode {
    ImmReg {
        simm32: u32,
        base: Reg,
        flags: MemFlags,
    },
    ImmRegRegShift {
        simm32: u32,
        base: Gpr,
        index: Gpr,
        shift: u8,
        flags: MemFlags,
    },
    RipRelative {
        target: MachLabel,
    },
}

/// Internal type AvxOpcode: defined at src/isa/x64/inst.isle line 1197.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AvxOpcode {
    Vfmadd213ss,
    Vfmadd213sd,
    Vfmadd213ps,
    Vfmadd213pd,
    Vfmadd132ss,
    Vfmadd132sd,
    Vfmadd132ps,
    Vfmadd132pd,
    Vfnmadd213ss,
    Vfnmadd213sd,
    Vfnmadd213ps,
    Vfnmadd213pd,
    Vfnmadd132ss,
    Vfnmadd132sd,
    Vfnmadd132ps,
    Vfnmadd132pd,
    Vcmpps,
    Vcmppd,
    Vpsrlw,
    Vpsrld,
    Vpsrlq,
    Vpaddb,
    Vpaddw,
    Vpaddd,
    Vpaddq,
    Vpaddsb,
    Vpaddsw,
    Vpaddusb,
    Vpaddusw,
    Vpsubb,
    Vpsubw,
    Vpsubd,
    Vpsubq,
    Vpsubsb,
    Vpsubsw,
    Vpsubusb,
    Vpsubusw,
    Vpavgb,
    Vpavgw,
    Vpand,
    Vandps,
    Vandpd,
    Vpor,
    Vorps,
    Vorpd,
    Vpxor,
    Vxorps,
    Vxorpd,
    Vpmullw,
    Vpmulld,
    Vpmulhw,
    Vpmulhd,
    Vpmulhrsw,
    Vpmulhuw,
    Vpmuldq,
    Vpmuludq,
    Vpunpckhwd,
    Vpunpcklwd,
    Vunpcklps,
    Vandnps,
    Vandnpd,
    Vpandn,
    Vaddps,
    Vaddpd,
    Vsubps,
    Vsubpd,
    Vmulps,
    Vmulpd,
    Vdivps,
    Vdivpd,
    Vpcmpeqb,
    Vpcmpeqw,
    Vpcmpeqd,
    Vpcmpeqq,
    Vpcmpgtb,
    Vpcmpgtw,
    Vpcmpgtd,
    Vpcmpgtq,
    Vminps,
    Vminpd,
    Vmaxps,
    Vmaxpd,
    Vblendvpd,
    Vblendvps,
    Vpblendvb,
    Vmovlhps,
    Vpmaxsb,
    Vpmaxsw,
    Vpmaxsd,
    Vpminsb,
    Vpminsw,
    Vpminsd,
    Vpmaxub,
    Vpmaxuw,
    Vpmaxud,
    Vpminub,
    Vpminuw,
    Vpminud,
    Vpunpcklbw,
    Vpunpckhbw,
    Vpacksswb,
    Vpackssdw,
    Vpackuswb,
    Vpackusdw,
    Vpalignr,
    Vpinsrb,
    Vpinsrw,
    Vpinsrd,
    Vpinsrq,
    Vpmaddwd,
    Vpmaddubsw,
    Vinsertps,
    Vpshufb,
    Vshufps,
    Vpsllw,
    Vpslld,
    Vpsllq,
    Vpsraw,
    Vpsrad,
    Vpmovsxbw,
    Vpmovzxbw,
    Vpmovsxwd,
    Vpmovzxwd,
    Vpmovsxdq,
    Vpmovzxdq,
    Vaddss,
    Vaddsd,
    Vmulss,
    Vmulsd,
    Vsubss,
    Vsubsd,
    Vdivss,
    Vdivsd,
    Vpabsb,
    Vpabsw,
    Vpabsd,
    Vminss,
    Vminsd,
    Vmaxss,
    Vmaxsd,
    Vsqrtps,
    Vsqrtpd,
    Vroundps,
    Vroundpd,
    Vcvtdq2pd,
    Vcvtdq2ps,
    Vcvtpd2ps,
    Vcvtps2pd,
    Vcvttpd2dq,
    Vcvttps2dq,
    Vphaddw,
    Vphaddd,
}

/// Internal type RegisterClass: defined at src/isa/x64/inst.isle line 1623.
#[derive(Clone, Debug)]
pub enum RegisterClass {
    Gpr { single_register: bool },
    Xmm,
}

/// Internal type ExtendKind: defined at src/isa/x64/inst.isle line 1740.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ExtendKind {
    Sign,
    Zero,
}

/// Internal type IcmpCondResult: defined at src/isa/x64/inst.isle line 4085.
#[derive(Clone, Debug)]
pub enum IcmpCondResult {
    Condition { producer: ProducesFlags, cc: CC },
}

/// Internal type FcmpCondResult: defined at src/isa/x64/inst.isle line 4187.
#[derive(Clone, Debug)]
pub enum FcmpCondResult {
    Condition {
        producer: ProducesFlags,
        cc: CC,
    },
    AndCondition {
        producer: ProducesFlags,
        cc1: CC,
        cc2: CC,
    },
    OrCondition {
        producer: ProducesFlags,
        cc1: CC,
        cc2: CC,
    },
}

// Generated as internal constructor for term output_reg.
pub fn constructor_output_reg<C: Context>(ctx: &mut C, arg0: Reg) -> InstOutput {
    let v1 = C::value_reg(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 55.
    return v2;
}

// Generated as internal constructor for term output_value.
pub fn constructor_output_value<C: Context>(ctx: &mut C, arg0: Value) -> InstOutput {
    let v1 = C::put_in_regs(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 59.
    return v2;
}

// Generated as internal constructor for term temp_reg.
pub fn constructor_temp_reg<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    let v1 = C::temp_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/prelude_lower.isle line 79.
    return v2;
}

// Generated as internal constructor for term value_regs_range.
pub fn constructor_value_regs_range<C: Context>(ctx: &mut C, arg0: ValueRegs) -> Range {
    let v2 = C::value_regs_len(ctx, arg0);
    let v3 = C::range(ctx, 0x0, v2);
    // Rule at src/prelude_lower.isle line 128.
    return v3;
}

// Generated as internal constructor for term lo_reg.
pub fn constructor_lo_reg<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::put_in_regs(ctx, arg0);
    let v3 = C::value_regs_get(ctx, v1, 0x0);
    // Rule at src/prelude_lower.isle line 139.
    return v3;
}

// Generated as internal constructor for term emit_side_effect.
pub fn constructor_emit_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> Unit {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            let v2 = C::emit(ctx, v1);
            // Rule at src/prelude_lower.isle line 292.
            return v2;
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v3,
            inst2: ref v4,
        } => {
            let v5 = C::emit(ctx, v3);
            let v6 = C::emit(ctx, v4);
            // Rule at src/prelude_lower.isle line 294.
            return v6;
        }
        &SideEffectNoResult::Inst3 {
            inst1: ref v7,
            inst2: ref v8,
            inst3: ref v9,
        } => {
            let v10 = C::emit(ctx, v7);
            let v11 = C::emit(ctx, v8);
            let v12 = C::emit(ctx, v9);
            // Rule at src/prelude_lower.isle line 297.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_side_effect", "src/prelude_lower.isle line 291"
    )
}

// Generated as internal constructor for term side_effect.
pub fn constructor_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> InstOutput {
    let v1 = constructor_emit_side_effect(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 305.
    return v2;
}

// Generated as internal constructor for term side_effect_concat.
pub fn constructor_side_effect_concat<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
    arg1: &SideEffectNoResult,
) -> SideEffectNoResult {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            match arg1 {
                &SideEffectNoResult::Inst { inst: ref v3 } => {
                    let v4 = SideEffectNoResult::Inst2 {
                        inst1: v1.clone(),
                        inst2: v3.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 310.
                    return v4;
                }
                &SideEffectNoResult::Inst2 {
                    inst1: ref v5,
                    inst2: ref v6,
                } => {
                    let v7 = SideEffectNoResult::Inst3 {
                        inst1: v1.clone(),
                        inst2: v5.clone(),
                        inst3: v6.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 312.
                    return v7;
                }
                _ => {}
            }
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v8,
            inst2: ref v9,
        } => {
            if let &SideEffectNoResult::Inst { inst: ref v3 } = arg1 {
                let v10 = SideEffectNoResult::Inst3 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                    inst3: v3.clone(),
                };
                // Rule at src/prelude_lower.isle line 314.
                return v10;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "side_effect_concat", "src/prelude_lower.isle line 309"
    )
}

// Generated as internal constructor for term produces_flags_append.
pub fn constructor_produces_flags_append<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &MInst,
) -> ProducesFlags {
    if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } = arg0 {
        let v3 = ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: v1.clone(),
            inst2: arg1.clone(),
        };
        // Rule at src/prelude_lower.isle line 339.
        return v3;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_append", "src/prelude_lower.isle line 338"
    )
}

// Generated as internal constructor for term produces_flags_get_reg.
pub fn constructor_produces_flags_get_reg<C: Context>(ctx: &mut C, arg0: &ProducesFlags) -> Reg {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            // Rule at src/prelude_lower.isle line 364.
            return v2;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v3,
            result: v4,
        } => {
            // Rule at src/prelude_lower.isle line 365.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_get_reg", "src/prelude_lower.isle line 363"
    )
}

// Generated as internal constructor for term produces_flags_ignore.
pub fn constructor_produces_flags_ignore<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> ProducesFlags {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            let v3 = ProducesFlags::ProducesFlagsSideEffect { inst: v1.clone() };
            // Rule at src/prelude_lower.isle line 370.
            return v3;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v4,
            result: v5,
        } => {
            let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v4.clone() };
            // Rule at src/prelude_lower.isle line 372.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_ignore", "src/prelude_lower.isle line 369"
    )
}

// Generated as internal constructor for term consumes_flags_concat.
pub fn constructor_consumes_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ConsumesFlags,
    arg1: &ConsumesFlags,
) -> ConsumesFlags {
    match arg0 {
        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v8 } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } = arg1 {
                let v10 = ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                };
                // Rule at src/prelude_lower.isle line 385.
                return v10;
            }
        }
        &ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            if let &ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: ref v4,
                result: v5,
            } = arg1
            {
                let v6 = C::value_regs(ctx, v2, v5);
                let v7 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: v1.clone(),
                    inst2: v4.clone(),
                    result: v6,
                };
                // Rule at src/prelude_lower.isle line 379.
                return v7;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "consumes_flags_concat", "src/prelude_lower.isle line 378"
    )
}

// Generated as internal constructor for term with_flags.
pub fn constructor_with_flags<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> ValueRegs {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v12 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v16 = C::emit(ctx, v13);
                    let v17 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 416.
                    return v17;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v21 = C::emit(ctx, v18);
                    let v22 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 422.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v28 = C::emit(ctx, v23);
                    let v29 = C::emit(ctx, v24);
                    let v30 = C::emit(ctx, v25);
                    let v31 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 434.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v32,
            inst2: ref v33,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v36 = C::emit(ctx, v13);
                    let v37 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 450.
                    return v37;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v38 = C::emit(ctx, v18);
                    let v39 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 457.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v40 = C::emit(ctx, v23);
                    let v41 = C::emit(ctx, v24);
                    let v42 = C::emit(ctx, v25);
                    let v43 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 470.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v1,
            result: v2,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } => {
                    let v6 = C::emit(ctx, v1);
                    let v10 = C::emit(ctx, v9);
                    let v11 = C::value_reg(ctx, v2);
                    // Rule at src/prelude_lower.isle line 410.
                    return v11;
                }
                &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                    inst: ref v4,
                    result: v5,
                } => {
                    let v6 = C::emit(ctx, v1);
                    let v7 = C::emit(ctx, v4);
                    let v8 = C::value_regs(ctx, v2, v5);
                    // Rule at src/prelude_lower.isle line 402.
                    return v8;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags", "src/prelude_lower.isle line 400"
    )
}

// Generated as internal constructor for term with_flags_reg.
pub fn constructor_with_flags_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> Reg {
    let v2 = constructor_with_flags(ctx, arg0, arg1);
    let v4 = C::value_regs_get(ctx, v2, 0x0);
    // Rule at src/prelude_lower.isle line 488.
    return v4;
}

// Generated as internal constructor for term flags_to_producesflags.
pub fn constructor_flags_to_producesflags<C: Context>(ctx: &mut C, arg0: Value) -> ProducesFlags {
    let v1 = C::mark_value_used(ctx, arg0);
    // Rule at src/prelude_lower.isle line 495.
    return ProducesFlags::AlreadyExistingFlags;
}

// Generated as internal constructor for term with_flags_side_effect.
pub fn constructor_with_flags_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> SideEffectNoResult {
    match arg0 {
        &ProducesFlags::AlreadyExistingFlags => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v3 = SideEffectNoResult::Inst { inst: v2.clone() };
                    // Rule at src/prelude_lower.isle line 506.
                    return v3;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v6 = SideEffectNoResult::Inst2 {
                        inst1: v4.clone(),
                        inst2: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 511.
                    return v6;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v7 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v8 = SideEffectNoResult::Inst2 {
                        inst1: v7.clone(),
                        inst2: v2.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 516.
                    return v8;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v9 = SideEffectNoResult::Inst3 {
                        inst1: v7.clone(),
                        inst2: v4.clone(),
                        inst3: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 521.
                    return v9;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v10,
            inst2: ref v11,
        } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } = arg1 {
                let v12 = SideEffectNoResult::Inst3 {
                    inst1: v10.clone(),
                    inst2: v11.clone(),
                    inst3: v2.clone(),
                };
                // Rule at src/prelude_lower.isle line 526.
                return v12;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_side_effect", "src/prelude_lower.isle line 504"
    )
}

// Generated as internal constructor for term lower_return.
pub fn constructor_lower_return<C: Context>(
    ctx: &mut C,
    arg0: Range,
    arg1: ValueSlice,
) -> InstOutput {
    let v2 = C::gen_return(ctx, arg1);
    let v3 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 706.
    return v3;
}

// Generated as internal constructor for term operand_size_bits.
pub fn constructor_operand_size_bits<C: Context>(ctx: &mut C, arg0: &OperandSize) -> u16 {
    match arg0 {
        &OperandSize::Size8 => {
            // Rule at src/isa/x64/inst.isle line 655.
            return 0x8;
        }
        &OperandSize::Size16 => {
            // Rule at src/isa/x64/inst.isle line 656.
            return 0x10;
        }
        &OperandSize::Size32 => {
            // Rule at src/isa/x64/inst.isle line 657.
            return 0x20;
        }
        &OperandSize::Size64 => {
            // Rule at src/isa/x64/inst.isle line 658.
            return 0x40;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "operand_size_bits", "src/isa/x64/inst.isle line 654"
    )
}

// Generated as internal constructor for term reg_mem_to_reg_mem_imm.
pub fn constructor_reg_mem_to_reg_mem_imm<C: Context>(ctx: &mut C, arg0: &RegMem) -> RegMemImm {
    match arg0 {
        &RegMem::Reg { reg: v1 } => {
            let v2 = RegMemImm::Reg { reg: v1 };
            // Rule at src/isa/x64/inst.isle line 894.
            return v2;
        }
        &RegMem::Mem { addr: ref v3 } => {
            let v4 = RegMemImm::Mem { addr: v3.clone() };
            // Rule at src/isa/x64/inst.isle line 896.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "reg_mem_to_reg_mem_imm", "src/isa/x64/inst.isle line 893"
    )
}

// Generated as internal constructor for term amode_imm_reg_flags.
pub fn constructor_amode_imm_reg_flags<C: Context>(
    ctx: &mut C,
    arg0: u32,
    arg1: Gpr,
    arg2: MemFlags,
) -> Amode {
    let v3 = &C::amode_imm_reg(ctx, arg0, arg1);
    let v4 = &C::amode_with_flags(ctx, v3, arg2);
    // Rule at src/isa/x64/inst.isle line 948.
    return v4.clone();
}

// Generated as internal constructor for term amode_imm_reg_reg_shift_flags.
pub fn constructor_amode_imm_reg_reg_shift_flags<C: Context>(
    ctx: &mut C,
    arg0: u32,
    arg1: Gpr,
    arg2: Gpr,
    arg3: u8,
    arg4: MemFlags,
) -> Amode {
    let v5 = &C::amode_imm_reg_reg_shift(ctx, arg0, arg1, arg2, arg3);
    let v6 = &C::amode_with_flags(ctx, v5, arg4);
    // Rule at src/isa/x64/inst.isle line 955.
    return v6.clone();
}

// Generated as internal constructor for term to_amode.
pub fn constructor_to_amode<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Offset32,
) -> Amode {
    let v3 = &constructor_amode_initial(ctx, arg0, arg2);
    let v4 = &constructor_amode_add(ctx, v3, arg1);
    let v5 = &constructor_amode_finalize(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 1117.
    return v5.clone();
}

// Generated as internal constructor for term amode_initial.
pub fn constructor_amode_initial<C: Context>(ctx: &mut C, arg0: MemFlags, arg1: Offset32) -> Amode {
    let v3 = C::invalid_reg(ctx);
    let v2 = C::offset32(ctx, arg1);
    let v4 = Amode::ImmReg {
        simm32: v2,
        base: v3,
        flags: arg0,
    };
    // Rule at src/isa/x64/inst.isle line 1025.
    return v4;
}

// Generated as internal constructor for term amode_add.
pub fn constructor_amode_add<C: Context>(ctx: &mut C, arg0: &Amode, arg1: Value) -> Amode {
    let v2 = C::def_inst(ctx, arg1);
    if let Some(v3) = v2 {
        let v4 = &C::inst_data(ctx, v3);
        match v4 {
            &InstructionData::Binary {
                opcode: ref v5,
                args: ref v6,
            } => {
                match v5 {
                    &Opcode::Iadd => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let v10 = &constructor_amode_add(ctx, arg0, v7.0);
                        let v11 = &constructor_amode_add(ctx, v10, v7.1);
                        // Rule at src/isa/x64/inst.isle line 1039.
                        return v11.clone();
                    }
                    &Opcode::Ishl => {
                        if let &Amode::ImmReg {
                            simm32: v12,
                            base: v13,
                            flags: v14,
                        } = arg0
                        {
                            let v15 = C::is_valid_reg(ctx, v13);
                            if v15 == true {
                                let v7 = C::unpack_value_array_2(ctx, v6);
                                let v22 = C::def_inst(ctx, v7.1);
                                if let Some(v23) = v22 {
                                    let v24 = &C::inst_data(ctx, v23);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v25,
                                        imm: v26,
                                    } = v24
                                    {
                                        if let &Opcode::Iconst = v25 {
                                            let v27 = C::uimm8(ctx, v26);
                                            if let Some(v28) = v27 {
                                                let v29 = C::u8_as_u32(ctx, v28);
                                                let v31 = C::u32_lteq(ctx, v29, 0x3);
                                                if let Some(v32) = v31 {
                                                    let v18 = C::gpr_new(ctx, v13);
                                                    let v33 = constructor_put_in_gpr(ctx, v7.0);
                                                    let v34 = Amode::ImmRegRegShift {
                                                        simm32: v12,
                                                        base: v18,
                                                        index: v33,
                                                        shift: v28,
                                                        flags: v14,
                                                    };
                                                    // Rule at src/isa/x64/inst.isle line 1063.
                                                    return v34;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    _ => {}
                }
            }
            &InstructionData::Unary {
                opcode: ref v50,
                arg: v51,
            } => {
                match v50 {
                    &Opcode::Uextend => {
                        match arg0 {
                            &Amode::ImmReg {
                                simm32: v12,
                                base: v13,
                                flags: v14,
                            } => {
                                let v52 = C::def_inst(ctx, v51);
                                if let Some(v53) = v52 {
                                    let v54 = &C::inst_data(ctx, v53);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v55,
                                        imm: v56,
                                    } = v54
                                    {
                                        if let &Opcode::Iconst = v55 {
                                            let v57 = C::simm32(ctx, v56);
                                            if let Some(v58) = v57 {
                                                let v59 = C::u32_nonnegative(ctx, v58);
                                                if let Some(v60) = v59 {
                                                    let v61 = C::s32_add_fallible(ctx, v12, v60);
                                                    if let Some(v62) = v61 {
                                                        let v63 = Amode::ImmReg {
                                                            simm32: v62,
                                                            base: v13,
                                                            flags: v14,
                                                        };
                                                        // Rule at src/isa/x64/inst.isle line 1088.
                                                        return v63;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            &Amode::ImmRegRegShift {
                                simm32: v42,
                                base: v43,
                                index: v44,
                                shift: v45,
                                flags: v46,
                            } => {
                                let v52 = C::def_inst(ctx, v51);
                                if let Some(v53) = v52 {
                                    let v54 = &C::inst_data(ctx, v53);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v55,
                                        imm: v56,
                                    } = v54
                                    {
                                        if let &Opcode::Iconst = v55 {
                                            let v57 = C::simm32(ctx, v56);
                                            if let Some(v58) = v57 {
                                                let v59 = C::u32_nonnegative(ctx, v58);
                                                if let Some(v60) = v59 {
                                                    let v64 = C::s32_add_fallible(ctx, v42, v60);
                                                    if let Some(v65) = v64 {
                                                        let v66 = Amode::ImmRegRegShift {
                                                            simm32: v65,
                                                            base: v43,
                                                            index: v44,
                                                            shift: v45,
                                                            flags: v46,
                                                        };
                                                        // Rule at src/isa/x64/inst.isle line 1092.
                                                        return v66;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    &Opcode::Sextend => {
                        match arg0 {
                            &Amode::ImmReg {
                                simm32: v12,
                                base: v13,
                                flags: v14,
                            } => {
                                let v52 = C::def_inst(ctx, v51);
                                if let Some(v53) = v52 {
                                    let v54 = &C::inst_data(ctx, v53);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v55,
                                        imm: v56,
                                    } = v54
                                    {
                                        if let &Opcode::Iconst = v55 {
                                            let v57 = C::simm32(ctx, v56);
                                            if let Some(v58) = v57 {
                                                let v67 = C::s32_add_fallible(ctx, v12, v58);
                                                if let Some(v68) = v67 {
                                                    let v69 = Amode::ImmReg {
                                                        simm32: v68,
                                                        base: v13,
                                                        flags: v14,
                                                    };
                                                    // Rule at src/isa/x64/inst.isle line 1098.
                                                    return v69;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            &Amode::ImmRegRegShift {
                                simm32: v42,
                                base: v43,
                                index: v44,
                                shift: v45,
                                flags: v46,
                            } => {
                                let v52 = C::def_inst(ctx, v51);
                                if let Some(v53) = v52 {
                                    let v54 = &C::inst_data(ctx, v53);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v55,
                                        imm: v56,
                                    } = v54
                                    {
                                        if let &Opcode::Iconst = v55 {
                                            let v57 = C::simm32(ctx, v56);
                                            if let Some(v58) = v57 {
                                                let v70 = C::s32_add_fallible(ctx, v42, v58);
                                                if let Some(v71) = v70 {
                                                    let v72 = Amode::ImmRegRegShift {
                                                        simm32: v71,
                                                        base: v43,
                                                        index: v44,
                                                        shift: v45,
                                                        flags: v46,
                                                    };
                                                    // Rule at src/isa/x64/inst.isle line 1102.
                                                    return v72;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    _ => {}
                }
            }
            &InstructionData::UnaryImm {
                opcode: ref v35,
                imm: v36,
            } => {
                if let &Opcode::Iconst = v35 {
                    match arg0 {
                        &Amode::ImmReg {
                            simm32: v12,
                            base: v13,
                            flags: v14,
                        } => {
                            let v37 = C::simm32(ctx, v36);
                            if let Some(v38) = v37 {
                                let v39 = C::s32_add_fallible(ctx, v12, v38);
                                if let Some(v40) = v39 {
                                    let v41 = Amode::ImmReg {
                                        simm32: v40,
                                        base: v13,
                                        flags: v14,
                                    };
                                    // Rule at src/isa/x64/inst.isle line 1075.
                                    return v41;
                                }
                            }
                        }
                        &Amode::ImmRegRegShift {
                            simm32: v42,
                            base: v43,
                            index: v44,
                            shift: v45,
                            flags: v46,
                        } => {
                            let v37 = C::simm32(ctx, v36);
                            if let Some(v38) = v37 {
                                let v47 = C::s32_add_fallible(ctx, v42, v38);
                                if let Some(v48) = v47 {
                                    let v49 = Amode::ImmRegRegShift {
                                        simm32: v48,
                                        base: v43,
                                        index: v44,
                                        shift: v45,
                                        flags: v46,
                                    };
                                    // Rule at src/isa/x64/inst.isle line 1079.
                                    return v49;
                                }
                            }
                        }
                        _ => {}
                    }
                }
            }
            _ => {}
        }
    }
    match arg0 {
        &Amode::ImmReg {
            simm32: v12,
            base: v13,
            flags: v14,
        } => {
            let v15 = C::is_valid_reg(ctx, v13);
            match v15 {
                true => {
                    let v18 = C::gpr_new(ctx, v13);
                    let v19 = constructor_put_in_gpr(ctx, arg1);
                    let v21 = Amode::ImmRegRegShift {
                        simm32: v12,
                        base: v18,
                        index: v19,
                        shift: 0x0,
                        flags: v14,
                    };
                    // Rule at src/isa/x64/inst.isle line 1054.
                    return v21;
                }
                false => {
                    let v16 = C::put_in_reg(ctx, arg1);
                    let v17 = Amode::ImmReg {
                        simm32: v12,
                        base: v16,
                        flags: v14,
                    };
                    // Rule at src/isa/x64/inst.isle line 1048.
                    return v17;
                }
                _ => {}
            }
        }
        &Amode::ImmRegRegShift {
            simm32: v42,
            base: v43,
            index: v44,
            shift: v45,
            flags: v46,
        } => {
            let v74 = &constructor_put_in_gpr_mem_imm(ctx, arg1);
            let v75 = constructor_x64_add(ctx, I64, v43, v74);
            let v76 = Amode::ImmRegRegShift {
                simm32: v42,
                base: v75,
                index: v44,
                shift: v45,
                flags: v46,
            };
            // Rule at src/isa/x64/inst.isle line 1112.
            return v76;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "amode_add", "src/isa/x64/inst.isle line 1030"
    )
}

// Generated as internal constructor for term amode_finalize.
pub fn constructor_amode_finalize<C: Context>(ctx: &mut C, arg0: &Amode) -> Amode {
    if let &Amode::ImmReg {
        simm32: v1,
        base: v2,
        flags: v3,
    } = arg0
    {
        let v4 = C::is_valid_reg(ctx, v2);
        if v4 == false {
            let v7 = constructor_imm(ctx, I64, 0x0);
            let v8 = Amode::ImmReg {
                simm32: v1,
                base: v7,
                flags: v3,
            };
            // Rule at src/isa/x64/inst.isle line 1124.
            return v8;
        }
    }
    // Rule at src/isa/x64/inst.isle line 1126.
    return arg0.clone();
}

// Generated as internal constructor for term put_masked_in_imm8_gpr.
pub fn constructor_put_masked_in_imm8_gpr<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Type,
) -> Imm8Gpr {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data(ctx, v2);
        if let &InstructionData::UnaryImm {
            opcode: ref v4,
            imm: v5,
        } = v3
        {
            if let &Opcode::Iconst = v4 {
                let v6 = C::u64_from_imm64(ctx, v5);
                let v8 = &C::const_to_type_masked_imm8(ctx, v6, arg1);
                // Rule at src/isa/x64/inst.isle line 1161.
                return v8.clone();
            }
        }
    }
    let v9 = C::fits_in_16(ctx, arg1);
    if let Some(v10) = v9 {
        let v12 = C::put_in_regs(ctx, arg0);
        let v14 = constructor_value_regs_get_gpr(ctx, v12, 0x0);
        let v15 = C::shift_mask(ctx, v10);
        let v16 = RegMemImm::Imm { simm32: v15 };
        let v17 = &C::gpr_mem_imm_new(ctx, &v16);
        let v18 = constructor_x64_and(ctx, I64, v14, v17);
        let v19 = &C::gpr_to_imm8_gpr(ctx, v18);
        // Rule at src/isa/x64/inst.isle line 1163.
        return v19.clone();
    }
    let v12 = C::put_in_regs(ctx, arg0);
    let v14 = constructor_value_regs_get_gpr(ctx, v12, 0x0);
    let v20 = &C::gpr_to_imm8_gpr(ctx, v14);
    // Rule at src/isa/x64/inst.isle line 1165.
    return v20.clone();
}

// Generated as internal constructor for term reg_to_gpr_mem_imm.
pub fn constructor_reg_to_gpr_mem_imm<C: Context>(ctx: &mut C, arg0: Reg) -> GprMemImm {
    let v1 = C::gpr_new(ctx, arg0);
    let v2 = &C::gpr_to_gpr_mem_imm(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1535.
    return v2.clone();
}

// Generated as internal constructor for term put_in_gpr.
pub fn constructor_put_in_gpr<C: Context>(ctx: &mut C, arg0: Value) -> Gpr {
    let v1 = C::put_in_reg(ctx, arg0);
    let v2 = C::gpr_new(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1542.
    return v2;
}

// Generated as internal constructor for term put_in_gpr_mem.
pub fn constructor_put_in_gpr_mem<C: Context>(ctx: &mut C, arg0: Value) -> GprMem {
    let v1 = &C::put_in_reg_mem(ctx, arg0);
    let v2 = &C::reg_mem_to_gpr_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1549.
    return v2.clone();
}

// Generated as internal constructor for term put_in_gpr_mem_imm.
pub fn constructor_put_in_gpr_mem_imm<C: Context>(ctx: &mut C, arg0: Value) -> GprMemImm {
    let v1 = &C::put_in_reg_mem_imm(ctx, arg0);
    let v2 = &C::gpr_mem_imm_new(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1556.
    return v2.clone();
}

// Generated as internal constructor for term put_in_xmm.
pub fn constructor_put_in_xmm<C: Context>(ctx: &mut C, arg0: Value) -> Xmm {
    let v1 = C::put_in_reg(ctx, arg0);
    let v2 = C::xmm_new(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1563.
    return v2;
}

// Generated as internal constructor for term output_gpr.
pub fn constructor_output_gpr<C: Context>(ctx: &mut C, arg0: Gpr) -> InstOutput {
    let v1 = C::gpr_to_reg(ctx, arg0);
    let v2 = constructor_output_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1580.
    return v2;
}

// Generated as internal constructor for term value_gprs.
pub fn constructor_value_gprs<C: Context>(ctx: &mut C, arg0: Gpr, arg1: Gpr) -> ValueRegs {
    let v2 = C::gpr_to_reg(ctx, arg0);
    let v3 = C::gpr_to_reg(ctx, arg1);
    let v4 = C::value_regs(ctx, v2, v3);
    // Rule at src/isa/x64/inst.isle line 1585.
    return v4;
}

// Generated as internal constructor for term output_xmm.
pub fn constructor_output_xmm<C: Context>(ctx: &mut C, arg0: Xmm) -> InstOutput {
    let v1 = C::xmm_to_reg(ctx, arg0);
    let v2 = constructor_output_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1590.
    return v2;
}

// Generated as internal constructor for term value_regs_get_gpr.
pub fn constructor_value_regs_get_gpr<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: usize,
) -> Gpr {
    let v2 = C::value_regs_get(ctx, arg0, arg1);
    let v3 = C::gpr_new(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 1597.
    return v3;
}

// Generated as internal constructor for term lo_gpr.
pub fn constructor_lo_gpr<C: Context>(ctx: &mut C, arg0: Value) -> Gpr {
    let v1 = constructor_lo_reg(ctx, arg0);
    let v2 = C::gpr_new(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1610.
    return v2;
}

// Generated as internal constructor for term sink_load_to_gpr_mem_imm.
pub fn constructor_sink_load_to_gpr_mem_imm<C: Context>(
    ctx: &mut C,
    arg0: &SinkableLoad,
) -> GprMemImm {
    let v1 = &C::sink_load(ctx, arg0);
    let v2 = &constructor_reg_mem_to_reg_mem_imm(ctx, v1);
    let v3 = &C::gpr_mem_imm_new(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 1726.
    return v3.clone();
}

// Generated as internal constructor for term sink_load_to_xmm_mem.
pub fn constructor_sink_load_to_xmm_mem<C: Context>(ctx: &mut C, arg0: &SinkableLoad) -> XmmMem {
    let v1 = &C::sink_load(ctx, arg0);
    let v2 = &C::reg_mem_to_xmm_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1730.
    return v2.clone();
}

// Generated as internal constructor for term extend_to_gpr.
pub fn constructor_extend_to_gpr<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Type,
    arg2: &ExtendKind,
) -> Gpr {
    let v1 = C::value_type(ctx, arg0);
    if v1 == arg1 {
        let v4 = constructor_put_in_gpr(ctx, arg0);
        // Rule at src/isa/x64/inst.isle line 1755.
        return v4;
    }
    let v6 = &C::operand_size_of_type_32_64(ctx, arg1);
    let v7 = constructor_operand_size_bits(ctx, v6);
    let v5 = C::ty_bits_u16(ctx, v1);
    let v8 = &C::ext_mode(ctx, v5, v7);
    let v9 = &constructor_put_in_gpr_mem(ctx, arg0);
    let v10 = constructor_extend(ctx, arg2, arg1, v8, v9);
    // Rule at src/isa/x64/inst.isle line 1758.
    return v10;
}

// Generated as internal constructor for term extend.
pub fn constructor_extend<C: Context>(
    ctx: &mut C,
    arg0: &ExtendKind,
    arg1: Type,
    arg2: &ExtMode,
    arg3: &GprMem,
) -> Gpr {
    match arg0 {
        &ExtendKind::Sign => {
            let v5 = constructor_x64_movsx(ctx, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 1778.
            return v5;
        }
        &ExtendKind::Zero => {
            let v4 = constructor_x64_movzx(ctx, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 1774.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "extend", "src/isa/x64/inst.isle line 1771"
    )
}

// Generated as internal constructor for term vec_int_type.
pub fn constructor_vec_int_type<C: Context>(ctx: &mut C, arg0: Type) -> Type {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                if v2.1 == 0x10 {
                    // Rule at src/isa/x64/inst.isle line 1785.
                    return I8X16;
                }
            }
            0x10 => {
                if v2.1 == 0x8 {
                    // Rule at src/isa/x64/inst.isle line 1786.
                    return I16X8;
                }
            }
            0x20 => {
                if v2.1 == 0x4 {
                    // Rule at src/isa/x64/inst.isle line 1787.
                    return I32X4;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src/isa/x64/inst.isle line 1788.
                    return I64X2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_int_type", "src/isa/x64/inst.isle line 1784"
    )
}

// Generated as internal constructor for term sse_xor_op.
pub fn constructor_sse_xor_op<C: Context>(ctx: &mut C, arg0: Type) -> SseOpcode {
    match arg0 {
        F32 => {
            // Rule at src/isa/x64/inst.isle line 1794.
            return SseOpcode::Xorps;
        }
        F64 => {
            // Rule at src/isa/x64/inst.isle line 1795.
            return SseOpcode::Xorpd;
        }
        F32X4 => {
            // Rule at src/isa/x64/inst.isle line 1792.
            return SseOpcode::Xorps;
        }
        F64X2 => {
            // Rule at src/isa/x64/inst.isle line 1793.
            return SseOpcode::Xorpd;
        }
        _ => {}
    }
    let v3 = C::multi_lane(ctx, arg0);
    if let Some(v4) = v3 {
        // Rule at src/isa/x64/inst.isle line 1799.
        return SseOpcode::Pxor;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sse_xor_op", "src/isa/x64/inst.isle line 1791"
    )
}

// Generated as internal constructor for term avx_xor_op.
pub fn constructor_avx_xor_op<C: Context>(ctx: &mut C, arg0: Type) -> AvxOpcode {
    match arg0 {
        F32X4 => {
            // Rule at src/isa/x64/inst.isle line 1802.
            return AvxOpcode::Vxorps;
        }
        F64X2 => {
            // Rule at src/isa/x64/inst.isle line 1803.
            return AvxOpcode::Vxorpd;
        }
        _ => {}
    }
    let v3 = C::multi_lane(ctx, arg0);
    if let Some(v4) = v3 {
        // Rule at src/isa/x64/inst.isle line 1804.
        return AvxOpcode::Vpxor;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "avx_xor_op", "src/isa/x64/inst.isle line 1801"
    )
}

// Generated as internal constructor for term sse_xor.
pub fn constructor_sse_xor<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm, arg2: &XmmMem) -> Xmm {
    let v6 = C::multi_lane(ctx, arg0);
    if let Some(v7) = v6 {
        let v10 = C::has_avx(ctx);
        if v10 == true {
            let v11 = &constructor_avx_xor_op(ctx, arg0);
            let v12 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg2);
            let v13 = constructor_xmm_rmir_vex(ctx, v11, arg1, v12);
            // Rule at src/isa/x64/inst.isle line 1809.
            return v13;
        }
    }
    let v3 = &constructor_sse_xor_op(ctx, arg0);
    let v4 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg2);
    let v5 = constructor_xmm_rm_r(ctx, v3, arg1, v4);
    // Rule at src/isa/x64/inst.isle line 1808.
    return v5;
}

// Generated as internal constructor for term vector_all_ones.
pub fn constructor_vector_all_ones<C: Context>(ctx: &mut C) -> Xmm {
    let v0 = C::temp_writable_xmm(ctx);
    let v2 = MInst::XmmConstOp {
        op: SseOpcode::Pcmpeqd,
        dst: v0,
    };
    let v3 = C::emit(ctx, &v2);
    let v4 = C::writable_xmm_to_xmm(ctx, v0);
    // Rule at src/isa/x64/inst.isle line 1823.
    return v4;
}

// Generated as internal constructor for term xmm_uninit_value.
pub fn constructor_xmm_uninit_value<C: Context>(ctx: &mut C) -> Xmm {
    let v0 = C::temp_writable_xmm(ctx);
    let v1 = MInst::XmmUninitializedValue { dst: v0 };
    let v2 = C::emit(ctx, &v1);
    let v3 = C::writable_xmm_to_xmm(ctx, v0);
    // Rule at src/isa/x64/inst.isle line 1830.
    return v3;
}

// Generated as internal constructor for term make_i64x2_from_lanes.
pub fn constructor_make_i64x2_from_lanes<C: Context>(
    ctx: &mut C,
    arg0: &GprMem,
    arg1: &GprMem,
) -> Xmm {
    let v2 = constructor_xmm_uninit_value(ctx);
    let v4 = constructor_x64_pinsrq(ctx, v2, arg0, 0x0);
    let v6 = constructor_x64_pinsrq(ctx, v4, arg1, 0x1);
    // Rule at src/isa/x64/inst.isle line 1837.
    return v6;
}

// Generated as internal constructor for term mov_rmi_to_xmm.
pub fn constructor_mov_rmi_to_xmm<C: Context>(ctx: &mut C, arg0: &RegMemImm) -> XmmMemImm {
    match arg0 {
        &RegMemImm::Reg { reg: v4 } => {
            let v6 = &C::reg_to_gpr_mem(ctx, v4);
            let v8 = constructor_gpr_to_xmm(ctx, &SseOpcode::Movd, v6, &OperandSize::Size32);
            let v9 = &C::xmm_to_xmm_mem_imm(ctx, v8);
            // Rule at src/isa/x64/inst.isle line 1847.
            return v9.clone();
        }
        &RegMemImm::Mem { addr: ref v1 } => {
            let v2 = &C::xmm_mem_imm_new(ctx, arg0);
            // Rule at src/isa/x64/inst.isle line 1845.
            return v2.clone();
        }
        &RegMemImm::Imm { simm32: v3 } => {
            let v2 = &C::xmm_mem_imm_new(ctx, arg0);
            // Rule at src/isa/x64/inst.isle line 1846.
            return v2.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "mov_rmi_to_xmm", "src/isa/x64/inst.isle line 1844"
    )
}

// Generated as internal constructor for term load_ext_name.
pub fn constructor_load_ext_name<C: Context>(ctx: &mut C, arg0: ExternalName, arg1: i64) -> Reg {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = C::writable_gpr_to_reg(ctx, v2);
    let v4 = C::box_external_name(ctx, arg0);
    let v5 = MInst::LoadExtName {
        dst: v3,
        name: v4,
        offset: arg1,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 1864.
    return v7;
}

// Generated as internal constructor for term x64_load.
pub fn constructor_x64_load<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &SyntheticAmode,
    arg2: &ExtKind,
) -> Reg {
    match arg0 {
        I64 => {
            let v11 = C::temp_writable_gpr(ctx);
            let v12 = MInst::Mov64MR {
                src: arg1.clone(),
                dst: v11,
            };
            let v13 = C::emit(ctx, &v12);
            let v14 = constructor_writable_gpr_to_r_reg(ctx, v11);
            // Rule at src/isa/x64/inst.isle line 1876.
            return v14;
        }
        F32 => {
            let v16 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg1);
            let v17 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movss, v16);
            let v18 = C::xmm_to_reg(ctx, v17);
            // Rule at src/isa/x64/inst.isle line 1881.
            return v18;
        }
        F64 => {
            let v16 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg1);
            let v20 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movsd, v16);
            let v21 = C::xmm_to_reg(ctx, v20);
            // Rule at src/isa/x64/inst.isle line 1884.
            return v21;
        }
        F32X4 => {
            let v16 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg1);
            let v23 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movups, v16);
            let v24 = C::xmm_to_reg(ctx, v23);
            // Rule at src/isa/x64/inst.isle line 1887.
            return v24;
        }
        F64X2 => {
            let v16 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg1);
            let v26 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movupd, v16);
            let v27 = C::xmm_to_reg(ctx, v26);
            // Rule at src/isa/x64/inst.isle line 1890.
            return v27;
        }
        _ => {}
    }
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        if let &ExtKind::SignExtend = arg2 {
            let v5 = C::ty_bytes(ctx, v2);
            let v7 = &C::ext_mode(ctx, v5, 0x8);
            let v8 = &constructor_synthetic_amode_to_gpr_mem(ctx, arg1);
            let v9 = constructor_x64_movsx(ctx, v7, v8);
            let v10 = C::gpr_to_reg(ctx, v9);
            // Rule at src/isa/x64/inst.isle line 1872.
            return v10;
        }
    }
    let v28 = C::multi_lane(ctx, arg0);
    if let Some(v29) = v28 {
        let v16 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg1);
        let v33 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movdqu, v16);
        let v34 = C::xmm_to_reg(ctx, v33);
        // Rule at src/isa/x64/inst.isle line 1893.
        return v34;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_load", "src/isa/x64/inst.isle line 1870"
    )
}

// Generated as internal constructor for term x64_mov.
pub fn constructor_x64_mov<C: Context>(ctx: &mut C, arg0: &Amode) -> Reg {
    let v1 = C::temp_writable_gpr(ctx);
    let v2 = &C::amode_to_synthetic_amode(ctx, arg0);
    let v3 = MInst::Mov64MR {
        src: v2.clone(),
        dst: v1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_gpr_to_r_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1897.
    return v5;
}

// Generated as internal constructor for term x64_movzx.
pub fn constructor_x64_movzx<C: Context>(ctx: &mut C, arg0: &ExtMode, arg1: &GprMem) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = MInst::MovzxRmR {
        ext_mode: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 1903.
    return v5;
}

// Generated as internal constructor for term x64_movsx.
pub fn constructor_x64_movsx<C: Context>(ctx: &mut C, arg0: &ExtMode, arg1: &GprMem) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = MInst::MovsxRmR {
        ext_mode: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 1909.
    return v5;
}

// Generated as internal constructor for term x64_movss_load.
pub fn constructor_x64_movss_load<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movss, arg0);
    // Rule at src/isa/x64/inst.isle line 1915.
    return v2;
}

// Generated as internal constructor for term x64_movsd_load.
pub fn constructor_x64_movsd_load<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movsd, arg0);
    // Rule at src/isa/x64/inst.isle line 1919.
    return v2;
}

// Generated as internal constructor for term x64_movups.
pub fn constructor_x64_movups<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movups, arg0);
    // Rule at src/isa/x64/inst.isle line 1923.
    return v2;
}

// Generated as internal constructor for term x64_movupd.
pub fn constructor_x64_movupd<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movupd, arg0);
    // Rule at src/isa/x64/inst.isle line 1927.
    return v2;
}

// Generated as internal constructor for term x64_movd.
pub fn constructor_x64_movd<C: Context>(ctx: &mut C, arg0: Xmm) -> Gpr {
    let v3 = constructor_xmm_to_gpr(ctx, &SseOpcode::Movd, arg0, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 1931.
    return v3;
}

// Generated as internal constructor for term x64_movdqu.
pub fn constructor_x64_movdqu<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movdqu, arg0);
    // Rule at src/isa/x64/inst.isle line 1935.
    return v2;
}

// Generated as internal constructor for term x64_pmovsxbw.
pub fn constructor_x64_pmovsxbw<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v3 = C::has_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpmovsxbw, arg0);
        // Rule at src/isa/x64/inst.isle line 1941.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Pmovsxbw, arg0);
    // Rule at src/isa/x64/inst.isle line 1939.
    return v2;
}

// Generated as internal constructor for term x64_pmovzxbw.
pub fn constructor_x64_pmovzxbw<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v3 = C::has_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpmovzxbw, arg0);
        // Rule at src/isa/x64/inst.isle line 1948.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Pmovzxbw, arg0);
    // Rule at src/isa/x64/inst.isle line 1946.
    return v2;
}

// Generated as internal constructor for term x64_pmovsxwd.
pub fn constructor_x64_pmovsxwd<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v3 = C::has_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpmovsxwd, arg0);
        // Rule at src/isa/x64/inst.isle line 1955.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Pmovsxwd, arg0);
    // Rule at src/isa/x64/inst.isle line 1953.
    return v2;
}

// Generated as internal constructor for term x64_pmovzxwd.
pub fn constructor_x64_pmovzxwd<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v3 = C::has_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpmovzxwd, arg0);
        // Rule at src/isa/x64/inst.isle line 1962.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Pmovzxwd, arg0);
    // Rule at src/isa/x64/inst.isle line 1960.
    return v2;
}

// Generated as internal constructor for term x64_pmovsxdq.
pub fn constructor_x64_pmovsxdq<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v3 = C::has_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpmovsxdq, arg0);
        // Rule at src/isa/x64/inst.isle line 1969.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Pmovsxdq, arg0);
    // Rule at src/isa/x64/inst.isle line 1967.
    return v2;
}

// Generated as internal constructor for term x64_pmovzxdq.
pub fn constructor_x64_pmovzxdq<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v3 = C::has_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpmovzxdq, arg0);
        // Rule at src/isa/x64/inst.isle line 1976.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Pmovzxdq, arg0);
    // Rule at src/isa/x64/inst.isle line 1974.
    return v2;
}

// Generated as internal constructor for term x64_movrm.
pub fn constructor_x64_movrm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &SyntheticAmode,
    arg2: Gpr,
) -> SideEffectNoResult {
    let v3 = &C::raw_operand_size_of_type(ctx, arg0);
    let v4 = MInst::MovRM {
        size: v3.clone(),
        src: arg2,
        dst: arg1.clone(),
    };
    let v5 = SideEffectNoResult::Inst { inst: v4 };
    // Rule at src/isa/x64/inst.isle line 1981.
    return v5;
}

// Generated as internal constructor for term x64_xmm_movrm.
pub fn constructor_x64_xmm_movrm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &SyntheticAmode,
    arg2: Xmm,
) -> SideEffectNoResult {
    let v3 = C::xmm_to_reg(ctx, arg2);
    let v4 = MInst::XmmMovRM {
        op: arg0.clone(),
        src: v3,
        dst: arg1.clone(),
    };
    let v5 = SideEffectNoResult::Inst { inst: v4 };
    // Rule at src/isa/x64/inst.isle line 1986.
    return v5;
}

// Generated as internal constructor for term x64_xmm_load_const.
pub fn constructor_x64_xmm_load_const<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: VCodeConstant,
) -> Xmm {
    let v2 = &C::const_to_synthetic_amode(ctx, arg1);
    let v4 = constructor_x64_load(ctx, arg0, v2, &ExtKind::None);
    let v5 = C::xmm_new(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 1991.
    return v5;
}

// Generated as internal constructor for term alu_rmi_r.
pub fn constructor_alu_rmi_r<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &AluRmiROpcode,
    arg2: Gpr,
    arg3: &GprMemImm,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v6 = MInst::AluRmiR {
        size: v5.clone(),
        op: arg1.clone(),
        src1: arg2,
        src2: arg3.clone(),
        dst: v4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 2002.
    return v8;
}

// Generated as internal constructor for term x64_add.
pub fn constructor_x64_add<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> Gpr {
    let v4 = constructor_alu_rmi_r(ctx, arg0, &AluRmiROpcode::Add, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2010.
    return v4;
}

// Generated as internal constructor for term x64_add_with_flags_paired.
pub fn constructor_x64_add_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ProducesFlags {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v3);
    let v6 = MInst::AluRmiR {
        size: v4.clone(),
        op: AluRmiROpcode::Add,
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v8 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v6,
        result: v7,
    };
    // Rule at src/isa/x64/inst.isle line 2018.
    return v8;
}

// Generated as internal constructor for term x64_adc_paired.
pub fn constructor_x64_adc_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ConsumesFlags {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v3);
    let v6 = MInst::AluRmiR {
        size: v4.clone(),
        op: AluRmiROpcode::Adc,
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v8 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v6,
        result: v7,
    };
    // Rule at src/isa/x64/inst.isle line 2030.
    return v8;
}

// Generated as internal constructor for term x64_sub.
pub fn constructor_x64_sub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> Gpr {
    let v4 = constructor_alu_rmi_r(ctx, arg0, &AluRmiROpcode::Sub, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2042.
    return v4;
}

// Generated as internal constructor for term x64_sub_with_flags_paired.
pub fn constructor_x64_sub_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ProducesFlags {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v3);
    let v6 = MInst::AluRmiR {
        size: v4.clone(),
        op: AluRmiROpcode::Sub,
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v8 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v6,
        result: v7,
    };
    // Rule at src/isa/x64/inst.isle line 2050.
    return v8;
}

// Generated as internal constructor for term x64_sbb_paired.
pub fn constructor_x64_sbb_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ConsumesFlags {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v3);
    let v6 = MInst::AluRmiR {
        size: v4.clone(),
        op: AluRmiROpcode::Sbb,
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v8 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v6,
        result: v7,
    };
    // Rule at src/isa/x64/inst.isle line 2062.
    return v8;
}

// Generated as internal constructor for term x64_mul.
pub fn constructor_x64_mul<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> Gpr {
    let v4 = constructor_alu_rmi_r(ctx, arg0, &AluRmiROpcode::Mul, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2074.
    return v4;
}

// Generated as internal constructor for term x64_and.
pub fn constructor_x64_and<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> Gpr {
    let v4 = constructor_alu_rmi_r(ctx, arg0, &AluRmiROpcode::And, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2082.
    return v4;
}

// Generated as internal constructor for term x64_and_with_flags_paired.
pub fn constructor_x64_and_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ProducesFlags {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v6 = MInst::AluRmiR {
        size: v4.clone(),
        op: AluRmiROpcode::And,
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v7 = ProducesFlags::ProducesFlagsSideEffect { inst: v6 };
    // Rule at src/isa/x64/inst.isle line 2089.
    return v7;
}

// Generated as internal constructor for term x64_or.
pub fn constructor_x64_or<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: &GprMemImm) -> Gpr {
    let v4 = constructor_alu_rmi_r(ctx, arg0, &AluRmiROpcode::Or, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2100.
    return v4;
}

// Generated as internal constructor for term x64_xor.
pub fn constructor_x64_xor<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> Gpr {
    let v4 = constructor_alu_rmi_r(ctx, arg0, &AluRmiROpcode::Xor, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2108.
    return v4;
}

// Generated as internal constructor for term alu_rm_r_vex.
pub fn constructor_alu_rm_r_vex<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &AluRmROpcode,
    arg2: Gpr,
    arg3: Gpr,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v6 = MInst::AluRmRVex {
        size: v5.clone(),
        op: arg1.clone(),
        src1: arg2,
        src2: arg3,
        dst: v4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 2116.
    return v8;
}

// Generated as internal constructor for term x64_andn.
pub fn constructor_x64_andn<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: Gpr) -> Gpr {
    let v4 = constructor_alu_rm_r_vex(ctx, arg0, &AluRmROpcode::Andn, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2123.
    return v4;
}

// Generated as internal constructor for term imm_i64.
pub fn constructor_imm_i64<C: Context>(ctx: &mut C, arg0: Type, arg1: i64) -> Reg {
    let v2 = C::i64_as_u64(ctx, arg1);
    let v3 = constructor_imm(ctx, arg0, v2);
    // Rule at src/isa/x64/inst.isle line 2130.
    return v3;
}

// Generated as internal constructor for term imm.
pub fn constructor_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: u64) -> Reg {
    match arg0 {
        I64 => {
            let v24 = C::nonzero_u64_fits_in_u32(ctx, arg1);
            if let Some(v25) = v24 {
                let v5 = C::temp_writable_gpr(ctx);
                let v26 = MInst::Imm {
                    dst_size: OperandSize::Size32,
                    simm64: v25,
                    dst: v5,
                };
                let v27 = C::emit(ctx, &v26);
                let v28 = constructor_writable_gpr_to_r_reg(ctx, v5);
                // Rule at src/isa/x64/inst.isle line 2165.
                return v28;
            }
        }
        F32 => {
            let v4 = C::u64_is_zero(ctx, arg1);
            match v4 {
                true => {
                    let v40 = C::temp_writable_xmm(ctx);
                    let v42 = MInst::XmmConstOp {
                        op: SseOpcode::Xorps,
                        dst: v40,
                    };
                    let v43 = C::emit(ctx, &v42);
                    let v44 = C::writable_xmm_to_xmm(ctx, v40);
                    let v45 = C::xmm_to_reg(ctx, v44);
                    // Rule at src/isa/x64/inst.isle line 2183.
                    return v45;
                }
                false => {
                    let v12 = constructor_imm(ctx, I32, arg1);
                    let v13 = &C::reg_to_gpr_mem(ctx, v12);
                    let v15 =
                        constructor_gpr_to_xmm(ctx, &SseOpcode::Movd, v13, &OperandSize::Size32);
                    let v16 = C::xmm_to_reg(ctx, v15);
                    // Rule at src/isa/x64/inst.isle line 2152.
                    return v16;
                }
                _ => {}
            }
        }
        F64 => {
            let v4 = C::u64_is_zero(ctx, arg1);
            match v4 {
                true => {
                    let v40 = C::temp_writable_xmm(ctx);
                    let v47 = MInst::XmmConstOp {
                        op: SseOpcode::Xorpd,
                        dst: v40,
                    };
                    let v48 = C::emit(ctx, &v47);
                    let v44 = C::writable_xmm_to_xmm(ctx, v40);
                    let v45 = C::xmm_to_reg(ctx, v44);
                    // Rule at src/isa/x64/inst.isle line 2191.
                    return v45;
                }
                false => {
                    let v19 = constructor_imm(ctx, I64, arg1);
                    let v20 = &C::reg_to_gpr_mem(ctx, v19);
                    let v22 =
                        constructor_gpr_to_xmm(ctx, &SseOpcode::Movq, v20, &OperandSize::Size64);
                    let v23 = C::xmm_to_reg(ctx, v22);
                    // Rule at src/isa/x64/inst.isle line 2158.
                    return v23;
                }
                _ => {}
            }
        }
        _ => {}
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::u64_is_zero(ctx, arg1);
        match v4 {
            true => {
                let v5 = C::temp_writable_gpr(ctx);
                let v6 = &C::operand_size_of_type_32_64(ctx, v2);
                let v30 = MInst::AluConstOp {
                    op: AluRmiROpcode::Xor,
                    size: v6.clone(),
                    dst: v5,
                };
                let v31 = C::emit(ctx, &v30);
                let v32 = C::writable_gpr_to_gpr(ctx, v5);
                let v33 = C::gpr_to_reg(ctx, v32);
                // Rule at src/isa/x64/inst.isle line 2171.
                return v33;
            }
            false => {
                let v5 = C::temp_writable_gpr(ctx);
                let v6 = &C::operand_size_of_type_32_64(ctx, v2);
                let v7 = MInst::Imm {
                    dst_size: v6.clone(),
                    simm64: arg1,
                    dst: v5,
                };
                let v8 = C::emit(ctx, &v7);
                let v9 = constructor_writable_gpr_to_r_reg(ctx, v5);
                // Rule at src/isa/x64/inst.isle line 2145.
                return v9;
            }
            _ => {}
        }
    }
    if arg1 == 0x0 {
        let v34 = C::multi_lane(ctx, arg0);
        if let Some(v35) = v34 {
            let v38 = constructor_xmm_zero(ctx, arg0);
            let v39 = C::xmm_to_reg(ctx, v38);
            // Rule at src/isa/x64/inst.isle line 2179.
            return v39;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "imm", "src/isa/x64/inst.isle line 2142"
    )
}

// Generated as internal constructor for term xmm_zero.
pub fn constructor_xmm_zero<C: Context>(ctx: &mut C, arg0: Type) -> Xmm {
    let v1 = C::temp_writable_xmm(ctx);
    let v2 = &constructor_sse_xor_op(ctx, arg0);
    let v3 = MInst::XmmConstOp {
        op: v2.clone(),
        dst: v1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_xmm_to_xmm(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 2199.
    return v5;
}

// Generated as internal constructor for term shift_r.
pub fn constructor_shift_r<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ShiftKind,
    arg2: Gpr,
    arg3: &Imm8Gpr,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = &C::raw_operand_size_of_type(ctx, arg0);
    let v6 = MInst::ShiftR {
        size: v5.clone(),
        kind: arg1.clone(),
        src: arg2,
        num_bits: arg3.clone(),
        dst: v4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 2206.
    return v8;
}

// Generated as internal constructor for term x64_rotl.
pub fn constructor_x64_rotl<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: &Imm8Gpr) -> Gpr {
    let v4 = constructor_shift_r(ctx, arg0, &ShiftKind::RotateLeft, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2216.
    return v4;
}

// Generated as internal constructor for term x64_rotr.
pub fn constructor_x64_rotr<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: &Imm8Gpr) -> Gpr {
    let v4 = constructor_shift_r(ctx, arg0, &ShiftKind::RotateRight, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2221.
    return v4;
}

// Generated as internal constructor for term x64_shl.
pub fn constructor_x64_shl<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: &Imm8Gpr) -> Gpr {
    let v4 = constructor_shift_r(ctx, arg0, &ShiftKind::ShiftLeft, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2226.
    return v4;
}

// Generated as internal constructor for term x64_shr.
pub fn constructor_x64_shr<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: &Imm8Gpr) -> Gpr {
    let v4 = constructor_shift_r(ctx, arg0, &ShiftKind::ShiftRightLogical, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2231.
    return v4;
}

// Generated as internal constructor for term x64_sar.
pub fn constructor_x64_sar<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: &Imm8Gpr) -> Gpr {
    let v4 = constructor_shift_r(ctx, arg0, &ShiftKind::ShiftRightArithmetic, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2236.
    return v4;
}

// Generated as internal constructor for term x64_bswap.
pub fn constructor_x64_bswap<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = MInst::Bswap {
        size: v3.clone(),
        src: arg1,
        dst: v2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 2243.
    return v6;
}

// Generated as internal constructor for term cmp_rmi_r.
pub fn constructor_cmp_rmi_r<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: &CmpOpcode,
    arg2: &GprMemImm,
    arg3: Gpr,
) -> ProducesFlags {
    let v4 = MInst::CmpRmiR {
        size: arg0.clone(),
        opcode: arg1.clone(),
        src: arg2.clone(),
        dst: arg3,
    };
    let v5 = ProducesFlags::ProducesFlagsSideEffect { inst: v4 };
    // Rule at src/isa/x64/inst.isle line 2251.
    return v5;
}

// Generated as internal constructor for term x64_cmp.
pub fn constructor_x64_cmp<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: &GprMemImm,
    arg2: Gpr,
) -> ProducesFlags {
    let v4 = &constructor_cmp_rmi_r(ctx, arg0, &CmpOpcode::Cmp, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2260.
    return v4.clone();
}

// Generated as internal constructor for term x64_cmp_imm.
pub fn constructor_x64_cmp_imm<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: u32,
    arg2: Gpr,
) -> ProducesFlags {
    let v4 = RegMemImm::Imm { simm32: arg1 };
    let v5 = &C::gpr_mem_imm_new(ctx, &v4);
    let v6 = &constructor_cmp_rmi_r(ctx, arg0, &CmpOpcode::Cmp, v5, arg2);
    // Rule at src/isa/x64/inst.isle line 2265.
    return v6.clone();
}

// Generated as internal constructor for term xmm_cmp_rm_r.
pub fn constructor_xmm_cmp_rm_r<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &XmmMemAligned,
    arg2: Xmm,
) -> ProducesFlags {
    let v3 = MInst::XmmCmpRmR {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: arg2,
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/x64/inst.isle line 2270.
    return v4;
}

// Generated as internal constructor for term x64_ucomis.
pub fn constructor_x64_ucomis<C: Context>(ctx: &mut C, arg0: Value, arg1: Value) -> ProducesFlags {
    let v1 = C::value_type(ctx, arg0);
    match v1 {
        F32 => {
            let v4 = constructor_put_in_xmm(ctx, arg0);
            let v5 = &constructor_xmm_to_xmm_mem_aligned(ctx, v4);
            let v6 = constructor_put_in_xmm(ctx, arg1);
            let v7 = &constructor_xmm_cmp_rm_r(ctx, &SseOpcode::Ucomiss, v5, v6);
            // Rule at src/isa/x64/inst.isle line 2276.
            return v7.clone();
        }
        F64 => {
            let v4 = constructor_put_in_xmm(ctx, arg0);
            let v5 = &constructor_xmm_to_xmm_mem_aligned(ctx, v4);
            let v6 = constructor_put_in_xmm(ctx, arg1);
            let v9 = &constructor_xmm_cmp_rm_r(ctx, &SseOpcode::Ucomisd, v5, v6);
            // Rule at src/isa/x64/inst.isle line 2280.
            return v9.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_ucomis", "src/isa/x64/inst.isle line 2275"
    )
}

// Generated as internal constructor for term x64_test.
pub fn constructor_x64_test<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: &GprMemImm,
    arg2: Gpr,
) -> ProducesFlags {
    let v4 = &constructor_cmp_rmi_r(ctx, arg0, &CmpOpcode::Test, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2285.
    return v4.clone();
}

// Generated as internal constructor for term x64_ptest.
pub fn constructor_x64_ptest<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: Xmm) -> ProducesFlags {
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v4 = &constructor_xmm_cmp_rm_r(ctx, &SseOpcode::Ptest, v3, arg1);
    // Rule at src/isa/x64/inst.isle line 2290.
    return v4.clone();
}

// Generated as internal constructor for term cmove.
pub fn constructor_cmove<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: &GprMem,
    arg3: Gpr,
) -> ConsumesFlags {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v4);
    let v6 = MInst::Cmove {
        size: v5.clone(),
        cc: arg1.clone(),
        consequent: arg2.clone(),
        alternative: arg3,
        dst: v4,
    };
    let v8 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v6,
        result: v7,
    };
    // Rule at src/isa/x64/inst.isle line 2297.
    return v8;
}

// Generated as internal constructor for term cmove_xmm.
pub fn constructor_cmove_xmm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: &XmmMemAligned,
    arg3: Xmm,
) -> ConsumesFlags {
    let v4 = C::temp_writable_xmm(ctx);
    let v6 = constructor_writable_xmm_to_r_reg(ctx, v4);
    let v5 = MInst::XmmCmove {
        ty: arg0,
        cc: arg1.clone(),
        consequent: arg2.clone(),
        alternative: arg3,
        dst: v4,
    };
    let v7 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v5,
        result: v6,
    };
    // Rule at src/isa/x64/inst.isle line 2305.
    return v7;
}

// Generated as internal constructor for term cmove_from_values.
pub fn constructor_cmove_from_values<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: Value,
    arg3: Value,
) -> ConsumesFlags {
    let v1 = &C::type_register_class(ctx, arg0);
    if let Some(v2) = v1 {
        match v2 {
            &RegisterClass::Gpr {
                single_register: v3,
            } => {
                match v3 {
                    true => {
                        let v26 = &constructor_put_in_gpr_mem(ctx, arg2);
                        let v27 = constructor_put_in_gpr(ctx, arg3);
                        let v28 = &constructor_cmove(ctx, arg0, arg1, v26, v27);
                        // Rule at src/isa/x64/inst.isle line 2336.
                        return v28.clone();
                    }
                    false => {
                        if arg0 == I128 {
                            let v7 = C::put_in_regs(ctx, arg2);
                            let v8 = C::put_in_regs(ctx, arg3);
                            let v9 = C::temp_writable_gpr(ctx);
                            let v10 = C::temp_writable_gpr(ctx);
                            let v13 = constructor_value_regs_get_gpr(ctx, v7, 0x0);
                            let v14 = &C::gpr_to_gpr_mem(ctx, v13);
                            let v15 = constructor_value_regs_get_gpr(ctx, v8, 0x0);
                            let v18 = constructor_value_regs_get_gpr(ctx, v7, 0x1);
                            let v19 = &C::gpr_to_gpr_mem(ctx, v18);
                            let v20 = constructor_value_regs_get_gpr(ctx, v8, 0x1);
                            let v22 = constructor_writable_gpr_to_r_reg(ctx, v9);
                            let v23 = constructor_writable_gpr_to_r_reg(ctx, v10);
                            let v24 = C::value_regs(ctx, v22, v23);
                            let v16 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg1.clone(),
                                consequent: v14.clone(),
                                alternative: v15,
                                dst: v9,
                            };
                            let v21 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg1.clone(),
                                consequent: v19.clone(),
                                alternative: v20,
                                dst: v10,
                            };
                            let v25 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                                inst1: v16,
                                inst2: v21,
                                result: v24,
                            };
                            // Rule at src/isa/x64/inst.isle line 2315.
                            return v25;
                        }
                    }
                    _ => {}
                }
            }
            &RegisterClass::Xmm => {
                let v29 = &constructor_put_in_xmm_mem_aligned(ctx, arg2);
                let v30 = constructor_put_in_xmm(ctx, arg3);
                let v31 = &constructor_cmove_xmm(ctx, arg0, arg1, v29, v30);
                // Rule at src/isa/x64/inst.isle line 2339.
                return v31.clone();
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmove_from_values", "src/isa/x64/inst.isle line 2314"
    )
}

// Generated as internal constructor for term cmove_or.
pub fn constructor_cmove_or<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: &CC,
    arg3: &GprMem,
    arg4: Gpr,
) -> ConsumesFlags {
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = C::temp_writable_gpr(ctx);
    let v7 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v9 = C::writable_gpr_to_gpr(ctx, v6);
    let v11 = constructor_writable_gpr_to_value_regs(ctx, v5);
    let v8 = MInst::Cmove {
        size: v7.clone(),
        cc: arg1.clone(),
        consequent: arg3.clone(),
        alternative: arg4,
        dst: v6,
    };
    let v10 = MInst::Cmove {
        size: v7.clone(),
        cc: arg2.clone(),
        consequent: arg3.clone(),
        alternative: v9,
        dst: v5,
    };
    let v12 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
        inst1: v8,
        inst2: v10,
        result: v11,
    };
    // Rule at src/isa/x64/inst.isle line 2346.
    return v12;
}

// Generated as internal constructor for term cmove_or_xmm.
pub fn constructor_cmove_or_xmm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: &CC,
    arg3: &XmmMemAligned,
    arg4: Xmm,
) -> ConsumesFlags {
    let v5 = C::temp_writable_xmm(ctx);
    let v6 = C::temp_writable_xmm(ctx);
    let v8 = C::writable_xmm_to_xmm(ctx, v6);
    let v10 = constructor_writable_xmm_to_value_regs(ctx, v5);
    let v7 = MInst::XmmCmove {
        ty: arg0,
        cc: arg1.clone(),
        consequent: arg3.clone(),
        alternative: arg4,
        dst: v6,
    };
    let v9 = MInst::XmmCmove {
        ty: arg0,
        cc: arg2.clone(),
        consequent: arg3.clone(),
        alternative: v8,
        dst: v5,
    };
    let v11 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
        inst1: v7,
        inst2: v9,
        result: v10,
    };
    // Rule at src/isa/x64/inst.isle line 2358.
    return v11;
}

// Generated as internal constructor for term cmove_or_from_values.
pub fn constructor_cmove_or_from_values<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: &CC,
    arg3: Value,
    arg4: Value,
) -> ConsumesFlags {
    let v1 = &C::type_register_class(ctx, arg0);
    if let Some(v2) = v1 {
        match v2 {
            &RegisterClass::Gpr {
                single_register: v3,
            } => {
                match v3 {
                    true => {
                        let v37 = &constructor_put_in_gpr_mem(ctx, arg3);
                        let v38 = constructor_put_in_gpr(ctx, arg4);
                        let v39 = &constructor_cmove_or(ctx, arg0, arg1, arg2, v37, v38);
                        // Rule at src/isa/x64/inst.isle line 2391.
                        return v39.clone();
                    }
                    false => {
                        if arg0 == I128 {
                            let v8 = C::put_in_regs(ctx, arg3);
                            let v9 = C::put_in_regs(ctx, arg4);
                            let v10 = C::temp_writable_gpr(ctx);
                            let v11 = C::temp_writable_gpr(ctx);
                            let v12 = C::temp_writable_gpr(ctx);
                            let v13 = C::temp_writable_gpr(ctx);
                            let v16 = constructor_value_regs_get_gpr(ctx, v8, 0x0);
                            let v17 = &C::gpr_to_gpr_mem(ctx, v16);
                            let v18 = constructor_value_regs_get_gpr(ctx, v9, 0x0);
                            let v20 = constructor_value_regs_get_gpr(ctx, v8, 0x0);
                            let v21 = &C::gpr_to_gpr_mem(ctx, v20);
                            let v22 = C::writable_gpr_to_gpr(ctx, v12);
                            let v25 = constructor_value_regs_get_gpr(ctx, v8, 0x1);
                            let v26 = &C::gpr_to_gpr_mem(ctx, v25);
                            let v27 = constructor_value_regs_get_gpr(ctx, v9, 0x1);
                            let v29 = constructor_value_regs_get_gpr(ctx, v8, 0x1);
                            let v30 = &C::gpr_to_gpr_mem(ctx, v29);
                            let v31 = C::writable_gpr_to_gpr(ctx, v13);
                            let v33 = constructor_writable_gpr_to_r_reg(ctx, v10);
                            let v34 = constructor_writable_gpr_to_r_reg(ctx, v11);
                            let v35 = C::value_regs(ctx, v33, v34);
                            let v19 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg1.clone(),
                                consequent: v17.clone(),
                                alternative: v18,
                                dst: v12,
                            };
                            let v23 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg2.clone(),
                                consequent: v21.clone(),
                                alternative: v22,
                                dst: v10,
                            };
                            let v28 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg1.clone(),
                                consequent: v26.clone(),
                                alternative: v27,
                                dst: v13,
                            };
                            let v32 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg2.clone(),
                                consequent: v30.clone(),
                                alternative: v31,
                                dst: v11,
                            };
                            let v36 = ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                                inst1: v19,
                                inst2: v23,
                                inst3: v28,
                                inst4: v32,
                                result: v35,
                            };
                            // Rule at src/isa/x64/inst.isle line 2372.
                            return v36;
                        }
                    }
                    _ => {}
                }
            }
            &RegisterClass::Xmm => {
                let v40 = &constructor_put_in_xmm_mem_aligned(ctx, arg3);
                let v41 = constructor_put_in_xmm(ctx, arg4);
                let v42 = &constructor_cmove_or_xmm(ctx, arg0, arg1, arg2, v40, v41);
                // Rule at src/isa/x64/inst.isle line 2394.
                return v42.clone();
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmove_or_from_values", "src/isa/x64/inst.isle line 2371"
    )
}

// Generated as internal constructor for term x64_setcc.
pub fn constructor_x64_setcc<C: Context>(ctx: &mut C, arg0: &CC) -> ConsumesFlags {
    let v1 = C::temp_writable_gpr(ctx);
    let v3 = constructor_writable_gpr_to_r_reg(ctx, v1);
    let v2 = MInst::Setcc {
        cc: arg0.clone(),
        dst: v1,
    };
    let v4 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v2,
        result: v3,
    };
    // Rule at src/isa/x64/inst.isle line 2399.
    return v4;
}

// Generated as internal constructor for term x64_setcc_paired.
pub fn constructor_x64_setcc_paired<C: Context>(ctx: &mut C, arg0: &CC) -> ConsumesFlags {
    let v1 = C::temp_writable_gpr(ctx);
    let v3 = constructor_writable_gpr_to_r_reg(ctx, v1);
    let v2 = MInst::Setcc {
        cc: arg0.clone(),
        dst: v1,
    };
    let v4 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v2,
        result: v3,
    };
    // Rule at src/isa/x64/inst.isle line 2408.
    return v4;
}

// Generated as internal constructor for term xmm_rm_r.
pub fn constructor_xmm_rm_r<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &XmmMemAligned,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmRmR {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2416.
    return v6;
}

// Generated as internal constructor for term xmm_rm_r_unaligned.
pub fn constructor_xmm_rm_r_unaligned<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmRmRUnaligned {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2423.
    return v6;
}

// Generated as internal constructor for term x64_paddb.
pub fn constructor_x64_paddb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2432.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2430.
    return v4;
}

// Generated as internal constructor for term x64_paddw.
pub fn constructor_x64_paddw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2440.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2438.
    return v4;
}

// Generated as internal constructor for term x64_paddd.
pub fn constructor_x64_paddd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2448.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2446.
    return v4;
}

// Generated as internal constructor for term x64_paddq.
pub fn constructor_x64_paddq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddq, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2456.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2454.
    return v4;
}

// Generated as internal constructor for term x64_paddsb.
pub fn constructor_x64_paddsb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddsb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2464.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddsb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2462.
    return v4;
}

// Generated as internal constructor for term x64_paddsw.
pub fn constructor_x64_paddsw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddsw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2472.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddsw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2470.
    return v4;
}

// Generated as internal constructor for term x64_phaddw.
pub fn constructor_x64_phaddw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vphaddw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2480.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Phaddw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2478.
    return v4;
}

// Generated as internal constructor for term x64_phaddd.
pub fn constructor_x64_phaddd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vphaddd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2488.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Phaddd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2486.
    return v4;
}

// Generated as internal constructor for term x64_paddusb.
pub fn constructor_x64_paddusb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddusb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2496.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddusb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2494.
    return v4;
}

// Generated as internal constructor for term x64_paddusw.
pub fn constructor_x64_paddusw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddusw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2504.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddusw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2502.
    return v4;
}

// Generated as internal constructor for term x64_psubb.
pub fn constructor_x64_psubb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2512.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2510.
    return v4;
}

// Generated as internal constructor for term x64_psubw.
pub fn constructor_x64_psubw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2520.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2518.
    return v4;
}

// Generated as internal constructor for term x64_psubd.
pub fn constructor_x64_psubd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2528.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2526.
    return v4;
}

// Generated as internal constructor for term x64_psubq.
pub fn constructor_x64_psubq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubq, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2536.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2534.
    return v4;
}

// Generated as internal constructor for term x64_psubsb.
pub fn constructor_x64_psubsb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubsb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2544.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubsb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2542.
    return v4;
}

// Generated as internal constructor for term x64_psubsw.
pub fn constructor_x64_psubsw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubsw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2552.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubsw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2550.
    return v4;
}

// Generated as internal constructor for term x64_psubusb.
pub fn constructor_x64_psubusb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubusb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2560.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubusb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2558.
    return v4;
}

// Generated as internal constructor for term x64_psubusw.
pub fn constructor_x64_psubusw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubusw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2568.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubusw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2566.
    return v4;
}

// Generated as internal constructor for term x64_pavgb.
pub fn constructor_x64_pavgb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpavgb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2576.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pavgb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2574.
    return v4;
}

// Generated as internal constructor for term x64_pavgw.
pub fn constructor_x64_pavgw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpavgw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2584.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pavgw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2582.
    return v4;
}

// Generated as internal constructor for term x64_pand.
pub fn constructor_x64_pand<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpand, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2592.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pand, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2590.
    return v4;
}

// Generated as internal constructor for term x64_andps.
pub fn constructor_x64_andps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vandps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2600.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Andps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2598.
    return v4;
}

// Generated as internal constructor for term x64_andpd.
pub fn constructor_x64_andpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vandpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2608.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Andpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2606.
    return v4;
}

// Generated as internal constructor for term x64_por.
pub fn constructor_x64_por<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpor, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2616.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Por, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2614.
    return v4;
}

// Generated as internal constructor for term x64_orps.
pub fn constructor_x64_orps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vorps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2624.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Orps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2622.
    return v4;
}

// Generated as internal constructor for term x64_orpd.
pub fn constructor_x64_orpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vorpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2632.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Orpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2630.
    return v4;
}

// Generated as internal constructor for term x64_pxor.
pub fn constructor_x64_pxor<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpxor, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2640.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pxor, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2638.
    return v4;
}

// Generated as internal constructor for term x64_xorps.
pub fn constructor_x64_xorps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vxorps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2648.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Xorps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2646.
    return v4;
}

// Generated as internal constructor for term x64_xorpd.
pub fn constructor_x64_xorpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vxorpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2656.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Xorpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2654.
    return v4;
}

// Generated as internal constructor for term x64_pmullw.
pub fn constructor_x64_pmullw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmullw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2664.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmullw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2662.
    return v4;
}

// Generated as internal constructor for term x64_pmulld.
pub fn constructor_x64_pmulld<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmulld, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2672.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmulld, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2670.
    return v4;
}

// Generated as internal constructor for term x64_pmulhw.
pub fn constructor_x64_pmulhw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmulhw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2680.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmulhw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2678.
    return v4;
}

// Generated as internal constructor for term x64_pmulhrsw.
pub fn constructor_x64_pmulhrsw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmulhrsw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2688.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmulhrsw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2686.
    return v4;
}

// Generated as internal constructor for term x64_pmulhuw.
pub fn constructor_x64_pmulhuw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmulhuw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2696.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmulhuw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2694.
    return v4;
}

// Generated as internal constructor for term x64_pmuldq.
pub fn constructor_x64_pmuldq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmuldq, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2704.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmuldq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2702.
    return v4;
}

// Generated as internal constructor for term x64_pmuludq.
pub fn constructor_x64_pmuludq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmuludq, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2712.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmuludq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2710.
    return v4;
}

// Generated as internal constructor for term x64_punpckhwd.
pub fn constructor_x64_punpckhwd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpckhwd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2720.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpckhwd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2718.
    return v4;
}

// Generated as internal constructor for term x64_punpcklwd.
pub fn constructor_x64_punpcklwd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpcklwd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2728.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpcklwd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2726.
    return v4;
}

// Generated as internal constructor for term x64_unpcklps.
pub fn constructor_x64_unpcklps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vunpcklps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2736.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Unpcklps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2734.
    return v4;
}

// Generated as internal constructor for term x64_andnps.
pub fn constructor_x64_andnps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vandnps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2744.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Andnps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2742.
    return v4;
}

// Generated as internal constructor for term x64_andnpd.
pub fn constructor_x64_andnpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vandnpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2752.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Andnpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2750.
    return v4;
}

// Generated as internal constructor for term x64_pandn.
pub fn constructor_x64_pandn<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpandn, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2760.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pandn, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2758.
    return v4;
}

// Generated as internal constructor for term x64_addss.
pub fn constructor_x64_addss<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::has_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vaddss, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 2768.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Addss, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2766.
    return v3;
}

// Generated as internal constructor for term x64_addsd.
pub fn constructor_x64_addsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::has_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vaddsd, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 2776.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Addsd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2774.
    return v3;
}

// Generated as internal constructor for term x64_addps.
pub fn constructor_x64_addps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vaddps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2784.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Addps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2782.
    return v4;
}

// Generated as internal constructor for term x64_addpd.
pub fn constructor_x64_addpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vaddpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2792.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Addpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2790.
    return v4;
}

// Generated as internal constructor for term x64_subss.
pub fn constructor_x64_subss<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::has_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vsubss, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 2800.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Subss, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2798.
    return v3;
}

// Generated as internal constructor for term x64_subsd.
pub fn constructor_x64_subsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::has_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vsubsd, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 2808.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Subsd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2806.
    return v3;
}

// Generated as internal constructor for term x64_subps.
pub fn constructor_x64_subps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vsubps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2816.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Subps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2814.
    return v4;
}

// Generated as internal constructor for term x64_subpd.
pub fn constructor_x64_subpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vsubpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2824.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Subpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2822.
    return v4;
}

// Generated as internal constructor for term x64_mulss.
pub fn constructor_x64_mulss<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::has_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmulss, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 2832.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Mulss, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2830.
    return v3;
}

// Generated as internal constructor for term x64_mulsd.
pub fn constructor_x64_mulsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::has_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmulsd, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 2840.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Mulsd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2838.
    return v3;
}

// Generated as internal constructor for term x64_mulps.
pub fn constructor_x64_mulps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmulps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2848.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Mulps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2846.
    return v4;
}

// Generated as internal constructor for term x64_mulpd.
pub fn constructor_x64_mulpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmulpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2856.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Mulpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2854.
    return v4;
}

// Generated as internal constructor for term x64_divss.
pub fn constructor_x64_divss<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::has_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vdivss, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 2864.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Divss, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2862.
    return v3;
}

// Generated as internal constructor for term x64_divsd.
pub fn constructor_x64_divsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::has_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vdivsd, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 2872.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Divsd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2870.
    return v3;
}

// Generated as internal constructor for term x64_divps.
pub fn constructor_x64_divps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vdivps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2880.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Divps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2878.
    return v4;
}

// Generated as internal constructor for term x64_divpd.
pub fn constructor_x64_divpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vdivpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2888.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Divpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2886.
    return v4;
}

// Generated as internal constructor for term xmm_rm_r_blend.
pub fn constructor_xmm_rm_r_blend<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &XmmMemAligned,
    arg3: Xmm,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::XmmRmRBlend {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        mask: arg3,
        dst: v4,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 2894.
    return v7;
}

// Generated as internal constructor for term xmm_rmr_blend_vex.
pub fn constructor_xmm_rmr_blend_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: &XmmMem,
    arg3: Xmm,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::XmmRmRBlendVex {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        mask: arg3,
        dst: v4,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 2901.
    return v7;
}

// Generated as internal constructor for term xmm_unary_rm_r_vex.
pub fn constructor_xmm_unary_rm_r_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v3 = MInst::XmmUnaryRmRVex {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 2908.
    return v5;
}

// Generated as internal constructor for term xmm_unary_rm_r_imm_vex.
pub fn constructor_xmm_unary_rm_r_imm_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: &XmmMem,
    arg2: u8,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmUnaryRmRImmVex {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v3,
        imm: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2915.
    return v6;
}

// Generated as internal constructor for term x64_blend.
pub fn constructor_x64_blend<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
    arg3: Xmm,
) -> Xmm {
    match arg0 {
        F32X4 => {
            let v4 = constructor_x64_blendvps(ctx, arg3, arg2, arg1);
            // Rule at src/isa/x64/inst.isle line 2922.
            return v4;
        }
        F64X2 => {
            let v5 = constructor_x64_blendvpd(ctx, arg3, arg2, arg1);
            // Rule at src/isa/x64/inst.isle line 2923.
            return v5;
        }
        _ => {}
    }
    let v6 = C::multi_lane(ctx, arg0);
    if let Some(v7) = v6 {
        let v10 = constructor_x64_pblendvb(ctx, arg3, arg2, arg1);
        // Rule at src/isa/x64/inst.isle line 2924.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_blend", "src/isa/x64/inst.isle line 2921"
    )
}

// Generated as internal constructor for term x64_blendvpd.
pub fn constructor_x64_blendvpd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: Xmm,
) -> Xmm {
    let v6 = C::has_avx(ctx);
    if v6 == true {
        let v8 = constructor_xmm_rmr_blend_vex(ctx, &AvxOpcode::Vblendvpd, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 2930.
        return v8;
    }
    let v4 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v5 = constructor_xmm_rm_r_blend(ctx, &SseOpcode::Blendvpd, arg0, v4, arg2);
    // Rule at src/isa/x64/inst.isle line 2928.
    return v5;
}

// Generated as internal constructor for term x64_blendvps.
pub fn constructor_x64_blendvps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: Xmm,
) -> Xmm {
    let v6 = C::has_avx(ctx);
    if v6 == true {
        let v8 = constructor_xmm_rmr_blend_vex(ctx, &AvxOpcode::Vblendvps, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 2938.
        return v8;
    }
    let v4 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v5 = constructor_xmm_rm_r_blend(ctx, &SseOpcode::Blendvps, arg0, v4, arg2);
    // Rule at src/isa/x64/inst.isle line 2936.
    return v5;
}

// Generated as internal constructor for term x64_pblendvb.
pub fn constructor_x64_pblendvb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: Xmm,
) -> Xmm {
    let v6 = C::has_avx(ctx);
    if v6 == true {
        let v8 = constructor_xmm_rmr_blend_vex(ctx, &AvxOpcode::Vpblendvb, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 2946.
        return v8;
    }
    let v4 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v5 = constructor_xmm_rm_r_blend(ctx, &SseOpcode::Pblendvb, arg0, v4, arg2);
    // Rule at src/isa/x64/inst.isle line 2944.
    return v5;
}

// Generated as internal constructor for term x64_movsd_regmove.
pub fn constructor_x64_movsd_regmove<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Movsd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2952.
    return v3;
}

// Generated as internal constructor for term x64_movlhps.
pub fn constructor_x64_movlhps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmovlhps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2959.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Movlhps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2957.
    return v4;
}

// Generated as internal constructor for term x64_pmaxs.
pub fn constructor_x64_pmaxs<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm, arg2: &XmmMem) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pmaxsb(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 2965.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pmaxsw(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 2966.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pmaxsd(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 2967.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_pmaxs", "src/isa/x64/inst.isle line 2964"
    )
}

// Generated as internal constructor for term x64_pmaxsb.
pub fn constructor_x64_pmaxsb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaxsb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2971.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaxsb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2970.
    return v4;
}

// Generated as internal constructor for term x64_pmaxsw.
pub fn constructor_x64_pmaxsw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaxsw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2976.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaxsw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2975.
    return v4;
}

// Generated as internal constructor for term x64_pmaxsd.
pub fn constructor_x64_pmaxsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaxsd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2981.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaxsd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2980.
    return v4;
}

// Generated as internal constructor for term x64_pmins.
pub fn constructor_x64_pmins<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm, arg2: &XmmMem) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pminsb(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 2987.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pminsw(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 2988.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pminsd(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 2989.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_pmins", "src/isa/x64/inst.isle line 2986"
    )
}

// Generated as internal constructor for term x64_pminsb.
pub fn constructor_x64_pminsb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpminsb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2993.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pminsb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2992.
    return v4;
}

// Generated as internal constructor for term x64_pminsw.
pub fn constructor_x64_pminsw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpminsw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 2998.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pminsw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2997.
    return v4;
}

// Generated as internal constructor for term x64_pminsd.
pub fn constructor_x64_pminsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpminsd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3003.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pminsd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3002.
    return v4;
}

// Generated as internal constructor for term x64_pmaxu.
pub fn constructor_x64_pmaxu<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm, arg2: &XmmMem) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pmaxub(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3009.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pmaxuw(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3010.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pmaxud(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3011.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_pmaxu", "src/isa/x64/inst.isle line 3008"
    )
}

// Generated as internal constructor for term x64_pmaxub.
pub fn constructor_x64_pmaxub<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaxub, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3015.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaxub, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3014.
    return v4;
}

// Generated as internal constructor for term x64_pmaxuw.
pub fn constructor_x64_pmaxuw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaxuw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3020.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaxuw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3019.
    return v4;
}

// Generated as internal constructor for term x64_pmaxud.
pub fn constructor_x64_pmaxud<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaxud, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3025.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaxud, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3024.
    return v4;
}

// Generated as internal constructor for term x64_pminu.
pub fn constructor_x64_pminu<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm, arg2: &XmmMem) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pminub(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3031.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pminuw(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3032.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pminud(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3033.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_pminu", "src/isa/x64/inst.isle line 3030"
    )
}

// Generated as internal constructor for term x64_pminub.
pub fn constructor_x64_pminub<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpminub, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3037.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pminub, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3036.
    return v4;
}

// Generated as internal constructor for term x64_pminuw.
pub fn constructor_x64_pminuw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpminuw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3042.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pminuw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3041.
    return v4;
}

// Generated as internal constructor for term x64_pminud.
pub fn constructor_x64_pminud<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpminud, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3047.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pminud, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3046.
    return v4;
}

// Generated as internal constructor for term x64_punpcklbw.
pub fn constructor_x64_punpcklbw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpcklbw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3055.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpcklbw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3053.
    return v4;
}

// Generated as internal constructor for term x64_punpckhbw.
pub fn constructor_x64_punpckhbw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpckhbw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3063.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpckhbw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3061.
    return v4;
}

// Generated as internal constructor for term x64_packsswb.
pub fn constructor_x64_packsswb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpacksswb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3071.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Packsswb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3069.
    return v4;
}

// Generated as internal constructor for term x64_packssdw.
pub fn constructor_x64_packssdw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpackssdw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3079.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Packssdw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3077.
    return v4;
}

// Generated as internal constructor for term x64_packuswb.
pub fn constructor_x64_packuswb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpackuswb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3087.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Packuswb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3085.
    return v4;
}

// Generated as internal constructor for term x64_packusdw.
pub fn constructor_x64_packusdw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpackusdw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3095.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Packusdw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3093.
    return v4;
}

// Generated as internal constructor for term xmm_rm_r_imm.
pub fn constructor_xmm_rm_r_imm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Reg,
    arg2: &RegMem,
    arg3: u8,
    arg4: &OperandSize,
) -> Xmm {
    let v5 = C::temp_writable_xmm(ctx);
    let v6 = C::writable_xmm_to_reg(ctx, v5);
    let v7 = MInst::XmmRmRImm {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v6,
        imm: arg3,
        size: arg4.clone(),
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_xmm_to_xmm(ctx, v5);
    // Rule at src/isa/x64/inst.isle line 3101.
    return v9;
}

// Generated as internal constructor for term x64_palignr.
pub fn constructor_x64_palignr<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: u8,
    arg3: &OperandSize,
) -> Xmm {
    let v8 = C::has_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_rmr_imm_vex(ctx, &AvxOpcode::Vpalignr, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 3119.
        return v10;
    }
    let v5 = C::xmm_to_reg(ctx, arg0);
    let v6 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Palignr, v5, v6, arg2, arg3);
    // Rule at src/isa/x64/inst.isle line 3113.
    return v7;
}

// Generated as internal constructor for term x64_cmpp.
pub fn constructor_x64_cmpp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
    arg3: &FcmpImm,
) -> Xmm {
    match arg0 {
        F32X4 => {
            let v4 = constructor_x64_cmpps(ctx, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 3125.
            return v4;
        }
        F64X2 => {
            let v5 = constructor_x64_cmppd(ctx, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 3126.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_cmpp", "src/isa/x64/inst.isle line 3124"
    )
}

// Generated as internal constructor for term x64_cmpps.
pub fn constructor_x64_cmpps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: &FcmpImm,
) -> Xmm {
    let v9 = C::has_avx(ctx);
    if v9 == true {
        let v11 = C::encode_fcmp_imm(ctx, arg2);
        let v12 = constructor_xmm_rmr_imm_vex(ctx, &AvxOpcode::Vcmpps, arg0, arg1, v11);
        // Rule at src/isa/x64/inst.isle line 3135.
        return v12;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v6 = C::encode_fcmp_imm(ctx, arg2);
    let v8 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Cmpps, v4, v5, v6, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 3129.
    return v8;
}

// Generated as internal constructor for term x64_cmppd.
pub fn constructor_x64_cmppd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: &FcmpImm,
) -> Xmm {
    let v9 = C::has_avx(ctx);
    if v9 == true {
        let v11 = C::encode_fcmp_imm(ctx, arg2);
        let v12 = constructor_xmm_rmr_imm_vex(ctx, &AvxOpcode::Vcmppd, arg0, arg1, v11);
        // Rule at src/isa/x64/inst.isle line 3152.
        return v12;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v6 = C::encode_fcmp_imm(ctx, arg2);
    let v8 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Cmppd, v4, v5, v6, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 3146.
    return v8;
}

// Generated as internal constructor for term x64_pinsrb.
pub fn constructor_x64_pinsrb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &GprMem, arg2: u8) -> Xmm {
    let v8 = C::has_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_vex_pinsr(ctx, &AvxOpcode::Vpinsrb, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 3167.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::gpr_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Pinsrb, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 3161.
    return v7;
}

// Generated as internal constructor for term x64_pinsrw.
pub fn constructor_x64_pinsrw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &GprMem, arg2: u8) -> Xmm {
    let v8 = C::has_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_vex_pinsr(ctx, &AvxOpcode::Vpinsrw, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 3179.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::gpr_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Pinsrw, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 3173.
    return v7;
}

// Generated as internal constructor for term x64_pinsrd.
pub fn constructor_x64_pinsrd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &GprMem, arg2: u8) -> Xmm {
    let v8 = C::has_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_vex_pinsr(ctx, &AvxOpcode::Vpinsrd, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 3191.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::gpr_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Pinsrd, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 3185.
    return v7;
}

// Generated as internal constructor for term x64_pinsrq.
pub fn constructor_x64_pinsrq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &GprMem, arg2: u8) -> Xmm {
    let v8 = C::has_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_vex_pinsr(ctx, &AvxOpcode::Vpinsrq, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 3203.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::gpr_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Pinsrd, v4, v5, arg2, &OperandSize::Size64);
    // Rule at src/isa/x64/inst.isle line 3197.
    return v7;
}

// Generated as internal constructor for term xmm_vex_pinsr.
pub fn constructor_xmm_vex_pinsr<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: &GprMem,
    arg3: u8,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::XmmVexPinsr {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v4,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 3209.
    return v7;
}

// Generated as internal constructor for term xmm_unary_rm_r_imm.
pub fn constructor_xmm_unary_rm_r_imm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &XmmMemAligned,
    arg2: u8,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmUnaryRmRImm {
        op: arg0.clone(),
        src: arg1.clone(),
        imm: arg2,
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 3216.
    return v6;
}

// Generated as internal constructor for term x64_roundss.
pub fn constructor_x64_roundss<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: &RoundImm) -> Xmm {
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v4 = C::encode_round_imm(ctx, arg1);
    let v5 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Roundss, v3, v4);
    // Rule at src/isa/x64/inst.isle line 3223.
    return v5;
}

// Generated as internal constructor for term x64_roundsd.
pub fn constructor_x64_roundsd<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: &RoundImm) -> Xmm {
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v4 = C::encode_round_imm(ctx, arg1);
    let v5 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Roundsd, v3, v4);
    // Rule at src/isa/x64/inst.isle line 3228.
    return v5;
}

// Generated as internal constructor for term x64_roundps.
pub fn constructor_x64_roundps<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: &RoundImm) -> Xmm {
    let v6 = C::has_avx(ctx);
    if v6 == true {
        let v8 = C::encode_round_imm(ctx, arg1);
        let v9 = constructor_xmm_unary_rm_r_imm_vex(ctx, &AvxOpcode::Vroundps, arg0, v8);
        // Rule at src/isa/x64/inst.isle line 3235.
        return v9;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v4 = C::encode_round_imm(ctx, arg1);
    let v5 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Roundps, v3, v4);
    // Rule at src/isa/x64/inst.isle line 3233.
    return v5;
}

// Generated as internal constructor for term x64_roundpd.
pub fn constructor_x64_roundpd<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: &RoundImm) -> Xmm {
    let v6 = C::has_avx(ctx);
    if v6 == true {
        let v8 = C::encode_round_imm(ctx, arg1);
        let v9 = constructor_xmm_unary_rm_r_imm_vex(ctx, &AvxOpcode::Vroundpd, arg0, v8);
        // Rule at src/isa/x64/inst.isle line 3243.
        return v9;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v4 = C::encode_round_imm(ctx, arg1);
    let v5 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Roundpd, v3, v4);
    // Rule at src/isa/x64/inst.isle line 3241.
    return v5;
}

// Generated as internal constructor for term x64_pmaddwd.
pub fn constructor_x64_pmaddwd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaddwd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3251.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaddwd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3249.
    return v4;
}

// Generated as internal constructor for term x64_pmaddubsw.
pub fn constructor_x64_pmaddubsw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaddubsw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3258.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaddubsw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3256.
    return v4;
}

// Generated as internal constructor for term x64_insertps.
pub fn constructor_x64_insertps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: u8,
) -> Xmm {
    let v8 = C::has_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_rmr_imm_vex(ctx, &AvxOpcode::Vinsertps, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 3270.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(
        ctx,
        &SseOpcode::Insertps,
        v4,
        v5,
        arg2,
        &OperandSize::Size32,
    );
    // Rule at src/isa/x64/inst.isle line 3264.
    return v7;
}

// Generated as internal constructor for term x64_pshufd.
pub fn constructor_x64_pshufd<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: u8) -> Xmm {
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v4 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Pshufd, v3, arg1);
    // Rule at src/isa/x64/inst.isle line 3276.
    return v4;
}

// Generated as internal constructor for term x64_pshufb.
pub fn constructor_x64_pshufb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpshufb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3283.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pshufb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3281.
    return v4;
}

// Generated as internal constructor for term x64_shufps.
pub fn constructor_x64_shufps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem, arg2: u8) -> Xmm {
    let v8 = C::has_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_rmr_imm_vex(ctx, &AvxOpcode::Vshufps, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 3295.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Shufps, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 3289.
    return v7;
}

// Generated as internal constructor for term xmm_unary_rm_r.
pub fn constructor_xmm_unary_rm_r<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &XmmMemAligned,
) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v3 = MInst::XmmUnaryRmR {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 3301.
    return v5;
}

// Generated as internal constructor for term xmm_unary_rm_r_unaligned.
pub fn constructor_xmm_unary_rm_r_unaligned<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v3 = MInst::XmmUnaryRmRUnaligned {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 3308.
    return v5;
}

// Generated as internal constructor for term x64_pabsb.
pub fn constructor_x64_pabsb<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::has_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpabsb, arg0);
        // Rule at src/isa/x64/inst.isle line 3317.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Pabsb, v2);
    // Rule at src/isa/x64/inst.isle line 3315.
    return v3;
}

// Generated as internal constructor for term x64_pabsw.
pub fn constructor_x64_pabsw<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::has_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpabsw, arg0);
        // Rule at src/isa/x64/inst.isle line 3325.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Pabsw, v2);
    // Rule at src/isa/x64/inst.isle line 3323.
    return v3;
}

// Generated as internal constructor for term x64_pabsd.
pub fn constructor_x64_pabsd<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::has_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpabsd, arg0);
        // Rule at src/isa/x64/inst.isle line 3333.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Pabsd, v2);
    // Rule at src/isa/x64/inst.isle line 3331.
    return v3;
}

// Generated as internal constructor for term xmm_unary_rm_r_evex.
pub fn constructor_xmm_unary_rm_r_evex<C: Context>(
    ctx: &mut C,
    arg0: &Avx512Opcode,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v3 = MInst::XmmUnaryRmREvex {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 3339.
    return v5;
}

// Generated as internal constructor for term x64_vcvtudq2ps.
pub fn constructor_x64_vcvtudq2ps<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_evex(ctx, &Avx512Opcode::Vcvtudq2ps, arg0);
    // Rule at src/isa/x64/inst.isle line 3346.
    return v2;
}

// Generated as internal constructor for term x64_vpabsq.
pub fn constructor_x64_vpabsq<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_evex(ctx, &Avx512Opcode::Vpabsq, arg0);
    // Rule at src/isa/x64/inst.isle line 3351.
    return v2;
}

// Generated as internal constructor for term x64_vpopcntb.
pub fn constructor_x64_vpopcntb<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_evex(ctx, &Avx512Opcode::Vpopcntb, arg0);
    // Rule at src/isa/x64/inst.isle line 3356.
    return v2;
}

// Generated as internal constructor for term xmm_rm_r_evex.
pub fn constructor_xmm_rm_r_evex<C: Context>(
    ctx: &mut C,
    arg0: &Avx512Opcode,
    arg1: &XmmMem,
    arg2: Xmm,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmRmREvex {
        op: arg0.clone(),
        src1: arg1.clone(),
        src2: arg2,
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 3361.
    return v6;
}

// Generated as internal constructor for term x64_vpmullq.
pub fn constructor_x64_vpmullq<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: Xmm) -> Xmm {
    let v3 = constructor_xmm_rm_r_evex(ctx, &Avx512Opcode::Vpmullq, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3373.
    return v3;
}

// Generated as internal constructor for term x64_vpermi2b.
pub fn constructor_x64_vpermi2b<C: Context>(ctx: &mut C, arg0: Xmm, arg1: Xmm, arg2: Xmm) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v5 = &C::xmm_to_xmm_mem(ctx, arg0);
    let v6 = MInst::XmmRmREvex3 {
        op: Avx512Opcode::Vpermi2b,
        src1: v5.clone(),
        src2: arg1,
        src3: arg2,
        dst: v3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 3382.
    return v8;
}

// Generated as internal constructor for term mul_hi.
pub fn constructor_mul_hi<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: bool,
    arg2: Gpr,
    arg3: &GprMem,
) -> ValueRegs {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = &C::raw_operand_size_of_type(ctx, arg0);
    let v7 = MInst::MulHi {
        size: v6.clone(),
        signed: arg1,
        src1: arg2,
        src2: arg3.clone(),
        dst_lo: v4,
        dst_hi: v5,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_gpr_to_gpr(ctx, v4);
    let v10 = C::writable_gpr_to_gpr(ctx, v5);
    let v11 = constructor_value_gprs(ctx, v9, v10);
    // Rule at src/isa/x64/inst.isle line 3395.
    return v11;
}

// Generated as internal constructor for term mulhi_u.
pub fn constructor_mulhi_u<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMem,
) -> ValueRegs {
    let v4 = constructor_mul_hi(ctx, arg0, false, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 3410.
    return v4;
}

// Generated as internal constructor for term xmm_rmi_xmm.
pub fn constructor_xmm_rmi_xmm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &XmmMemAlignedImm,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmRmiReg {
        opcode: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 3415.
    return v6;
}

// Generated as internal constructor for term x64_psllw.
pub fn constructor_x64_psllw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsllw, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 3427.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psllw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3425.
    return v4;
}

// Generated as internal constructor for term x64_pslld.
pub fn constructor_x64_pslld<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpslld, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 3435.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Pslld, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3433.
    return v4;
}

// Generated as internal constructor for term x64_psllq.
pub fn constructor_x64_psllq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsllq, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 3443.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psllq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3441.
    return v4;
}

// Generated as internal constructor for term x64_psrlw.
pub fn constructor_x64_psrlw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsrlw, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 3451.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psrlw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3449.
    return v4;
}

// Generated as internal constructor for term x64_psrld.
pub fn constructor_x64_psrld<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsrld, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 3459.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psrld, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3457.
    return v4;
}

// Generated as internal constructor for term x64_psrlq.
pub fn constructor_x64_psrlq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsrlq, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 3467.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psrlq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3465.
    return v4;
}

// Generated as internal constructor for term x64_psraw.
pub fn constructor_x64_psraw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsraw, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 3475.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psraw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3473.
    return v4;
}

// Generated as internal constructor for term x64_psrad.
pub fn constructor_x64_psrad<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsrad, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 3483.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psrad, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3481.
    return v4;
}

// Generated as internal constructor for term x64_pextrb.
pub fn constructor_x64_pextrb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: u8) -> Gpr {
    let v3 = constructor_xmm_to_gpr_imm(ctx, &SseOpcode::Pextrb, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3489.
    return v3;
}

// Generated as internal constructor for term x64_pextrw.
pub fn constructor_x64_pextrw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: u8) -> Gpr {
    let v3 = constructor_xmm_to_gpr_imm(ctx, &SseOpcode::Pextrw, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3494.
    return v3;
}

// Generated as internal constructor for term x64_pextrd.
pub fn constructor_x64_pextrd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: u8) -> Gpr {
    let v3 = constructor_xmm_to_gpr_imm(ctx, &SseOpcode::Pextrd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3499.
    return v3;
}

// Generated as internal constructor for term x64_pextrq.
pub fn constructor_x64_pextrq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: u8) -> Gpr {
    let v3 = constructor_xmm_to_gpr_imm(ctx, &SseOpcode::Pextrq, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3504.
    return v3;
}

// Generated as internal constructor for term xmm_to_gpr.
pub fn constructor_xmm_to_gpr<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &OperandSize,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = MInst::XmmToGpr {
        op: arg0.clone(),
        src: arg1,
        dst: v3,
        dst_size: arg2.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 3509.
    return v6;
}

// Generated as internal constructor for term xmm_to_gpr_imm.
pub fn constructor_xmm_to_gpr_imm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: u8,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = MInst::XmmToGprImm {
        op: arg0.clone(),
        src: arg1,
        dst: v3,
        imm: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 3516.
    return v6;
}

// Generated as internal constructor for term x64_pmovmskb.
pub fn constructor_x64_pmovmskb<C: Context>(ctx: &mut C, arg0: &OperandSize, arg1: Xmm) -> Gpr {
    let v3 = constructor_xmm_to_gpr(ctx, &SseOpcode::Pmovmskb, arg1, arg0);
    // Rule at src/isa/x64/inst.isle line 3523.
    return v3;
}

// Generated as internal constructor for term x64_movmskps.
pub fn constructor_x64_movmskps<C: Context>(ctx: &mut C, arg0: &OperandSize, arg1: Xmm) -> Gpr {
    let v3 = constructor_xmm_to_gpr(ctx, &SseOpcode::Movmskps, arg1, arg0);
    // Rule at src/isa/x64/inst.isle line 3528.
    return v3;
}

// Generated as internal constructor for term x64_movmskpd.
pub fn constructor_x64_movmskpd<C: Context>(ctx: &mut C, arg0: &OperandSize, arg1: Xmm) -> Gpr {
    let v3 = constructor_xmm_to_gpr(ctx, &SseOpcode::Movmskpd, arg1, arg0);
    // Rule at src/isa/x64/inst.isle line 3533.
    return v3;
}

// Generated as internal constructor for term gpr_to_xmm.
pub fn constructor_gpr_to_xmm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &GprMem,
    arg2: &OperandSize,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::GprToXmm {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v3,
        src_size: arg2.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 3538.
    return v6;
}

// Generated as internal constructor for term x64_not.
pub fn constructor_x64_not<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = MInst::Not {
        size: v3.clone(),
        src: arg1,
        dst: v2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 3545.
    return v6;
}

// Generated as internal constructor for term x64_neg.
pub fn constructor_x64_neg<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::raw_operand_size_of_type(ctx, arg0);
    let v4 = MInst::Neg {
        size: v3.clone(),
        src: arg1,
        dst: v2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 3553.
    return v6;
}

// Generated as internal constructor for term x64_neg_paired.
pub fn constructor_x64_neg_paired<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> ProducesFlags {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::raw_operand_size_of_type(ctx, arg0);
    let v5 = constructor_writable_gpr_to_r_reg(ctx, v2);
    let v4 = MInst::Neg {
        size: v3.clone(),
        src: arg1,
        dst: v2,
    };
    let v6 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v4,
        result: v5,
    };
    // Rule at src/isa/x64/inst.isle line 3561.
    return v6;
}

// Generated as internal constructor for term x64_lea.
pub fn constructor_x64_lea<C: Context>(ctx: &mut C, arg0: &SyntheticAmode) -> Gpr {
    let v1 = C::temp_writable_gpr(ctx);
    let v2 = MInst::LoadEffectiveAddress {
        addr: arg0.clone(),
        dst: v1,
    };
    let v3 = C::emit(ctx, &v2);
    let v4 = C::writable_gpr_to_gpr(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 3568.
    return v4;
}

// Generated as internal constructor for term x64_ud2.
pub fn constructor_x64_ud2<C: Context>(ctx: &mut C, arg0: &TrapCode) -> SideEffectNoResult {
    let v1 = MInst::Ud2 {
        trap_code: arg0.clone(),
    };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/x64/inst.isle line 3575.
    return v2;
}

// Generated as internal constructor for term x64_hlt.
pub fn constructor_x64_hlt<C: Context>(ctx: &mut C) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst { inst: MInst::Hlt };
    // Rule at src/isa/x64/inst.isle line 3580.
    return v1;
}

// Generated as internal constructor for term x64_lzcnt.
pub fn constructor_x64_lzcnt<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
    let v6 = MInst::UnaryRmR {
        size: v3.clone(),
        op: UnaryRmROpcode::Lzcnt,
        src: v5.clone(),
        dst: v2,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 3585.
    return v8;
}

// Generated as internal constructor for term x64_tzcnt.
pub fn constructor_x64_tzcnt<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
    let v6 = MInst::UnaryRmR {
        size: v3.clone(),
        op: UnaryRmROpcode::Tzcnt,
        src: v5.clone(),
        dst: v2,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 3593.
    return v8;
}

// Generated as internal constructor for term x64_bsr.
pub fn constructor_x64_bsr<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> ProducesFlags {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v2);
    let v6 = MInst::UnaryRmR {
        size: v3.clone(),
        op: UnaryRmROpcode::Bsr,
        src: v5.clone(),
        dst: v2,
    };
    let v8 = ProducesFlags::ProducesFlagsReturnsReg {
        inst: v6,
        result: v7,
    };
    // Rule at src/isa/x64/inst.isle line 3601.
    return v8;
}

// Generated as internal constructor for term bsr_or_else.
pub fn constructor_bsr_or_else<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: Gpr) -> Gpr {
    let v3 = &constructor_x64_bsr(ctx, arg0, arg1);
    let v4 = constructor_produces_flags_get_reg(ctx, v3);
    let v5 = C::gpr_new(ctx, v4);
    let v7 = &C::gpr_to_gpr_mem(ctx, arg2);
    let v8 = &constructor_cmove(ctx, arg0, &CC::Z, v7, v5);
    let v9 = &constructor_produces_flags_ignore(ctx, v3);
    let v10 = constructor_with_flags_reg(ctx, v9, v8);
    let v11 = C::gpr_new(ctx, v10);
    // Rule at src/isa/x64/inst.isle line 3610.
    return v11;
}

// Generated as internal constructor for term x64_bsf.
pub fn constructor_x64_bsf<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> ProducesFlags {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v2);
    let v6 = MInst::UnaryRmR {
        size: v3.clone(),
        op: UnaryRmROpcode::Bsf,
        src: v5.clone(),
        dst: v2,
    };
    let v8 = ProducesFlags::ProducesFlagsReturnsReg {
        inst: v6,
        result: v7,
    };
    // Rule at src/isa/x64/inst.isle line 3621.
    return v8;
}

// Generated as internal constructor for term bsf_or_else.
pub fn constructor_bsf_or_else<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: Gpr) -> Gpr {
    let v3 = &constructor_x64_bsf(ctx, arg0, arg1);
    let v4 = constructor_produces_flags_get_reg(ctx, v3);
    let v5 = C::gpr_new(ctx, v4);
    let v7 = &C::gpr_to_gpr_mem(ctx, arg2);
    let v8 = &constructor_cmove(ctx, arg0, &CC::Z, v7, v5);
    let v9 = &constructor_produces_flags_ignore(ctx, v3);
    let v10 = constructor_with_flags_reg(ctx, v9, v8);
    let v11 = C::gpr_new(ctx, v10);
    // Rule at src/isa/x64/inst.isle line 3630.
    return v11;
}

// Generated as internal constructor for term x64_popcnt.
pub fn constructor_x64_popcnt<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
    let v6 = MInst::UnaryRmR {
        size: v3.clone(),
        op: UnaryRmROpcode::Popcnt,
        src: v5.clone(),
        dst: v2,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 3641.
    return v8;
}

// Generated as internal constructor for term xmm_min_max_seq.
pub fn constructor_xmm_min_max_seq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: bool,
    arg2: Xmm,
    arg3: Xmm,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v6 = MInst::XmmMinMaxSeq {
        size: v5.clone(),
        is_min: arg1,
        lhs: arg2,
        rhs: arg3,
        dst: v4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 3649.
    return v8;
}

// Generated as internal constructor for term x64_minss.
pub fn constructor_x64_minss<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::has_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vminss, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 3659.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Minss, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3657.
    return v3;
}

// Generated as internal constructor for term x64_minsd.
pub fn constructor_x64_minsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::has_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vminsd, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 3667.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Minsd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3665.
    return v3;
}

// Generated as internal constructor for term x64_minps.
pub fn constructor_x64_minps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vminps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3675.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Minps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3673.
    return v4;
}

// Generated as internal constructor for term x64_minpd.
pub fn constructor_x64_minpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vminpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3683.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Minpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3681.
    return v4;
}

// Generated as internal constructor for term x64_maxss.
pub fn constructor_x64_maxss<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::has_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmaxss, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 3691.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Maxss, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3689.
    return v3;
}

// Generated as internal constructor for term x64_maxsd.
pub fn constructor_x64_maxsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::has_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmaxsd, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 3699.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Maxsd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3697.
    return v3;
}

// Generated as internal constructor for term x64_maxps.
pub fn constructor_x64_maxps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmaxps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3707.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Maxps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3705.
    return v4;
}

// Generated as internal constructor for term x64_maxpd.
pub fn constructor_x64_maxpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmaxpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3715.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Maxpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3713.
    return v4;
}

// Generated as internal constructor for term xmm_rmir_vex.
pub fn constructor_xmm_rmir_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: &XmmMemImm,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmRmiRVex {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 3722.
    return v6;
}

// Generated as internal constructor for term xmm_rmr_imm_vex.
pub fn constructor_xmm_rmr_imm_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: &XmmMem,
    arg3: u8,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::XmmRmRImmVex {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v4,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 3729.
    return v7;
}

// Generated as internal constructor for term xmm_rmr_vex3.
pub fn constructor_xmm_rmr_vex3<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::XmmRmRVex3 {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2,
        src3: arg3.clone(),
        dst: v4,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 3736.
    return v7;
}

// Generated as internal constructor for term x64_vfmadd213.
pub fn constructor_x64_vfmadd213<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v5 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd213ss, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 3743.
            return v5;
        }
        F64 => {
            let v7 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd213sd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 3744.
            return v7;
        }
        F32X4 => {
            let v9 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd213ps, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 3745.
            return v9;
        }
        F64X2 => {
            let v11 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd213pd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 3746.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_vfmadd213", "src/isa/x64/inst.isle line 3742"
    )
}

// Generated as internal constructor for term x64_vfmadd132.
pub fn constructor_x64_vfmadd132<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v5 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd132ss, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 3750.
            return v5;
        }
        F64 => {
            let v7 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd132sd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 3751.
            return v7;
        }
        F32X4 => {
            let v9 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd132ps, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 3752.
            return v9;
        }
        F64X2 => {
            let v11 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd132pd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 3753.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_vfmadd132", "src/isa/x64/inst.isle line 3749"
    )
}

// Generated as internal constructor for term x64_vfnmadd213.
pub fn constructor_x64_vfnmadd213<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v5 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd213ss, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 3757.
            return v5;
        }
        F64 => {
            let v7 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd213sd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 3758.
            return v7;
        }
        F32X4 => {
            let v9 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd213ps, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 3759.
            return v9;
        }
        F64X2 => {
            let v11 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd213pd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 3760.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_vfnmadd213", "src/isa/x64/inst.isle line 3756"
    )
}

// Generated as internal constructor for term x64_vfnmadd132.
pub fn constructor_x64_vfnmadd132<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v5 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd132ss, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 3764.
            return v5;
        }
        F64 => {
            let v7 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd132sd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 3765.
            return v7;
        }
        F32X4 => {
            let v9 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd132ps, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 3766.
            return v9;
        }
        F64X2 => {
            let v11 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd132pd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 3767.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_vfnmadd132", "src/isa/x64/inst.isle line 3763"
    )
}

// Generated as internal constructor for term x64_sqrtss.
pub fn constructor_x64_sqrtss<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Sqrtss, arg0);
    // Rule at src/isa/x64/inst.isle line 3771.
    return v2;
}

// Generated as internal constructor for term x64_sqrtsd.
pub fn constructor_x64_sqrtsd<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Sqrtsd, arg0);
    // Rule at src/isa/x64/inst.isle line 3775.
    return v2;
}

// Generated as internal constructor for term x64_sqrtps.
pub fn constructor_x64_sqrtps<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::has_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vsqrtps, arg0);
        // Rule at src/isa/x64/inst.isle line 3780.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Sqrtps, v2);
    // Rule at src/isa/x64/inst.isle line 3779.
    return v3;
}

// Generated as internal constructor for term x64_sqrtpd.
pub fn constructor_x64_sqrtpd<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::has_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vsqrtpd, arg0);
        // Rule at src/isa/x64/inst.isle line 3787.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Sqrtpd, v2);
    // Rule at src/isa/x64/inst.isle line 3786.
    return v3;
}

// Generated as internal constructor for term x64_cvtss2sd.
pub fn constructor_x64_cvtss2sd<C: Context>(ctx: &mut C, arg0: Xmm) -> Xmm {
    let v2 = &constructor_xmm_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvtss2sd, v2);
    // Rule at src/isa/x64/inst.isle line 3793.
    return v3;
}

// Generated as internal constructor for term x64_cvtsd2ss.
pub fn constructor_x64_cvtsd2ss<C: Context>(ctx: &mut C, arg0: Xmm) -> Xmm {
    let v2 = &constructor_xmm_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvtsd2ss, v2);
    // Rule at src/isa/x64/inst.isle line 3797.
    return v3;
}

// Generated as internal constructor for term x64_cvtdq2ps.
pub fn constructor_x64_cvtdq2ps<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::has_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vcvtdq2ps, arg0);
        // Rule at src/isa/x64/inst.isle line 3802.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvtdq2ps, v2);
    // Rule at src/isa/x64/inst.isle line 3801.
    return v3;
}

// Generated as internal constructor for term x64_cvtps2pd.
pub fn constructor_x64_cvtps2pd<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::has_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vcvtps2pd, arg0);
        // Rule at src/isa/x64/inst.isle line 3809.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvtps2pd, v2);
    // Rule at src/isa/x64/inst.isle line 3808.
    return v3;
}

// Generated as internal constructor for term x64_cvtpd2ps.
pub fn constructor_x64_cvtpd2ps<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::has_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vcvtpd2ps, arg0);
        // Rule at src/isa/x64/inst.isle line 3816.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvtpd2ps, v2);
    // Rule at src/isa/x64/inst.isle line 3815.
    return v3;
}

// Generated as internal constructor for term x64_cvtdq2pd.
pub fn constructor_x64_cvtdq2pd<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::has_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vcvtdq2pd, arg0);
        // Rule at src/isa/x64/inst.isle line 3823.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvtdq2pd, v2);
    // Rule at src/isa/x64/inst.isle line 3822.
    return v3;
}

// Generated as internal constructor for term x64_cvtsi2ss.
pub fn constructor_x64_cvtsi2ss<C: Context>(ctx: &mut C, arg0: Type, arg1: &GprMem) -> Xmm {
    let v3 = &C::raw_operand_size_of_type(ctx, arg0);
    let v4 = constructor_gpr_to_xmm(ctx, &SseOpcode::Cvtsi2ss, arg1, v3);
    // Rule at src/isa/x64/inst.isle line 3829.
    return v4;
}

// Generated as internal constructor for term x64_cvtsi2sd.
pub fn constructor_x64_cvtsi2sd<C: Context>(ctx: &mut C, arg0: Type, arg1: &GprMem) -> Xmm {
    let v3 = &C::raw_operand_size_of_type(ctx, arg0);
    let v4 = constructor_gpr_to_xmm(ctx, &SseOpcode::Cvtsi2sd, arg1, v3);
    // Rule at src/isa/x64/inst.isle line 3834.
    return v4;
}

// Generated as internal constructor for term x64_cvttps2dq.
pub fn constructor_x64_cvttps2dq<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::has_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vcvttps2dq, arg0);
        // Rule at src/isa/x64/inst.isle line 3841.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvttps2dq, v2);
    // Rule at src/isa/x64/inst.isle line 3839.
    return v3;
}

// Generated as internal constructor for term x64_cvttpd2dq.
pub fn constructor_x64_cvttpd2dq<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::has_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vcvttpd2dq, arg0);
        // Rule at src/isa/x64/inst.isle line 3849.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvttpd2dq, v2);
    // Rule at src/isa/x64/inst.isle line 3847.
    return v3;
}

// Generated as internal constructor for term cvt_u64_to_float_seq.
pub fn constructor_cvt_u64_to_float_seq<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Xmm {
    let v2 = &C::raw_operand_size_of_type(ctx, arg0);
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = MInst::CvtUint64ToFloatSeq {
        dst_size: v2.clone(),
        src: arg1,
        dst: v3,
        tmp_gpr1: v4,
        tmp_gpr2: v5,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 3854.
    return v8;
}

// Generated as internal constructor for term cvt_float_to_uint_seq.
pub fn constructor_cvt_float_to_uint_seq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: bool,
) -> Gpr {
    let v4 = &C::raw_operand_size_of_type(ctx, arg0);
    let v2 = C::value_type(ctx, arg1);
    let v5 = &C::raw_operand_size_of_type(ctx, v2);
    let v6 = C::temp_writable_gpr(ctx);
    let v7 = C::temp_writable_xmm(ctx);
    let v8 = C::temp_writable_xmm(ctx);
    let v9 = C::temp_writable_gpr(ctx);
    let v10 = constructor_put_in_xmm(ctx, arg1);
    let v11 = MInst::CvtFloatToUintSeq {
        dst_size: v4.clone(),
        src_size: v5.clone(),
        is_saturating: arg2,
        src: v10,
        dst: v6,
        tmp_gpr: v9,
        tmp_xmm: v7,
        tmp_xmm2: v8,
    };
    let v12 = C::emit(ctx, &v11);
    let v13 = C::writable_gpr_to_gpr(ctx, v6);
    // Rule at src/isa/x64/inst.isle line 3863.
    return v13;
}

// Generated as internal constructor for term cvt_float_to_sint_seq.
pub fn constructor_cvt_float_to_sint_seq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: bool,
) -> Gpr {
    let v4 = &C::raw_operand_size_of_type(ctx, arg0);
    let v2 = C::value_type(ctx, arg1);
    let v5 = &C::raw_operand_size_of_type(ctx, v2);
    let v6 = C::temp_writable_gpr(ctx);
    let v7 = C::temp_writable_xmm(ctx);
    let v8 = C::temp_writable_gpr(ctx);
    let v9 = constructor_put_in_xmm(ctx, arg1);
    let v10 = MInst::CvtFloatToSintSeq {
        dst_size: v4.clone(),
        src_size: v5.clone(),
        is_saturating: arg2,
        src: v9,
        dst: v6,
        tmp_gpr: v8,
        tmp_xmm: v7,
    };
    let v11 = C::emit(ctx, &v10);
    let v12 = C::writable_gpr_to_gpr(ctx, v6);
    // Rule at src/isa/x64/inst.isle line 3875.
    return v12;
}

// Generated as internal constructor for term x64_pcmpeq.
pub fn constructor_x64_pcmpeq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pcmpeqb(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3893.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pcmpeqw(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3894.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pcmpeqd(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3895.
            return v5;
        }
        I64X2 => {
            let v6 = constructor_x64_pcmpeqq(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3896.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_pcmpeq", "src/isa/x64/inst.isle line 3892"
    )
}

// Generated as internal constructor for term x64_pcmpeqb.
pub fn constructor_x64_pcmpeqb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpeqb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3900.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpeqb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3899.
    return v4;
}

// Generated as internal constructor for term x64_pcmpeqw.
pub fn constructor_x64_pcmpeqw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpeqw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3905.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpeqw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3904.
    return v4;
}

// Generated as internal constructor for term x64_pcmpeqd.
pub fn constructor_x64_pcmpeqd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpeqd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3910.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpeqd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3909.
    return v4;
}

// Generated as internal constructor for term x64_pcmpeqq.
pub fn constructor_x64_pcmpeqq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpeqq, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3915.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpeqq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3914.
    return v4;
}

// Generated as internal constructor for term x64_pcmpgt.
pub fn constructor_x64_pcmpgt<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pcmpgtb(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3921.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pcmpgtw(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3922.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pcmpgtd(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3923.
            return v5;
        }
        I64X2 => {
            let v6 = constructor_x64_pcmpgtq(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3924.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_pcmpgt", "src/isa/x64/inst.isle line 3920"
    )
}

// Generated as internal constructor for term x64_pcmpgtb.
pub fn constructor_x64_pcmpgtb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpgtb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3928.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpgtb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3927.
    return v4;
}

// Generated as internal constructor for term x64_pcmpgtw.
pub fn constructor_x64_pcmpgtw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpgtw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3933.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpgtw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3932.
    return v4;
}

// Generated as internal constructor for term x64_pcmpgtd.
pub fn constructor_x64_pcmpgtd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpgtd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3938.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpgtd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3937.
    return v4;
}

// Generated as internal constructor for term x64_pcmpgtq.
pub fn constructor_x64_pcmpgtq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::has_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpgtq, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3943.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpgtq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3942.
    return v4;
}

// Generated as internal constructor for term alu_rm.
pub fn constructor_alu_rm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &AluRmiROpcode,
    arg2: &Amode,
    arg3: Gpr,
) -> SideEffectNoResult {
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v5 = &C::amode_to_synthetic_amode(ctx, arg2);
    let v6 = MInst::AluRM {
        size: v4.clone(),
        op: arg1.clone(),
        src1_dst: v5.clone(),
        src2: arg3,
    };
    let v7 = SideEffectNoResult::Inst { inst: v6 };
    // Rule at src/isa/x64/inst.isle line 3949.
    return v7;
}

// Generated as internal constructor for term x64_add_mem.
pub fn constructor_x64_add_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    let v4 = &constructor_alu_rm(ctx, arg0, &AluRmiROpcode::Add, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 3954.
    return v4.clone();
}

// Generated as internal constructor for term x64_sub_mem.
pub fn constructor_x64_sub_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    let v4 = &constructor_alu_rm(ctx, arg0, &AluRmiROpcode::Sub, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 3958.
    return v4.clone();
}

// Generated as internal constructor for term x64_and_mem.
pub fn constructor_x64_and_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    let v4 = &constructor_alu_rm(ctx, arg0, &AluRmiROpcode::And, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 3962.
    return v4.clone();
}

// Generated as internal constructor for term x64_or_mem.
pub fn constructor_x64_or_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    let v4 = &constructor_alu_rm(ctx, arg0, &AluRmiROpcode::Or, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 3966.
    return v4.clone();
}

// Generated as internal constructor for term x64_xor_mem.
pub fn constructor_x64_xor_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    let v4 = &constructor_alu_rm(ctx, arg0, &AluRmiROpcode::Xor, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 3970.
    return v4.clone();
}

// Generated as internal constructor for term trap_if.
pub fn constructor_trap_if<C: Context>(ctx: &mut C, arg0: &CC, arg1: &TrapCode) -> ConsumesFlags {
    let v2 = MInst::TrapIf {
        cc: arg0.clone(),
        trap_code: arg1.clone(),
    };
    let v3 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v2 };
    // Rule at src/isa/x64/inst.isle line 3975.
    return v3;
}

// Generated as internal constructor for term trap_if_and.
pub fn constructor_trap_if_and<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: &CC,
    arg2: &TrapCode,
) -> ConsumesFlags {
    let v3 = MInst::TrapIfAnd {
        cc1: arg0.clone(),
        cc2: arg1.clone(),
        trap_code: arg2.clone(),
    };
    let v4 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/x64/inst.isle line 3980.
    return v4;
}

// Generated as internal constructor for term trap_if_or.
pub fn constructor_trap_if_or<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: &CC,
    arg2: &TrapCode,
) -> ConsumesFlags {
    let v3 = MInst::TrapIfOr {
        cc1: arg0.clone(),
        cc2: arg1.clone(),
        trap_code: arg2.clone(),
    };
    let v4 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/x64/inst.isle line 3985.
    return v4;
}

// Generated as internal constructor for term trap_if_icmp.
pub fn constructor_trap_if_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IcmpCondResult,
    arg1: &TrapCode,
) -> SideEffectNoResult {
    if let &IcmpCondResult::Condition {
        producer: ref v1,
        cc: ref v2,
    } = arg0
    {
        let v4 = &constructor_trap_if(ctx, v2, arg1);
        let v5 = &constructor_with_flags_side_effect(ctx, v1, v4);
        // Rule at src/isa/x64/inst.isle line 3989.
        return v5.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "trap_if_icmp", "src/isa/x64/inst.isle line 3988"
    )
}

// Generated as internal constructor for term trap_if_fcmp.
pub fn constructor_trap_if_fcmp<C: Context>(
    ctx: &mut C,
    arg0: &FcmpCondResult,
    arg1: &TrapCode,
) -> SideEffectNoResult {
    match arg0 {
        &FcmpCondResult::Condition {
            producer: ref v1,
            cc: ref v2,
        } => {
            let v4 = &constructor_trap_if(ctx, v2, arg1);
            let v5 = &constructor_with_flags_side_effect(ctx, v1, v4);
            // Rule at src/isa/x64/inst.isle line 3993.
            return v5.clone();
        }
        &FcmpCondResult::AndCondition {
            producer: ref v6,
            cc1: ref v7,
            cc2: ref v8,
        } => {
            let v9 = &constructor_trap_if_and(ctx, v7, v8, arg1);
            let v10 = &constructor_with_flags_side_effect(ctx, v6, v9);
            // Rule at src/isa/x64/inst.isle line 3995.
            return v10.clone();
        }
        &FcmpCondResult::OrCondition {
            producer: ref v11,
            cc1: ref v12,
            cc2: ref v13,
        } => {
            let v14 = &constructor_trap_if_or(ctx, v12, v13, arg1);
            let v15 = &constructor_with_flags_side_effect(ctx, v11, v14);
            // Rule at src/isa/x64/inst.isle line 3997.
            return v15.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "trap_if_fcmp", "src/isa/x64/inst.isle line 3992"
    )
}

// Generated as internal constructor for term jmp_known.
pub fn constructor_jmp_known<C: Context>(ctx: &mut C, arg0: MachLabel) -> SideEffectNoResult {
    let v1 = MInst::JmpKnown { dst: arg0 };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/x64/inst.isle line 4004.
    return v2;
}

// Generated as internal constructor for term jmp_if.
pub fn constructor_jmp_if<C: Context>(ctx: &mut C, arg0: &CC, arg1: MachLabel) -> ConsumesFlags {
    let v2 = MInst::JmpIf {
        cc: arg0.clone(),
        taken: arg1,
    };
    let v3 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v2 };
    // Rule at src/isa/x64/inst.isle line 4008.
    return v3;
}

// Generated as internal constructor for term jmp_cond.
pub fn constructor_jmp_cond<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: MachLabel,
    arg2: MachLabel,
) -> ConsumesFlags {
    let v3 = MInst::JmpCond {
        cc: arg0.clone(),
        taken: arg1,
        not_taken: arg2,
    };
    let v4 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/x64/inst.isle line 4013.
    return v4;
}

// Generated as internal constructor for term jmp_cond_icmp.
pub fn constructor_jmp_cond_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IcmpCondResult,
    arg1: MachLabel,
    arg2: MachLabel,
) -> SideEffectNoResult {
    if let &IcmpCondResult::Condition {
        producer: ref v1,
        cc: ref v2,
    } = arg0
    {
        let v5 = &constructor_jmp_cond(ctx, v2, arg1, arg2);
        let v6 = &constructor_with_flags_side_effect(ctx, v1, v5);
        // Rule at src/isa/x64/inst.isle line 4018.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "jmp_cond_icmp", "src/isa/x64/inst.isle line 4017"
    )
}

// Generated as internal constructor for term jmp_cond_fcmp.
pub fn constructor_jmp_cond_fcmp<C: Context>(
    ctx: &mut C,
    arg0: &FcmpCondResult,
    arg1: MachLabel,
    arg2: MachLabel,
) -> SideEffectNoResult {
    match arg0 {
        &FcmpCondResult::Condition {
            producer: ref v1,
            cc: ref v2,
        } => {
            let v5 = &constructor_jmp_cond(ctx, v2, arg1, arg2);
            let v6 = &constructor_with_flags_side_effect(ctx, v1, v5);
            // Rule at src/isa/x64/inst.isle line 4023.
            return v6.clone();
        }
        &FcmpCondResult::AndCondition {
            producer: ref v7,
            cc1: ref v8,
            cc2: ref v9,
        } => {
            let v10 = &C::cc_invert(ctx, v8);
            let v11 = &constructor_jmp_if(ctx, v10, arg2);
            let v12 = &C::cc_invert(ctx, v9);
            let v13 = &constructor_jmp_cond(ctx, v12, arg2, arg1);
            let v14 = &constructor_consumes_flags_concat(ctx, v11, v13);
            let v15 = &constructor_with_flags_side_effect(ctx, v7, v14);
            // Rule at src/isa/x64/inst.isle line 4025.
            return v15.clone();
        }
        &FcmpCondResult::OrCondition {
            producer: ref v16,
            cc1: ref v17,
            cc2: ref v18,
        } => {
            let v19 = &constructor_jmp_if(ctx, v17, arg1);
            let v20 = &constructor_jmp_cond(ctx, v18, arg1, arg2);
            let v21 = &constructor_consumes_flags_concat(ctx, v19, v20);
            let v22 = &constructor_with_flags_side_effect(ctx, v16, v21);
            // Rule at src/isa/x64/inst.isle line 4030.
            return v22.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "jmp_cond_fcmp", "src/isa/x64/inst.isle line 4022"
    )
}

// Generated as internal constructor for term jmp_table_seq.
pub fn constructor_jmp_table_seq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: MachLabel,
    arg3: &BoxVecMachLabel,
) -> SideEffectNoResult {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = C::gpr_to_reg(ctx, arg1);
    let v7 = C::writable_gpr_to_reg(ctx, v4);
    let v8 = C::writable_gpr_to_reg(ctx, v5);
    let v9 = MInst::JmpTableSeq {
        idx: v6,
        tmp1: v7,
        tmp2: v8,
        default_target: arg2,
        targets: arg3.clone(),
    };
    let v10 = SideEffectNoResult::Inst { inst: v9 };
    // Rule at src/isa/x64/inst.isle line 4050.
    return v10;
}

// Generated as internal constructor for term icmp_cond_result.
pub fn constructor_icmp_cond_result<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &CC,
) -> IcmpCondResult {
    let v2 = IcmpCondResult::Condition {
        producer: arg0.clone(),
        cc: arg1.clone(),
    };
    // Rule at src/isa/x64/inst.isle line 4088.
    return v2;
}

// Generated as internal constructor for term invert_icmp_cond_result.
pub fn constructor_invert_icmp_cond_result<C: Context>(
    ctx: &mut C,
    arg0: &IcmpCondResult,
) -> IcmpCondResult {
    if let &IcmpCondResult::Condition {
        producer: ref v1,
        cc: ref v2,
    } = arg0
    {
        let v3 = &C::cc_invert(ctx, v2);
        let v4 = &constructor_icmp_cond_result(ctx, v1, v3);
        // Rule at src/isa/x64/inst.isle line 4091.
        return v4.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "invert_icmp_cond_result", "src/isa/x64/inst.isle line 4090"
    )
}

// Generated as internal constructor for term lower_icmp_bool.
pub fn constructor_lower_icmp_bool<C: Context>(ctx: &mut C, arg0: &IcmpCondResult) -> ValueRegs {
    if let &IcmpCondResult::Condition {
        producer: ref v1,
        cc: ref v2,
    } = arg0
    {
        let v3 = &constructor_x64_setcc(ctx, v2);
        let v4 = constructor_with_flags(ctx, v1, v3);
        // Rule at src/isa/x64/inst.isle line 4096.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_icmp_bool", "src/isa/x64/inst.isle line 4095"
    )
}

// Generated as internal constructor for term select_icmp.
pub fn constructor_select_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IcmpCondResult,
    arg1: Value,
    arg2: Value,
) -> ValueRegs {
    if let &IcmpCondResult::Condition {
        producer: ref v1,
        cc: ref v2,
    } = arg0
    {
        let v4 = C::value_type(ctx, arg1);
        let v5 = &C::type_register_class(ctx, v4);
        if let Some(v6) = v5 {
            if let &RegisterClass::Gpr {
                single_register: v7,
            } = v6
            {
                if v7 == true {
                    let v9 = constructor_put_in_gpr(ctx, arg1);
                    let v10 = &C::gpr_to_gpr_mem(ctx, v9);
                    let v11 = constructor_put_in_gpr(ctx, arg2);
                    let v12 = &constructor_cmove(ctx, v4, v2, v10, v11);
                    let v13 = constructor_with_flags(ctx, v1, v12);
                    // Rule at src/isa/x64/inst.isle line 4105.
                    return v13;
                }
            }
        }
        let v14 = &constructor_cmove_from_values(ctx, v4, v2, arg1, arg2);
        let v15 = constructor_with_flags(ctx, v1, v14);
        // Rule at src/isa/x64/inst.isle line 4109.
        return v15;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "select_icmp", "src/isa/x64/inst.isle line 4100"
    )
}

// Generated as internal constructor for term emit_cmp.
pub fn constructor_emit_cmp<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
) -> IcmpCondResult {
    let v2 = C::value_type(ctx, arg1);
    if v2 == I128 {
        match arg0 {
            &IntCC::Equal => {
                let v17 = C::put_in_regs(ctx, arg1);
                let v19 = constructor_value_regs_get_gpr(ctx, v17, 0x0);
                let v20 = C::put_in_regs(ctx, arg1);
                let v22 = constructor_value_regs_get_gpr(ctx, v20, 0x1);
                let v23 = C::put_in_regs(ctx, arg2);
                let v24 = constructor_value_regs_get_gpr(ctx, v23, 0x0);
                let v25 = C::put_in_regs(ctx, arg2);
                let v26 = constructor_value_regs_get_gpr(ctx, v25, 0x1);
                let v28 = &C::gpr_to_gpr_mem_imm(ctx, v24);
                let v29 = &constructor_x64_cmp(ctx, &OperandSize::Size64, v28, v19);
                let v31 = &constructor_x64_setcc(ctx, &CC::Z);
                let v32 = constructor_with_flags_reg(ctx, v29, v31);
                let v33 = &C::gpr_to_gpr_mem_imm(ctx, v26);
                let v34 = &constructor_x64_cmp(ctx, &OperandSize::Size64, v33, v22);
                let v35 = &constructor_x64_setcc(ctx, &CC::Z);
                let v36 = constructor_with_flags_reg(ctx, v34, v35);
                let v38 = C::gpr_new(ctx, v32);
                let v39 = &constructor_reg_to_gpr_mem_imm(ctx, v36);
                let v40 = constructor_x64_and(ctx, I64, v38, v39);
                let v41 = C::gpr_to_reg(ctx, v40);
                let v43 = RegMemImm::Imm { simm32: 0x1 };
                let v44 = &C::gpr_mem_imm_new(ctx, &v43);
                let v45 = C::gpr_new(ctx, v41);
                let v46 = &constructor_x64_test(ctx, &OperandSize::Size64, v44, v45);
                let v48 = &constructor_icmp_cond_result(ctx, v46, &CC::NZ);
                // Rule at src/isa/x64/inst.isle line 4130.
                return v48.clone();
            }
            &IntCC::NotEqual => {
                let v17 = C::put_in_regs(ctx, arg1);
                let v19 = constructor_value_regs_get_gpr(ctx, v17, 0x0);
                let v20 = C::put_in_regs(ctx, arg1);
                let v22 = constructor_value_regs_get_gpr(ctx, v20, 0x1);
                let v23 = C::put_in_regs(ctx, arg2);
                let v24 = constructor_value_regs_get_gpr(ctx, v23, 0x0);
                let v25 = C::put_in_regs(ctx, arg2);
                let v26 = constructor_value_regs_get_gpr(ctx, v25, 0x1);
                let v28 = &C::gpr_to_gpr_mem_imm(ctx, v24);
                let v29 = &constructor_x64_cmp(ctx, &OperandSize::Size64, v28, v19);
                let v49 = &constructor_x64_setcc(ctx, &CC::NZ);
                let v50 = constructor_with_flags_reg(ctx, v29, v49);
                let v33 = &C::gpr_to_gpr_mem_imm(ctx, v26);
                let v34 = &constructor_x64_cmp(ctx, &OperandSize::Size64, v33, v22);
                let v51 = &constructor_x64_setcc(ctx, &CC::NZ);
                let v52 = constructor_with_flags_reg(ctx, v34, v51);
                let v53 = C::gpr_new(ctx, v50);
                let v54 = &constructor_reg_to_gpr_mem_imm(ctx, v52);
                let v55 = constructor_x64_or(ctx, I64, v53, v54);
                let v56 = C::gpr_to_reg(ctx, v55);
                let v43 = RegMemImm::Imm { simm32: 0x1 };
                let v44 = &C::gpr_mem_imm_new(ctx, &v43);
                let v57 = C::gpr_new(ctx, v56);
                let v58 = &constructor_x64_test(ctx, &OperandSize::Size64, v44, v57);
                let v59 = &constructor_icmp_cond_result(ctx, v58, &CC::NZ);
                // Rule at src/isa/x64/inst.isle line 4151.
                return v59.clone();
            }
            _ => {}
        }
        let v17 = C::put_in_regs(ctx, arg1);
        let v19 = constructor_value_regs_get_gpr(ctx, v17, 0x0);
        let v20 = C::put_in_regs(ctx, arg1);
        let v22 = constructor_value_regs_get_gpr(ctx, v20, 0x1);
        let v23 = C::put_in_regs(ctx, arg2);
        let v24 = constructor_value_regs_get_gpr(ctx, v23, 0x0);
        let v25 = C::put_in_regs(ctx, arg2);
        let v26 = constructor_value_regs_get_gpr(ctx, v25, 0x1);
        let v60 = &C::gpr_to_gpr_mem_imm(ctx, v26);
        let v61 = &constructor_x64_cmp(ctx, &OperandSize::Size64, v60, v22);
        let v62 = &C::intcc_without_eq(ctx, arg0);
        let v63 = &C::intcc_to_cc(ctx, v62);
        let v64 = &constructor_x64_setcc(ctx, v63);
        let v65 = &constructor_x64_setcc(ctx, &CC::Z);
        let v66 = &constructor_consumes_flags_concat(ctx, v64, v65);
        let v67 = constructor_with_flags(ctx, v61, v66);
        let v68 = C::value_regs_get(ctx, v67, 0x0);
        let v69 = C::value_regs_get(ctx, v67, 0x1);
        let v70 = &C::gpr_to_gpr_mem_imm(ctx, v24);
        let v71 = &constructor_x64_cmp(ctx, &OperandSize::Size64, v70, v19);
        let v72 = &C::intcc_unsigned(ctx, arg0);
        let v73 = &C::intcc_to_cc(ctx, v72);
        let v74 = &constructor_x64_setcc(ctx, v73);
        let v75 = constructor_with_flags_reg(ctx, v71, v74);
        let v76 = C::gpr_new(ctx, v69);
        let v77 = &constructor_reg_to_gpr_mem_imm(ctx, v75);
        let v78 = constructor_x64_and(ctx, I64, v76, v77);
        let v79 = C::gpr_to_reg(ctx, v78);
        let v80 = C::gpr_new(ctx, v68);
        let v81 = &constructor_reg_to_gpr_mem_imm(ctx, v79);
        let v82 = constructor_x64_or(ctx, I64, v80, v81);
        let v83 = C::gpr_to_reg(ctx, v82);
        let v43 = RegMemImm::Imm { simm32: 0x1 };
        let v84 = &C::gpr_mem_imm_new(ctx, &v43);
        let v85 = C::gpr_new(ctx, v83);
        let v86 = &constructor_x64_test(ctx, &OperandSize::Size64, v84, v85);
        let v87 = &constructor_icmp_cond_result(ctx, v86, &CC::NZ);
        // Rule at src/isa/x64/inst.isle line 4166.
        return v87.clone();
    }
    let v10 = &C::simm32_from_value(ctx, arg1);
    if let Some(v11) = v10 {
        let v4 = &C::raw_operand_size_of_type(ctx, v2);
        let v12 = constructor_put_in_gpr(ctx, arg2);
        let v13 = &constructor_x64_cmp(ctx, v4, v11, v12);
        let v14 = &C::intcc_reverse(ctx, arg0);
        let v15 = &C::intcc_to_cc(ctx, v14);
        let v16 = &constructor_icmp_cond_result(ctx, v13, v15);
        // Rule at src/isa/x64/inst.isle line 4124.
        return v16.clone();
    }
    let v4 = &C::raw_operand_size_of_type(ctx, v2);
    let v5 = &constructor_put_in_gpr_mem_imm(ctx, arg2);
    let v6 = constructor_put_in_gpr(ctx, arg1);
    let v7 = &constructor_x64_cmp(ctx, v4, v5, v6);
    let v8 = &C::intcc_to_cc(ctx, arg0);
    let v9 = &constructor_icmp_cond_result(ctx, v7, v8);
    // Rule at src/isa/x64/inst.isle line 4117.
    return v9.clone();
}

// Generated as internal constructor for term lower_fcmp_bool.
pub fn constructor_lower_fcmp_bool<C: Context>(ctx: &mut C, arg0: &FcmpCondResult) -> ValueRegs {
    match arg0 {
        &FcmpCondResult::Condition {
            producer: ref v1,
            cc: ref v2,
        } => {
            let v3 = &constructor_x64_setcc(ctx, v2);
            let v4 = constructor_with_flags(ctx, v1, v3);
            // Rule at src/isa/x64/inst.isle line 4201.
            return v4;
        }
        &FcmpCondResult::AndCondition {
            producer: ref v5,
            cc1: ref v6,
            cc2: ref v7,
        } => {
            let v8 = &constructor_x64_setcc(ctx, v6);
            let v9 = &constructor_x64_setcc(ctx, v7);
            let v10 = &constructor_consumes_flags_concat(ctx, v8, v9);
            let v11 = constructor_with_flags(ctx, v5, v10);
            let v13 = constructor_value_regs_get_gpr(ctx, v11, 0x0);
            let v15 = constructor_value_regs_get_gpr(ctx, v11, 0x1);
            let v17 = &C::gpr_to_gpr_mem_imm(ctx, v15);
            let v18 = constructor_x64_and(ctx, I8, v13, v17);
            let v19 = C::gpr_to_reg(ctx, v18);
            let v20 = C::value_reg(ctx, v19);
            // Rule at src/isa/x64/inst.isle line 4204.
            return v20;
        }
        &FcmpCondResult::OrCondition {
            producer: ref v21,
            cc1: ref v22,
            cc2: ref v23,
        } => {
            let v24 = &constructor_x64_setcc(ctx, v22);
            let v25 = &constructor_x64_setcc(ctx, v23);
            let v26 = &constructor_consumes_flags_concat(ctx, v24, v25);
            let v27 = constructor_with_flags(ctx, v21, v26);
            let v28 = constructor_value_regs_get_gpr(ctx, v27, 0x0);
            let v29 = constructor_value_regs_get_gpr(ctx, v27, 0x1);
            let v30 = &C::gpr_to_gpr_mem_imm(ctx, v29);
            let v31 = constructor_x64_or(ctx, I8, v28, v30);
            let v32 = C::gpr_to_reg(ctx, v31);
            let v33 = C::value_reg(ctx, v32);
            // Rule at src/isa/x64/inst.isle line 4213.
            return v33;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_fcmp_bool", "src/isa/x64/inst.isle line 4199"
    )
}

// Generated as internal constructor for term emit_fcmp.
pub fn constructor_emit_fcmp<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Value,
    arg2: Value,
) -> FcmpCondResult {
    match arg0 {
        &FloatCC::Equal => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = &constructor_x64_ucomis(ctx, arg2, arg1);
                let v9 = FcmpCondResult::AndCondition {
                    producer: v6.clone(),
                    cc1: CC::NP,
                    cc2: CC::Z,
                };
                // Rule at src/isa/x64/inst.isle line 4240.
                return v9;
            }
        }
        &FloatCC::GreaterThan => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = &constructor_x64_ucomis(ctx, arg2, arg1);
                let v18 = FcmpCondResult::Condition {
                    producer: v6.clone(),
                    cc: CC::NBE,
                };
                // Rule at src/isa/x64/inst.isle line 4256.
                return v18;
            }
        }
        &FloatCC::GreaterThanOrEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = &constructor_x64_ucomis(ctx, arg2, arg1);
                let v20 = FcmpCondResult::Condition {
                    producer: v6.clone(),
                    cc: CC::NB,
                };
                // Rule at src/isa/x64/inst.isle line 4258.
                return v20;
            }
        }
        &FloatCC::LessThan => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v25 = &constructor_x64_ucomis(ctx, arg1, arg2);
                let v26 = FcmpCondResult::Condition {
                    producer: v25.clone(),
                    cc: CC::NBE,
                };
                // Rule at src/isa/x64/inst.isle line 4268.
                return v26;
            }
        }
        &FloatCC::LessThanOrEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v25 = &constructor_x64_ucomis(ctx, arg1, arg2);
                let v27 = FcmpCondResult::Condition {
                    producer: v25.clone(),
                    cc: CC::NB,
                };
                // Rule at src/isa/x64/inst.isle line 4271.
                return v27;
            }
        }
        &FloatCC::NotEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = &constructor_x64_ucomis(ctx, arg2, arg1);
                let v12 = FcmpCondResult::OrCondition {
                    producer: v6.clone(),
                    cc1: CC::P,
                    cc2: CC::NZ,
                };
                // Rule at src/isa/x64/inst.isle line 4243.
                return v12;
            }
        }
        &FloatCC::Ordered => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = &constructor_x64_ucomis(ctx, arg2, arg1);
                let v13 = FcmpCondResult::Condition {
                    producer: v6.clone(),
                    cc: CC::NP,
                };
                // Rule at src/isa/x64/inst.isle line 4248.
                return v13;
            }
        }
        &FloatCC::OrderedNotEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = &constructor_x64_ucomis(ctx, arg2, arg1);
                let v15 = FcmpCondResult::Condition {
                    producer: v6.clone(),
                    cc: CC::NZ,
                };
                // Rule at src/isa/x64/inst.isle line 4252.
                return v15;
            }
        }
        &FloatCC::Unordered => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = &constructor_x64_ucomis(ctx, arg2, arg1);
                let v14 = FcmpCondResult::Condition {
                    producer: v6.clone(),
                    cc: CC::P,
                };
                // Rule at src/isa/x64/inst.isle line 4250.
                return v14;
            }
        }
        &FloatCC::UnorderedOrEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = &constructor_x64_ucomis(ctx, arg2, arg1);
                let v16 = FcmpCondResult::Condition {
                    producer: v6.clone(),
                    cc: CC::Z,
                };
                // Rule at src/isa/x64/inst.isle line 4254.
                return v16;
            }
        }
        &FloatCC::UnorderedOrGreaterThan => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v25 = &constructor_x64_ucomis(ctx, arg1, arg2);
                let v28 = FcmpCondResult::Condition {
                    producer: v25.clone(),
                    cc: CC::B,
                };
                // Rule at src/isa/x64/inst.isle line 4274.
                return v28;
            }
        }
        &FloatCC::UnorderedOrGreaterThanOrEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v25 = &constructor_x64_ucomis(ctx, arg1, arg2);
                let v29 = FcmpCondResult::Condition {
                    producer: v25.clone(),
                    cc: CC::BE,
                };
                // Rule at src/isa/x64/inst.isle line 4277.
                return v29;
            }
        }
        &FloatCC::UnorderedOrLessThan => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = &constructor_x64_ucomis(ctx, arg2, arg1);
                let v22 = FcmpCondResult::Condition {
                    producer: v6.clone(),
                    cc: CC::B,
                };
                // Rule at src/isa/x64/inst.isle line 4260.
                return v22;
            }
        }
        &FloatCC::UnorderedOrLessThanOrEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = &constructor_x64_ucomis(ctx, arg2, arg1);
                let v24 = FcmpCondResult::Condition {
                    producer: v6.clone(),
                    cc: CC::BE,
                };
                // Rule at src/isa/x64/inst.isle line 4262.
                return v24;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_fcmp", "src/isa/x64/inst.isle line 4238"
    )
}

// Generated as internal constructor for term x64_mfence.
pub fn constructor_x64_mfence<C: Context>(ctx: &mut C) -> SideEffectNoResult {
    let v1 = MInst::Fence {
        kind: FenceKind::MFence,
    };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/x64/inst.isle line 4290.
    return v2;
}

// Generated as internal constructor for term x64_cmpxchg.
pub fn constructor_x64_cmpxchg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: Gpr,
    arg3: &SyntheticAmode,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::gpr_to_reg(ctx, arg2);
    let v6 = C::gpr_to_reg(ctx, arg1);
    let v7 = C::writable_gpr_to_reg(ctx, v4);
    let v8 = MInst::LockCmpxchg {
        ty: arg0,
        replacement: v5,
        expected: v6,
        mem: arg3.clone(),
        dst_old: v7,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 4294.
    return v10;
}

// Generated as internal constructor for term x64_atomic_rmw_seq.
pub fn constructor_x64_atomic_rmw_seq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MachAtomicRmwOp,
    arg2: &SyntheticAmode,
    arg3: Gpr,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = C::gpr_to_reg(ctx, arg3);
    let v7 = C::writable_gpr_to_reg(ctx, v5);
    let v8 = C::writable_gpr_to_reg(ctx, v4);
    let v9 = MInst::AtomicRmwSeq {
        ty: arg0,
        op: arg1.clone(),
        mem: arg2.clone(),
        operand: v6,
        temp: v7,
        dst_old: v8,
    };
    let v10 = C::emit(ctx, &v9);
    let v11 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 4300.
    return v11;
}

// Generated as internal constructor for term bitcast_xmm_to_gpr.
pub fn constructor_bitcast_xmm_to_gpr<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm) -> Gpr {
    match arg0 {
        F32 => {
            let v4 = constructor_xmm_to_gpr(ctx, &SseOpcode::Movd, arg1, &OperandSize::Size32);
            // Rule at src/isa/x64/inst.isle line 4315.
            return v4;
        }
        F64 => {
            let v7 = constructor_xmm_to_gpr(ctx, &SseOpcode::Movq, arg1, &OperandSize::Size64);
            // Rule at src/isa/x64/inst.isle line 4317.
            return v7;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "bitcast_xmm_to_gpr", "src/isa/x64/inst.isle line 4314"
    )
}

// Generated as internal constructor for term bitcast_gpr_to_xmm.
pub fn constructor_bitcast_gpr_to_xmm<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Xmm {
    match arg0 {
        I32 => {
            let v3 = &C::gpr_to_gpr_mem(ctx, arg1);
            let v5 = constructor_gpr_to_xmm(ctx, &SseOpcode::Movd, v3, &OperandSize::Size32);
            // Rule at src/isa/x64/inst.isle line 4321.
            return v5;
        }
        I64 => {
            let v3 = &C::gpr_to_gpr_mem(ctx, arg1);
            let v8 = constructor_gpr_to_xmm(ctx, &SseOpcode::Movq, v3, &OperandSize::Size64);
            // Rule at src/isa/x64/inst.isle line 4323.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "bitcast_gpr_to_xmm", "src/isa/x64/inst.isle line 4320"
    )
}

// Generated as internal constructor for term stack_addr_impl.
pub fn constructor_stack_addr_impl<C: Context>(
    ctx: &mut C,
    arg0: StackSlot,
    arg1: Offset32,
) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = C::writable_gpr_to_reg(ctx, v2);
    let v4 = &C::abi_stackslot_addr(ctx, v3, arg0, arg1);
    let v5 = C::emit(ctx, v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 4329.
    return v6;
}

// Generated as internal constructor for term div_or_rem.
pub fn constructor_div_or_rem<C: Context>(
    ctx: &mut C,
    arg0: &DivOrRemKind,
    arg1: Value,
    arg2: Value,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = constructor_put_in_gpr(ctx, arg1);
    let v6 = constructor_put_in_gpr(ctx, arg2);
    let v2 = C::value_type(ctx, arg1);
    let v7 = C::emit_div_or_rem(ctx, arg0, v2, v4, v5, v6);
    let v8 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 4340.
    return v8;
}

// Generated as internal constructor for term read_pinned_gpr.
pub fn constructor_read_pinned_gpr<C: Context>(ctx: &mut C) -> Gpr {
    let v0 = C::preg_pinned(ctx);
    let v1 = constructor_mov_from_preg(ctx, v0);
    let v2 = C::gpr_new(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 4348.
    return v2;
}

// Generated as internal constructor for term write_pinned_gpr.
pub fn constructor_write_pinned_gpr<C: Context>(ctx: &mut C, arg0: Gpr) -> SideEffectNoResult {
    let v1 = C::preg_pinned(ctx);
    let v2 = &constructor_mov_to_preg(ctx, v1, arg0);
    // Rule at src/isa/x64/inst.isle line 4352.
    return v2.clone();
}

// Generated as internal constructor for term elf_tls_get_addr.
pub fn constructor_elf_tls_get_addr<C: Context>(ctx: &mut C, arg0: ExternalName) -> Gpr {
    let v1 = C::temp_writable_gpr(ctx);
    let v2 = MInst::ElfTlsGetAddr {
        symbol: arg0,
        dst: v1,
    };
    let v3 = C::emit(ctx, &v2);
    let v4 = C::writable_gpr_to_gpr(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 4400.
    return v4;
}

// Generated as internal constructor for term macho_tls_get_addr.
pub fn constructor_macho_tls_get_addr<C: Context>(ctx: &mut C, arg0: ExternalName) -> Gpr {
    let v1 = C::temp_writable_gpr(ctx);
    let v2 = MInst::MachOTlsGetAddr {
        symbol: arg0,
        dst: v1,
    };
    let v3 = C::emit(ctx, &v2);
    let v4 = C::writable_gpr_to_gpr(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 4407.
    return v4;
}

// Generated as internal constructor for term coff_tls_get_addr.
pub fn constructor_coff_tls_get_addr<C: Context>(ctx: &mut C, arg0: ExternalName) -> Gpr {
    let v1 = C::temp_writable_gpr(ctx);
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = MInst::CoffTlsGetAddr {
        symbol: arg0,
        dst: v1,
        tmp: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_gpr_to_gpr(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 4414.
    return v5;
}

// Generated as internal constructor for term reg_to_xmm_mem.
pub fn constructor_reg_to_xmm_mem<C: Context>(ctx: &mut C, arg0: Reg) -> XmmMem {
    let v1 = C::xmm_new(ctx, arg0);
    let v2 = &C::xmm_to_xmm_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 4510.
    return v2.clone();
}

// Generated as internal constructor for term xmm_to_reg_mem.
pub fn constructor_xmm_to_reg_mem<C: Context>(ctx: &mut C, arg0: Reg) -> XmmMem {
    let v1 = C::xmm_new(ctx, arg0);
    let v2 = C::xmm_to_reg(ctx, v1);
    let v3 = RegMem::Reg { reg: v2 };
    let v4 = &C::reg_mem_to_xmm_mem(ctx, &v3);
    // Rule at src/isa/x64/inst.isle line 4513.
    return v4.clone();
}

// Generated as internal constructor for term writable_gpr_to_r_reg.
pub fn constructor_writable_gpr_to_r_reg<C: Context>(ctx: &mut C, arg0: WritableGpr) -> Reg {
    let v1 = C::writable_gpr_to_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 4517.
    return v2;
}

// Generated as internal constructor for term writable_gpr_to_gpr_mem.
pub fn constructor_writable_gpr_to_gpr_mem<C: Context>(ctx: &mut C, arg0: WritableGpr) -> GprMem {
    let v1 = C::writable_gpr_to_gpr(ctx, arg0);
    let v2 = &C::gpr_to_gpr_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 4520.
    return v2.clone();
}

// Generated as internal constructor for term writable_gpr_to_value_regs.
pub fn constructor_writable_gpr_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableGpr,
) -> ValueRegs {
    let v1 = constructor_writable_gpr_to_r_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 4523.
    return v2;
}

// Generated as internal constructor for term writable_xmm_to_r_reg.
pub fn constructor_writable_xmm_to_r_reg<C: Context>(ctx: &mut C, arg0: WritableXmm) -> Reg {
    let v1 = C::writable_xmm_to_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 4526.
    return v2;
}

// Generated as internal constructor for term writable_xmm_to_xmm_mem.
pub fn constructor_writable_xmm_to_xmm_mem<C: Context>(ctx: &mut C, arg0: WritableXmm) -> XmmMem {
    let v1 = C::writable_xmm_to_xmm(ctx, arg0);
    let v2 = &C::xmm_to_xmm_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 4529.
    return v2.clone();
}

// Generated as internal constructor for term writable_xmm_to_value_regs.
pub fn constructor_writable_xmm_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableXmm,
) -> ValueRegs {
    let v1 = constructor_writable_xmm_to_r_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 4532.
    return v2;
}

// Generated as internal constructor for term synthetic_amode_to_gpr_mem.
pub fn constructor_synthetic_amode_to_gpr_mem<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
) -> GprMem {
    let v1 = &C::synthetic_amode_to_reg_mem(ctx, arg0);
    let v2 = &C::reg_mem_to_gpr_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 4539.
    return v2.clone();
}

// Generated as internal constructor for term amode_to_gpr_mem.
pub fn constructor_amode_to_gpr_mem<C: Context>(ctx: &mut C, arg0: &Amode) -> GprMem {
    let v1 = &C::amode_to_synthetic_amode(ctx, arg0);
    let v2 = &constructor_synthetic_amode_to_gpr_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 4537.
    return v2.clone();
}

// Generated as internal constructor for term amode_to_xmm_mem.
pub fn constructor_amode_to_xmm_mem<C: Context>(ctx: &mut C, arg0: &Amode) -> XmmMem {
    let v1 = &C::amode_to_synthetic_amode(ctx, arg0);
    let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 4542.
    return v2.clone();
}

// Generated as internal constructor for term synthetic_amode_to_xmm_mem.
pub fn constructor_synthetic_amode_to_xmm_mem<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
) -> XmmMem {
    let v1 = &C::synthetic_amode_to_reg_mem(ctx, arg0);
    let v2 = &C::reg_mem_to_xmm_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 4545.
    return v2.clone();
}

// Generated as internal constructor for term const_to_xmm_mem.
pub fn constructor_const_to_xmm_mem<C: Context>(ctx: &mut C, arg0: VCodeConstant) -> XmmMem {
    let v1 = &C::const_to_synthetic_amode(ctx, arg0);
    let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 4550.
    return v2.clone();
}

// Generated as internal constructor for term xmm_to_xmm_mem_aligned.
pub fn constructor_xmm_to_xmm_mem_aligned<C: Context>(ctx: &mut C, arg0: Xmm) -> XmmMemAligned {
    let v1 = &C::xmm_to_xmm_mem(ctx, arg0);
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 4553.
    return v2.clone();
}

// Generated as internal constructor for term amode_to_xmm_mem_aligned.
pub fn constructor_amode_to_xmm_mem_aligned<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
) -> XmmMemAligned {
    let v1 = &constructor_amode_to_xmm_mem(ctx, arg0);
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 4555.
    return v2.clone();
}

// Generated as internal constructor for term synthetic_amode_to_xmm_mem_aligned.
pub fn constructor_synthetic_amode_to_xmm_mem_aligned<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
) -> XmmMemAligned {
    let v1 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 4557.
    return v2.clone();
}

// Generated as internal constructor for term put_in_xmm_mem_aligned.
pub fn constructor_put_in_xmm_mem_aligned<C: Context>(ctx: &mut C, arg0: Value) -> XmmMemAligned {
    let v1 = &C::put_in_xmm_mem(ctx, arg0);
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 4559.
    return v2.clone();
}

// Generated as internal constructor for term mov_from_preg.
pub fn constructor_mov_from_preg<C: Context>(ctx: &mut C, arg0: PReg) -> Reg {
    let v1 = C::temp_writable_gpr(ctx);
    let v2 = MInst::MovFromPReg { src: arg0, dst: v1 };
    let v3 = C::emit(ctx, &v2);
    let v4 = constructor_writable_gpr_to_r_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 4563.
    return v4;
}

// Generated as internal constructor for term mov_to_preg.
pub fn constructor_mov_to_preg<C: Context>(
    ctx: &mut C,
    arg0: PReg,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = MInst::MovToPReg {
        src: arg1,
        dst: arg0,
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/x64/inst.isle line 4569.
    return v3;
}

// Generated as internal constructor for term x64_rbp.
pub fn constructor_x64_rbp<C: Context>(ctx: &mut C) -> Reg {
    let v0 = C::preg_rbp(ctx);
    let v1 = constructor_mov_from_preg(ctx, v0);
    // Rule at src/isa/x64/inst.isle line 4582.
    return v1;
}

// Generated as internal constructor for term x64_rsp.
pub fn constructor_x64_rsp<C: Context>(ctx: &mut C) -> Reg {
    let v0 = C::preg_rsp(ctx);
    let v1 = constructor_mov_from_preg(ctx, v0);
    // Rule at src/isa/x64/inst.isle line 4586.
    return v1;
}

// Generated as internal constructor for term lower.
pub fn constructor_lower<C: Context>(ctx: &mut C, arg0: Inst) -> Option<InstOutput> {
    let v6 = &C::inst_data(ctx, arg0);
    match v6 {
        &InstructionData::AtomicCas {
            opcode: ref v1509,
            args: ref v1510,
            flags: v1511,
        } => {
            if let &Opcode::AtomicCas = v1509 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v4 = C::fits_in_64(ctx, v3);
                    if let Some(v5) = v4 {
                        let v1484 = C::ty_int(ctx, v3);
                        if let Some(v1485) = v1484 {
                            let v1512 = C::unpack_value_array_3(ctx, v1510);
                            let v1516 = constructor_put_in_gpr(ctx, v1512.1);
                            let v1517 = constructor_put_in_gpr(ctx, v1512.2);
                            let v1518 = C::zero_offset(ctx);
                            let v1519 = &constructor_to_amode(ctx, v1511, v1512.0, v1518);
                            let v1520 = &C::amode_to_synthetic_amode(ctx, v1519);
                            let v1521 = constructor_x64_cmpxchg(ctx, v5, v1516, v1517, v1520);
                            let v1522 = constructor_output_gpr(ctx, v1521);
                            // Rule at src/isa/x64/lower.isle line 2827.
                            return Some(v1522);
                        }
                    }
                }
            }
        }
        &InstructionData::AtomicRmw {
            opcode: ref v1523,
            args: ref v1524,
            flags: v1525,
            op: ref v1526,
        } => {
            if let &Opcode::AtomicRmw = v1523 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v4 = C::fits_in_64(ctx, v3);
                    if let Some(v5) = v4 {
                        let v1484 = C::ty_int(ctx, v3);
                        if let Some(v1485) = v1484 {
                            let v1530 = &C::atomic_rmw_op_to_mach_atomic_rmw_op(ctx, v1526);
                            let v1486 = C::zero_offset(ctx);
                            let v1527 = C::unpack_value_array_2(ctx, v1524);
                            let v1531 = &constructor_to_amode(ctx, v1525, v1527.0, v1486);
                            let v1532 = &C::amode_to_synthetic_amode(ctx, v1531);
                            let v1533 = constructor_put_in_gpr(ctx, v1527.1);
                            let v1534 =
                                constructor_x64_atomic_rmw_seq(ctx, v5, v1530, v1532, v1533);
                            let v1535 = constructor_output_gpr(ctx, v1534);
                            // Rule at src/isa/x64/lower.isle line 2843.
                            return Some(v1535);
                        }
                    }
                }
            }
        }
        &InstructionData::Binary {
            opcode: ref v33,
            args: ref v34,
        } => {
            match v33 {
                &Opcode::Swizzle => {
                    let v35 = C::unpack_value_array_2(ctx, v34);
                    let v1052 = constructor_put_in_xmm(ctx, v35.1);
                    let v1981 = C::swizzle_zero_mask(ctx);
                    let v1982 = &constructor_const_to_xmm_mem(ctx, v1981);
                    let v1983 = constructor_x64_paddusb(ctx, v1052, v1982);
                    let v1984 = constructor_put_in_xmm(ctx, v35.0);
                    let v1985 = &C::xmm_to_xmm_mem(ctx, v1983);
                    let v1986 = constructor_x64_pshufb(ctx, v1984, v1985);
                    let v1987 = constructor_output_xmm(ctx, v1986);
                    // Rule at src/isa/x64/lower.isle line 3558.
                    return Some(v1987);
                }
                &Opcode::Smin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v583 = constructor_x64_pminsb(ctx, v56, v57);
                                let v584 = constructor_output_xmm(ctx, v583);
                                // Rule at src/isa/x64/lower.isle line 1329.
                                return Some(v584);
                            }
                            I16X8 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v585 = constructor_x64_pminsw(ctx, v56, v57);
                                let v586 = constructor_output_xmm(ctx, v585);
                                // Rule at src/isa/x64/lower.isle line 1332.
                                return Some(v586);
                            }
                            I32X4 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v587 = constructor_x64_pminsd(ctx, v56, v57);
                                let v588 = constructor_output_xmm(ctx, v587);
                                // Rule at src/isa/x64/lower.isle line 1335.
                                return Some(v588);
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v572 = constructor_cmp_and_choose(ctx, v5, &CC::L, v35.0, v35.1);
                            let v573 = C::output(ctx, v572);
                            // Rule at src/isa/x64/lower.isle line 1310.
                            return Some(v573);
                        }
                    }
                }
                &Opcode::Umin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v595 = constructor_x64_pminub(ctx, v56, v57);
                                let v596 = constructor_output_xmm(ctx, v595);
                                // Rule at src/isa/x64/lower.isle line 1351.
                                return Some(v596);
                            }
                            I16X8 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v597 = constructor_x64_pminuw(ctx, v56, v57);
                                let v598 = constructor_output_xmm(ctx, v597);
                                // Rule at src/isa/x64/lower.isle line 1354.
                                return Some(v598);
                            }
                            I32X4 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v599 = constructor_x64_pminud(ctx, v56, v57);
                                let v600 = constructor_output_xmm(ctx, v599);
                                // Rule at src/isa/x64/lower.isle line 1357.
                                return Some(v600);
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v566 = constructor_cmp_and_choose(ctx, v5, &CC::B, v35.0, v35.1);
                            let v567 = C::output(ctx, v566);
                            // Rule at src/isa/x64/lower.isle line 1304.
                            return Some(v567);
                        }
                    }
                }
                &Opcode::Smax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v577 = constructor_x64_pmaxsb(ctx, v56, v57);
                                let v578 = constructor_output_xmm(ctx, v577);
                                // Rule at src/isa/x64/lower.isle line 1318.
                                return Some(v578);
                            }
                            I16X8 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v579 = constructor_x64_pmaxsw(ctx, v56, v57);
                                let v580 = constructor_output_xmm(ctx, v579);
                                // Rule at src/isa/x64/lower.isle line 1321.
                                return Some(v580);
                            }
                            I32X4 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v581 = constructor_x64_pmaxsd(ctx, v56, v57);
                                let v582 = constructor_output_xmm(ctx, v581);
                                // Rule at src/isa/x64/lower.isle line 1324.
                                return Some(v582);
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v575 = constructor_cmp_and_choose(ctx, v5, &CC::NL, v35.0, v35.1);
                            let v576 = C::output(ctx, v575);
                            // Rule at src/isa/x64/lower.isle line 1313.
                            return Some(v576);
                        }
                    }
                }
                &Opcode::Umax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v589 = constructor_x64_pmaxub(ctx, v56, v57);
                                let v590 = constructor_output_xmm(ctx, v589);
                                // Rule at src/isa/x64/lower.isle line 1340.
                                return Some(v590);
                            }
                            I16X8 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v591 = constructor_x64_pmaxuw(ctx, v56, v57);
                                let v592 = constructor_output_xmm(ctx, v591);
                                // Rule at src/isa/x64/lower.isle line 1343.
                                return Some(v592);
                            }
                            I32X4 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v593 = constructor_x64_pmaxud(ctx, v56, v57);
                                let v594 = constructor_output_xmm(ctx, v593);
                                // Rule at src/isa/x64/lower.isle line 1346.
                                return Some(v594);
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v569 = constructor_cmp_and_choose(ctx, v5, &CC::NB, v35.0, v35.1);
                            let v570 = C::output(ctx, v569);
                            // Rule at src/isa/x64/lower.isle line 1307.
                            return Some(v570);
                        }
                    }
                }
                &Opcode::AvgRound => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v52 = C::multi_lane(ctx, v3);
                        if let Some(v53) = v52 {
                            match v53.0 {
                                0x8 => {
                                    if v53.1 == 0x10 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v56 = constructor_put_in_xmm(ctx, v35.0);
                                        let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v321 = constructor_x64_pavgb(ctx, v56, v57);
                                        let v322 = constructor_output_xmm(ctx, v321);
                                        // Rule at src/isa/x64/lower.isle line 767.
                                        return Some(v322);
                                    }
                                }
                                0x10 => {
                                    if v53.1 == 0x8 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v56 = constructor_put_in_xmm(ctx, v35.0);
                                        let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v323 = constructor_x64_pavgw(ctx, v56, v57);
                                        let v324 = constructor_output_xmm(ctx, v323);
                                        // Rule at src/isa/x64/lower.isle line 771.
                                        return Some(v324);
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::UaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v52 = C::multi_lane(ctx, v3);
                        if let Some(v53) = v52 {
                            match v53.0 {
                                0x8 => {
                                    if v53.1 == 0x10 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v56 = constructor_put_in_xmm(ctx, v35.0);
                                        let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v96 = constructor_x64_paddusb(ctx, v56, v57);
                                        let v97 = constructor_output_xmm(ctx, v96);
                                        // Rule at src/isa/x64/lower.isle line 116.
                                        return Some(v97);
                                    }
                                }
                                0x10 => {
                                    if v53.1 == 0x8 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v56 = constructor_put_in_xmm(ctx, v35.0);
                                        let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v98 = constructor_x64_paddusw(ctx, v56, v57);
                                        let v99 = constructor_output_xmm(ctx, v98);
                                        // Rule at src/isa/x64/lower.isle line 120.
                                        return Some(v99);
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::SaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v52 = C::multi_lane(ctx, v3);
                        if let Some(v53) = v52 {
                            match v53.0 {
                                0x8 => {
                                    if v53.1 == 0x10 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v56 = constructor_put_in_xmm(ctx, v35.0);
                                        let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v92 = constructor_x64_paddsb(ctx, v56, v57);
                                        let v93 = constructor_output_xmm(ctx, v92);
                                        // Rule at src/isa/x64/lower.isle line 106.
                                        return Some(v93);
                                    }
                                }
                                0x10 => {
                                    if v53.1 == 0x8 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v56 = constructor_put_in_xmm(ctx, v35.0);
                                        let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v94 = constructor_x64_paddsw(ctx, v56, v57);
                                        let v95 = constructor_output_xmm(ctx, v94);
                                        // Rule at src/isa/x64/lower.isle line 110.
                                        return Some(v95);
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::UsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v52 = C::multi_lane(ctx, v3);
                        if let Some(v53) = v52 {
                            match v53.0 {
                                0x8 => {
                                    if v53.1 == 0x10 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v56 = constructor_put_in_xmm(ctx, v35.0);
                                        let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v118 = constructor_x64_psubusb(ctx, v56, v57);
                                        let v119 = constructor_output_xmm(ctx, v118);
                                        // Rule at src/isa/x64/lower.isle line 177.
                                        return Some(v119);
                                    }
                                }
                                0x10 => {
                                    if v53.1 == 0x8 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v56 = constructor_put_in_xmm(ctx, v35.0);
                                        let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v120 = constructor_x64_psubusw(ctx, v56, v57);
                                        let v121 = constructor_output_xmm(ctx, v120);
                                        // Rule at src/isa/x64/lower.isle line 181.
                                        return Some(v121);
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::SsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v52 = C::multi_lane(ctx, v3);
                        if let Some(v53) = v52 {
                            match v53.0 {
                                0x8 => {
                                    if v53.1 == 0x10 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v56 = constructor_put_in_xmm(ctx, v35.0);
                                        let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v114 = constructor_x64_psubsb(ctx, v56, v57);
                                        let v115 = constructor_output_xmm(ctx, v114);
                                        // Rule at src/isa/x64/lower.isle line 167.
                                        return Some(v115);
                                    }
                                }
                                0x10 => {
                                    if v53.1 == 0x8 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v56 = constructor_put_in_xmm(ctx, v35.0);
                                        let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v116 = constructor_x64_psubsw(ctx, v56, v57);
                                        let v117 = constructor_output_xmm(ctx, v116);
                                        // Rule at src/isa/x64/lower.isle line 171.
                                        return Some(v117);
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::Iadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v66 = C::put_in_regs(ctx, v35.0);
                            let v68 = constructor_value_regs_get_gpr(ctx, v66, 0x0);
                            let v70 = constructor_value_regs_get_gpr(ctx, v66, 0x1);
                            let v71 = C::put_in_regs(ctx, v35.1);
                            let v72 = constructor_value_regs_get_gpr(ctx, v71, 0x0);
                            let v73 = constructor_value_regs_get_gpr(ctx, v71, 0x1);
                            let v74 = &C::gpr_to_gpr_mem_imm(ctx, v72);
                            let v75 = &constructor_x64_add_with_flags_paired(ctx, I64, v68, v74);
                            let v76 = &C::gpr_to_gpr_mem_imm(ctx, v73);
                            let v77 = &constructor_x64_adc_paired(ctx, I64, v70, v76);
                            let v78 = constructor_with_flags(ctx, v75, v77);
                            let v79 = C::output(ctx, v78);
                            // Rule at src/isa/x64/lower.isle line 78.
                            return Some(v79);
                        }
                        let v52 = C::multi_lane(ctx, v3);
                        if let Some(v53) = v52 {
                            match v53.0 {
                                0x8 => {
                                    if v53.1 == 0x10 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v56 = constructor_put_in_xmm(ctx, v35.0);
                                        let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v58 = constructor_x64_paddb(ctx, v56, v57);
                                        let v59 = constructor_output_xmm(ctx, v58);
                                        // Rule at src/isa/x64/lower.isle line 61.
                                        return Some(v59);
                                    }
                                }
                                0x10 => {
                                    if v53.1 == 0x8 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v56 = constructor_put_in_xmm(ctx, v35.0);
                                        let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v60 = constructor_x64_paddw(ctx, v56, v57);
                                        let v61 = constructor_output_xmm(ctx, v60);
                                        // Rule at src/isa/x64/lower.isle line 65.
                                        return Some(v61);
                                    }
                                }
                                0x20 => {
                                    if v53.1 == 0x4 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v56 = constructor_put_in_xmm(ctx, v35.0);
                                        let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v62 = constructor_x64_paddd(ctx, v56, v57);
                                        let v63 = constructor_output_xmm(ctx, v62);
                                        // Rule at src/isa/x64/lower.isle line 69.
                                        return Some(v63);
                                    }
                                }
                                0x40 => {
                                    if v53.1 == 0x2 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v56 = constructor_put_in_xmm(ctx, v35.0);
                                        let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v64 = constructor_x64_paddq(ctx, v56, v57);
                                        let v65 = constructor_output_xmm(ctx, v64);
                                        // Rule at src/isa/x64/lower.isle line 73.
                                        return Some(v65);
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v47 = &C::sinkable_load(ctx, v35.0);
                            if let Some(v48) = v47 {
                                let v44 = constructor_put_in_gpr(ctx, v35.1);
                                let v49 = &constructor_sink_load_to_gpr_mem_imm(ctx, v48);
                                let v50 = constructor_x64_add(ctx, v5, v44, v49);
                                let v51 = constructor_output_gpr(ctx, v50);
                                // Rule at src/isa/x64/lower.isle line 55.
                                return Some(v51);
                            }
                            let v42 = &C::simm32_from_value(ctx, v35.0);
                            if let Some(v43) = v42 {
                                let v44 = constructor_put_in_gpr(ctx, v35.1);
                                let v45 = constructor_x64_add(ctx, v5, v44, v43);
                                let v46 = constructor_output_gpr(ctx, v45);
                                // Rule at src/isa/x64/lower.isle line 52.
                                return Some(v46);
                            }
                            let v38 = constructor_put_in_gpr(ctx, v35.0);
                            let v39 = &constructor_put_in_gpr_mem_imm(ctx, v35.1);
                            let v40 = constructor_x64_add(ctx, v5, v38, v39);
                            let v41 = constructor_output_gpr(ctx, v40);
                            // Rule at src/isa/x64/lower.isle line 45.
                            return Some(v41);
                        }
                    }
                }
                &Opcode::Isub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v66 = C::put_in_regs(ctx, v35.0);
                            let v68 = constructor_value_regs_get_gpr(ctx, v66, 0x0);
                            let v70 = constructor_value_regs_get_gpr(ctx, v66, 0x1);
                            let v71 = C::put_in_regs(ctx, v35.1);
                            let v72 = constructor_value_regs_get_gpr(ctx, v71, 0x0);
                            let v73 = constructor_value_regs_get_gpr(ctx, v71, 0x1);
                            let v74 = &C::gpr_to_gpr_mem_imm(ctx, v72);
                            let v110 = &constructor_x64_sub_with_flags_paired(ctx, I64, v68, v74);
                            let v76 = &C::gpr_to_gpr_mem_imm(ctx, v73);
                            let v111 = &constructor_x64_sbb_paired(ctx, I64, v70, v76);
                            let v112 = constructor_with_flags(ctx, v110, v111);
                            let v113 = C::output(ctx, v112);
                            // Rule at src/isa/x64/lower.isle line 152.
                            return Some(v113);
                        }
                        let v52 = C::multi_lane(ctx, v3);
                        if let Some(v53) = v52 {
                            match v53.0 {
                                0x8 => {
                                    if v53.1 == 0x10 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v56 = constructor_put_in_xmm(ctx, v35.0);
                                        let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v102 = constructor_x64_psubb(ctx, v56, v57);
                                        let v103 = constructor_output_xmm(ctx, v102);
                                        // Rule at src/isa/x64/lower.isle line 135.
                                        return Some(v103);
                                    }
                                }
                                0x10 => {
                                    if v53.1 == 0x8 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v56 = constructor_put_in_xmm(ctx, v35.0);
                                        let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v104 = constructor_x64_psubw(ctx, v56, v57);
                                        let v105 = constructor_output_xmm(ctx, v104);
                                        // Rule at src/isa/x64/lower.isle line 139.
                                        return Some(v105);
                                    }
                                }
                                0x20 => {
                                    if v53.1 == 0x4 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v56 = constructor_put_in_xmm(ctx, v35.0);
                                        let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v106 = constructor_x64_psubd(ctx, v56, v57);
                                        let v107 = constructor_output_xmm(ctx, v106);
                                        // Rule at src/isa/x64/lower.isle line 143.
                                        return Some(v107);
                                    }
                                }
                                0x40 => {
                                    if v53.1 == 0x2 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v56 = constructor_put_in_xmm(ctx, v35.0);
                                        let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v108 = constructor_x64_psubq(ctx, v56, v57);
                                        let v109 = constructor_output_xmm(ctx, v108);
                                        // Rule at src/isa/x64/lower.isle line 147.
                                        return Some(v109);
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v38 = constructor_put_in_gpr(ctx, v35.0);
                            let v39 = &constructor_put_in_gpr_mem_imm(ctx, v35.1);
                            let v100 = constructor_x64_sub(ctx, v5, v38, v39);
                            let v101 = constructor_output_gpr(ctx, v100);
                            // Rule at src/isa/x64/lower.isle line 129.
                            return Some(v101);
                        }
                    }
                }
                &Opcode::Imul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v52 = C::multi_lane(ctx, v3);
                        if let Some(v53) = v52 {
                            if v53.0 == 0x40 {
                                if v53.1 == 0x2 {
                                    let v349 = C::avx512vl_enabled(ctx, v3);
                                    if v349 == true {
                                        let v350 = C::avx512dq_enabled(ctx, v3);
                                        if v350 == true {
                                            let v35 = C::unpack_value_array_2(ctx, v34);
                                            let v351 = &C::put_in_xmm_mem(ctx, v35.0);
                                            let v352 = constructor_put_in_xmm(ctx, v35.1);
                                            let v353 = constructor_x64_vpmullq(ctx, v351, v352);
                                            let v354 = constructor_output_xmm(ctx, v353);
                                            // Rule at src/isa/x64/lower.isle line 843.
                                            return Some(v354);
                                        }
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v66 = C::put_in_regs(ctx, v35.0);
                            let v68 = constructor_value_regs_get_gpr(ctx, v66, 0x0);
                            let v70 = constructor_value_regs_get_gpr(ctx, v66, 0x1);
                            let v71 = C::put_in_regs(ctx, v35.1);
                            let v72 = constructor_value_regs_get_gpr(ctx, v71, 0x0);
                            let v73 = constructor_value_regs_get_gpr(ctx, v71, 0x1);
                            let v331 = &C::gpr_to_gpr_mem_imm(ctx, v73);
                            let v332 = constructor_x64_mul(ctx, I64, v68, v331);
                            let v333 = &C::gpr_to_gpr_mem_imm(ctx, v72);
                            let v334 = constructor_x64_mul(ctx, I64, v70, v333);
                            let v335 = &C::gpr_to_gpr_mem_imm(ctx, v334);
                            let v336 = constructor_x64_add(ctx, I64, v332, v335);
                            let v337 = &C::gpr_to_gpr_mem(ctx, v72);
                            let v338 = constructor_mulhi_u(ctx, I64, v68, v337);
                            let v339 = constructor_value_regs_get_gpr(ctx, v338, 0x0);
                            let v340 = constructor_value_regs_get_gpr(ctx, v338, 0x1);
                            let v341 = &C::gpr_to_gpr_mem_imm(ctx, v340);
                            let v342 = constructor_x64_add(ctx, I64, v336, v341);
                            let v343 = constructor_value_gprs(ctx, v339, v342);
                            let v344 = C::output(ctx, v343);
                            // Rule at src/isa/x64/lower.isle line 808.
                            return Some(v344);
                        }
                        if let Some(v53) = v52 {
                            match v53.0 {
                                0x10 => {
                                    if v53.1 == 0x8 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v140 = C::def_inst(ctx, v35.1);
                                        if let Some(v141) = v140 {
                                            let v142 = &C::inst_data(ctx, v141);
                                            if let &InstructionData::Unary {
                                                opcode: ref v143,
                                                arg: v144,
                                            } = v142
                                            {
                                                match v143 {
                                                    &Opcode::SwidenLow => {
                                                        let v149 = C::def_inst(ctx, v35.0);
                                                        if let Some(v150) = v149 {
                                                            let v151 = &C::inst_data(ctx, v150);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v152,
                                                                arg: v153,
                                                            } = v151
                                                            {
                                                                if let &Opcode::SwidenLow = v152 {
                                                                    let v374 =
                                                                        C::value_type(ctx, v153);
                                                                    let v375 =
                                                                        C::multi_lane(ctx, v374);
                                                                    if let Some(v376) = v375 {
                                                                        if v376.0 == 0x8 {
                                                                            if v376.1 == 0x10 {
                                                                                let v379 =
                                                                                    C::value_type(
                                                                                        ctx, v144,
                                                                                    );
                                                                                let v380 =
                                                                                    C::multi_lane(
                                                                                        ctx, v379,
                                                                                    );
                                                                                if let Some(v381) =
                                                                                    v380
                                                                                {
                                                                                    if v381.0 == 0x8
                                                                                    {
                                                                                        if v381.1
                                                                                            == 0x10
                                                                                        {
                                                                                            let v406 = &C::put_in_xmm_mem(ctx, v153);
                                                                                            let v414 = constructor_x64_pmovsxbw(ctx, v406);
                                                                                            let v409 = &C::put_in_xmm_mem(ctx, v144);
                                                                                            let v415 = constructor_x64_pmovsxbw(ctx, v409);
                                                                                            let v416 = &C::xmm_to_xmm_mem(ctx, v415);
                                                                                            let v417 = constructor_x64_pmullw(ctx, v414, v416);
                                                                                            let v418 = constructor_output_xmm(ctx, v417);
                                                                                            // Rule at src/isa/x64/lower.isle line 927.
                                                                                            return Some(v418);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::SwidenHigh => {
                                                        let v149 = C::def_inst(ctx, v35.0);
                                                        if let Some(v150) = v149 {
                                                            let v151 = &C::inst_data(ctx, v150);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v152,
                                                                arg: v153,
                                                            } = v151
                                                            {
                                                                if let &Opcode::SwidenHigh = v152 {
                                                                    let v374 =
                                                                        C::value_type(ctx, v153);
                                                                    let v375 =
                                                                        C::multi_lane(ctx, v374);
                                                                    if let Some(v376) = v375 {
                                                                        if v376.0 == 0x8 {
                                                                            if v376.1 == 0x10 {
                                                                                let v379 =
                                                                                    C::value_type(
                                                                                        ctx, v144,
                                                                                    );
                                                                                let v380 =
                                                                                    C::multi_lane(
                                                                                        ctx, v379,
                                                                                    );
                                                                                if let Some(v381) =
                                                                                    v380
                                                                                {
                                                                                    if v381.0 == 0x8
                                                                                    {
                                                                                        if v381.1
                                                                                            == 0x10
                                                                                        {
                                                                                            let v154 = constructor_put_in_xmm(ctx, v153);
                                                                                            let v384 = &C::xmm_to_xmm_mem(ctx, v154);
                                                                                            let v387 = constructor_x64_palignr(ctx, v154, v384, 0x8, &OperandSize::Size32);
                                                                                            let v388 = &C::xmm_to_xmm_mem(ctx, v387);
                                                                                            let v389 = constructor_x64_pmovsxbw(ctx, v388);
                                                                                            let v390 = constructor_put_in_xmm(ctx, v144);
                                                                                            let v391 = &C::xmm_to_xmm_mem(ctx, v390);
                                                                                            let v392 = constructor_x64_palignr(ctx, v390, v391, 0x8, &OperandSize::Size32);
                                                                                            let v393 = &C::xmm_to_xmm_mem(ctx, v392);
                                                                                            let v394 = constructor_x64_pmovsxbw(ctx, v393);
                                                                                            let v395 = &C::xmm_to_xmm_mem(ctx, v394);
                                                                                            let v396 = constructor_x64_pmullw(ctx, v389, v395);
                                                                                            let v397 = constructor_output_xmm(ctx, v396);
                                                                                            // Rule at src/isa/x64/lower.isle line 891.
                                                                                            return Some(v397);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::UwidenLow => {
                                                        let v149 = C::def_inst(ctx, v35.0);
                                                        if let Some(v150) = v149 {
                                                            let v151 = &C::inst_data(ctx, v150);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v152,
                                                                arg: v153,
                                                            } = v151
                                                            {
                                                                if let &Opcode::UwidenLow = v152 {
                                                                    let v374 =
                                                                        C::value_type(ctx, v153);
                                                                    let v375 =
                                                                        C::multi_lane(ctx, v374);
                                                                    if let Some(v376) = v375 {
                                                                        if v376.0 == 0x8 {
                                                                            if v376.1 == 0x10 {
                                                                                let v379 =
                                                                                    C::value_type(
                                                                                        ctx, v144,
                                                                                    );
                                                                                let v380 =
                                                                                    C::multi_lane(
                                                                                        ctx, v379,
                                                                                    );
                                                                                if let Some(v381) =
                                                                                    v380
                                                                                {
                                                                                    if v381.0 == 0x8
                                                                                    {
                                                                                        if v381.1
                                                                                            == 0x10
                                                                                        {
                                                                                            let v406 = &C::put_in_xmm_mem(ctx, v153);
                                                                                            let v438 = constructor_x64_pmovzxbw(ctx, v406);
                                                                                            let v409 = &C::put_in_xmm_mem(ctx, v144);
                                                                                            let v439 = constructor_x64_pmovzxbw(ctx, v409);
                                                                                            let v440 = &C::xmm_to_xmm_mem(ctx, v439);
                                                                                            let v441 = constructor_x64_pmullw(ctx, v438, v440);
                                                                                            let v442 = constructor_output_xmm(ctx, v441);
                                                                                            // Rule at src/isa/x64/lower.isle line 995.
                                                                                            return Some(v442);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::UwidenHigh => {
                                                        let v149 = C::def_inst(ctx, v35.0);
                                                        if let Some(v150) = v149 {
                                                            let v151 = &C::inst_data(ctx, v150);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v152,
                                                                arg: v153,
                                                            } = v151
                                                            {
                                                                if let &Opcode::UwidenHigh = v152 {
                                                                    let v374 =
                                                                        C::value_type(ctx, v153);
                                                                    let v375 =
                                                                        C::multi_lane(ctx, v374);
                                                                    if let Some(v376) = v375 {
                                                                        if v376.0 == 0x8 {
                                                                            if v376.1 == 0x10 {
                                                                                let v379 =
                                                                                    C::value_type(
                                                                                        ctx, v144,
                                                                                    );
                                                                                let v380 =
                                                                                    C::multi_lane(
                                                                                        ctx, v379,
                                                                                    );
                                                                                if let Some(v381) =
                                                                                    v380
                                                                                {
                                                                                    if v381.0 == 0x8
                                                                                    {
                                                                                        if v381.1
                                                                                            == 0x10
                                                                                        {
                                                                                            let v154 = constructor_put_in_xmm(ctx, v153);
                                                                                            let v384 = &C::xmm_to_xmm_mem(ctx, v154);
                                                                                            let v387 = constructor_x64_palignr(ctx, v154, v384, 0x8, &OperandSize::Size32);
                                                                                            let v388 = &C::xmm_to_xmm_mem(ctx, v387);
                                                                                            let v427 = constructor_x64_pmovzxbw(ctx, v388);
                                                                                            let v390 = constructor_put_in_xmm(ctx, v144);
                                                                                            let v391 = &C::xmm_to_xmm_mem(ctx, v390);
                                                                                            let v392 = constructor_x64_palignr(ctx, v390, v391, 0x8, &OperandSize::Size32);
                                                                                            let v393 = &C::xmm_to_xmm_mem(ctx, v392);
                                                                                            let v428 = constructor_x64_pmovzxbw(ctx, v393);
                                                                                            let v429 = &C::xmm_to_xmm_mem(ctx, v428);
                                                                                            let v430 = constructor_x64_pmullw(ctx, v427, v429);
                                                                                            let v431 = constructor_output_xmm(ctx, v430);
                                                                                            // Rule at src/isa/x64/lower.isle line 959.
                                                                                            return Some(v431);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                        let v56 = constructor_put_in_xmm(ctx, v35.0);
                                        let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v345 = constructor_x64_pmullw(ctx, v56, v57);
                                        let v346 = constructor_output_xmm(ctx, v345);
                                        // Rule at src/isa/x64/lower.isle line 835.
                                        return Some(v346);
                                    }
                                }
                                0x20 => {
                                    if v53.1 == 0x4 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v140 = C::def_inst(ctx, v35.1);
                                        if let Some(v141) = v140 {
                                            let v142 = &C::inst_data(ctx, v141);
                                            if let &InstructionData::Unary {
                                                opcode: ref v143,
                                                arg: v144,
                                            } = v142
                                            {
                                                match v143 {
                                                    &Opcode::SwidenLow => {
                                                        let v149 = C::def_inst(ctx, v35.0);
                                                        if let Some(v150) = v149 {
                                                            let v151 = &C::inst_data(ctx, v150);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v152,
                                                                arg: v153,
                                                            } = v151
                                                            {
                                                                if let &Opcode::SwidenLow = v152 {
                                                                    let v374 =
                                                                        C::value_type(ctx, v153);
                                                                    let v375 =
                                                                        C::multi_lane(ctx, v374);
                                                                    if let Some(v376) = v375 {
                                                                        if v376.0 == 0x10 {
                                                                            if v376.1 == 0x8 {
                                                                                let v379 =
                                                                                    C::value_type(
                                                                                        ctx, v144,
                                                                                    );
                                                                                let v380 =
                                                                                    C::multi_lane(
                                                                                        ctx, v379,
                                                                                    );
                                                                                if let Some(v381) =
                                                                                    v380
                                                                                {
                                                                                    if v381.0
                                                                                        == 0x10
                                                                                    {
                                                                                        if v381.1
                                                                                            == 0x8
                                                                                        {
                                                                                            let v154 = constructor_put_in_xmm(ctx, v153);
                                                                                            let v398 = constructor_put_in_xmm(ctx, v144);
                                                                                            let v399 = &C::xmm_to_xmm_mem(ctx, v398);
                                                                                            let v400 = constructor_x64_pmullw(ctx, v154, v399);
                                                                                            let v401 = &C::xmm_to_xmm_mem(ctx, v398);
                                                                                            let v402 = constructor_x64_pmulhw(ctx, v154, v401);
                                                                                            let v403 = &C::xmm_to_xmm_mem(ctx, v402);
                                                                                            let v419 = constructor_x64_punpcklwd(ctx, v400, v403);
                                                                                            let v420 = constructor_output_xmm(ctx, v419);
                                                                                            // Rule at src/isa/x64/lower.isle line 937.
                                                                                            return Some(v420);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::SwidenHigh => {
                                                        let v149 = C::def_inst(ctx, v35.0);
                                                        if let Some(v150) = v149 {
                                                            let v151 = &C::inst_data(ctx, v150);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v152,
                                                                arg: v153,
                                                            } = v151
                                                            {
                                                                if let &Opcode::SwidenHigh = v152 {
                                                                    let v374 =
                                                                        C::value_type(ctx, v153);
                                                                    let v375 =
                                                                        C::multi_lane(ctx, v374);
                                                                    if let Some(v376) = v375 {
                                                                        if v376.0 == 0x10 {
                                                                            if v376.1 == 0x8 {
                                                                                let v379 =
                                                                                    C::value_type(
                                                                                        ctx, v144,
                                                                                    );
                                                                                let v380 =
                                                                                    C::multi_lane(
                                                                                        ctx, v379,
                                                                                    );
                                                                                if let Some(v381) =
                                                                                    v380
                                                                                {
                                                                                    if v381.0
                                                                                        == 0x10
                                                                                    {
                                                                                        if v381.1
                                                                                            == 0x8
                                                                                        {
                                                                                            let v154 = constructor_put_in_xmm(ctx, v153);
                                                                                            let v398 = constructor_put_in_xmm(ctx, v144);
                                                                                            let v399 = &C::xmm_to_xmm_mem(ctx, v398);
                                                                                            let v400 = constructor_x64_pmullw(ctx, v154, v399);
                                                                                            let v401 = &C::xmm_to_xmm_mem(ctx, v398);
                                                                                            let v402 = constructor_x64_pmulhw(ctx, v154, v401);
                                                                                            let v403 = &C::xmm_to_xmm_mem(ctx, v402);
                                                                                            let v404 = constructor_x64_punpckhwd(ctx, v400, v403);
                                                                                            let v405 = constructor_output_xmm(ctx, v404);
                                                                                            // Rule at src/isa/x64/lower.isle line 905.
                                                                                            return Some(v405);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::UwidenLow => {
                                                        let v149 = C::def_inst(ctx, v35.0);
                                                        if let Some(v150) = v149 {
                                                            let v151 = &C::inst_data(ctx, v150);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v152,
                                                                arg: v153,
                                                            } = v151
                                                            {
                                                                if let &Opcode::UwidenLow = v152 {
                                                                    let v374 =
                                                                        C::value_type(ctx, v153);
                                                                    let v375 =
                                                                        C::multi_lane(ctx, v374);
                                                                    if let Some(v376) = v375 {
                                                                        if v376.0 == 0x10 {
                                                                            if v376.1 == 0x8 {
                                                                                let v379 =
                                                                                    C::value_type(
                                                                                        ctx, v144,
                                                                                    );
                                                                                let v380 =
                                                                                    C::multi_lane(
                                                                                        ctx, v379,
                                                                                    );
                                                                                if let Some(v381) =
                                                                                    v380
                                                                                {
                                                                                    if v381.0
                                                                                        == 0x10
                                                                                    {
                                                                                        if v381.1
                                                                                            == 0x8
                                                                                        {
                                                                                            let v154 = constructor_put_in_xmm(ctx, v153);
                                                                                            let v398 = constructor_put_in_xmm(ctx, v144);
                                                                                            let v399 = &C::xmm_to_xmm_mem(ctx, v398);
                                                                                            let v400 = constructor_x64_pmullw(ctx, v154, v399);
                                                                                            let v401 = &C::xmm_to_xmm_mem(ctx, v398);
                                                                                            let v432 = constructor_x64_pmulhuw(ctx, v154, v401);
                                                                                            let v433 = &C::xmm_to_xmm_mem(ctx, v432);
                                                                                            let v443 = constructor_x64_punpcklwd(ctx, v400, v433);
                                                                                            let v444 = constructor_output_xmm(ctx, v443);
                                                                                            // Rule at src/isa/x64/lower.isle line 1005.
                                                                                            return Some(v444);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::UwidenHigh => {
                                                        let v149 = C::def_inst(ctx, v35.0);
                                                        if let Some(v150) = v149 {
                                                            let v151 = &C::inst_data(ctx, v150);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v152,
                                                                arg: v153,
                                                            } = v151
                                                            {
                                                                if let &Opcode::UwidenHigh = v152 {
                                                                    let v374 =
                                                                        C::value_type(ctx, v153);
                                                                    let v375 =
                                                                        C::multi_lane(ctx, v374);
                                                                    if let Some(v376) = v375 {
                                                                        if v376.0 == 0x10 {
                                                                            if v376.1 == 0x8 {
                                                                                let v379 =
                                                                                    C::value_type(
                                                                                        ctx, v144,
                                                                                    );
                                                                                let v380 =
                                                                                    C::multi_lane(
                                                                                        ctx, v379,
                                                                                    );
                                                                                if let Some(v381) =
                                                                                    v380
                                                                                {
                                                                                    if v381.0
                                                                                        == 0x10
                                                                                    {
                                                                                        if v381.1
                                                                                            == 0x8
                                                                                        {
                                                                                            let v154 = constructor_put_in_xmm(ctx, v153);
                                                                                            let v398 = constructor_put_in_xmm(ctx, v144);
                                                                                            let v399 = &C::xmm_to_xmm_mem(ctx, v398);
                                                                                            let v400 = constructor_x64_pmullw(ctx, v154, v399);
                                                                                            let v401 = &C::xmm_to_xmm_mem(ctx, v398);
                                                                                            let v432 = constructor_x64_pmulhuw(ctx, v154, v401);
                                                                                            let v433 = &C::xmm_to_xmm_mem(ctx, v432);
                                                                                            let v434 = constructor_x64_punpckhwd(ctx, v400, v433);
                                                                                            let v435 = constructor_output_xmm(ctx, v434);
                                                                                            // Rule at src/isa/x64/lower.isle line 973.
                                                                                            return Some(v435);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                        let v56 = constructor_put_in_xmm(ctx, v35.0);
                                        let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v347 = constructor_x64_pmulld(ctx, v56, v57);
                                        let v348 = constructor_output_xmm(ctx, v347);
                                        // Rule at src/isa/x64/lower.isle line 838.
                                        return Some(v348);
                                    }
                                }
                                0x40 => {
                                    if v53.1 == 0x2 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v140 = C::def_inst(ctx, v35.1);
                                        if let Some(v141) = v140 {
                                            let v142 = &C::inst_data(ctx, v141);
                                            if let &InstructionData::Unary {
                                                opcode: ref v143,
                                                arg: v144,
                                            } = v142
                                            {
                                                match v143 {
                                                    &Opcode::SwidenLow => {
                                                        let v149 = C::def_inst(ctx, v35.0);
                                                        if let Some(v150) = v149 {
                                                            let v151 = &C::inst_data(ctx, v150);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v152,
                                                                arg: v153,
                                                            } = v151
                                                            {
                                                                if let &Opcode::SwidenLow = v152 {
                                                                    let v374 =
                                                                        C::value_type(ctx, v153);
                                                                    let v375 =
                                                                        C::multi_lane(ctx, v374);
                                                                    if let Some(v376) = v375 {
                                                                        if v376.0 == 0x20 {
                                                                            if v376.1 == 0x4 {
                                                                                let v379 =
                                                                                    C::value_type(
                                                                                        ctx, v144,
                                                                                    );
                                                                                let v380 =
                                                                                    C::multi_lane(
                                                                                        ctx, v379,
                                                                                    );
                                                                                if let Some(v381) =
                                                                                    v380
                                                                                {
                                                                                    if v381.0
                                                                                        == 0x20
                                                                                    {
                                                                                        if v381.1
                                                                                            == 0x4
                                                                                        {
                                                                                            let v406 = &C::put_in_xmm_mem(ctx, v153);
                                                                                            let v422 = constructor_x64_pshufd(ctx, v406, 0x50);
                                                                                            let v409 = &C::put_in_xmm_mem(ctx, v144);
                                                                                            let v423 = constructor_x64_pshufd(ctx, v409, 0x50);
                                                                                            let v424 = &C::xmm_to_xmm_mem(ctx, v423);
                                                                                            let v425 = constructor_x64_pmuldq(ctx, v422, v424);
                                                                                            let v426 = constructor_output_xmm(ctx, v425);
                                                                                            // Rule at src/isa/x64/lower.isle line 949.
                                                                                            return Some(v426);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::SwidenHigh => {
                                                        let v149 = C::def_inst(ctx, v35.0);
                                                        if let Some(v150) = v149 {
                                                            let v151 = &C::inst_data(ctx, v150);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v152,
                                                                arg: v153,
                                                            } = v151
                                                            {
                                                                if let &Opcode::SwidenHigh = v152 {
                                                                    let v374 =
                                                                        C::value_type(ctx, v153);
                                                                    let v375 =
                                                                        C::multi_lane(ctx, v374);
                                                                    if let Some(v376) = v375 {
                                                                        if v376.0 == 0x20 {
                                                                            if v376.1 == 0x4 {
                                                                                let v379 =
                                                                                    C::value_type(
                                                                                        ctx, v144,
                                                                                    );
                                                                                let v380 =
                                                                                    C::multi_lane(
                                                                                        ctx, v379,
                                                                                    );
                                                                                if let Some(v381) =
                                                                                    v380
                                                                                {
                                                                                    if v381.0
                                                                                        == 0x20
                                                                                    {
                                                                                        if v381.1
                                                                                            == 0x4
                                                                                        {
                                                                                            let v406 = &C::put_in_xmm_mem(ctx, v153);
                                                                                            let v408 = constructor_x64_pshufd(ctx, v406, 0xFA);
                                                                                            let v409 = &C::put_in_xmm_mem(ctx, v144);
                                                                                            let v410 = constructor_x64_pshufd(ctx, v409, 0xFA);
                                                                                            let v411 = &C::xmm_to_xmm_mem(ctx, v410);
                                                                                            let v412 = constructor_x64_pmuldq(ctx, v408, v411);
                                                                                            let v413 = constructor_output_xmm(ctx, v412);
                                                                                            // Rule at src/isa/x64/lower.isle line 917.
                                                                                            return Some(v413);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::UwidenLow => {
                                                        let v149 = C::def_inst(ctx, v35.0);
                                                        if let Some(v150) = v149 {
                                                            let v151 = &C::inst_data(ctx, v150);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v152,
                                                                arg: v153,
                                                            } = v151
                                                            {
                                                                if let &Opcode::UwidenLow = v152 {
                                                                    let v374 =
                                                                        C::value_type(ctx, v153);
                                                                    let v375 =
                                                                        C::multi_lane(ctx, v374);
                                                                    if let Some(v376) = v375 {
                                                                        if v376.0 == 0x20 {
                                                                            if v376.1 == 0x4 {
                                                                                let v379 =
                                                                                    C::value_type(
                                                                                        ctx, v144,
                                                                                    );
                                                                                let v380 =
                                                                                    C::multi_lane(
                                                                                        ctx, v379,
                                                                                    );
                                                                                if let Some(v381) =
                                                                                    v380
                                                                                {
                                                                                    if v381.0
                                                                                        == 0x20
                                                                                    {
                                                                                        if v381.1
                                                                                            == 0x4
                                                                                        {
                                                                                            let v406 = &C::put_in_xmm_mem(ctx, v153);
                                                                                            let v422 = constructor_x64_pshufd(ctx, v406, 0x50);
                                                                                            let v409 = &C::put_in_xmm_mem(ctx, v144);
                                                                                            let v423 = constructor_x64_pshufd(ctx, v409, 0x50);
                                                                                            let v424 = &C::xmm_to_xmm_mem(ctx, v423);
                                                                                            let v445 = constructor_x64_pmuludq(ctx, v422, v424);
                                                                                            let v446 = constructor_output_xmm(ctx, v445);
                                                                                            // Rule at src/isa/x64/lower.isle line 1017.
                                                                                            return Some(v446);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::UwidenHigh => {
                                                        let v149 = C::def_inst(ctx, v35.0);
                                                        if let Some(v150) = v149 {
                                                            let v151 = &C::inst_data(ctx, v150);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v152,
                                                                arg: v153,
                                                            } = v151
                                                            {
                                                                if let &Opcode::UwidenHigh = v152 {
                                                                    let v374 =
                                                                        C::value_type(ctx, v153);
                                                                    let v375 =
                                                                        C::multi_lane(ctx, v374);
                                                                    if let Some(v376) = v375 {
                                                                        if v376.0 == 0x20 {
                                                                            if v376.1 == 0x4 {
                                                                                let v379 =
                                                                                    C::value_type(
                                                                                        ctx, v144,
                                                                                    );
                                                                                let v380 =
                                                                                    C::multi_lane(
                                                                                        ctx, v379,
                                                                                    );
                                                                                if let Some(v381) =
                                                                                    v380
                                                                                {
                                                                                    if v381.0
                                                                                        == 0x20
                                                                                    {
                                                                                        if v381.1
                                                                                            == 0x4
                                                                                        {
                                                                                            let v406 = &C::put_in_xmm_mem(ctx, v153);
                                                                                            let v408 = constructor_x64_pshufd(ctx, v406, 0xFA);
                                                                                            let v409 = &C::put_in_xmm_mem(ctx, v144);
                                                                                            let v410 = constructor_x64_pshufd(ctx, v409, 0xFA);
                                                                                            let v411 = &C::xmm_to_xmm_mem(ctx, v410);
                                                                                            let v436 = constructor_x64_pmuludq(ctx, v408, v411);
                                                                                            let v437 = constructor_output_xmm(ctx, v436);
                                                                                            // Rule at src/isa/x64/lower.isle line 985.
                                                                                            return Some(v437);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                        let v56 = constructor_put_in_xmm(ctx, v35.0);
                                        let v352 = constructor_put_in_xmm(ctx, v35.1);
                                        let v356 = RegMemImm::Imm { simm32: 0x20 };
                                        let v357 = &constructor_mov_rmi_to_xmm(ctx, &v356);
                                        let v358 = constructor_x64_psrlq(ctx, v56, v357);
                                        let v359 = &C::xmm_to_xmm_mem(ctx, v352);
                                        let v360 = constructor_x64_pmuludq(ctx, v358, v359);
                                        let v361 = &constructor_mov_rmi_to_xmm(ctx, &v356);
                                        let v362 = constructor_x64_psrlq(ctx, v352, v361);
                                        let v363 = &C::xmm_to_xmm_mem(ctx, v362);
                                        let v364 = constructor_x64_pmuludq(ctx, v56, v363);
                                        let v365 = &C::xmm_to_xmm_mem(ctx, v364);
                                        let v366 = constructor_x64_paddq(ctx, v360, v365);
                                        let v367 = &constructor_mov_rmi_to_xmm(ctx, &v356);
                                        let v368 = constructor_x64_psllq(ctx, v366, v367);
                                        let v369 = &C::xmm_to_xmm_mem(ctx, v352);
                                        let v370 = constructor_x64_pmuludq(ctx, v56, v369);
                                        let v371 = &C::xmm_to_xmm_mem(ctx, v368);
                                        let v372 = constructor_x64_paddq(ctx, v370, v371);
                                        let v373 = constructor_output_xmm(ctx, v372);
                                        // Rule at src/isa/x64/lower.isle line 869.
                                        return Some(v373);
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v47 = &C::sinkable_load(ctx, v35.0);
                            if let Some(v48) = v47 {
                                let v44 = constructor_put_in_gpr(ctx, v35.1);
                                let v49 = &constructor_sink_load_to_gpr_mem_imm(ctx, v48);
                                let v329 = constructor_x64_mul(ctx, v5, v44, v49);
                                let v330 = constructor_output_gpr(ctx, v329);
                                // Rule at src/isa/x64/lower.isle line 789.
                                return Some(v330);
                            }
                            let v42 = &C::simm32_from_value(ctx, v35.0);
                            if let Some(v43) = v42 {
                                let v44 = constructor_put_in_gpr(ctx, v35.1);
                                let v327 = constructor_x64_mul(ctx, v5, v44, v43);
                                let v328 = constructor_output_gpr(ctx, v327);
                                // Rule at src/isa/x64/lower.isle line 786.
                                return Some(v328);
                            }
                            let v38 = constructor_put_in_gpr(ctx, v35.0);
                            let v39 = &constructor_put_in_gpr_mem_imm(ctx, v35.1);
                            let v325 = constructor_x64_mul(ctx, v5, v38, v39);
                            let v326 = constructor_output_gpr(ctx, v325);
                            // Rule at src/isa/x64/lower.isle line 780.
                            return Some(v326);
                        }
                    }
                }
                &Opcode::Umulhi => {
                    let v35 = C::unpack_value_array_2(ctx, v34);
                    let v1773 = C::value_type(ctx, v35.0);
                    match v1773 {
                        I16 => {
                            let v38 = constructor_put_in_gpr(ctx, v35.0);
                            let v1907 = &constructor_put_in_gpr_mem(ctx, v35.1);
                            let v1908 = constructor_mul_hi(ctx, I16, false, v38, v1907);
                            let v1909 = constructor_value_regs_get_gpr(ctx, v1908, 0x1);
                            let v1910 = constructor_output_gpr(ctx, v1909);
                            // Rule at src/isa/x64/lower.isle line 3461.
                            return Some(v1910);
                        }
                        I32 => {
                            let v38 = constructor_put_in_gpr(ctx, v35.0);
                            let v1907 = &constructor_put_in_gpr_mem(ctx, v35.1);
                            let v1911 = constructor_mul_hi(ctx, I32, false, v38, v1907);
                            let v1912 = constructor_value_regs_get_gpr(ctx, v1911, 0x1);
                            let v1913 = constructor_output_gpr(ctx, v1912);
                            // Rule at src/isa/x64/lower.isle line 3466.
                            return Some(v1913);
                        }
                        I64 => {
                            let v38 = constructor_put_in_gpr(ctx, v35.0);
                            let v1907 = &constructor_put_in_gpr_mem(ctx, v35.1);
                            let v1914 = constructor_mul_hi(ctx, I64, false, v38, v1907);
                            let v1915 = constructor_value_regs_get_gpr(ctx, v1914, 0x1);
                            let v1916 = constructor_output_gpr(ctx, v1915);
                            // Rule at src/isa/x64/lower.isle line 3471.
                            return Some(v1916);
                        }
                        _ => {}
                    }
                }
                &Opcode::Smulhi => {
                    let v35 = C::unpack_value_array_2(ctx, v34);
                    let v1773 = C::value_type(ctx, v35.0);
                    match v1773 {
                        I16 => {
                            let v38 = constructor_put_in_gpr(ctx, v35.0);
                            let v1907 = &constructor_put_in_gpr_mem(ctx, v35.1);
                            let v1917 = constructor_mul_hi(ctx, I16, true, v38, v1907);
                            let v1918 = constructor_value_regs_get_gpr(ctx, v1917, 0x1);
                            let v1919 = constructor_output_gpr(ctx, v1918);
                            // Rule at src/isa/x64/lower.isle line 3478.
                            return Some(v1919);
                        }
                        I32 => {
                            let v38 = constructor_put_in_gpr(ctx, v35.0);
                            let v1907 = &constructor_put_in_gpr_mem(ctx, v35.1);
                            let v1920 = constructor_mul_hi(ctx, I32, true, v38, v1907);
                            let v1921 = constructor_value_regs_get_gpr(ctx, v1920, 0x1);
                            let v1922 = constructor_output_gpr(ctx, v1921);
                            // Rule at src/isa/x64/lower.isle line 3483.
                            return Some(v1922);
                        }
                        I64 => {
                            let v38 = constructor_put_in_gpr(ctx, v35.0);
                            let v1907 = &constructor_put_in_gpr_mem(ctx, v35.1);
                            let v1923 = constructor_mul_hi(ctx, I64, true, v38, v1907);
                            let v1924 = constructor_value_regs_get_gpr(ctx, v1923, 0x1);
                            let v1925 = constructor_output_gpr(ctx, v1924);
                            // Rule at src/isa/x64/lower.isle line 3488.
                            return Some(v1925);
                        }
                        _ => {}
                    }
                }
                &Opcode::SqmulRoundSat => {
                    let v35 = C::unpack_value_array_2(ctx, v34);
                    let v1773 = C::value_type(ctx, v35.0);
                    if v1773 == I16X8 {
                        let v56 = constructor_put_in_xmm(ctx, v35.0);
                        let v352 = constructor_put_in_xmm(ctx, v35.1);
                        let v2093 = C::sqmul_round_sat_mask(ctx);
                        let v2094 = &constructor_const_to_xmm_mem(ctx, v2093);
                        let v359 = &C::xmm_to_xmm_mem(ctx, v352);
                        let v2095 = constructor_x64_pmulhrsw(ctx, v56, v359);
                        let v2096 = constructor_x64_pcmpeqw(ctx, v2095, v2094);
                        let v2097 = &C::xmm_to_xmm_mem(ctx, v2096);
                        let v2098 = constructor_x64_pxor(ctx, v2095, v2097);
                        let v2099 = constructor_output_xmm(ctx, v2098);
                        // Rule at src/isa/x64/lower.isle line 3730.
                        return Some(v2099);
                    }
                }
                &Opcode::Udiv => {
                    let v35 = C::unpack_value_array_2(ctx, v34);
                    let v1896 =
                        constructor_div_or_rem(ctx, &DivOrRemKind::UnsignedDiv, v35.0, v35.1);
                    let v1897 = constructor_output_gpr(ctx, v1896);
                    // Rule at src/isa/x64/lower.isle line 3441.
                    return Some(v1897);
                }
                &Opcode::Sdiv => {
                    let v35 = C::unpack_value_array_2(ctx, v34);
                    let v1899 = constructor_div_or_rem(ctx, &DivOrRemKind::SignedDiv, v35.0, v35.1);
                    let v1900 = constructor_output_gpr(ctx, v1899);
                    // Rule at src/isa/x64/lower.isle line 3446.
                    return Some(v1900);
                }
                &Opcode::Urem => {
                    let v35 = C::unpack_value_array_2(ctx, v34);
                    let v1902 =
                        constructor_div_or_rem(ctx, &DivOrRemKind::UnsignedRem, v35.0, v35.1);
                    let v1903 = constructor_output_gpr(ctx, v1902);
                    // Rule at src/isa/x64/lower.isle line 3451.
                    return Some(v1903);
                }
                &Opcode::Srem => {
                    let v35 = C::unpack_value_array_2(ctx, v34);
                    let v1905 = constructor_div_or_rem(ctx, &DivOrRemKind::SignedRem, v35.0, v35.1);
                    let v1906 = constructor_output_gpr(ctx, v1905);
                    // Rule at src/isa/x64/lower.isle line 3456.
                    return Some(v1906);
                }
                &Opcode::IaddCout => {
                    let v35 = C::unpack_value_array_2(ctx, v34);
                    let v80 = C::value_type(ctx, v35.1);
                    let v81 = C::ty_32_or_64(ctx, v80);
                    if let Some(v82) = v81 {
                        let v38 = constructor_put_in_gpr(ctx, v35.0);
                        let v39 = &constructor_put_in_gpr_mem_imm(ctx, v35.1);
                        let v83 = &constructor_x64_add_with_flags_paired(ctx, v82, v38, v39);
                        let v85 = &constructor_x64_setcc_paired(ctx, &CC::O);
                        let v86 = constructor_with_flags(ctx, v83, v85);
                        let v87 = C::value_regs_get(ctx, v86, 0x0);
                        let v88 = C::value_reg(ctx, v87);
                        let v89 = C::value_regs_get(ctx, v86, 0x1);
                        let v90 = C::value_reg(ctx, v89);
                        let v91 = C::output_pair(ctx, v88, v90);
                        // Rule at src/isa/x64/lower.isle line 98.
                        return Some(v91);
                    }
                }
                &Opcode::Band => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v122 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v123) = v122 {
                            let v157 = C::use_bmi1(ctx, v3);
                            if v157 == true {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v149 = C::def_inst(ctx, v35.0);
                                if let Some(v150) = v149 {
                                    let v151 = &C::inst_data(ctx, v150);
                                    if let &InstructionData::Unary {
                                        opcode: ref v152,
                                        arg: v153,
                                    } = v151
                                    {
                                        if let &Opcode::Bnot = v152 {
                                            let v162 = constructor_put_in_gpr(ctx, v153);
                                            let v163 = constructor_put_in_gpr(ctx, v35.1);
                                            let v164 = constructor_x64_andn(ctx, v3, v162, v163);
                                            let v165 = constructor_output_gpr(ctx, v164);
                                            // Rule at src/isa/x64/lower.isle line 260.
                                            return Some(v165);
                                        }
                                    }
                                }
                                let v140 = C::def_inst(ctx, v35.1);
                                if let Some(v141) = v140 {
                                    let v142 = &C::inst_data(ctx, v141);
                                    if let &InstructionData::Unary {
                                        opcode: ref v143,
                                        arg: v144,
                                    } = v142
                                    {
                                        if let &Opcode::Bnot = v143 {
                                            let v158 = constructor_put_in_gpr(ctx, v144);
                                            let v159 = constructor_put_in_gpr(ctx, v35.0);
                                            let v160 = constructor_x64_andn(ctx, v3, v158, v159);
                                            let v161 = constructor_output_gpr(ctx, v160);
                                            // Rule at src/isa/x64/lower.isle line 256.
                                            return Some(v161);
                                        }
                                    }
                                }
                            }
                        }
                        let v52 = C::multi_lane(ctx, v3);
                        if let Some(v53) = v52 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v149 = C::def_inst(ctx, v35.0);
                            if let Some(v150) = v149 {
                                let v151 = &C::inst_data(ctx, v150);
                                if let &InstructionData::Unary {
                                    opcode: ref v152,
                                    arg: v153,
                                } = v151
                                {
                                    if let &Opcode::Bnot = v152 {
                                        let v154 = constructor_put_in_xmm(ctx, v153);
                                        let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v155 = constructor_sse_and_not(ctx, v3, v154, v57);
                                        let v156 = constructor_output_xmm(ctx, v155);
                                        // Rule at src/isa/x64/lower.isle line 253.
                                        return Some(v156);
                                    }
                                }
                            }
                            let v140 = C::def_inst(ctx, v35.1);
                            if let Some(v141) = v140 {
                                let v142 = &C::inst_data(ctx, v141);
                                if let &InstructionData::Unary {
                                    opcode: ref v143,
                                    arg: v144,
                                } = v142
                                {
                                    if let &Opcode::Bnot = v143 {
                                        let v145 = constructor_put_in_xmm(ctx, v144);
                                        let v146 = &C::put_in_xmm_mem(ctx, v35.0);
                                        let v147 = constructor_sse_and_not(ctx, v3, v145, v146);
                                        let v148 = constructor_output_xmm(ctx, v147);
                                        // Rule at src/isa/x64/lower.isle line 251.
                                        return Some(v148);
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v66 = C::put_in_regs(ctx, v35.0);
                            let v68 = constructor_value_regs_get_gpr(ctx, v66, 0x0);
                            let v70 = constructor_value_regs_get_gpr(ctx, v66, 0x1);
                            let v71 = C::put_in_regs(ctx, v35.1);
                            let v72 = constructor_value_regs_get_gpr(ctx, v71, 0x0);
                            let v73 = constructor_value_regs_get_gpr(ctx, v71, 0x1);
                            let v74 = &C::gpr_to_gpr_mem_imm(ctx, v72);
                            let v136 = constructor_x64_and(ctx, I64, v68, v74);
                            let v76 = &C::gpr_to_gpr_mem_imm(ctx, v73);
                            let v137 = constructor_x64_and(ctx, I64, v70, v76);
                            let v138 = constructor_value_gprs(ctx, v136, v137);
                            let v139 = C::output(ctx, v138);
                            // Rule at src/isa/x64/lower.isle line 225.
                            return Some(v139);
                        }
                        if let Some(v53) = v52 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v56 = constructor_put_in_xmm(ctx, v35.0);
                            let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                            let v134 = constructor_sse_and(ctx, v3, v56, v57);
                            let v135 = constructor_output_xmm(ctx, v134);
                            // Rule at src/isa/x64/lower.isle line 219.
                            return Some(v135);
                        }
                        let v130 = C::ty_scalar_float(ctx, v3);
                        if let Some(v131) = v130 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v56 = constructor_put_in_xmm(ctx, v35.0);
                            let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                            let v132 = constructor_sse_and(ctx, v131, v56, v57);
                            let v133 = constructor_output_xmm(ctx, v132);
                            // Rule at src/isa/x64/lower.isle line 207.
                            return Some(v133);
                        }
                        if let Some(v123) = v122 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v42 = &C::simm32_from_value(ctx, v35.0);
                            if let Some(v43) = v42 {
                                let v44 = constructor_put_in_gpr(ctx, v35.1);
                                let v128 = constructor_x64_and(ctx, v3, v44, v43);
                                let v129 = constructor_output_gpr(ctx, v128);
                                // Rule at src/isa/x64/lower.isle line 201.
                                return Some(v129);
                            }
                            let v47 = &C::sinkable_load(ctx, v35.0);
                            if let Some(v48) = v47 {
                                let v44 = constructor_put_in_gpr(ctx, v35.1);
                                let v49 = &constructor_sink_load_to_gpr_mem_imm(ctx, v48);
                                let v126 = constructor_x64_and(ctx, v3, v44, v49);
                                let v127 = constructor_output_gpr(ctx, v126);
                                // Rule at src/isa/x64/lower.isle line 197.
                                return Some(v127);
                            }
                            let v38 = constructor_put_in_gpr(ctx, v35.0);
                            let v39 = &constructor_put_in_gpr_mem_imm(ctx, v35.1);
                            let v124 = constructor_x64_and(ctx, v3, v38, v39);
                            let v125 = constructor_output_gpr(ctx, v124);
                            // Rule at src/isa/x64/lower.isle line 190.
                            return Some(v125);
                        }
                    }
                }
                &Opcode::Bor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v66 = C::put_in_regs(ctx, v35.0);
                            let v176 = C::put_in_regs(ctx, v35.1);
                            let v177 = constructor_or_i128(ctx, v66, v176);
                            let v178 = C::output(ctx, v177);
                            // Rule at src/isa/x64/lower.isle line 314.
                            return Some(v178);
                        }
                        let v52 = C::multi_lane(ctx, v3);
                        if let Some(v53) = v52 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v56 = constructor_put_in_xmm(ctx, v35.0);
                            let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                            let v174 = constructor_sse_or(ctx, v3, v56, v57);
                            let v175 = constructor_output_xmm(ctx, v174);
                            // Rule at src/isa/x64/lower.isle line 299.
                            return Some(v175);
                        }
                        let v130 = C::ty_scalar_float(ctx, v3);
                        if let Some(v131) = v130 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v56 = constructor_put_in_xmm(ctx, v35.0);
                            let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                            let v172 = constructor_sse_or(ctx, v131, v56, v57);
                            let v173 = constructor_output_xmm(ctx, v172);
                            // Rule at src/isa/x64/lower.isle line 287.
                            return Some(v173);
                        }
                        let v122 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v123) = v122 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v42 = &C::simm32_from_value(ctx, v35.0);
                            if let Some(v43) = v42 {
                                let v44 = constructor_put_in_gpr(ctx, v35.1);
                                let v170 = constructor_x64_or(ctx, v3, v44, v43);
                                let v171 = constructor_output_gpr(ctx, v170);
                                // Rule at src/isa/x64/lower.isle line 281.
                                return Some(v171);
                            }
                            let v47 = &C::sinkable_load(ctx, v35.0);
                            if let Some(v48) = v47 {
                                let v44 = constructor_put_in_gpr(ctx, v35.1);
                                let v49 = &constructor_sink_load_to_gpr_mem_imm(ctx, v48);
                                let v168 = constructor_x64_or(ctx, v3, v44, v49);
                                let v169 = constructor_output_gpr(ctx, v168);
                                // Rule at src/isa/x64/lower.isle line 277.
                                return Some(v169);
                            }
                            let v38 = constructor_put_in_gpr(ctx, v35.0);
                            let v39 = &constructor_put_in_gpr_mem_imm(ctx, v35.1);
                            let v166 = constructor_x64_or(ctx, v3, v38, v39);
                            let v167 = constructor_output_gpr(ctx, v166);
                            // Rule at src/isa/x64/lower.isle line 270.
                            return Some(v167);
                        }
                    }
                }
                &Opcode::Bxor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v66 = C::put_in_regs(ctx, v35.0);
                            let v68 = constructor_value_regs_get_gpr(ctx, v66, 0x0);
                            let v70 = constructor_value_regs_get_gpr(ctx, v66, 0x1);
                            let v71 = C::put_in_regs(ctx, v35.1);
                            let v72 = constructor_value_regs_get_gpr(ctx, v71, 0x0);
                            let v73 = constructor_value_regs_get_gpr(ctx, v71, 0x1);
                            let v74 = &C::gpr_to_gpr_mem_imm(ctx, v72);
                            let v189 = constructor_x64_xor(ctx, I64, v68, v74);
                            let v76 = &C::gpr_to_gpr_mem_imm(ctx, v73);
                            let v190 = constructor_x64_xor(ctx, I64, v70, v76);
                            let v191 = constructor_value_gprs(ctx, v189, v190);
                            let v192 = C::output(ctx, v191);
                            // Rule at src/isa/x64/lower.isle line 349.
                            return Some(v192);
                        }
                        let v52 = C::multi_lane(ctx, v3);
                        if let Some(v53) = v52 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v56 = constructor_put_in_xmm(ctx, v35.0);
                            let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                            let v187 = constructor_sse_xor(ctx, v3, v56, v57);
                            let v188 = constructor_output_xmm(ctx, v187);
                            // Rule at src/isa/x64/lower.isle line 344.
                            return Some(v188);
                        }
                        let v130 = C::ty_scalar_float(ctx, v3);
                        if let Some(v131) = v130 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v56 = constructor_put_in_xmm(ctx, v35.0);
                            let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                            let v185 = constructor_sse_xor(ctx, v131, v56, v57);
                            let v186 = constructor_output_xmm(ctx, v185);
                            // Rule at src/isa/x64/lower.isle line 339.
                            return Some(v186);
                        }
                        let v122 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v123) = v122 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v42 = &C::simm32_from_value(ctx, v35.0);
                            if let Some(v43) = v42 {
                                let v44 = constructor_put_in_gpr(ctx, v35.1);
                                let v183 = constructor_x64_xor(ctx, v3, v44, v43);
                                let v184 = constructor_output_gpr(ctx, v183);
                                // Rule at src/isa/x64/lower.isle line 333.
                                return Some(v184);
                            }
                            let v47 = &C::sinkable_load(ctx, v35.0);
                            if let Some(v48) = v47 {
                                let v44 = constructor_put_in_gpr(ctx, v35.1);
                                let v49 = &constructor_sink_load_to_gpr_mem_imm(ctx, v48);
                                let v181 = constructor_x64_xor(ctx, v3, v44, v49);
                                let v182 = constructor_output_gpr(ctx, v181);
                                // Rule at src/isa/x64/lower.isle line 329.
                                return Some(v182);
                            }
                            let v38 = constructor_put_in_gpr(ctx, v35.0);
                            let v39 = &constructor_put_in_gpr_mem_imm(ctx, v35.1);
                            let v179 = constructor_x64_xor(ctx, v3, v38, v39);
                            let v180 = constructor_output_gpr(ctx, v179);
                            // Rule at src/isa/x64/lower.isle line 322.
                            return Some(v180);
                        }
                    }
                }
                &Opcode::Rotl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v66 = C::put_in_regs(ctx, v35.0);
                            let v270 = constructor_lo_gpr(ctx, v35.1);
                            let v271 = constructor_shl_i128(ctx, v66, v270);
                            let v273 = constructor_imm(ctx, I64, 0x80);
                            let v274 = C::gpr_new(ctx, v273);
                            let v275 = &C::gpr_to_gpr_mem_imm(ctx, v270);
                            let v276 = constructor_x64_sub(ctx, I64, v274, v275);
                            let v277 = constructor_shr_i128(ctx, v66, v276);
                            let v278 = constructor_or_i128(ctx, v271, v277);
                            let v279 = C::output(ctx, v278);
                            // Rule at src/isa/x64/lower.isle line 704.
                            return Some(v279);
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v38 = constructor_put_in_gpr(ctx, v35.0);
                            let v193 = &constructor_put_masked_in_imm8_gpr(ctx, v35.1, v5);
                            let v268 = constructor_x64_rotl(ctx, v5, v38, v193);
                            let v269 = constructor_output_gpr(ctx, v268);
                            // Rule at src/isa/x64/lower.isle line 698.
                            return Some(v269);
                        }
                    }
                }
                &Opcode::Rotr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v66 = C::put_in_regs(ctx, v35.0);
                            let v270 = constructor_lo_gpr(ctx, v35.1);
                            let v282 = constructor_shr_i128(ctx, v66, v270);
                            let v273 = constructor_imm(ctx, I64, 0x80);
                            let v274 = C::gpr_new(ctx, v273);
                            let v275 = &C::gpr_to_gpr_mem_imm(ctx, v270);
                            let v276 = constructor_x64_sub(ctx, I64, v274, v275);
                            let v283 = constructor_shl_i128(ctx, v66, v276);
                            let v284 = constructor_or_i128(ctx, v282, v283);
                            let v285 = C::output(ctx, v284);
                            // Rule at src/isa/x64/lower.isle line 725.
                            return Some(v285);
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v38 = constructor_put_in_gpr(ctx, v35.0);
                            let v193 = &constructor_put_masked_in_imm8_gpr(ctx, v35.1, v5);
                            let v280 = constructor_x64_rotr(ctx, v5, v38, v193);
                            let v281 = constructor_output_gpr(ctx, v280);
                            // Rule at src/isa/x64/lower.isle line 719.
                            return Some(v281);
                        }
                    }
                }
                &Opcode::Ishl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v196 = constructor_lo_gpr(ctx, v35.1);
                                let v197 = C::put_in_regs(ctx, v35.0);
                                let v198 = constructor_shl_i128(ctx, v197, v196);
                                let v199 = C::output(ctx, v198);
                                // Rule at src/isa/x64/lower.isle line 402.
                                return Some(v199);
                            }
                            I8X16 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v200 = &constructor_mask_xmm_shift(ctx, v3, v35.1);
                                let v201 = constructor_put_in_xmm(ctx, v35.0);
                                let v202 = &constructor_mov_rmi_to_xmm(ctx, v200);
                                let v203 = constructor_x64_psllw(ctx, v201, v202);
                                let v204 = &constructor_ishl_i8x16_mask(ctx, v200);
                                let v207 = constructor_x64_load(ctx, I8X16, v204, &ExtKind::None);
                                let v208 = RegMem::Reg { reg: v207 };
                                let v209 = &C::reg_mem_to_xmm_mem(ctx, &v208);
                                let v210 = constructor_sse_and(ctx, I8X16, v203, v209);
                                let v211 = constructor_output_xmm(ctx, v210);
                                // Rule at src/isa/x64/lower.isle line 414.
                                return Some(v211);
                            }
                            I16X8 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v212 = &constructor_mask_xmm_shift(ctx, v3, v35.1);
                                let v213 = &constructor_mov_rmi_to_xmm(ctx, v212);
                                let v214 = constructor_x64_psllw(ctx, v56, v213);
                                let v215 = constructor_output_xmm(ctx, v214);
                                // Rule at src/isa/x64/lower.isle line 458.
                                return Some(v215);
                            }
                            I32X4 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v212 = &constructor_mask_xmm_shift(ctx, v3, v35.1);
                                let v213 = &constructor_mov_rmi_to_xmm(ctx, v212);
                                let v216 = constructor_x64_pslld(ctx, v56, v213);
                                let v217 = constructor_output_xmm(ctx, v216);
                                // Rule at src/isa/x64/lower.isle line 461.
                                return Some(v217);
                            }
                            I64X2 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v212 = &constructor_mask_xmm_shift(ctx, v3, v35.1);
                                let v213 = &constructor_mov_rmi_to_xmm(ctx, v212);
                                let v218 = constructor_x64_psllq(ctx, v56, v213);
                                let v219 = constructor_output_xmm(ctx, v218);
                                // Rule at src/isa/x64/lower.isle line 464.
                                return Some(v219);
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v38 = constructor_put_in_gpr(ctx, v35.0);
                            let v193 = &constructor_put_masked_in_imm8_gpr(ctx, v35.1, v5);
                            let v194 = constructor_x64_shl(ctx, v5, v38, v193);
                            let v195 = constructor_output_gpr(ctx, v194);
                            // Rule at src/isa/x64/lower.isle line 363.
                            return Some(v195);
                        }
                    }
                }
                &Opcode::Ushr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v196 = constructor_lo_gpr(ctx, v35.1);
                                let v197 = C::put_in_regs(ctx, v35.0);
                                let v224 = constructor_shr_i128(ctx, v197, v196);
                                let v225 = C::output(ctx, v224);
                                // Rule at src/isa/x64/lower.isle line 508.
                                return Some(v225);
                            }
                            I8X16 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v200 = &constructor_mask_xmm_shift(ctx, v3, v35.1);
                                let v201 = constructor_put_in_xmm(ctx, v35.0);
                                let v202 = &constructor_mov_rmi_to_xmm(ctx, v200);
                                let v226 = constructor_x64_psrlw(ctx, v201, v202);
                                let v227 = &constructor_ushr_i8x16_mask(ctx, v200);
                                let v228 = &constructor_synthetic_amode_to_xmm_mem(ctx, v227);
                                let v229 = constructor_sse_and(ctx, I8X16, v226, v228);
                                let v230 = constructor_output_xmm(ctx, v229);
                                // Rule at src/isa/x64/lower.isle line 518.
                                return Some(v230);
                            }
                            I16X8 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v212 = &constructor_mask_xmm_shift(ctx, v3, v35.1);
                                let v213 = &constructor_mov_rmi_to_xmm(ctx, v212);
                                let v231 = constructor_x64_psrlw(ctx, v56, v213);
                                let v232 = constructor_output_xmm(ctx, v231);
                                // Rule at src/isa/x64/lower.isle line 563.
                                return Some(v232);
                            }
                            I32X4 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v212 = &constructor_mask_xmm_shift(ctx, v3, v35.1);
                                let v213 = &constructor_mov_rmi_to_xmm(ctx, v212);
                                let v233 = constructor_x64_psrld(ctx, v56, v213);
                                let v234 = constructor_output_xmm(ctx, v233);
                                // Rule at src/isa/x64/lower.isle line 566.
                                return Some(v234);
                            }
                            I64X2 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v212 = &constructor_mask_xmm_shift(ctx, v3, v35.1);
                                let v213 = &constructor_mov_rmi_to_xmm(ctx, v212);
                                let v235 = constructor_x64_psrlq(ctx, v56, v213);
                                let v236 = constructor_output_xmm(ctx, v235);
                                // Rule at src/isa/x64/lower.isle line 569.
                                return Some(v236);
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v221 = constructor_extend_to_gpr(ctx, v35.0, v5, &ExtendKind::Zero);
                            let v193 = &constructor_put_masked_in_imm8_gpr(ctx, v35.1, v5);
                            let v222 = constructor_x64_shr(ctx, v5, v221, v193);
                            let v223 = constructor_output_gpr(ctx, v222);
                            // Rule at src/isa/x64/lower.isle line 471.
                            return Some(v223);
                        }
                    }
                }
                &Opcode::Sshr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v196 = constructor_lo_gpr(ctx, v35.1);
                                let v197 = C::put_in_regs(ctx, v35.0);
                                let v241 = constructor_sar_i128(ctx, v197, v196);
                                let v242 = C::output(ctx, v241);
                                // Rule at src/isa/x64/lower.isle line 619.
                                return Some(v242);
                            }
                            I8X16 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v212 = &constructor_mask_xmm_shift(ctx, v3, v35.1);
                                let v243 = &C::xmm_to_xmm_mem(ctx, v56);
                                let v244 = constructor_x64_punpcklbw(ctx, v56, v243);
                                let v245 = &C::xmm_to_xmm_mem(ctx, v56);
                                let v246 = constructor_x64_punpckhbw(ctx, v56, v245);
                                let v80 = C::value_type(ctx, v35.1);
                                let v247 = &constructor_sshr_i8x16_bigger_shift(ctx, v80, v212);
                                let v248 = constructor_x64_psraw(ctx, v244, v247);
                                let v249 = constructor_x64_psraw(ctx, v246, v247);
                                let v250 = &C::xmm_to_xmm_mem(ctx, v249);
                                let v251 = constructor_x64_packsswb(ctx, v248, v250);
                                let v252 = constructor_output_xmm(ctx, v251);
                                // Rule at src/isa/x64/lower.isle line 640.
                                return Some(v252);
                            }
                            I16X8 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v212 = &constructor_mask_xmm_shift(ctx, v3, v35.1);
                                let v213 = &constructor_mov_rmi_to_xmm(ctx, v212);
                                let v253 = constructor_x64_psraw(ctx, v56, v213);
                                let v254 = constructor_output_xmm(ctx, v253);
                                // Rule at src/isa/x64/lower.isle line 669.
                                return Some(v254);
                            }
                            I32X4 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v212 = &constructor_mask_xmm_shift(ctx, v3, v35.1);
                                let v213 = &constructor_mov_rmi_to_xmm(ctx, v212);
                                let v255 = constructor_x64_psrad(ctx, v56, v213);
                                let v256 = constructor_output_xmm(ctx, v255);
                                // Rule at src/isa/x64/lower.isle line 672.
                                return Some(v256);
                            }
                            I64X2 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v258 = constructor_x64_pextrq(ctx, v56, 0x0);
                                let v260 = constructor_x64_pextrq(ctx, v56, 0x1);
                                let v261 = &constructor_put_masked_in_imm8_gpr(ctx, v35.1, I64);
                                let v262 = constructor_x64_sar(ctx, I64, v258, v261);
                                let v263 = constructor_x64_sar(ctx, I64, v260, v261);
                                let v264 = &C::gpr_to_gpr_mem(ctx, v262);
                                let v265 = &C::gpr_to_gpr_mem(ctx, v263);
                                let v266 = constructor_make_i64x2_from_lanes(ctx, v264, v265);
                                let v267 = constructor_output_xmm(ctx, v266);
                                // Rule at src/isa/x64/lower.isle line 683.
                                return Some(v267);
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v238 = constructor_extend_to_gpr(ctx, v35.0, v5, &ExtendKind::Sign);
                            let v193 = &constructor_put_masked_in_imm8_gpr(ctx, v35.1, v5);
                            let v239 = constructor_x64_sar(ctx, v5, v238, v193);
                            let v240 = constructor_output_gpr(ctx, v239);
                            // Rule at src/isa/x64/lower.isle line 582.
                            return Some(v240);
                        }
                    }
                }
                &Opcode::Fadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v47 = &C::sinkable_load(ctx, v35.0);
                                if let Some(v48) = v47 {
                                    let v1052 = constructor_put_in_xmm(ctx, v35.1);
                                    let v1053 = &constructor_sink_load_to_xmm_mem(ctx, v48);
                                    let v1054 = constructor_x64_addss(ctx, v1052, v1053);
                                    let v1055 = constructor_output_xmm(ctx, v1054);
                                    // Rule at src/isa/x64/lower.isle line 2161.
                                    return Some(v1055);
                                }
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v1044 = constructor_x64_addss(ctx, v56, v57);
                                let v1045 = constructor_output_xmm(ctx, v1044);
                                // Rule at src/isa/x64/lower.isle line 2150.
                                return Some(v1045);
                            }
                            F64 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v47 = &C::sinkable_load(ctx, v35.0);
                                if let Some(v48) = v47 {
                                    let v1052 = constructor_put_in_xmm(ctx, v35.1);
                                    let v1053 = &constructor_sink_load_to_xmm_mem(ctx, v48);
                                    let v1056 = constructor_x64_addsd(ctx, v1052, v1053);
                                    let v1057 = constructor_output_xmm(ctx, v1056);
                                    // Rule at src/isa/x64/lower.isle line 2163.
                                    return Some(v1057);
                                }
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v1046 = constructor_x64_addsd(ctx, v56, v57);
                                let v1047 = constructor_output_xmm(ctx, v1046);
                                // Rule at src/isa/x64/lower.isle line 2152.
                                return Some(v1047);
                            }
                            F32X4 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v47 = &C::sinkable_load(ctx, v35.0);
                                if let Some(v48) = v47 {
                                    let v1052 = constructor_put_in_xmm(ctx, v35.1);
                                    let v1053 = &constructor_sink_load_to_xmm_mem(ctx, v48);
                                    let v1058 = constructor_x64_addps(ctx, v1052, v1053);
                                    let v1059 = constructor_output_xmm(ctx, v1058);
                                    // Rule at src/isa/x64/lower.isle line 2165.
                                    return Some(v1059);
                                }
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v1048 = constructor_x64_addps(ctx, v56, v57);
                                let v1049 = constructor_output_xmm(ctx, v1048);
                                // Rule at src/isa/x64/lower.isle line 2154.
                                return Some(v1049);
                            }
                            F64X2 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v47 = &C::sinkable_load(ctx, v35.0);
                                if let Some(v48) = v47 {
                                    let v1052 = constructor_put_in_xmm(ctx, v35.1);
                                    let v1053 = &constructor_sink_load_to_xmm_mem(ctx, v48);
                                    let v1060 = constructor_x64_addpd(ctx, v1052, v1053);
                                    let v1061 = constructor_output_xmm(ctx, v1060);
                                    // Rule at src/isa/x64/lower.isle line 2167.
                                    return Some(v1061);
                                }
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v1050 = constructor_x64_addpd(ctx, v56, v57);
                                let v1051 = constructor_output_xmm(ctx, v1050);
                                // Rule at src/isa/x64/lower.isle line 2156.
                                return Some(v1051);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fsub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v1062 = constructor_x64_subss(ctx, v56, v57);
                                let v1063 = constructor_output_xmm(ctx, v1062);
                                // Rule at src/isa/x64/lower.isle line 2172.
                                return Some(v1063);
                            }
                            F64 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v1064 = constructor_x64_subsd(ctx, v56, v57);
                                let v1065 = constructor_output_xmm(ctx, v1064);
                                // Rule at src/isa/x64/lower.isle line 2174.
                                return Some(v1065);
                            }
                            F32X4 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v1066 = constructor_x64_subps(ctx, v56, v57);
                                let v1067 = constructor_output_xmm(ctx, v1066);
                                // Rule at src/isa/x64/lower.isle line 2176.
                                return Some(v1067);
                            }
                            F64X2 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v1068 = constructor_x64_subpd(ctx, v56, v57);
                                let v1069 = constructor_output_xmm(ctx, v1068);
                                // Rule at src/isa/x64/lower.isle line 2178.
                                return Some(v1069);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fmul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v47 = &C::sinkable_load(ctx, v35.0);
                                if let Some(v48) = v47 {
                                    let v1052 = constructor_put_in_xmm(ctx, v35.1);
                                    let v1053 = &constructor_sink_load_to_xmm_mem(ctx, v48);
                                    let v1078 = constructor_x64_mulss(ctx, v1052, v1053);
                                    let v1079 = constructor_output_xmm(ctx, v1078);
                                    // Rule at src/isa/x64/lower.isle line 2194.
                                    return Some(v1079);
                                }
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v1070 = constructor_x64_mulss(ctx, v56, v57);
                                let v1071 = constructor_output_xmm(ctx, v1070);
                                // Rule at src/isa/x64/lower.isle line 2183.
                                return Some(v1071);
                            }
                            F64 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v47 = &C::sinkable_load(ctx, v35.0);
                                if let Some(v48) = v47 {
                                    let v1052 = constructor_put_in_xmm(ctx, v35.1);
                                    let v1053 = &constructor_sink_load_to_xmm_mem(ctx, v48);
                                    let v1080 = constructor_x64_mulsd(ctx, v1052, v1053);
                                    let v1081 = constructor_output_xmm(ctx, v1080);
                                    // Rule at src/isa/x64/lower.isle line 2196.
                                    return Some(v1081);
                                }
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v1072 = constructor_x64_mulsd(ctx, v56, v57);
                                let v1073 = constructor_output_xmm(ctx, v1072);
                                // Rule at src/isa/x64/lower.isle line 2185.
                                return Some(v1073);
                            }
                            F32X4 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v47 = &C::sinkable_load(ctx, v35.0);
                                if let Some(v48) = v47 {
                                    let v1052 = constructor_put_in_xmm(ctx, v35.1);
                                    let v1053 = &constructor_sink_load_to_xmm_mem(ctx, v48);
                                    let v1082 = constructor_x64_mulps(ctx, v1052, v1053);
                                    let v1083 = constructor_output_xmm(ctx, v1082);
                                    // Rule at src/isa/x64/lower.isle line 2198.
                                    return Some(v1083);
                                }
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v1074 = constructor_x64_mulps(ctx, v56, v57);
                                let v1075 = constructor_output_xmm(ctx, v1074);
                                // Rule at src/isa/x64/lower.isle line 2187.
                                return Some(v1075);
                            }
                            F64X2 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v47 = &C::sinkable_load(ctx, v35.0);
                                if let Some(v48) = v47 {
                                    let v1052 = constructor_put_in_xmm(ctx, v35.1);
                                    let v1053 = &constructor_sink_load_to_xmm_mem(ctx, v48);
                                    let v1084 = constructor_x64_mulpd(ctx, v1052, v1053);
                                    let v1085 = constructor_output_xmm(ctx, v1084);
                                    // Rule at src/isa/x64/lower.isle line 2200.
                                    return Some(v1085);
                                }
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v1076 = constructor_x64_mulpd(ctx, v56, v57);
                                let v1077 = constructor_output_xmm(ctx, v1076);
                                // Rule at src/isa/x64/lower.isle line 2189.
                                return Some(v1077);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v1086 = constructor_x64_divss(ctx, v56, v57);
                                let v1087 = constructor_output_xmm(ctx, v1086);
                                // Rule at src/isa/x64/lower.isle line 2205.
                                return Some(v1087);
                            }
                            F64 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v1088 = constructor_x64_divsd(ctx, v56, v57);
                                let v1089 = constructor_output_xmm(ctx, v1088);
                                // Rule at src/isa/x64/lower.isle line 2207.
                                return Some(v1089);
                            }
                            F32X4 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v1090 = constructor_x64_divps(ctx, v56, v57);
                                let v1091 = constructor_output_xmm(ctx, v1090);
                                // Rule at src/isa/x64/lower.isle line 2209.
                                return Some(v1091);
                            }
                            F64X2 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v1092 = constructor_x64_divpd(ctx, v56, v57);
                                let v1093 = constructor_output_xmm(ctx, v1092);
                                // Rule at src/isa/x64/lower.isle line 2211.
                                return Some(v1093);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fcopysign => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v1773 = C::value_type(ctx, v35.0);
                                if v1773 == F32 {
                                    let v1813 = constructor_imm(ctx, F32, 0x80000000);
                                    let v1814 = C::xmm_new(ctx, v1813);
                                    let v1815 = &C::put_in_xmm_mem(ctx, v35.0);
                                    let v1816 = constructor_x64_andnps(ctx, v1814, v1815);
                                    let v1817 = &C::put_in_xmm_mem(ctx, v35.1);
                                    let v1818 = constructor_x64_andps(ctx, v1814, v1817);
                                    let v1819 = &C::xmm_to_xmm_mem(ctx, v1818);
                                    let v1820 = constructor_x64_orps(ctx, v1816, v1819);
                                    let v1821 = constructor_output_xmm(ctx, v1820);
                                    // Rule at src/isa/x64/lower.isle line 3342.
                                    return Some(v1821);
                                }
                            }
                            F64 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v1773 = C::value_type(ctx, v35.0);
                                if v1773 == F64 {
                                    let v1822 = constructor_imm(ctx, F64, 0x8000000000000000);
                                    let v1823 = C::xmm_new(ctx, v1822);
                                    let v1815 = &C::put_in_xmm_mem(ctx, v35.0);
                                    let v1824 = constructor_x64_andnpd(ctx, v1823, v1815);
                                    let v1817 = &C::put_in_xmm_mem(ctx, v35.1);
                                    let v1825 = constructor_x64_andpd(ctx, v1823, v1817);
                                    let v1826 = &C::xmm_to_xmm_mem(ctx, v1825);
                                    let v1827 = constructor_x64_orpd(ctx, v1824, v1826);
                                    let v1828 = constructor_output_xmm(ctx, v1827);
                                    // Rule at src/isa/x64/lower.isle line 3348.
                                    return Some(v1828);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fmin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v352 = constructor_put_in_xmm(ctx, v35.1);
                                let v1112 = constructor_xmm_min_max_seq(ctx, F32, true, v56, v352);
                                let v1113 = constructor_output_xmm(ctx, v1112);
                                // Rule at src/isa/x64/lower.isle line 2242.
                                return Some(v1113);
                            }
                            F64 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v352 = constructor_put_in_xmm(ctx, v35.1);
                                let v1114 = constructor_xmm_min_max_seq(ctx, F64, true, v56, v352);
                                let v1115 = constructor_output_xmm(ctx, v1114);
                                // Rule at src/isa/x64/lower.isle line 2244.
                                return Some(v1115);
                            }
                            F32X4 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v1116 = constructor_x64_minps(ctx, v56, v57);
                                let v1117 = constructor_put_in_xmm(ctx, v35.1);
                                let v1118 = &C::put_in_xmm_mem(ctx, v35.0);
                                let v1119 = constructor_x64_minps(ctx, v1117, v1118);
                                let v1120 = &C::xmm_to_xmm_mem(ctx, v1119);
                                let v1121 = constructor_x64_orps(ctx, v1116, v1120);
                                let v1122 = &C::xmm_to_xmm_mem(ctx, v1119);
                                let v1123 =
                                    constructor_x64_cmpps(ctx, v1121, v1122, &FcmpImm::Unordered);
                                let v1124 = &C::xmm_to_xmm_mem(ctx, v1123);
                                let v1125 = constructor_x64_orps(ctx, v1121, v1124);
                                let v1127 = RegMemImm::Imm { simm32: 0xA };
                                let v1128 = &constructor_mov_rmi_to_xmm(ctx, &v1127);
                                let v1129 = constructor_x64_psrld(ctx, v1123, v1128);
                                let v1130 = &C::xmm_to_xmm_mem(ctx, v1125);
                                let v1131 = constructor_x64_andnps(ctx, v1129, v1130);
                                let v1132 = constructor_output_xmm(ctx, v1131);
                                // Rule at src/isa/x64/lower.isle line 2259.
                                return Some(v1132);
                            }
                            F64X2 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v1133 = constructor_x64_minpd(ctx, v56, v57);
                                let v1117 = constructor_put_in_xmm(ctx, v35.1);
                                let v1118 = &C::put_in_xmm_mem(ctx, v35.0);
                                let v1134 = constructor_x64_minpd(ctx, v1117, v1118);
                                let v1135 = &C::xmm_to_xmm_mem(ctx, v1134);
                                let v1136 = constructor_x64_orpd(ctx, v1133, v1135);
                                let v1137 = &C::xmm_to_xmm_mem(ctx, v1134);
                                let v1138 =
                                    constructor_x64_cmppd(ctx, v1133, v1137, &FcmpImm::Unordered);
                                let v1139 = &C::xmm_to_xmm_mem(ctx, v1138);
                                let v1140 = constructor_x64_orpd(ctx, v1136, v1139);
                                let v1142 = RegMemImm::Imm { simm32: 0xD };
                                let v1143 = &constructor_mov_rmi_to_xmm(ctx, &v1142);
                                let v1144 = constructor_x64_psrlq(ctx, v1138, v1143);
                                let v1145 = &C::xmm_to_xmm_mem(ctx, v1140);
                                let v1146 = constructor_x64_andnpd(ctx, v1144, v1145);
                                let v1147 = constructor_output_xmm(ctx, v1146);
                                // Rule at src/isa/x64/lower.isle line 2302.
                                return Some(v1147);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::FminPseudo => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v1052 = constructor_put_in_xmm(ctx, v35.1);
                                let v146 = &C::put_in_xmm_mem(ctx, v35.0);
                                let v1183 = constructor_x64_minss(ctx, v1052, v146);
                                let v1184 = constructor_output_xmm(ctx, v1183);
                                // Rule at src/isa/x64/lower.isle line 2411.
                                return Some(v1184);
                            }
                            F64 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v1052 = constructor_put_in_xmm(ctx, v35.1);
                                let v146 = &C::put_in_xmm_mem(ctx, v35.0);
                                let v1185 = constructor_x64_minsd(ctx, v1052, v146);
                                let v1186 = constructor_output_xmm(ctx, v1185);
                                // Rule at src/isa/x64/lower.isle line 2413.
                                return Some(v1186);
                            }
                            F32X4 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v1052 = constructor_put_in_xmm(ctx, v35.1);
                                let v146 = &C::put_in_xmm_mem(ctx, v35.0);
                                let v1187 = constructor_x64_minps(ctx, v1052, v146);
                                let v1188 = constructor_output_xmm(ctx, v1187);
                                // Rule at src/isa/x64/lower.isle line 2415.
                                return Some(v1188);
                            }
                            F64X2 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v1052 = constructor_put_in_xmm(ctx, v35.1);
                                let v146 = &C::put_in_xmm_mem(ctx, v35.0);
                                let v1189 = constructor_x64_minpd(ctx, v1052, v146);
                                let v1190 = constructor_output_xmm(ctx, v1189);
                                // Rule at src/isa/x64/lower.isle line 2417.
                                return Some(v1190);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fmax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v352 = constructor_put_in_xmm(ctx, v35.1);
                                let v1149 = constructor_xmm_min_max_seq(ctx, F32, false, v56, v352);
                                let v1150 = constructor_output_xmm(ctx, v1149);
                                // Rule at src/isa/x64/lower.isle line 2314.
                                return Some(v1150);
                            }
                            F64 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v352 = constructor_put_in_xmm(ctx, v35.1);
                                let v1151 = constructor_xmm_min_max_seq(ctx, F64, false, v56, v352);
                                let v1152 = constructor_output_xmm(ctx, v1151);
                                // Rule at src/isa/x64/lower.isle line 2316.
                                return Some(v1152);
                            }
                            F32X4 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v1153 = constructor_x64_maxps(ctx, v56, v57);
                                let v1117 = constructor_put_in_xmm(ctx, v35.1);
                                let v1118 = &C::put_in_xmm_mem(ctx, v35.0);
                                let v1154 = constructor_x64_maxps(ctx, v1117, v1118);
                                let v1155 = &C::xmm_to_xmm_mem(ctx, v1154);
                                let v1156 = constructor_x64_xorps(ctx, v1153, v1155);
                                let v1157 = &C::xmm_to_xmm_mem(ctx, v1156);
                                let v1158 = constructor_x64_orps(ctx, v1153, v1157);
                                let v1159 = &C::xmm_to_xmm_mem(ctx, v1156);
                                let v1160 = constructor_x64_subps(ctx, v1158, v1159);
                                let v1161 = &C::xmm_to_xmm_mem(ctx, v1158);
                                let v1162 =
                                    constructor_x64_cmpps(ctx, v1158, v1161, &FcmpImm::Unordered);
                                let v1127 = RegMemImm::Imm { simm32: 0xA };
                                let v1163 = &constructor_mov_rmi_to_xmm(ctx, &v1127);
                                let v1164 = constructor_x64_psrld(ctx, v1162, v1163);
                                let v1165 = &C::xmm_to_xmm_mem(ctx, v1160);
                                let v1166 = constructor_x64_andnps(ctx, v1164, v1165);
                                let v1167 = constructor_output_xmm(ctx, v1166);
                                // Rule at src/isa/x64/lower.isle line 2322.
                                return Some(v1167);
                            }
                            F64X2 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v1168 = constructor_x64_maxpd(ctx, v56, v57);
                                let v1117 = constructor_put_in_xmm(ctx, v35.1);
                                let v1118 = &C::put_in_xmm_mem(ctx, v35.0);
                                let v1169 = constructor_x64_maxpd(ctx, v1117, v1118);
                                let v1170 = &C::xmm_to_xmm_mem(ctx, v1169);
                                let v1171 = constructor_x64_xorpd(ctx, v1168, v1170);
                                let v1172 = &C::xmm_to_xmm_mem(ctx, v1171);
                                let v1173 = constructor_x64_orpd(ctx, v1168, v1172);
                                let v1174 = &C::xmm_to_xmm_mem(ctx, v1171);
                                let v1175 = constructor_x64_subpd(ctx, v1173, v1174);
                                let v1176 = &C::xmm_to_xmm_mem(ctx, v1173);
                                let v1177 =
                                    constructor_x64_cmppd(ctx, v1173, v1176, &FcmpImm::Unordered);
                                let v1142 = RegMemImm::Imm { simm32: 0xD };
                                let v1178 = &constructor_mov_rmi_to_xmm(ctx, &v1142);
                                let v1179 = constructor_x64_psrlq(ctx, v1177, v1178);
                                let v1180 = &C::xmm_to_xmm_mem(ctx, v1175);
                                let v1181 = constructor_x64_andnpd(ctx, v1179, v1180);
                                let v1182 = constructor_output_xmm(ctx, v1181);
                                // Rule at src/isa/x64/lower.isle line 2365.
                                return Some(v1182);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::FmaxPseudo => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v1052 = constructor_put_in_xmm(ctx, v35.1);
                                let v146 = &C::put_in_xmm_mem(ctx, v35.0);
                                let v1191 = constructor_x64_maxss(ctx, v1052, v146);
                                let v1192 = constructor_output_xmm(ctx, v1191);
                                // Rule at src/isa/x64/lower.isle line 2422.
                                return Some(v1192);
                            }
                            F64 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v1052 = constructor_put_in_xmm(ctx, v35.1);
                                let v146 = &C::put_in_xmm_mem(ctx, v35.0);
                                let v1193 = constructor_x64_maxsd(ctx, v1052, v146);
                                let v1194 = constructor_output_xmm(ctx, v1193);
                                // Rule at src/isa/x64/lower.isle line 2424.
                                return Some(v1194);
                            }
                            F32X4 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v1052 = constructor_put_in_xmm(ctx, v35.1);
                                let v146 = &C::put_in_xmm_mem(ctx, v35.0);
                                let v1195 = constructor_x64_maxps(ctx, v1052, v146);
                                let v1196 = constructor_output_xmm(ctx, v1195);
                                // Rule at src/isa/x64/lower.isle line 2426.
                                return Some(v1196);
                            }
                            F64X2 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v1052 = constructor_put_in_xmm(ctx, v35.1);
                                let v146 = &C::put_in_xmm_mem(ctx, v35.0);
                                let v1197 = constructor_x64_maxpd(ctx, v1052, v146);
                                let v1198 = constructor_output_xmm(ctx, v1197);
                                // Rule at src/isa/x64/lower.isle line 2428.
                                return Some(v1198);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Snarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v1773 = C::value_type(ctx, v35.0);
                                if v1773 == I16X8 {
                                    let v56 = constructor_put_in_xmm(ctx, v35.0);
                                    let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                    let v1774 = constructor_x64_packsswb(ctx, v56, v57);
                                    let v1775 = constructor_output_xmm(ctx, v1774);
                                    // Rule at src/isa/x64/lower.isle line 3275.
                                    return Some(v1775);
                                }
                            }
                            I16X8 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v1773 = C::value_type(ctx, v35.0);
                                if v1773 == I32X4 {
                                    let v56 = constructor_put_in_xmm(ctx, v35.0);
                                    let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                    let v1776 = constructor_x64_packssdw(ctx, v56, v57);
                                    let v1777 = constructor_output_xmm(ctx, v1776);
                                    // Rule at src/isa/x64/lower.isle line 3278.
                                    return Some(v1777);
                                }
                            }
                            I32X4 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v140 = C::def_inst(ctx, v35.1);
                                if let Some(v141) = v140 {
                                    let v142 = &C::inst_data(ctx, v141);
                                    if let &InstructionData::UnaryConst {
                                        opcode: ref v1781,
                                        constant_handle: v1782,
                                    } = v142
                                    {
                                        if let &Opcode::Vconst = v1781 {
                                            let v149 = C::def_inst(ctx, v35.0);
                                            if let Some(v150) = v149 {
                                                let v151 = &C::inst_data(ctx, v150);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v152,
                                                    arg: v153,
                                                } = v151
                                                {
                                                    if let &Opcode::FcvtToSintSat = v152 {
                                                        let v1778 = C::first_result(ctx, v150);
                                                        if let Some(v1779) = v1778 {
                                                            let v1780 = C::value_type(ctx, v1779);
                                                            if v1780 == I64X2 {
                                                                let v1783 = C::u128_from_constant(
                                                                    ctx, v1782,
                                                                );
                                                                if let Some(v1784) = v1783 {
                                                                    if v1784 == 0x0 {
                                                                        let v154 =
                                                                            constructor_put_in_xmm(
                                                                                ctx, v153,
                                                                            );
                                                                        let v384 =
                                                                            &C::xmm_to_xmm_mem(
                                                                                ctx, v154,
                                                                            );
                                                                        let v1785 =
                                                                            constructor_x64_cmppd(
                                                                                ctx,
                                                                                v154,
                                                                                v384,
                                                                                &FcmpImm::Equal,
                                                                            );
                                                                        let v1786 =
                                                                            C::snarrow_umax_mask(
                                                                                ctx,
                                                                            );
                                                                        let v1787 = &constructor_const_to_xmm_mem(ctx, v1786);
                                                                        let v1788 =
                                                                            constructor_x64_andps(
                                                                                ctx, v1785, v1787,
                                                                            );
                                                                        let v1789 =
                                                                            &C::xmm_to_xmm_mem(
                                                                                ctx, v1788,
                                                                            );
                                                                        let v1790 =
                                                                            constructor_x64_minpd(
                                                                                ctx, v154, v1789,
                                                                            );
                                                                        let v1791 =
                                                                            &C::xmm_to_xmm_mem(
                                                                                ctx, v1790,
                                                                            );
                                                                        let v1792 = constructor_x64_cvttpd2dq(ctx, v1791);
                                                                        let v1793 =
                                                                            constructor_output_xmm(
                                                                                ctx, v1792,
                                                                            );
                                                                        // Rule at src/isa/x64/lower.isle line 3287.
                                                                        return Some(v1793);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Unarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v1773 = C::value_type(ctx, v35.0);
                                if v1773 == I16X8 {
                                    let v56 = constructor_put_in_xmm(ctx, v35.0);
                                    let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                    let v1794 = constructor_x64_packuswb(ctx, v56, v57);
                                    let v1795 = constructor_output_xmm(ctx, v1794);
                                    // Rule at src/isa/x64/lower.isle line 3309.
                                    return Some(v1795);
                                }
                            }
                            I16X8 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v1773 = C::value_type(ctx, v35.0);
                                if v1773 == I32X4 {
                                    let v56 = constructor_put_in_xmm(ctx, v35.0);
                                    let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                    let v1796 = constructor_x64_packusdw(ctx, v56, v57);
                                    let v1797 = constructor_output_xmm(ctx, v1796);
                                    // Rule at src/isa/x64/lower.isle line 3312.
                                    return Some(v1797);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Uunarrow => {
                    let v35 = C::unpack_value_array_2(ctx, v34);
                    let v140 = C::def_inst(ctx, v35.1);
                    if let Some(v141) = v140 {
                        let v142 = &C::inst_data(ctx, v141);
                        if let &InstructionData::UnaryConst {
                            opcode: ref v1781,
                            constant_handle: v1782,
                        } = v142
                        {
                            if let &Opcode::Vconst = v1781 {
                                let v149 = C::def_inst(ctx, v35.0);
                                if let Some(v150) = v149 {
                                    let v151 = &C::inst_data(ctx, v150);
                                    if let &InstructionData::Unary {
                                        opcode: ref v152,
                                        arg: v153,
                                    } = v151
                                    {
                                        if let &Opcode::FcvtToUintSat = v152 {
                                            let v374 = C::value_type(ctx, v153);
                                            if v374 == F64X2 {
                                                let v1783 = C::u128_from_constant(ctx, v1782);
                                                if let Some(v1784) = v1783 {
                                                    if v1784 == 0x0 {
                                                        let v154 =
                                                            constructor_put_in_xmm(ctx, v153);
                                                        let v2100 =
                                                            constructor_xmm_zero(ctx, F64X2);
                                                        let v2101 = &C::xmm_to_xmm_mem(ctx, v2100);
                                                        let v2102 =
                                                            constructor_x64_maxpd(ctx, v154, v2101);
                                                        let v2103 = C::uunarrow_umax_mask(ctx);
                                                        let v2104 = &constructor_const_to_xmm_mem(
                                                            ctx, v2103,
                                                        );
                                                        let v2105 = constructor_x64_minpd(
                                                            ctx, v2102, v2104,
                                                        );
                                                        let v2106 = &C::xmm_to_xmm_mem(ctx, v2105);
                                                        let v2107 = constructor_x64_roundpd(
                                                            ctx,
                                                            v2106,
                                                            &RoundImm::RoundZero,
                                                        );
                                                        let v2108 = C::uunarrow_uint_mask(ctx);
                                                        let v2109 = &constructor_const_to_xmm_mem(
                                                            ctx, v2108,
                                                        );
                                                        let v2110 = constructor_x64_addpd(
                                                            ctx, v2107, v2109,
                                                        );
                                                        let v2111 = &C::xmm_to_xmm_mem(ctx, v2100);
                                                        let v2113 = constructor_x64_shufps(
                                                            ctx, v2110, v2111, 0x88,
                                                        );
                                                        let v2114 =
                                                            constructor_output_xmm(ctx, v2113);
                                                        // Rule at src/isa/x64/lower.isle line 3753.
                                                        return Some(v2114);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                &Opcode::IaddPairwise => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16X8 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v140 = C::def_inst(ctx, v35.1);
                                if let Some(v141) = v140 {
                                    let v142 = &C::inst_data(ctx, v141);
                                    if let &InstructionData::Unary {
                                        opcode: ref v143,
                                        arg: v144,
                                    } = v142
                                    {
                                        match v143 {
                                            &Opcode::SwidenHigh => {
                                                let v149 = C::def_inst(ctx, v35.0);
                                                if let Some(v150) = v149 {
                                                    let v151 = &C::inst_data(ctx, v150);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v152,
                                                        arg: v153,
                                                    } = v151
                                                    {
                                                        if let &Opcode::SwidenLow = v152 {
                                                            if v144 == v153 {
                                                                let v374 = C::value_type(ctx, v153);
                                                                if v374 == I8X16 {
                                                                    let v1688 = C::iadd_pairwise_mul_const_16(ctx);
                                                                    let v1689 = constructor_x64_xmm_load_const(ctx, I8X16, v1688);
                                                                    let v1690 = &C::put_in_xmm_mem(
                                                                        ctx, v153,
                                                                    );
                                                                    let v1691 =
                                                                        constructor_x64_pmaddubsw(
                                                                            ctx, v1689, v1690,
                                                                        );
                                                                    let v1692 =
                                                                        constructor_output_xmm(
                                                                            ctx, v1691,
                                                                        );
                                                                    // Rule at src/isa/x64/lower.isle line 3181.
                                                                    return Some(v1692);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v149 = C::def_inst(ctx, v35.0);
                                                if let Some(v150) = v149 {
                                                    let v151 = &C::inst_data(ctx, v150);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v152,
                                                        arg: v153,
                                                    } = v151
                                                    {
                                                        if let &Opcode::UwidenLow = v152 {
                                                            if v144 == v153 {
                                                                let v374 = C::value_type(ctx, v153);
                                                                if v374 == I8X16 {
                                                                    let v1688 = C::iadd_pairwise_mul_const_16(ctx);
                                                                    let v1698 = &constructor_const_to_xmm_mem(ctx, v1688);
                                                                    let v1695 =
                                                                        constructor_put_in_xmm(
                                                                            ctx, v153,
                                                                        );
                                                                    let v1699 =
                                                                        constructor_x64_pmaddubsw(
                                                                            ctx, v1695, v1698,
                                                                        );
                                                                    let v1700 =
                                                                        constructor_output_xmm(
                                                                            ctx, v1699,
                                                                        );
                                                                    // Rule at src/isa/x64/lower.isle line 3197.
                                                                    return Some(v1700);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v1684 = constructor_x64_phaddw(ctx, v56, v57);
                                let v1685 = constructor_output_xmm(ctx, v1684);
                                // Rule at src/isa/x64/lower.isle line 3174.
                                return Some(v1685);
                            }
                            I32X4 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v140 = C::def_inst(ctx, v35.1);
                                if let Some(v141) = v140 {
                                    let v142 = &C::inst_data(ctx, v141);
                                    match v142 {
                                        &InstructionData::Binary {
                                            opcode: ref v1726,
                                            args: ref v1727,
                                        } => {
                                            if let &Opcode::Imul = v1726 {
                                                let v149 = C::def_inst(ctx, v35.0);
                                                if let Some(v150) = v149 {
                                                    let v151 = &C::inst_data(ctx, v150);
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v1711,
                                                        args: ref v1712,
                                                    } = v151
                                                    {
                                                        if let &Opcode::Imul = v1711 {
                                                            let v1713 =
                                                                C::unpack_value_array_2(ctx, v1712);
                                                            let v1716 = C::def_inst(ctx, v1713.0);
                                                            if let Some(v1717) = v1716 {
                                                                let v1718 =
                                                                    &C::inst_data(ctx, v1717);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v1719,
                                                                    arg: v1720,
                                                                } = v1718
                                                                {
                                                                    if let &Opcode::SwidenLow =
                                                                        v1719
                                                                    {
                                                                        let v1721 = C::def_inst(
                                                                            ctx, v1713.1,
                                                                        );
                                                                        if let Some(v1722) = v1721 {
                                                                            let v1723 =
                                                                                &C::inst_data(
                                                                                    ctx, v1722,
                                                                                );
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v1724,
                                                                                arg: v1725,
                                                                            } = v1723 {
                                                                                if let &Opcode::SwidenLow = v1724 {
                                                                                    let v1728 = C::unpack_value_array_2(ctx, v1727);
                                                                                    let v1731 = C::def_inst(ctx, v1728.0);
                                                                                    if let Some(v1732) = v1731 {
                                                                                        let v1733 = &C::inst_data(ctx, v1732);
                                                                                        if let &InstructionData::Unary {
                                                                                            opcode: ref v1734,
                                                                                            arg: v1735,
                                                                                        } = v1733 {
                                                                                            if let &Opcode::SwidenHigh = v1734 {
                                                                                                if v1720 == v1735 {
                                                                                                    let v1736 = C::def_inst(ctx, v1728.1);
                                                                                                    if let Some(v1737) = v1736 {
                                                                                                        let v1738 = &C::inst_data(ctx, v1737);
                                                                                                        if let &InstructionData::Unary {
                                                                                                            opcode: ref v1739,
                                                                                                            arg: v1740,
                                                                                                        } = v1738 {
                                                                                                            if let &Opcode::SwidenHigh = v1739 {
                                                                                                                if v1725 == v1740 {
                                                                                                                    let v1741 = constructor_put_in_xmm(ctx, v1720);
                                                                                                                    let v1742 = &C::put_in_xmm_mem(ctx, v1725);
                                                                                                                    let v1743 = constructor_x64_pmaddwd(ctx, v1741, v1742);
                                                                                                                    let v1744 = constructor_output_xmm(ctx, v1743);
                                                                                                                    // Rule at src/isa/x64/lower.isle line 3219.
                                                                                                                    return Some(v1744);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &InstructionData::Unary {
                                            opcode: ref v143,
                                            arg: v144,
                                        } => {
                                            match v143 {
                                                &Opcode::SwidenHigh => {
                                                    let v149 = C::def_inst(ctx, v35.0);
                                                    if let Some(v150) = v149 {
                                                        let v151 = &C::inst_data(ctx, v150);
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v152,
                                                            arg: v153,
                                                        } = v151
                                                        {
                                                            if let &Opcode::SwidenLow = v152 {
                                                                if v144 == v153 {
                                                                    let v374 =
                                                                        C::value_type(ctx, v153);
                                                                    if v374 == I16X8 {
                                                                        let v1693 = C::iadd_pairwise_mul_const_32(ctx);
                                                                        let v1694 = &constructor_const_to_xmm_mem(ctx, v1693);
                                                                        let v1695 =
                                                                            constructor_put_in_xmm(
                                                                                ctx, v153,
                                                                            );
                                                                        let v1696 =
                                                                            constructor_x64_pmaddwd(
                                                                                ctx, v1695, v1694,
                                                                            );
                                                                        let v1697 =
                                                                            constructor_output_xmm(
                                                                                ctx, v1696,
                                                                            );
                                                                        // Rule at src/isa/x64/lower.isle line 3189.
                                                                        return Some(v1697);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                &Opcode::UwidenHigh => {
                                                    let v149 = C::def_inst(ctx, v35.0);
                                                    if let Some(v150) = v149 {
                                                        let v151 = &C::inst_data(ctx, v150);
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v152,
                                                            arg: v153,
                                                        } = v151
                                                        {
                                                            if let &Opcode::UwidenLow = v152 {
                                                                if v144 == v153 {
                                                                    let v374 =
                                                                        C::value_type(ctx, v153);
                                                                    if v374 == I16X8 {
                                                                        let v1701 = C::iadd_pairwise_xor_const_32(ctx);
                                                                        let v1702 = &constructor_const_to_xmm_mem(ctx, v1701);
                                                                        let v1695 =
                                                                            constructor_put_in_xmm(
                                                                                ctx, v153,
                                                                            );
                                                                        let v1703 =
                                                                            constructor_x64_pxor(
                                                                                ctx, v1695, v1702,
                                                                            );
                                                                        let v1704 = C::iadd_pairwise_mul_const_32(ctx);
                                                                        let v1705 = &constructor_const_to_xmm_mem(ctx, v1704);
                                                                        let v1706 =
                                                                            constructor_x64_pmaddwd(
                                                                                ctx, v1703, v1705,
                                                                            );
                                                                        let v1707 = C::iadd_pairwise_addd_const_32(ctx);
                                                                        let v1708 = &constructor_const_to_xmm_mem(ctx, v1707);
                                                                        let v1709 =
                                                                            constructor_x64_paddd(
                                                                                ctx, v1706, v1708,
                                                                            );
                                                                        let v1710 =
                                                                            constructor_output_xmm(
                                                                                ctx, v1709,
                                                                            );
                                                                        // Rule at src/isa/x64/lower.isle line 3205.
                                                                        return Some(v1710);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                let v56 = constructor_put_in_xmm(ctx, v35.0);
                                let v57 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v1686 = constructor_x64_phaddd(ctx, v56, v57);
                                let v1687 = constructor_output_xmm(ctx, v1686);
                                // Rule at src/isa/x64/lower.isle line 3177.
                                return Some(v1687);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Iconcat => {
                    let v35 = C::unpack_value_array_2(ctx, v34);
                    let v1773 = C::value_type(ctx, v35.0);
                    if v1773 == I64 {
                        let v2077 = C::put_in_reg(ctx, v35.0);
                        let v2078 = C::put_in_reg(ctx, v35.1);
                        let v2079 = C::value_regs(ctx, v2077, v2078);
                        let v2080 = C::output(ctx, v2079);
                        // Rule at src/isa/x64/lower.isle line 3706.
                        return Some(v2080);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::BinaryImm8 {
            opcode: ref v1988,
            arg: v1989,
            imm: v1990,
        } => {
            if let &Opcode::Extractlane = v1988 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v1991 = C::u8_from_uimm8(ctx, v1990);
                    match v1991 {
                        0x0 => {
                            let v3 = C::value_type(ctx, v2);
                            let v130 = C::ty_scalar_float(ctx, v3);
                            if let Some(v131) = v130 {
                                let v1992 = constructor_output_value(ctx, v1989);
                                // Rule at src/isa/x64/lower.isle line 3567.
                                return Some(v1992);
                            }
                        }
                        0x1 => {
                            let v3 = C::value_type(ctx, v2);
                            if v3 == F64 {
                                let v1993 = C::value_type(ctx, v1989);
                                let v1994 = C::ty_vec128(ctx, v1993);
                                if let Some(v1995) = v1994 {
                                    let v1996 = &C::put_in_xmm_mem(ctx, v1989);
                                    let v1999 = constructor_x64_pshufd(ctx, v1996, 0xEE);
                                    let v2000 = constructor_output_xmm(ctx, v1999);
                                    // Rule at src/isa/x64/lower.isle line 3576.
                                    return Some(v2000);
                                }
                            }
                        }
                        _ => {}
                    }
                    let v3 = C::value_type(ctx, v2);
                    if v3 == F32 {
                        let v1993 = C::value_type(ctx, v1989);
                        let v1994 = C::ty_vec128(ctx, v1993);
                        if let Some(v1995) = v1994 {
                            let v1996 = &C::put_in_xmm_mem(ctx, v1989);
                            let v1997 = constructor_x64_pshufd(ctx, v1996, v1991);
                            let v1998 = constructor_output_xmm(ctx, v1997);
                            // Rule at src/isa/x64/lower.isle line 3571.
                            return Some(v1998);
                        }
                    }
                }
                let v1993 = C::value_type(ctx, v1989);
                let v2001 = C::multi_lane(ctx, v1993);
                if let Some(v2002) = v2001 {
                    match v2002.0 {
                        0x8 => {
                            if v2002.1 == 0x10 {
                                let v2005 = constructor_put_in_xmm(ctx, v1989);
                                let v1991 = C::u8_from_uimm8(ctx, v1990);
                                let v2006 = constructor_x64_pextrb(ctx, v2005, v1991);
                                let v2007 = constructor_output_gpr(ctx, v2006);
                                // Rule at src/isa/x64/lower.isle line 3581.
                                return Some(v2007);
                            }
                        }
                        0x10 => {
                            if v2002.1 == 0x8 {
                                let v2005 = constructor_put_in_xmm(ctx, v1989);
                                let v1991 = C::u8_from_uimm8(ctx, v1990);
                                let v2008 = constructor_x64_pextrw(ctx, v2005, v1991);
                                let v2009 = constructor_output_gpr(ctx, v2008);
                                // Rule at src/isa/x64/lower.isle line 3584.
                                return Some(v2009);
                            }
                        }
                        0x20 => {
                            if v2002.1 == 0x4 {
                                let v2005 = constructor_put_in_xmm(ctx, v1989);
                                let v1991 = C::u8_from_uimm8(ctx, v1990);
                                let v2010 = constructor_x64_pextrd(ctx, v2005, v1991);
                                let v2011 = constructor_output_gpr(ctx, v2010);
                                // Rule at src/isa/x64/lower.isle line 3587.
                                return Some(v2011);
                            }
                        }
                        0x40 => {
                            if v2002.1 == 0x2 {
                                let v2005 = constructor_put_in_xmm(ctx, v1989);
                                let v1991 = C::u8_from_uimm8(ctx, v1990);
                                let v2012 = constructor_x64_pextrq(ctx, v2005, v1991);
                                let v2013 = constructor_output_gpr(ctx, v2012);
                                // Rule at src/isa/x64/lower.isle line 3590.
                                return Some(v2013);
                            }
                        }
                        _ => {}
                    }
                }
            }
        }
        &InstructionData::Call {
            opcode: ref v1536,
            args: v1537,
            func_ref: v1538,
        } => {
            if let &Opcode::Call = v1536 {
                let v1540 = C::func_ref_data(ctx, v1538);
                let v1539 = C::value_list_slice(ctx, v1537);
                let v1544 = C::gen_call(ctx, v1540.0, v1540.1, v1540.2, v1539);
                // Rule at src/isa/x64/lower.isle line 2849.
                return Some(v1544);
            }
        }
        &InstructionData::CallIndirect {
            opcode: ref v1545,
            args: v1546,
            sig_ref: v1547,
        } => {
            if let &Opcode::CallIndirect = v1545 {
                let v1548 = C::value_list_slice(ctx, v1546);
                let v1549 = C::value_slice_unwrap(ctx, v1548);
                if let Some(v1550) = v1549 {
                    let v1553 = C::gen_call_indirect(ctx, v1547, v1550.0, v1550.1);
                    // Rule at src/isa/x64/lower.isle line 2852.
                    return Some(v1553);
                }
            }
        }
        &InstructionData::FloatCompare {
            opcode: ref v742,
            args: ref v743,
            cond: ref v744,
        } => {
            if let &Opcode::Fcmp = v742 {
                match v744 {
                    &FloatCC::Equal => {
                        let v745 = C::unpack_value_array_2(ctx, v743);
                        let v748 = C::value_type(ctx, v745.0);
                        let v754 = C::ty_vec128(ctx, v748);
                        if let Some(v755) = v754 {
                            let v756 = constructor_put_in_xmm(ctx, v745.0);
                            let v757 = &C::put_in_xmm_mem(ctx, v745.1);
                            let v759 = constructor_x64_cmpp(ctx, v755, v756, v757, &FcmpImm::Equal);
                            let v760 = constructor_output_xmm(ctx, v759);
                            // Rule at src/isa/x64/lower.isle line 1535.
                            return Some(v760);
                        }
                    }
                    &FloatCC::GreaterThan => {
                        let v745 = C::unpack_value_array_2(ctx, v743);
                        let v748 = C::value_type(ctx, v745.0);
                        let v754 = C::ty_vec128(ctx, v748);
                        if let Some(v755) = v754 {
                            let v782 = constructor_put_in_xmm(ctx, v745.1);
                            let v783 = &C::put_in_xmm_mem(ctx, v745.0);
                            let v784 =
                                constructor_x64_cmpp(ctx, v755, v782, v783, &FcmpImm::LessThan);
                            let v785 = constructor_output_xmm(ctx, v784);
                            // Rule at src/isa/x64/lower.isle line 1555.
                            return Some(v785);
                        }
                    }
                    &FloatCC::GreaterThanOrEqual => {
                        let v745 = C::unpack_value_array_2(ctx, v743);
                        let v748 = C::value_type(ctx, v745.0);
                        let v754 = C::ty_vec128(ctx, v748);
                        if let Some(v755) = v754 {
                            let v782 = constructor_put_in_xmm(ctx, v745.1);
                            let v783 = &C::put_in_xmm_mem(ctx, v745.0);
                            let v786 = constructor_x64_cmpp(
                                ctx,
                                v755,
                                v782,
                                v783,
                                &FcmpImm::LessThanOrEqual,
                            );
                            let v787 = constructor_output_xmm(ctx, v786);
                            // Rule at src/isa/x64/lower.isle line 1557.
                            return Some(v787);
                        }
                    }
                    &FloatCC::LessThan => {
                        let v745 = C::unpack_value_array_2(ctx, v743);
                        let v748 = C::value_type(ctx, v745.0);
                        let v754 = C::ty_vec128(ctx, v748);
                        if let Some(v755) = v754 {
                            let v756 = constructor_put_in_xmm(ctx, v745.0);
                            let v757 = &C::put_in_xmm_mem(ctx, v745.1);
                            let v765 =
                                constructor_x64_cmpp(ctx, v755, v756, v757, &FcmpImm::LessThan);
                            let v766 = constructor_output_xmm(ctx, v765);
                            // Rule at src/isa/x64/lower.isle line 1539.
                            return Some(v766);
                        }
                    }
                    &FloatCC::LessThanOrEqual => {
                        let v745 = C::unpack_value_array_2(ctx, v743);
                        let v748 = C::value_type(ctx, v745.0);
                        let v754 = C::ty_vec128(ctx, v748);
                        if let Some(v755) = v754 {
                            let v756 = constructor_put_in_xmm(ctx, v745.0);
                            let v757 = &C::put_in_xmm_mem(ctx, v745.1);
                            let v768 = constructor_x64_cmpp(
                                ctx,
                                v755,
                                v756,
                                v757,
                                &FcmpImm::LessThanOrEqual,
                            );
                            let v769 = constructor_output_xmm(ctx, v768);
                            // Rule at src/isa/x64/lower.isle line 1541.
                            return Some(v769);
                        }
                    }
                    &FloatCC::NotEqual => {
                        let v745 = C::unpack_value_array_2(ctx, v743);
                        let v748 = C::value_type(ctx, v745.0);
                        let v754 = C::ty_vec128(ctx, v748);
                        if let Some(v755) = v754 {
                            let v756 = constructor_put_in_xmm(ctx, v745.0);
                            let v757 = &C::put_in_xmm_mem(ctx, v745.1);
                            let v762 =
                                constructor_x64_cmpp(ctx, v755, v756, v757, &FcmpImm::NotEqual);
                            let v763 = constructor_output_xmm(ctx, v762);
                            // Rule at src/isa/x64/lower.isle line 1537.
                            return Some(v763);
                        }
                    }
                    &FloatCC::Ordered => {
                        let v745 = C::unpack_value_array_2(ctx, v743);
                        let v748 = C::value_type(ctx, v745.0);
                        let v754 = C::ty_vec128(ctx, v748);
                        if let Some(v755) = v754 {
                            let v756 = constructor_put_in_xmm(ctx, v745.0);
                            let v757 = &C::put_in_xmm_mem(ctx, v745.1);
                            let v771 =
                                constructor_x64_cmpp(ctx, v755, v756, v757, &FcmpImm::Ordered);
                            let v772 = constructor_output_xmm(ctx, v771);
                            // Rule at src/isa/x64/lower.isle line 1543.
                            return Some(v772);
                        }
                    }
                    &FloatCC::Unordered => {
                        let v745 = C::unpack_value_array_2(ctx, v743);
                        let v748 = C::value_type(ctx, v745.0);
                        let v754 = C::ty_vec128(ctx, v748);
                        if let Some(v755) = v754 {
                            let v756 = constructor_put_in_xmm(ctx, v745.0);
                            let v757 = &C::put_in_xmm_mem(ctx, v745.1);
                            let v774 =
                                constructor_x64_cmpp(ctx, v755, v756, v757, &FcmpImm::Unordered);
                            let v775 = constructor_output_xmm(ctx, v774);
                            // Rule at src/isa/x64/lower.isle line 1545.
                            return Some(v775);
                        }
                    }
                    &FloatCC::UnorderedOrGreaterThan => {
                        let v745 = C::unpack_value_array_2(ctx, v743);
                        let v748 = C::value_type(ctx, v745.0);
                        let v754 = C::ty_vec128(ctx, v748);
                        if let Some(v755) = v754 {
                            let v756 = constructor_put_in_xmm(ctx, v745.0);
                            let v757 = &C::put_in_xmm_mem(ctx, v745.1);
                            let v777 = constructor_x64_cmpp(
                                ctx,
                                v755,
                                v756,
                                v757,
                                &FcmpImm::UnorderedOrGreaterThan,
                            );
                            let v778 = constructor_output_xmm(ctx, v777);
                            // Rule at src/isa/x64/lower.isle line 1547.
                            return Some(v778);
                        }
                    }
                    &FloatCC::UnorderedOrGreaterThanOrEqual => {
                        let v745 = C::unpack_value_array_2(ctx, v743);
                        let v748 = C::value_type(ctx, v745.0);
                        let v754 = C::ty_vec128(ctx, v748);
                        if let Some(v755) = v754 {
                            let v756 = constructor_put_in_xmm(ctx, v745.0);
                            let v757 = &C::put_in_xmm_mem(ctx, v745.1);
                            let v780 = constructor_x64_cmpp(
                                ctx,
                                v755,
                                v756,
                                v757,
                                &FcmpImm::UnorderedOrGreaterThanOrEqual,
                            );
                            let v781 = constructor_output_xmm(ctx, v780);
                            // Rule at src/isa/x64/lower.isle line 1549.
                            return Some(v781);
                        }
                    }
                    &FloatCC::UnorderedOrLessThan => {
                        let v745 = C::unpack_value_array_2(ctx, v743);
                        let v748 = C::value_type(ctx, v745.0);
                        let v754 = C::ty_vec128(ctx, v748);
                        if let Some(v755) = v754 {
                            let v782 = constructor_put_in_xmm(ctx, v745.1);
                            let v783 = &C::put_in_xmm_mem(ctx, v745.0);
                            let v788 = constructor_x64_cmpp(
                                ctx,
                                v755,
                                v782,
                                v783,
                                &FcmpImm::UnorderedOrGreaterThan,
                            );
                            let v789 = constructor_output_xmm(ctx, v788);
                            // Rule at src/isa/x64/lower.isle line 1559.
                            return Some(v789);
                        }
                    }
                    &FloatCC::UnorderedOrLessThanOrEqual => {
                        let v745 = C::unpack_value_array_2(ctx, v743);
                        let v748 = C::value_type(ctx, v745.0);
                        let v754 = C::ty_vec128(ctx, v748);
                        if let Some(v755) = v754 {
                            let v782 = constructor_put_in_xmm(ctx, v745.1);
                            let v783 = &C::put_in_xmm_mem(ctx, v745.0);
                            let v790 = constructor_x64_cmpp(
                                ctx,
                                v755,
                                v782,
                                v783,
                                &FcmpImm::UnorderedOrGreaterThanOrEqual,
                            );
                            let v791 = constructor_output_xmm(ctx, v790);
                            // Rule at src/isa/x64/lower.isle line 1561.
                            return Some(v791);
                        }
                    }
                    _ => {}
                }
                let v745 = C::unpack_value_array_2(ctx, v743);
                let v748 = C::value_type(ctx, v745.0);
                let v749 = C::ty_scalar_float(ctx, v748);
                if let Some(v750) = v749 {
                    let v751 = &constructor_emit_fcmp(ctx, v744, v745.0, v745.1);
                    let v752 = constructor_lower_fcmp_bool(ctx, v751);
                    let v753 = C::output(ctx, v752);
                    // Rule at src/isa/x64/lower.isle line 1528.
                    return Some(v753);
                }
            }
        }
        &InstructionData::FuncAddr {
            opcode: ref v1459,
            func_ref: v1460,
        } => {
            if let &Opcode::FuncAddr = v1459 {
                let v1461 = C::func_ref_data(ctx, v1460);
                let v1466 = constructor_load_ext_name(ctx, v1461.1, 0x0);
                let v1467 = constructor_output_reg(ctx, v1466);
                // Rule at src/isa/x64/lower.isle line 2791.
                return Some(v1467);
            }
        }
        &InstructionData::IntAddTrap {
            opcode: ref v605,
            args: ref v606,
            code: ref v607,
        } => {
            if let &Opcode::UaddOverflowTrap = v605 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v4 = C::fits_in_64(ctx, v3);
                    if let Some(v5) = v4 {
                        let v608 = C::unpack_value_array_2(ctx, v606);
                        let v624 = &C::sinkable_load(ctx, v608.0);
                        if let Some(v625) = v624 {
                            let v619 = constructor_put_in_gpr(ctx, v608.1);
                            let v626 = &constructor_sink_load_to_gpr_mem_imm(ctx, v625);
                            let v627 = &constructor_x64_add_with_flags_paired(ctx, v5, v619, v626);
                            let v614 = &constructor_trap_if(ctx, &CC::B, v607);
                            let v628 = constructor_with_flags(ctx, v627, v614);
                            let v629 = C::output(ctx, v628);
                            // Rule at src/isa/x64/lower.isle line 1381.
                            return Some(v629);
                        }
                        let v617 = &C::simm32_from_value(ctx, v608.0);
                        if let Some(v618) = v617 {
                            let v619 = constructor_put_in_gpr(ctx, v608.1);
                            let v620 = &constructor_x64_add_with_flags_paired(ctx, v5, v619, v618);
                            let v621 = &constructor_trap_if(ctx, &CC::B, v607);
                            let v622 = constructor_with_flags(ctx, v620, v621);
                            let v623 = C::output(ctx, v622);
                            // Rule at src/isa/x64/lower.isle line 1375.
                            return Some(v623);
                        }
                        let v611 = constructor_put_in_gpr(ctx, v608.0);
                        let v612 = &constructor_put_in_gpr_mem_imm(ctx, v608.1);
                        let v613 = &constructor_x64_add_with_flags_paired(ctx, v5, v611, v612);
                        let v614 = &constructor_trap_if(ctx, &CC::B, v607);
                        let v615 = constructor_with_flags(ctx, v613, v614);
                        let v616 = C::output(ctx, v615);
                        // Rule at src/isa/x64/lower.isle line 1367.
                        return Some(v616);
                    }
                }
            }
        }
        &InstructionData::IntCompare {
            opcode: ref v636,
            args: ref v637,
            cond: ref v638,
        } => {
            if let &Opcode::Icmp = v636 {
                match v638 {
                    &IntCC::Equal => {
                        let v639 = C::unpack_value_array_2(ctx, v637);
                        let v642 = C::value_type(ctx, v639.0);
                        let v690 = C::ty_vec128(ctx, v642);
                        if let Some(v691) = v690 {
                            let v692 = constructor_put_in_xmm(ctx, v639.0);
                            let v693 = &C::put_in_xmm_mem(ctx, v639.1);
                            let v694 = constructor_x64_pcmpeq(ctx, v691, v692, v693);
                            let v695 = constructor_output_xmm(ctx, v694);
                            // Rule at src/isa/x64/lower.isle line 1443.
                            return Some(v695);
                        }
                    }
                    &IntCC::NotEqual => {
                        let v639 = C::unpack_value_array_2(ctx, v637);
                        let v642 = C::value_type(ctx, v639.0);
                        let v690 = C::ty_vec128(ctx, v642);
                        if let Some(v691) = v690 {
                            let v692 = constructor_put_in_xmm(ctx, v639.0);
                            let v693 = &C::put_in_xmm_mem(ctx, v639.1);
                            let v694 = constructor_x64_pcmpeq(ctx, v691, v692, v693);
                            let v696 = constructor_vector_all_ones(ctx);
                            let v697 = &C::xmm_to_xmm_mem(ctx, v696);
                            let v698 = constructor_x64_pxor(ctx, v694, v697);
                            let v699 = constructor_output_xmm(ctx, v698);
                            // Rule at src/isa/x64/lower.isle line 1448.
                            return Some(v699);
                        }
                    }
                    &IntCC::SignedGreaterThan => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            if v3 == I8 {
                                let v639 = C::unpack_value_array_2(ctx, v637);
                                let v660 = C::def_inst(ctx, v639.0);
                                if let Some(v661) = v660 {
                                    let v662 = &C::inst_data(ctx, v661);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v663,
                                        imm: v664,
                                    } = v662
                                    {
                                        if let &Opcode::Iconst = v663 {
                                            let v665 = C::u64_from_imm64(ctx, v664);
                                            if v665 == 0x0 {
                                                let v666 = C::value_type(ctx, v639.1);
                                                match v666 {
                                                    I32 => {
                                                        let v667 =
                                                            constructor_put_in_gpr(ctx, v639.1);
                                                        let v679 = Imm8Reg::Imm8 { imm: 0x1F };
                                                        let v680 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v679);
                                                        let v683 = constructor_x64_shr(
                                                            ctx, I32, v667, v680,
                                                        );
                                                        let v684 =
                                                            constructor_output_gpr(ctx, v683);
                                                        // Rule at src/isa/x64/lower.isle line 1427.
                                                        return Some(v684);
                                                    }
                                                    I64 => {
                                                        let v667 =
                                                            constructor_put_in_gpr(ctx, v639.1);
                                                        let v656 = Imm8Reg::Imm8 { imm: 0x3F };
                                                        let v657 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v656);
                                                        let v668 = constructor_x64_shr(
                                                            ctx, I64, v667, v657,
                                                        );
                                                        let v669 =
                                                            constructor_output_gpr(ctx, v668);
                                                        // Rule at src/isa/x64/lower.isle line 1411.
                                                        return Some(v669);
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v639 = C::unpack_value_array_2(ctx, v637);
                        let v642 = C::value_type(ctx, v639.0);
                        let v690 = C::ty_vec128(ctx, v642);
                        if let Some(v691) = v690 {
                            let v692 = constructor_put_in_xmm(ctx, v639.0);
                            let v693 = &C::put_in_xmm_mem(ctx, v639.1);
                            let v700 = constructor_x64_pcmpgt(ctx, v691, v692, v693);
                            let v701 = constructor_output_xmm(ctx, v700);
                            // Rule at src/isa/x64/lower.isle line 1455.
                            return Some(v701);
                        }
                    }
                    &IntCC::SignedGreaterThanOrEqual => {
                        let v639 = C::unpack_value_array_2(ctx, v637);
                        let v642 = C::value_type(ctx, v639.0);
                        match v642 {
                            I32 => {
                                let v1 = C::first_result(ctx, arg0);
                                if let Some(v2) = v1 {
                                    let v3 = C::value_type(ctx, v2);
                                    if v3 == I8 {
                                        let v648 = C::def_inst(ctx, v639.1);
                                        if let Some(v649) = v648 {
                                            let v650 = &C::inst_data(ctx, v649);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v651,
                                                imm: v652,
                                            } = v650
                                            {
                                                if let &Opcode::Iconst = v651 {
                                                    let v653 = C::u64_from_imm64(ctx, v652);
                                                    if v653 == 0x0 {
                                                        let v654 =
                                                            constructor_put_in_gpr(ctx, v639.0);
                                                        let v674 =
                                                            constructor_x64_not(ctx, I64, v654);
                                                        let v679 = Imm8Reg::Imm8 { imm: 0x1F };
                                                        let v685 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v679);
                                                        let v688 = constructor_x64_shr(
                                                            ctx, I32, v674, v685,
                                                        );
                                                        let v689 =
                                                            constructor_output_gpr(ctx, v688);
                                                        // Rule at src/isa/x64/lower.isle line 1435.
                                                        return Some(v689);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            I64 => {
                                let v1 = C::first_result(ctx, arg0);
                                if let Some(v2) = v1 {
                                    let v3 = C::value_type(ctx, v2);
                                    if v3 == I8 {
                                        let v648 = C::def_inst(ctx, v639.1);
                                        if let Some(v649) = v648 {
                                            let v650 = &C::inst_data(ctx, v649);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v651,
                                                imm: v652,
                                            } = v650
                                            {
                                                if let &Opcode::Iconst = v651 {
                                                    let v653 = C::u64_from_imm64(ctx, v652);
                                                    if v653 == 0x0 {
                                                        let v654 =
                                                            constructor_put_in_gpr(ctx, v639.0);
                                                        let v674 =
                                                            constructor_x64_not(ctx, I64, v654);
                                                        let v656 = Imm8Reg::Imm8 { imm: 0x3F };
                                                        let v671 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v656);
                                                        let v675 = constructor_x64_shr(
                                                            ctx, I64, v674, v671,
                                                        );
                                                        let v676 =
                                                            constructor_output_gpr(ctx, v675);
                                                        // Rule at src/isa/x64/lower.isle line 1419.
                                                        return Some(v676);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            I64X2 => {
                                let v702 = constructor_put_in_xmm(ctx, v639.1);
                                let v703 = &C::put_in_xmm_mem(ctx, v639.0);
                                let v736 = constructor_x64_pcmpgt(ctx, I64X2, v702, v703);
                                let v696 = constructor_vector_all_ones(ctx);
                                let v697 = &C::xmm_to_xmm_mem(ctx, v696);
                                let v737 = constructor_x64_pxor(ctx, v736, v697);
                                let v738 = constructor_output_xmm(ctx, v737);
                                // Rule at src/isa/x64/lower.isle line 1495.
                                return Some(v738);
                            }
                            _ => {}
                        }
                        let v690 = C::ty_vec128(ctx, v642);
                        if let Some(v691) = v690 {
                            let v692 = constructor_put_in_xmm(ctx, v639.0);
                            let v693 = &C::put_in_xmm_mem(ctx, v639.1);
                            let v719 = constructor_x64_pmaxs(ctx, v691, v692, v693);
                            let v720 = constructor_put_in_xmm(ctx, v639.0);
                            let v721 = &C::xmm_to_xmm_mem(ctx, v719);
                            let v722 = constructor_x64_pcmpeq(ctx, v691, v720, v721);
                            let v723 = constructor_output_xmm(ctx, v722);
                            // Rule at src/isa/x64/lower.isle line 1480.
                            return Some(v723);
                        }
                    }
                    &IntCC::SignedLessThan => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            if v3 == I8 {
                                let v639 = C::unpack_value_array_2(ctx, v637);
                                let v642 = C::value_type(ctx, v639.0);
                                match v642 {
                                    I32 => {
                                        let v648 = C::def_inst(ctx, v639.1);
                                        if let Some(v649) = v648 {
                                            let v650 = &C::inst_data(ctx, v649);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v651,
                                                imm: v652,
                                            } = v650
                                            {
                                                if let &Opcode::Iconst = v651 {
                                                    let v653 = C::u64_from_imm64(ctx, v652);
                                                    if v653 == 0x0 {
                                                        let v654 =
                                                            constructor_put_in_gpr(ctx, v639.0);
                                                        let v679 = Imm8Reg::Imm8 { imm: 0x1F };
                                                        let v680 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v679);
                                                        let v681 = constructor_x64_shr(
                                                            ctx, I32, v654, v680,
                                                        );
                                                        let v682 =
                                                            constructor_output_gpr(ctx, v681);
                                                        // Rule at src/isa/x64/lower.isle line 1423.
                                                        return Some(v682);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    I64 => {
                                        let v648 = C::def_inst(ctx, v639.1);
                                        if let Some(v649) = v648 {
                                            let v650 = &C::inst_data(ctx, v649);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v651,
                                                imm: v652,
                                            } = v650
                                            {
                                                if let &Opcode::Iconst = v651 {
                                                    let v653 = C::u64_from_imm64(ctx, v652);
                                                    if v653 == 0x0 {
                                                        let v654 =
                                                            constructor_put_in_gpr(ctx, v639.0);
                                                        let v656 = Imm8Reg::Imm8 { imm: 0x3F };
                                                        let v657 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v656);
                                                        let v658 = constructor_x64_shr(
                                                            ctx, I64, v654, v657,
                                                        );
                                                        let v659 =
                                                            constructor_output_gpr(ctx, v658);
                                                        // Rule at src/isa/x64/lower.isle line 1407.
                                                        return Some(v659);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v639 = C::unpack_value_array_2(ctx, v637);
                        let v642 = C::value_type(ctx, v639.0);
                        let v690 = C::ty_vec128(ctx, v642);
                        if let Some(v691) = v690 {
                            let v702 = constructor_put_in_xmm(ctx, v639.1);
                            let v703 = &C::put_in_xmm_mem(ctx, v639.0);
                            let v704 = constructor_x64_pcmpgt(ctx, v691, v702, v703);
                            let v705 = constructor_output_xmm(ctx, v704);
                            // Rule at src/isa/x64/lower.isle line 1457.
                            return Some(v705);
                        }
                    }
                    &IntCC::SignedLessThanOrEqual => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            if v3 == I8 {
                                let v639 = C::unpack_value_array_2(ctx, v637);
                                let v660 = C::def_inst(ctx, v639.0);
                                if let Some(v661) = v660 {
                                    let v662 = &C::inst_data(ctx, v661);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v663,
                                        imm: v664,
                                    } = v662
                                    {
                                        if let &Opcode::Iconst = v663 {
                                            let v665 = C::u64_from_imm64(ctx, v664);
                                            if v665 == 0x0 {
                                                let v666 = C::value_type(ctx, v639.1);
                                                match v666 {
                                                    I32 => {
                                                        let v667 =
                                                            constructor_put_in_gpr(ctx, v639.1);
                                                        let v670 =
                                                            constructor_x64_not(ctx, I64, v667);
                                                        let v679 = Imm8Reg::Imm8 { imm: 0x1F };
                                                        let v685 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v679);
                                                        let v686 = constructor_x64_shr(
                                                            ctx, I32, v670, v685,
                                                        );
                                                        let v687 =
                                                            constructor_output_gpr(ctx, v686);
                                                        // Rule at src/isa/x64/lower.isle line 1431.
                                                        return Some(v687);
                                                    }
                                                    I64 => {
                                                        let v667 =
                                                            constructor_put_in_gpr(ctx, v639.1);
                                                        let v670 =
                                                            constructor_x64_not(ctx, I64, v667);
                                                        let v656 = Imm8Reg::Imm8 { imm: 0x3F };
                                                        let v671 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v656);
                                                        let v672 = constructor_x64_shr(
                                                            ctx, I64, v670, v671,
                                                        );
                                                        let v673 =
                                                            constructor_output_gpr(ctx, v672);
                                                        // Rule at src/isa/x64/lower.isle line 1415.
                                                        return Some(v673);
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v639 = C::unpack_value_array_2(ctx, v637);
                        let v642 = C::value_type(ctx, v639.0);
                        if v642 == I64X2 {
                            let v692 = constructor_put_in_xmm(ctx, v639.0);
                            let v693 = &C::put_in_xmm_mem(ctx, v639.1);
                            let v739 = constructor_x64_pcmpgt(ctx, I64X2, v692, v693);
                            let v696 = constructor_vector_all_ones(ctx);
                            let v697 = &C::xmm_to_xmm_mem(ctx, v696);
                            let v740 = constructor_x64_pxor(ctx, v739, v697);
                            let v741 = constructor_output_xmm(ctx, v740);
                            // Rule at src/isa/x64/lower.isle line 1499.
                            return Some(v741);
                        }
                        let v690 = C::ty_vec128(ctx, v642);
                        if let Some(v691) = v690 {
                            let v692 = constructor_put_in_xmm(ctx, v639.0);
                            let v693 = &C::put_in_xmm_mem(ctx, v639.1);
                            let v724 = constructor_x64_pmins(ctx, v691, v692, v693);
                            let v720 = constructor_put_in_xmm(ctx, v639.0);
                            let v725 = &C::xmm_to_xmm_mem(ctx, v724);
                            let v726 = constructor_x64_pcmpeq(ctx, v691, v720, v725);
                            let v727 = constructor_output_xmm(ctx, v726);
                            // Rule at src/isa/x64/lower.isle line 1483.
                            return Some(v727);
                        }
                    }
                    &IntCC::UnsignedGreaterThan => {
                        let v639 = C::unpack_value_array_2(ctx, v637);
                        let v642 = C::value_type(ctx, v639.0);
                        let v690 = C::ty_vec128(ctx, v642);
                        if let Some(v691) = v690 {
                            let v692 = constructor_put_in_xmm(ctx, v639.0);
                            let v706 = constructor_put_in_xmm(ctx, v639.1);
                            let v707 = &C::xmm_to_xmm_mem(ctx, v706);
                            let v708 = constructor_x64_pmaxu(ctx, v691, v692, v707);
                            let v709 = &C::xmm_to_xmm_mem(ctx, v706);
                            let v710 = constructor_x64_pcmpeq(ctx, v691, v708, v709);
                            let v711 = constructor_vector_all_ones(ctx);
                            let v712 = &C::xmm_to_xmm_mem(ctx, v711);
                            let v713 = constructor_x64_pxor(ctx, v710, v712);
                            let v714 = constructor_output_xmm(ctx, v713);
                            // Rule at src/isa/x64/lower.isle line 1459.
                            return Some(v714);
                        }
                    }
                    &IntCC::UnsignedGreaterThanOrEqual => {
                        let v639 = C::unpack_value_array_2(ctx, v637);
                        let v642 = C::value_type(ctx, v639.0);
                        let v690 = C::ty_vec128(ctx, v642);
                        if let Some(v691) = v690 {
                            let v692 = constructor_put_in_xmm(ctx, v639.0);
                            let v693 = &C::put_in_xmm_mem(ctx, v639.1);
                            let v728 = constructor_x64_pmaxu(ctx, v691, v692, v693);
                            let v720 = constructor_put_in_xmm(ctx, v639.0);
                            let v729 = &C::xmm_to_xmm_mem(ctx, v728);
                            let v730 = constructor_x64_pcmpeq(ctx, v691, v720, v729);
                            let v731 = constructor_output_xmm(ctx, v730);
                            // Rule at src/isa/x64/lower.isle line 1486.
                            return Some(v731);
                        }
                    }
                    &IntCC::UnsignedLessThan => {
                        let v639 = C::unpack_value_array_2(ctx, v637);
                        let v642 = C::value_type(ctx, v639.0);
                        let v690 = C::ty_vec128(ctx, v642);
                        if let Some(v691) = v690 {
                            let v692 = constructor_put_in_xmm(ctx, v639.0);
                            let v706 = constructor_put_in_xmm(ctx, v639.1);
                            let v707 = &C::xmm_to_xmm_mem(ctx, v706);
                            let v715 = constructor_x64_pminu(ctx, v691, v692, v707);
                            let v709 = &C::xmm_to_xmm_mem(ctx, v706);
                            let v716 = constructor_x64_pcmpeq(ctx, v691, v715, v709);
                            let v711 = constructor_vector_all_ones(ctx);
                            let v712 = &C::xmm_to_xmm_mem(ctx, v711);
                            let v717 = constructor_x64_pxor(ctx, v716, v712);
                            let v718 = constructor_output_xmm(ctx, v717);
                            // Rule at src/isa/x64/lower.isle line 1469.
                            return Some(v718);
                        }
                    }
                    &IntCC::UnsignedLessThanOrEqual => {
                        let v639 = C::unpack_value_array_2(ctx, v637);
                        let v642 = C::value_type(ctx, v639.0);
                        let v690 = C::ty_vec128(ctx, v642);
                        if let Some(v691) = v690 {
                            let v692 = constructor_put_in_xmm(ctx, v639.0);
                            let v693 = &C::put_in_xmm_mem(ctx, v639.1);
                            let v732 = constructor_x64_pminu(ctx, v691, v692, v693);
                            let v720 = constructor_put_in_xmm(ctx, v639.0);
                            let v733 = &C::xmm_to_xmm_mem(ctx, v732);
                            let v734 = constructor_x64_pcmpeq(ctx, v691, v720, v733);
                            let v735 = constructor_output_xmm(ctx, v734);
                            // Rule at src/isa/x64/lower.isle line 1489.
                            return Some(v735);
                        }
                    }
                    _ => {}
                }
                let v639 = C::unpack_value_array_2(ctx, v637);
                let v642 = C::value_type(ctx, v639.0);
                if v642 == I128 {
                    let v645 = &constructor_emit_cmp(ctx, v638, v639.0, v639.1);
                    let v646 = constructor_lower_icmp_bool(ctx, v645);
                    let v647 = C::output(ctx, v646);
                    // Rule at src/isa/x64/lower.isle line 1403.
                    return Some(v647);
                }
                let v643 = C::fits_in_64(ctx, v642);
                if let Some(v644) = v643 {
                    let v645 = &constructor_emit_cmp(ctx, v638, v639.0, v639.1);
                    let v646 = constructor_lower_icmp_bool(ctx, v645);
                    let v647 = C::output(ctx, v646);
                    // Rule at src/isa/x64/lower.isle line 1400.
                    return Some(v647);
                }
            }
        }
        &InstructionData::Load {
            opcode: ref v1285,
            arg: v1286,
            flags: v1287,
            offset: v1288,
        } => {
            match v1285 {
                &Opcode::Load => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v1298 = &constructor_to_amode(ctx, v1287, v1286, v1288);
                                let v1317 = &constructor_amode_to_xmm_mem(ctx, v1298);
                                let v1318 = constructor_x64_movss_load(ctx, v1317);
                                let v1319 = constructor_output_xmm(ctx, v1318);
                                // Rule at src/isa/x64/lower.isle line 2545.
                                return Some(v1319);
                            }
                            F64 => {
                                let v1298 = &constructor_to_amode(ctx, v1287, v1286, v1288);
                                let v1317 = &constructor_amode_to_xmm_mem(ctx, v1298);
                                let v1320 = constructor_x64_movsd_load(ctx, v1317);
                                let v1321 = constructor_output_xmm(ctx, v1320);
                                // Rule at src/isa/x64/lower.isle line 2547.
                                return Some(v1321);
                            }
                            F32X4 => {
                                let v1298 = &constructor_to_amode(ctx, v1287, v1286, v1288);
                                let v1317 = &constructor_amode_to_xmm_mem(ctx, v1298);
                                let v1322 = constructor_x64_movups(ctx, v1317);
                                let v1323 = constructor_output_xmm(ctx, v1322);
                                // Rule at src/isa/x64/lower.isle line 2549.
                                return Some(v1323);
                            }
                            F64X2 => {
                                let v1298 = &constructor_to_amode(ctx, v1287, v1286, v1288);
                                let v1317 = &constructor_amode_to_xmm_mem(ctx, v1298);
                                let v1324 = constructor_x64_movupd(ctx, v1317);
                                let v1325 = constructor_output_xmm(ctx, v1324);
                                // Rule at src/isa/x64/lower.isle line 2551.
                                return Some(v1325);
                            }
                            _ => {}
                        }
                        let v1296 = C::ty_int_ref_64(ctx, v3);
                        if let Some(v1297) = v1296 {
                            let v1298 = &constructor_to_amode(ctx, v1287, v1286, v1288);
                            let v1299 = constructor_x64_mov(ctx, v1298);
                            let v1300 = constructor_output_reg(ctx, v1299);
                            // Rule at src/isa/x64/lower.isle line 2523.
                            return Some(v1300);
                        }
                        let v1326 = C::ty_vec128(ctx, v3);
                        if let Some(v1327) = v1326 {
                            let v1298 = &constructor_to_amode(ctx, v1287, v1286, v1288);
                            let v1317 = &constructor_amode_to_xmm_mem(ctx, v1298);
                            let v1328 = constructor_x64_movdqu(ctx, v1317);
                            let v1329 = constructor_output_xmm(ctx, v1328);
                            // Rule at src/isa/x64/lower.isle line 2553.
                            return Some(v1329);
                        }
                        if v3 == I128 {
                            let v1298 = &constructor_to_amode(ctx, v1287, v1286, v1288);
                            let v1331 = &C::amode_offset(ctx, v1298, 0x8);
                            let v1332 = constructor_x64_mov(ctx, v1298);
                            let v1333 = constructor_x64_mov(ctx, v1331);
                            let v1334 = C::value_regs(ctx, v1332, v1333);
                            let v1335 = C::output(ctx, v1334);
                            // Rule at src/isa/x64/lower.isle line 2557.
                            return Some(v1335);
                        }
                        let v1022 = C::fits_in_32(ctx, v3);
                        if let Some(v1023) = v1022 {
                            let v1282 = &C::type_register_class(ctx, v3);
                            if let Some(v1283) = v1282 {
                                if let &RegisterClass::Gpr {
                                    single_register: v1284,
                                } = v1283
                                {
                                    let v1289 = C::ty_bits_u16(ctx, v1023);
                                    let v1291 = &C::ext_mode(ctx, v1289, 0x40);
                                    let v1292 = &constructor_to_amode(ctx, v1287, v1286, v1288);
                                    let v1293 = &constructor_amode_to_gpr_mem(ctx, v1292);
                                    let v1294 = constructor_x64_movzx(ctx, v1291, v1293);
                                    let v1295 = constructor_output_gpr(ctx, v1294);
                                    // Rule at src/isa/x64/lower.isle line 2519.
                                    return Some(v1295);
                                }
                            }
                        }
                    }
                }
                &Opcode::Uload8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1282 = &C::type_register_class(ctx, v3);
                        if let Some(v1283) = v1282 {
                            if let &RegisterClass::Gpr {
                                single_register: v1284,
                            } = v1283
                            {
                                let v1298 = &constructor_to_amode(ctx, v1287, v1286, v1288);
                                let v1302 = &constructor_amode_to_gpr_mem(ctx, v1298);
                                let v1303 = constructor_x64_movzx(ctx, &ExtMode::BQ, v1302);
                                let v1304 = constructor_output_gpr(ctx, v1303);
                                // Rule at src/isa/x64/lower.isle line 2528.
                                return Some(v1304);
                            }
                        }
                    }
                }
                &Opcode::Sload8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1282 = &C::type_register_class(ctx, v3);
                        if let Some(v1283) = v1282 {
                            if let &RegisterClass::Gpr {
                                single_register: v1284,
                            } = v1283
                            {
                                let v1298 = &constructor_to_amode(ctx, v1287, v1286, v1288);
                                let v1302 = &constructor_amode_to_gpr_mem(ctx, v1298);
                                let v1305 = constructor_x64_movsx(ctx, &ExtMode::BQ, v1302);
                                let v1306 = constructor_output_gpr(ctx, v1305);
                                // Rule at src/isa/x64/lower.isle line 2530.
                                return Some(v1306);
                            }
                        }
                    }
                }
                &Opcode::Uload16 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1282 = &C::type_register_class(ctx, v3);
                        if let Some(v1283) = v1282 {
                            if let &RegisterClass::Gpr {
                                single_register: v1284,
                            } = v1283
                            {
                                let v1298 = &constructor_to_amode(ctx, v1287, v1286, v1288);
                                let v1302 = &constructor_amode_to_gpr_mem(ctx, v1298);
                                let v1308 = constructor_x64_movzx(ctx, &ExtMode::WQ, v1302);
                                let v1309 = constructor_output_gpr(ctx, v1308);
                                // Rule at src/isa/x64/lower.isle line 2532.
                                return Some(v1309);
                            }
                        }
                    }
                }
                &Opcode::Sload16 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1282 = &C::type_register_class(ctx, v3);
                        if let Some(v1283) = v1282 {
                            if let &RegisterClass::Gpr {
                                single_register: v1284,
                            } = v1283
                            {
                                let v1298 = &constructor_to_amode(ctx, v1287, v1286, v1288);
                                let v1302 = &constructor_amode_to_gpr_mem(ctx, v1298);
                                let v1310 = constructor_x64_movsx(ctx, &ExtMode::WQ, v1302);
                                let v1311 = constructor_output_gpr(ctx, v1310);
                                // Rule at src/isa/x64/lower.isle line 2534.
                                return Some(v1311);
                            }
                        }
                    }
                }
                &Opcode::Uload32 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1282 = &C::type_register_class(ctx, v3);
                        if let Some(v1283) = v1282 {
                            if let &RegisterClass::Gpr {
                                single_register: v1284,
                            } = v1283
                            {
                                let v1298 = &constructor_to_amode(ctx, v1287, v1286, v1288);
                                let v1302 = &constructor_amode_to_gpr_mem(ctx, v1298);
                                let v1313 = constructor_x64_movzx(ctx, &ExtMode::LQ, v1302);
                                let v1314 = constructor_output_gpr(ctx, v1313);
                                // Rule at src/isa/x64/lower.isle line 2536.
                                return Some(v1314);
                            }
                        }
                    }
                }
                &Opcode::Sload32 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1282 = &C::type_register_class(ctx, v3);
                        if let Some(v1283) = v1282 {
                            if let &RegisterClass::Gpr {
                                single_register: v1284,
                            } = v1283
                            {
                                let v1298 = &constructor_to_amode(ctx, v1287, v1286, v1288);
                                let v1302 = &constructor_amode_to_gpr_mem(ctx, v1298);
                                let v1315 = constructor_x64_movsx(ctx, &ExtMode::LQ, v1302);
                                let v1316 = constructor_output_gpr(ctx, v1315);
                                // Rule at src/isa/x64/lower.isle line 2538.
                                return Some(v1316);
                            }
                        }
                    }
                }
                &Opcode::Uload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I16X8 {
                            let v1298 = &constructor_to_amode(ctx, v1287, v1286, v1288);
                            let v1317 = &constructor_amode_to_xmm_mem(ctx, v1298);
                            let v1338 = constructor_x64_pmovzxbw(ctx, v1317);
                            let v1339 = constructor_output_xmm(ctx, v1338);
                            // Rule at src/isa/x64/lower.isle line 2569.
                            return Some(v1339);
                        }
                    }
                }
                &Opcode::Sload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I16X8 {
                            let v1298 = &constructor_to_amode(ctx, v1287, v1286, v1288);
                            let v1317 = &constructor_amode_to_xmm_mem(ctx, v1298);
                            let v1336 = constructor_x64_pmovsxbw(ctx, v1317);
                            let v1337 = constructor_output_xmm(ctx, v1336);
                            // Rule at src/isa/x64/lower.isle line 2567.
                            return Some(v1337);
                        }
                    }
                }
                &Opcode::Uload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v1298 = &constructor_to_amode(ctx, v1287, v1286, v1288);
                            let v1317 = &constructor_amode_to_xmm_mem(ctx, v1298);
                            let v1342 = constructor_x64_pmovzxwd(ctx, v1317);
                            let v1343 = constructor_output_xmm(ctx, v1342);
                            // Rule at src/isa/x64/lower.isle line 2573.
                            return Some(v1343);
                        }
                    }
                }
                &Opcode::Sload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v1298 = &constructor_to_amode(ctx, v1287, v1286, v1288);
                            let v1317 = &constructor_amode_to_xmm_mem(ctx, v1298);
                            let v1340 = constructor_x64_pmovsxwd(ctx, v1317);
                            let v1341 = constructor_output_xmm(ctx, v1340);
                            // Rule at src/isa/x64/lower.isle line 2571.
                            return Some(v1341);
                        }
                    }
                }
                &Opcode::Uload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64X2 {
                            let v1298 = &constructor_to_amode(ctx, v1287, v1286, v1288);
                            let v1317 = &constructor_amode_to_xmm_mem(ctx, v1298);
                            let v1346 = constructor_x64_pmovzxdq(ctx, v1317);
                            let v1347 = constructor_output_xmm(ctx, v1346);
                            // Rule at src/isa/x64/lower.isle line 2577.
                            return Some(v1347);
                        }
                    }
                }
                &Opcode::Sload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64X2 {
                            let v1298 = &constructor_to_amode(ctx, v1287, v1286, v1288);
                            let v1317 = &constructor_amode_to_xmm_mem(ctx, v1298);
                            let v1344 = constructor_x64_pmovsxdq(ctx, v1317);
                            let v1345 = constructor_output_xmm(ctx, v1344);
                            // Rule at src/isa/x64/lower.isle line 2575.
                            return Some(v1345);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::LoadNoOffset {
            opcode: ref v1477,
            arg: v1478,
            flags: v1479,
        } => {
            match v1477 {
                &Opcode::Bitcast => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1282 = &C::type_register_class(ctx, v3);
                        if let Some(v1283) = v1282 {
                            match v1283 {
                                &RegisterClass::Gpr {
                                    single_register: v1284,
                                } => {
                                    let v1798 = C::value_type(ctx, v1478);
                                    let v1809 = &C::type_register_class(ctx, v1798);
                                    if let Some(v1810) = v1809 {
                                        if let &RegisterClass::Gpr {
                                            single_register: v1811,
                                        } = v1810
                                        {
                                            let v1812 = constructor_output_value(ctx, v1478);
                                            // Rule at src/isa/x64/lower.isle line 3333.
                                            return Some(v1812);
                                        }
                                    }
                                }
                                &RegisterClass::Xmm => {
                                    let v1798 = C::value_type(ctx, v1478);
                                    let v1809 = &C::type_register_class(ctx, v1798);
                                    if let Some(v1810) = v1809 {
                                        if let &RegisterClass::Xmm = v1810 {
                                            let v1812 = constructor_output_value(ctx, v1478);
                                            // Rule at src/isa/x64/lower.isle line 3337.
                                            return Some(v1812);
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        match v3 {
                            I32 => {
                                let v1798 = C::value_type(ctx, v1478);
                                if v1798 == F32 {
                                    let v1799 = constructor_put_in_xmm(ctx, v1478);
                                    let v1800 = constructor_bitcast_xmm_to_gpr(ctx, F32, v1799);
                                    let v1801 = constructor_output_gpr(ctx, v1800);
                                    // Rule at src/isa/x64/lower.isle line 3320.
                                    return Some(v1801);
                                }
                            }
                            I64 => {
                                let v1798 = C::value_type(ctx, v1478);
                                if v1798 == F64 {
                                    let v1799 = constructor_put_in_xmm(ctx, v1478);
                                    let v1805 = constructor_bitcast_xmm_to_gpr(ctx, F64, v1799);
                                    let v1806 = constructor_output_gpr(ctx, v1805);
                                    // Rule at src/isa/x64/lower.isle line 3326.
                                    return Some(v1806);
                                }
                            }
                            F32 => {
                                let v1798 = C::value_type(ctx, v1478);
                                if v1798 == I32 {
                                    let v1802 = constructor_put_in_gpr(ctx, v1478);
                                    let v1803 = constructor_bitcast_gpr_to_xmm(ctx, I32, v1802);
                                    let v1804 = constructor_output_xmm(ctx, v1803);
                                    // Rule at src/isa/x64/lower.isle line 3323.
                                    return Some(v1804);
                                }
                            }
                            F64 => {
                                let v1798 = C::value_type(ctx, v1478);
                                if v1798 == I64 {
                                    let v1802 = constructor_put_in_gpr(ctx, v1478);
                                    let v1807 = constructor_bitcast_gpr_to_xmm(ctx, I64, v1802);
                                    let v1808 = constructor_output_xmm(ctx, v1807);
                                    // Rule at src/isa/x64/lower.isle line 3329.
                                    return Some(v1808);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::AtomicLoad => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v1480 = C::zero_offset(ctx);
                            let v1481 = &constructor_to_amode(ctx, v1479, v1478, v1480);
                            let v1482 = constructor_x64_mov(ctx, v1481);
                            let v1483 = constructor_output_reg(ctx, v1482);
                            // Rule at src/isa/x64/lower.isle line 2808.
                            return Some(v1483);
                        }
                        let v1022 = C::fits_in_32(ctx, v3);
                        if let Some(v1023) = v1022 {
                            let v1484 = C::ty_int(ctx, v3);
                            if let Some(v1485) = v1484 {
                                let v1289 = C::ty_bits_u16(ctx, v1023);
                                let v1291 = &C::ext_mode(ctx, v1289, 0x40);
                                let v1486 = C::zero_offset(ctx);
                                let v1487 = &constructor_to_amode(ctx, v1479, v1478, v1486);
                                let v1488 = &constructor_amode_to_gpr_mem(ctx, v1487);
                                let v1489 = constructor_x64_movzx(ctx, v1291, v1488);
                                let v1490 = constructor_output_gpr(ctx, v1489);
                                // Rule at src/isa/x64/lower.isle line 2810.
                                return Some(v1490);
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::MultiAry {
            opcode: ref v630,
            args: v631,
        } => {
            if let &Opcode::Return = v630 {
                let v632 = C::value_list_slice(ctx, v631);
                let v633 = C::value_slice_len(ctx, v632);
                let v634 = C::range(ctx, 0x0, v633);
                let v635 = constructor_lower_return(ctx, v634, v632);
                // Rule at src/isa/x64/lower.isle line 1395.
                return Some(v635);
            }
        }
        &InstructionData::NullAry { opcode: ref v30 } => {
            match v30 {
                &Opcode::Debugtrap => {
                    let v1042 = &constructor_x64_hlt(ctx);
                    let v1043 = constructor_side_effect(ctx, v1042);
                    // Rule at src/isa/x64/lower.isle line 2145.
                    return Some(v1043);
                }
                &Opcode::GetPinnedReg => {
                    let v1926 = constructor_read_pinned_gpr(ctx);
                    let v1927 = constructor_output_gpr(ctx, v1926);
                    // Rule at src/isa/x64/lower.isle line 3495.
                    return Some(v1927);
                }
                &Opcode::GetFramePointer => {
                    let v1554 = constructor_x64_rbp(ctx);
                    let v1555 = constructor_output_reg(ctx, v1554);
                    // Rule at src/isa/x64/lower.isle line 2857.
                    return Some(v1555);
                }
                &Opcode::GetStackPointer => {
                    let v1556 = constructor_x64_rsp(ctx);
                    let v1557 = constructor_output_reg(ctx, v1556);
                    // Rule at src/isa/x64/lower.isle line 2860.
                    return Some(v1557);
                }
                &Opcode::GetReturnAddress => {
                    let v1554 = constructor_x64_rbp(ctx);
                    let v1558 = C::mem_flags_trusted(ctx);
                    let v1559 = Amode::ImmReg {
                        simm32: 0x8,
                        base: v1554,
                        flags: v1558,
                    };
                    let v1560 = &C::amode_to_synthetic_amode(ctx, &v1559);
                    let v1561 = constructor_x64_load(ctx, I64, v1560, &ExtKind::None);
                    let v1562 = constructor_output_reg(ctx, v1561);
                    // Rule at src/isa/x64/lower.isle line 2863.
                    return Some(v1562);
                }
                &Opcode::Null => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v31 = constructor_imm(ctx, v3, 0x0);
                        let v32 = constructor_output_reg(ctx, v31);
                        // Rule at src/isa/x64/lower.isle line 37.
                        return Some(v32);
                    }
                }
                &Opcode::Nop => {
                    let v2115 = C::invalid_reg(ctx);
                    let v2116 = constructor_output_reg(ctx, v2115);
                    // Rule at src/isa/x64/lower.isle line 3779.
                    return Some(v2116);
                }
                &Opcode::Fence => {
                    let v1457 = &constructor_x64_mfence(ctx);
                    let v1458 = constructor_side_effect(ctx, v1457);
                    // Rule at src/isa/x64/lower.isle line 2786.
                    return Some(v1458);
                }
                _ => {}
            }
        }
        &InstructionData::Shuffle {
            opcode: ref v1935,
            args: ref v1936,
            imm: v1937,
        } => {
            if let &Opcode::Shuffle = v1935 {
                let v1941 = C::u128_from_immediate(ctx, v1937);
                if let Some(v1942) = v1941 {
                    match v1942 {
                        0x17071606150514041303120211011000 => {
                            let v1938 = C::unpack_value_array_2(ctx, v1936);
                            let v1943 = constructor_put_in_xmm(ctx, v1938.0);
                            let v1944 = &C::put_in_xmm_mem(ctx, v1938.1);
                            let v1947 = constructor_x64_punpcklbw(ctx, v1943, v1944);
                            let v1948 = constructor_output_xmm(ctx, v1947);
                            // Rule at src/isa/x64/lower.isle line 3518.
                            return Some(v1948);
                        }
                        0x1F0F1E0E1D0D1C0C1B0B1A0A19091808 => {
                            let v1938 = C::unpack_value_array_2(ctx, v1936);
                            let v1943 = constructor_put_in_xmm(ctx, v1938.0);
                            let v1944 = &C::put_in_xmm_mem(ctx, v1938.1);
                            let v1945 = constructor_x64_punpckhbw(ctx, v1943, v1944);
                            let v1946 = constructor_output_xmm(ctx, v1945);
                            // Rule at src/isa/x64/lower.isle line 3513.
                            return Some(v1946);
                        }
                        _ => {}
                    }
                }
                let v1949 = &C::vec_mask_from_immediate(ctx, v1937);
                if let Some(v1950) = v1949 {
                    let v1938 = C::unpack_value_array_2(ctx, v1936);
                    if v1938.0 == v1938.1 {
                        let v1943 = constructor_put_in_xmm(ctx, v1938.0);
                        let v1951 = C::shuffle_0_31_mask(ctx, v1950);
                        let v1952 = &constructor_const_to_xmm_mem(ctx, v1951);
                        let v1953 = constructor_x64_pshufb(ctx, v1943, v1952);
                        let v1954 = constructor_output_xmm(ctx, v1953);
                        // Rule at src/isa/x64/lower.isle line 3525.
                        return Some(v1954);
                    }
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v349 = C::avx512vl_enabled(ctx, v3);
                        if v349 == true {
                            let v1955 = C::avx512vbmi_enabled(ctx, v3);
                            if v1955 == true {
                                let v1956 = C::perm_from_mask_with_zeros(ctx, v1950);
                                if let Some(v1957) = v1956 {
                                    let v1960 = constructor_put_in_xmm(ctx, v1938.1);
                                    let v1961 = constructor_put_in_xmm(ctx, v1938.0);
                                    let v1962 = constructor_x64_xmm_load_const(ctx, I8X16, v1957.0);
                                    let v1963 = constructor_x64_vpermi2b(ctx, v1960, v1961, v1962);
                                    let v1964 = &constructor_const_to_xmm_mem(ctx, v1957.1);
                                    let v1965 = constructor_x64_andps(ctx, v1963, v1964);
                                    let v1966 = constructor_output_xmm(ctx, v1965);
                                    // Rule at src/isa/x64/lower.isle line 3531.
                                    return Some(v1966);
                                }
                                let v1960 = constructor_put_in_xmm(ctx, v1938.1);
                                let v1961 = constructor_put_in_xmm(ctx, v1938.0);
                                let v1967 = C::perm_from_mask(ctx, v1950);
                                let v1968 = constructor_x64_xmm_load_const(ctx, I8X16, v1967);
                                let v1969 = constructor_x64_vpermi2b(ctx, v1960, v1961, v1968);
                                let v1970 = constructor_output_xmm(ctx, v1969);
                                // Rule at src/isa/x64/lower.isle line 3538.
                                return Some(v1970);
                            }
                        }
                    }
                    let v1943 = constructor_put_in_xmm(ctx, v1938.0);
                    let v1971 = C::shuffle_0_15_mask(ctx, v1950);
                    let v1972 = &constructor_const_to_xmm_mem(ctx, v1971);
                    let v1973 = constructor_x64_pshufb(ctx, v1943, v1972);
                    let v1974 = constructor_put_in_xmm(ctx, v1938.1);
                    let v1975 = C::shuffle_16_31_mask(ctx, v1950);
                    let v1976 = &constructor_const_to_xmm_mem(ctx, v1975);
                    let v1977 = constructor_x64_pshufb(ctx, v1974, v1976);
                    let v1978 = &C::xmm_to_xmm_mem(ctx, v1977);
                    let v1979 = constructor_x64_por(ctx, v1973, v1978);
                    let v1980 = constructor_output_xmm(ctx, v1979);
                    // Rule at src/isa/x64/lower.isle line 3545.
                    return Some(v1980);
                }
            }
        }
        &InstructionData::StackLoad {
            opcode: ref v1890,
            stack_slot: v1891,
            offset: v1892,
        } => {
            if let &Opcode::StackAddr = v1890 {
                let v1893 = constructor_stack_addr_impl(ctx, v1891, v1892);
                let v1894 = constructor_output_gpr(ctx, v1893);
                // Rule at src/isa/x64/lower.isle line 3436.
                return Some(v1894);
            }
        }
        &InstructionData::Store {
            opcode: ref v1348,
            args: ref v1349,
            flags: v1350,
            offset: v1351,
        } => {
            match v1348 {
                &Opcode::Store => {
                    let v1352 = C::unpack_value_array_2(ctx, v1349);
                    let v1400 = C::def_inst(ctx, v1352.0);
                    if let Some(v1401) = v1400 {
                        let v1402 = C::first_result(ctx, v1401);
                        if let Some(v1403) = v1402 {
                            let v1404 = C::value_type(ctx, v1403);
                            let v1405 = C::ty_32_or_64(ctx, v1404);
                            if let Some(v1406) = v1405 {
                                let v1407 = &C::inst_data(ctx, v1401);
                                if let &InstructionData::Binary {
                                    opcode: ref v1408,
                                    args: ref v1409,
                                } = v1407
                                {
                                    match v1408 {
                                        &Opcode::Iadd => {
                                            let v1410 = C::unpack_value_array_2(ctx, v1409);
                                            let v1413 = &C::sinkable_load(ctx, v1410.0);
                                            if let Some(v1414) = v1413 {
                                                let v1415 = C::def_inst(ctx, v1410.0);
                                                if let Some(v1416) = v1415 {
                                                    let v1417 = &C::inst_data(ctx, v1416);
                                                    if let &InstructionData::Load {
                                                        opcode: ref v1418,
                                                        arg: v1419,
                                                        flags: v1420,
                                                        offset: v1421,
                                                    } = v1417
                                                    {
                                                        if let &Opcode::Load = v1418 {
                                                            if v1350 == v1420 {
                                                                if v1351 == v1421 {
                                                                    if v1352.1 == v1419 {
                                                                        let v1422 = &C::sink_load(
                                                                            ctx, v1414,
                                                                        );
                                                                        let v1423 = &constructor_reg_mem_to_reg_mem_imm(ctx, v1422);
                                                                        let v1424 =
                                                                            &constructor_to_amode(
                                                                                ctx, v1420, v1419,
                                                                                v1421,
                                                                            );
                                                                        let v1425 =
                                                                            constructor_put_in_gpr(
                                                                                ctx, v1410.1,
                                                                            );
                                                                        let v1426 = &constructor_x64_add_mem(ctx, v1406, v1424, v1425);
                                                                        let v1427 =
                                                                            constructor_side_effect(
                                                                                ctx, v1426,
                                                                            );
                                                                        // Rule at src/isa/x64/lower.isle line 2659.
                                                                        return Some(v1427);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            let v1428 = &C::sinkable_load(ctx, v1410.1);
                                            if let Some(v1429) = v1428 {
                                                let v1430 = C::def_inst(ctx, v1410.1);
                                                if let Some(v1431) = v1430 {
                                                    let v1432 = &C::inst_data(ctx, v1431);
                                                    if let &InstructionData::Load {
                                                        opcode: ref v1433,
                                                        arg: v1434,
                                                        flags: v1435,
                                                        offset: v1436,
                                                    } = v1432
                                                    {
                                                        if let &Opcode::Load = v1433 {
                                                            if v1350 == v1435 {
                                                                if v1351 == v1436 {
                                                                    if v1352.1 == v1434 {
                                                                        let v1437 = &C::sink_load(
                                                                            ctx, v1429,
                                                                        );
                                                                        let v1438 = &constructor_reg_mem_to_reg_mem_imm(ctx, v1437);
                                                                        let v1439 =
                                                                            &constructor_to_amode(
                                                                                ctx, v1435, v1434,
                                                                                v1436,
                                                                            );
                                                                        let v1440 =
                                                                            constructor_put_in_gpr(
                                                                                ctx, v1410.0,
                                                                            );
                                                                        let v1441 = &constructor_x64_add_mem(ctx, v1406, v1439, v1440);
                                                                        let v1442 =
                                                                            constructor_side_effect(
                                                                                ctx, v1441,
                                                                            );
                                                                        // Rule at src/isa/x64/lower.isle line 2673.
                                                                        return Some(v1442);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Isub => {
                                            let v1410 = C::unpack_value_array_2(ctx, v1409);
                                            let v1413 = &C::sinkable_load(ctx, v1410.0);
                                            if let Some(v1414) = v1413 {
                                                let v1415 = C::def_inst(ctx, v1410.0);
                                                if let Some(v1416) = v1415 {
                                                    let v1417 = &C::inst_data(ctx, v1416);
                                                    if let &InstructionData::Load {
                                                        opcode: ref v1418,
                                                        arg: v1419,
                                                        flags: v1420,
                                                        offset: v1421,
                                                    } = v1417
                                                    {
                                                        if let &Opcode::Load = v1418 {
                                                            if v1350 == v1420 {
                                                                if v1351 == v1421 {
                                                                    if v1352.1 == v1419 {
                                                                        let v1422 = &C::sink_load(
                                                                            ctx, v1414,
                                                                        );
                                                                        let v1423 = &constructor_reg_mem_to_reg_mem_imm(ctx, v1422);
                                                                        let v1424 =
                                                                            &constructor_to_amode(
                                                                                ctx, v1420, v1419,
                                                                                v1421,
                                                                            );
                                                                        let v1425 =
                                                                            constructor_put_in_gpr(
                                                                                ctx, v1410.1,
                                                                            );
                                                                        let v1443 = &constructor_x64_sub_mem(ctx, v1406, v1424, v1425);
                                                                        let v1444 =
                                                                            constructor_side_effect(
                                                                                ctx, v1443,
                                                                            );
                                                                        // Rule at src/isa/x64/lower.isle line 2687.
                                                                        return Some(v1444);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Band => {
                                            let v1410 = C::unpack_value_array_2(ctx, v1409);
                                            let v1413 = &C::sinkable_load(ctx, v1410.0);
                                            if let Some(v1414) = v1413 {
                                                let v1415 = C::def_inst(ctx, v1410.0);
                                                if let Some(v1416) = v1415 {
                                                    let v1417 = &C::inst_data(ctx, v1416);
                                                    if let &InstructionData::Load {
                                                        opcode: ref v1418,
                                                        arg: v1419,
                                                        flags: v1420,
                                                        offset: v1421,
                                                    } = v1417
                                                    {
                                                        if let &Opcode::Load = v1418 {
                                                            if v1350 == v1420 {
                                                                if v1351 == v1421 {
                                                                    if v1352.1 == v1419 {
                                                                        let v1422 = &C::sink_load(
                                                                            ctx, v1414,
                                                                        );
                                                                        let v1423 = &constructor_reg_mem_to_reg_mem_imm(ctx, v1422);
                                                                        let v1424 =
                                                                            &constructor_to_amode(
                                                                                ctx, v1420, v1419,
                                                                                v1421,
                                                                            );
                                                                        let v1425 =
                                                                            constructor_put_in_gpr(
                                                                                ctx, v1410.1,
                                                                            );
                                                                        let v1445 = &constructor_x64_and_mem(ctx, v1406, v1424, v1425);
                                                                        let v1446 =
                                                                            constructor_side_effect(
                                                                                ctx, v1445,
                                                                            );
                                                                        // Rule at src/isa/x64/lower.isle line 2701.
                                                                        return Some(v1446);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            let v1428 = &C::sinkable_load(ctx, v1410.1);
                                            if let Some(v1429) = v1428 {
                                                let v1430 = C::def_inst(ctx, v1410.1);
                                                if let Some(v1431) = v1430 {
                                                    let v1432 = &C::inst_data(ctx, v1431);
                                                    if let &InstructionData::Load {
                                                        opcode: ref v1433,
                                                        arg: v1434,
                                                        flags: v1435,
                                                        offset: v1436,
                                                    } = v1432
                                                    {
                                                        if let &Opcode::Load = v1433 {
                                                            if v1350 == v1435 {
                                                                if v1351 == v1436 {
                                                                    if v1352.1 == v1434 {
                                                                        let v1437 = &C::sink_load(
                                                                            ctx, v1429,
                                                                        );
                                                                        let v1438 = &constructor_reg_mem_to_reg_mem_imm(ctx, v1437);
                                                                        let v1439 =
                                                                            &constructor_to_amode(
                                                                                ctx, v1435, v1434,
                                                                                v1436,
                                                                            );
                                                                        let v1440 =
                                                                            constructor_put_in_gpr(
                                                                                ctx, v1410.0,
                                                                            );
                                                                        let v1447 = &constructor_x64_and_mem(ctx, v1406, v1439, v1440);
                                                                        let v1448 =
                                                                            constructor_side_effect(
                                                                                ctx, v1447,
                                                                            );
                                                                        // Rule at src/isa/x64/lower.isle line 2715.
                                                                        return Some(v1448);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bor => {
                                            let v1410 = C::unpack_value_array_2(ctx, v1409);
                                            let v1413 = &C::sinkable_load(ctx, v1410.0);
                                            if let Some(v1414) = v1413 {
                                                let v1415 = C::def_inst(ctx, v1410.0);
                                                if let Some(v1416) = v1415 {
                                                    let v1417 = &C::inst_data(ctx, v1416);
                                                    if let &InstructionData::Load {
                                                        opcode: ref v1418,
                                                        arg: v1419,
                                                        flags: v1420,
                                                        offset: v1421,
                                                    } = v1417
                                                    {
                                                        if let &Opcode::Load = v1418 {
                                                            if v1350 == v1420 {
                                                                if v1351 == v1421 {
                                                                    if v1352.1 == v1419 {
                                                                        let v1422 = &C::sink_load(
                                                                            ctx, v1414,
                                                                        );
                                                                        let v1423 = &constructor_reg_mem_to_reg_mem_imm(ctx, v1422);
                                                                        let v1424 =
                                                                            &constructor_to_amode(
                                                                                ctx, v1420, v1419,
                                                                                v1421,
                                                                            );
                                                                        let v1425 =
                                                                            constructor_put_in_gpr(
                                                                                ctx, v1410.1,
                                                                            );
                                                                        let v1449 =
                                                                            &constructor_x64_or_mem(
                                                                                ctx, v1406, v1424,
                                                                                v1425,
                                                                            );
                                                                        let v1450 =
                                                                            constructor_side_effect(
                                                                                ctx, v1449,
                                                                            );
                                                                        // Rule at src/isa/x64/lower.isle line 2729.
                                                                        return Some(v1450);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            let v1428 = &C::sinkable_load(ctx, v1410.1);
                                            if let Some(v1429) = v1428 {
                                                let v1430 = C::def_inst(ctx, v1410.1);
                                                if let Some(v1431) = v1430 {
                                                    let v1432 = &C::inst_data(ctx, v1431);
                                                    if let &InstructionData::Load {
                                                        opcode: ref v1433,
                                                        arg: v1434,
                                                        flags: v1435,
                                                        offset: v1436,
                                                    } = v1432
                                                    {
                                                        if let &Opcode::Load = v1433 {
                                                            if v1350 == v1435 {
                                                                if v1351 == v1436 {
                                                                    if v1352.1 == v1434 {
                                                                        let v1437 = &C::sink_load(
                                                                            ctx, v1429,
                                                                        );
                                                                        let v1438 = &constructor_reg_mem_to_reg_mem_imm(ctx, v1437);
                                                                        let v1439 =
                                                                            &constructor_to_amode(
                                                                                ctx, v1435, v1434,
                                                                                v1436,
                                                                            );
                                                                        let v1440 =
                                                                            constructor_put_in_gpr(
                                                                                ctx, v1410.0,
                                                                            );
                                                                        let v1451 =
                                                                            &constructor_x64_or_mem(
                                                                                ctx, v1406, v1439,
                                                                                v1440,
                                                                            );
                                                                        let v1452 =
                                                                            constructor_side_effect(
                                                                                ctx, v1451,
                                                                            );
                                                                        // Rule at src/isa/x64/lower.isle line 2743.
                                                                        return Some(v1452);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bxor => {
                                            let v1410 = C::unpack_value_array_2(ctx, v1409);
                                            let v1413 = &C::sinkable_load(ctx, v1410.0);
                                            if let Some(v1414) = v1413 {
                                                let v1415 = C::def_inst(ctx, v1410.0);
                                                if let Some(v1416) = v1415 {
                                                    let v1417 = &C::inst_data(ctx, v1416);
                                                    if let &InstructionData::Load {
                                                        opcode: ref v1418,
                                                        arg: v1419,
                                                        flags: v1420,
                                                        offset: v1421,
                                                    } = v1417
                                                    {
                                                        if let &Opcode::Load = v1418 {
                                                            if v1350 == v1420 {
                                                                if v1351 == v1421 {
                                                                    if v1352.1 == v1419 {
                                                                        let v1422 = &C::sink_load(
                                                                            ctx, v1414,
                                                                        );
                                                                        let v1423 = &constructor_reg_mem_to_reg_mem_imm(ctx, v1422);
                                                                        let v1424 =
                                                                            &constructor_to_amode(
                                                                                ctx, v1420, v1419,
                                                                                v1421,
                                                                            );
                                                                        let v1425 =
                                                                            constructor_put_in_gpr(
                                                                                ctx, v1410.1,
                                                                            );
                                                                        let v1453 = &constructor_x64_xor_mem(ctx, v1406, v1424, v1425);
                                                                        let v1454 =
                                                                            constructor_side_effect(
                                                                                ctx, v1453,
                                                                            );
                                                                        // Rule at src/isa/x64/lower.isle line 2757.
                                                                        return Some(v1454);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            let v1428 = &C::sinkable_load(ctx, v1410.1);
                                            if let Some(v1429) = v1428 {
                                                let v1430 = C::def_inst(ctx, v1410.1);
                                                if let Some(v1431) = v1430 {
                                                    let v1432 = &C::inst_data(ctx, v1431);
                                                    if let &InstructionData::Load {
                                                        opcode: ref v1433,
                                                        arg: v1434,
                                                        flags: v1435,
                                                        offset: v1436,
                                                    } = v1432
                                                    {
                                                        if let &Opcode::Load = v1433 {
                                                            if v1350 == v1435 {
                                                                if v1351 == v1436 {
                                                                    if v1352.1 == v1434 {
                                                                        let v1437 = &C::sink_load(
                                                                            ctx, v1429,
                                                                        );
                                                                        let v1438 = &constructor_reg_mem_to_reg_mem_imm(ctx, v1437);
                                                                        let v1439 =
                                                                            &constructor_to_amode(
                                                                                ctx, v1435, v1434,
                                                                                v1436,
                                                                            );
                                                                        let v1440 =
                                                                            constructor_put_in_gpr(
                                                                                ctx, v1410.0,
                                                                            );
                                                                        let v1455 = &constructor_x64_xor_mem(ctx, v1406, v1439, v1440);
                                                                        let v1456 =
                                                                            constructor_side_effect(
                                                                                ctx, v1455,
                                                                            );
                                                                        // Rule at src/isa/x64/lower.isle line 2771.
                                                                        return Some(v1456);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                        }
                    }
                    let v1355 = C::value_type(ctx, v1352.0);
                    match v1355 {
                        I128 => {
                            let v1389 = C::put_in_regs(ctx, v1352.0);
                            let v1390 = constructor_value_regs_get_gpr(ctx, v1389, 0x0);
                            let v1391 = constructor_value_regs_get_gpr(ctx, v1389, 0x1);
                            let v1392 = &constructor_to_amode(ctx, v1350, v1352.1, v1351);
                            let v1393 = &C::amode_offset(ctx, v1392, 0x8);
                            let v1394 = &C::amode_to_synthetic_amode(ctx, v1392);
                            let v1395 = &constructor_x64_movrm(ctx, I64, v1394, v1390);
                            let v1396 = &C::amode_to_synthetic_amode(ctx, v1393);
                            let v1397 = &constructor_x64_movrm(ctx, I64, v1396, v1391);
                            let v1398 = &constructor_side_effect_concat(ctx, v1395, v1397);
                            let v1399 = constructor_side_effect(ctx, v1398);
                            // Rule at src/isa/x64/lower.isle line 2642.
                            return Some(v1399);
                        }
                        F32 => {
                            let v1359 = &constructor_to_amode(ctx, v1350, v1352.1, v1351);
                            let v1360 = &C::amode_to_synthetic_amode(ctx, v1359);
                            let v1372 = constructor_put_in_xmm(ctx, v1352.0);
                            let v1373 =
                                &constructor_x64_xmm_movrm(ctx, &SseOpcode::Movss, v1360, v1372);
                            let v1374 = constructor_side_effect(ctx, v1373);
                            // Rule at src/isa/x64/lower.isle line 2602.
                            return Some(v1374);
                        }
                        F64 => {
                            let v1359 = &constructor_to_amode(ctx, v1350, v1352.1, v1351);
                            let v1360 = &C::amode_to_synthetic_amode(ctx, v1359);
                            let v1372 = constructor_put_in_xmm(ctx, v1352.0);
                            let v1376 =
                                &constructor_x64_xmm_movrm(ctx, &SseOpcode::Movsd, v1360, v1372);
                            let v1377 = constructor_side_effect(ctx, v1376);
                            // Rule at src/isa/x64/lower.isle line 2610.
                            return Some(v1377);
                        }
                        F32X4 => {
                            let v1359 = &constructor_to_amode(ctx, v1350, v1352.1, v1351);
                            let v1360 = &C::amode_to_synthetic_amode(ctx, v1359);
                            let v1372 = constructor_put_in_xmm(ctx, v1352.0);
                            let v1379 =
                                &constructor_x64_xmm_movrm(ctx, &SseOpcode::Movups, v1360, v1372);
                            let v1380 = constructor_side_effect(ctx, v1379);
                            // Rule at src/isa/x64/lower.isle line 2618.
                            return Some(v1380);
                        }
                        F64X2 => {
                            let v1359 = &constructor_to_amode(ctx, v1350, v1352.1, v1351);
                            let v1360 = &C::amode_to_synthetic_amode(ctx, v1359);
                            let v1372 = constructor_put_in_xmm(ctx, v1352.0);
                            let v1382 =
                                &constructor_x64_xmm_movrm(ctx, &SseOpcode::Movupd, v1360, v1372);
                            let v1383 = constructor_side_effect(ctx, v1382);
                            // Rule at src/isa/x64/lower.isle line 2626.
                            return Some(v1383);
                        }
                        _ => {}
                    }
                    let v1384 = C::ty_vec128_int(ctx, v1355);
                    if let Some(v1385) = v1384 {
                        let v1359 = &constructor_to_amode(ctx, v1350, v1352.1, v1351);
                        let v1360 = &C::amode_to_synthetic_amode(ctx, v1359);
                        let v1372 = constructor_put_in_xmm(ctx, v1352.0);
                        let v1387 =
                            &constructor_x64_xmm_movrm(ctx, &SseOpcode::Movdqu, v1360, v1372);
                        let v1388 = constructor_side_effect(ctx, v1387);
                        // Rule at src/isa/x64/lower.isle line 2634.
                        return Some(v1388);
                    }
                    let v1356 = &C::type_register_class(ctx, v1355);
                    if let Some(v1357) = v1356 {
                        if let &RegisterClass::Gpr {
                            single_register: v1358,
                        } = v1357
                        {
                            let v1359 = &constructor_to_amode(ctx, v1350, v1352.1, v1351);
                            let v1360 = &C::amode_to_synthetic_amode(ctx, v1359);
                            let v1361 = constructor_put_in_gpr(ctx, v1352.0);
                            let v1362 = &constructor_x64_movrm(ctx, v1355, v1360, v1361);
                            let v1363 = constructor_side_effect(ctx, v1362);
                            // Rule at src/isa/x64/lower.isle line 2583.
                            return Some(v1363);
                        }
                    }
                }
                &Opcode::Istore8 => {
                    let v1352 = C::unpack_value_array_2(ctx, v1349);
                    let v1359 = &constructor_to_amode(ctx, v1350, v1352.1, v1351);
                    let v1360 = &C::amode_to_synthetic_amode(ctx, v1359);
                    let v1361 = constructor_put_in_gpr(ctx, v1352.0);
                    let v1365 = &constructor_x64_movrm(ctx, I8, v1360, v1361);
                    let v1366 = constructor_side_effect(ctx, v1365);
                    // Rule at src/isa/x64/lower.isle line 2591.
                    return Some(v1366);
                }
                &Opcode::Istore16 => {
                    let v1352 = C::unpack_value_array_2(ctx, v1349);
                    let v1359 = &constructor_to_amode(ctx, v1350, v1352.1, v1351);
                    let v1360 = &C::amode_to_synthetic_amode(ctx, v1359);
                    let v1361 = constructor_put_in_gpr(ctx, v1352.0);
                    let v1367 = &constructor_x64_movrm(ctx, I16, v1360, v1361);
                    let v1368 = constructor_side_effect(ctx, v1367);
                    // Rule at src/isa/x64/lower.isle line 2594.
                    return Some(v1368);
                }
                &Opcode::Istore32 => {
                    let v1352 = C::unpack_value_array_2(ctx, v1349);
                    let v1359 = &constructor_to_amode(ctx, v1350, v1352.1, v1351);
                    let v1360 = &C::amode_to_synthetic_amode(ctx, v1359);
                    let v1361 = constructor_put_in_gpr(ctx, v1352.0);
                    let v1369 = &constructor_x64_movrm(ctx, I32, v1360, v1361);
                    let v1370 = constructor_side_effect(ctx, v1369);
                    // Rule at src/isa/x64/lower.isle line 2597.
                    return Some(v1370);
                }
                _ => {}
            }
        }
        &InstructionData::StoreNoOffset {
            opcode: ref v1491,
            args: ref v1492,
            flags: v1493,
        } => {
            if let &Opcode::AtomicStore = v1491 {
                let v1494 = C::unpack_value_array_2(ctx, v1492);
                let v1497 = C::value_type(ctx, v1494.0);
                let v1498 = C::fits_in_64(ctx, v1497);
                if let Some(v1499) = v1498 {
                    let v1500 = C::ty_int(ctx, v1497);
                    if let Some(v1501) = v1500 {
                        let v1480 = C::zero_offset(ctx);
                        let v1502 = &constructor_to_amode(ctx, v1493, v1494.1, v1480);
                        let v1503 = &C::amode_to_synthetic_amode(ctx, v1502);
                        let v1504 = constructor_put_in_gpr(ctx, v1494.0);
                        let v1505 = &constructor_x64_movrm(ctx, v1499, v1503, v1504);
                        let v1506 = &constructor_x64_mfence(ctx);
                        let v1507 = &constructor_side_effect_concat(ctx, v1505, v1506);
                        let v1508 = constructor_side_effect(ctx, v1507);
                        // Rule at src/isa/x64/lower.isle line 2818.
                        return Some(v1508);
                    }
                }
            }
        }
        &InstructionData::Ternary {
            opcode: ref v532,
            args: ref v533,
        } => {
            match v532 {
                &Opcode::Select => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v534 = C::unpack_value_array_3(ctx, v533);
                        let v792 = C::maybe_uextend(ctx, v534.0);
                        if let Some(v793) = v792 {
                            let v794 = C::def_inst(ctx, v793);
                            if let Some(v795) = v794 {
                                let v796 = &C::inst_data(ctx, v795);
                                match v796 {
                                    &InstructionData::FloatCompare {
                                        opcode: ref v797,
                                        args: ref v798,
                                        cond: ref v799,
                                    } => {
                                        if let &Opcode::Fcmp = v797 {
                                            match v799 {
                                                &FloatCC::Equal => {
                                                    let v800 = C::unpack_value_array_2(ctx, v798);
                                                    let v826 = &constructor_x64_ucomis(
                                                        ctx, v800.0, v800.1,
                                                    );
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v836 = &constructor_cmove_or_from_values(
                                                        ctx,
                                                        v3,
                                                        &CC::NZ,
                                                        &CC::P,
                                                        v534.2,
                                                        v534.1,
                                                    );
                                                    let v837 =
                                                        constructor_with_flags(ctx, v826, v836);
                                                    let v838 = C::output(ctx, v837);
                                                    // Rule at src/isa/x64/lower.isle line 1649.
                                                    return Some(v838);
                                                }
                                                &FloatCC::GreaterThan => {
                                                    let v800 = C::unpack_value_array_2(ctx, v798);
                                                    let v803 = &constructor_x64_ucomis(
                                                        ctx, v800.1, v800.0,
                                                    );
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v813 = &constructor_cmove_from_values(
                                                        ctx,
                                                        v3,
                                                        &CC::NBE,
                                                        v534.1,
                                                        v534.2,
                                                    );
                                                    let v814 =
                                                        constructor_with_flags(ctx, v803, v813);
                                                    let v815 = C::output(ctx, v814);
                                                    // Rule at src/isa/x64/lower.isle line 1601.
                                                    return Some(v815);
                                                }
                                                &FloatCC::GreaterThanOrEqual => {
                                                    let v800 = C::unpack_value_array_2(ctx, v798);
                                                    let v803 = &constructor_x64_ucomis(
                                                        ctx, v800.1, v800.0,
                                                    );
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v816 = &constructor_cmove_from_values(
                                                        ctx,
                                                        v3,
                                                        &CC::NB,
                                                        v534.1,
                                                        v534.2,
                                                    );
                                                    let v817 =
                                                        constructor_with_flags(ctx, v803, v816);
                                                    let v818 = C::output(ctx, v817);
                                                    // Rule at src/isa/x64/lower.isle line 1604.
                                                    return Some(v818);
                                                }
                                                &FloatCC::LessThan => {
                                                    let v800 = C::unpack_value_array_2(ctx, v798);
                                                    let v826 = &constructor_x64_ucomis(
                                                        ctx, v800.0, v800.1,
                                                    );
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v813 = &constructor_cmove_from_values(
                                                        ctx,
                                                        v3,
                                                        &CC::NBE,
                                                        v534.1,
                                                        v534.2,
                                                    );
                                                    let v827 =
                                                        constructor_with_flags(ctx, v826, v813);
                                                    let v828 = C::output(ctx, v827);
                                                    // Rule at src/isa/x64/lower.isle line 1624.
                                                    return Some(v828);
                                                }
                                                &FloatCC::LessThanOrEqual => {
                                                    let v800 = C::unpack_value_array_2(ctx, v798);
                                                    let v826 = &constructor_x64_ucomis(
                                                        ctx, v800.0, v800.1,
                                                    );
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v816 = &constructor_cmove_from_values(
                                                        ctx,
                                                        v3,
                                                        &CC::NB,
                                                        v534.1,
                                                        v534.2,
                                                    );
                                                    let v829 =
                                                        constructor_with_flags(ctx, v826, v816);
                                                    let v830 = C::output(ctx, v829);
                                                    // Rule at src/isa/x64/lower.isle line 1627.
                                                    return Some(v830);
                                                }
                                                &FloatCC::NotEqual => {
                                                    let v800 = C::unpack_value_array_2(ctx, v798);
                                                    let v826 = &constructor_x64_ucomis(
                                                        ctx, v800.0, v800.1,
                                                    );
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v839 = &constructor_cmove_or_from_values(
                                                        ctx,
                                                        v3,
                                                        &CC::NZ,
                                                        &CC::P,
                                                        v534.1,
                                                        v534.2,
                                                    );
                                                    let v840 =
                                                        constructor_with_flags(ctx, v826, v839);
                                                    let v841 = C::output(ctx, v840);
                                                    // Rule at src/isa/x64/lower.isle line 1652.
                                                    return Some(v841);
                                                }
                                                &FloatCC::Ordered => {
                                                    let v800 = C::unpack_value_array_2(ctx, v798);
                                                    let v803 = &constructor_x64_ucomis(
                                                        ctx, v800.1, v800.0,
                                                    );
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v805 = &constructor_cmove_from_values(
                                                        ctx,
                                                        v3,
                                                        &CC::NP,
                                                        v534.1,
                                                        v534.2,
                                                    );
                                                    let v806 =
                                                        constructor_with_flags(ctx, v803, v805);
                                                    let v807 = C::output(ctx, v806);
                                                    // Rule at src/isa/x64/lower.isle line 1595.
                                                    return Some(v807);
                                                }
                                                &FloatCC::Unordered => {
                                                    let v800 = C::unpack_value_array_2(ctx, v798);
                                                    let v803 = &constructor_x64_ucomis(
                                                        ctx, v800.1, v800.0,
                                                    );
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v809 = &constructor_cmove_from_values(
                                                        ctx,
                                                        v3,
                                                        &CC::P,
                                                        v534.1,
                                                        v534.2,
                                                    );
                                                    let v810 =
                                                        constructor_with_flags(ctx, v803, v809);
                                                    let v811 = C::output(ctx, v810);
                                                    // Rule at src/isa/x64/lower.isle line 1598.
                                                    return Some(v811);
                                                }
                                                &FloatCC::UnorderedOrGreaterThan => {
                                                    let v800 = C::unpack_value_array_2(ctx, v798);
                                                    let v826 = &constructor_x64_ucomis(
                                                        ctx, v800.0, v800.1,
                                                    );
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v819 = &constructor_cmove_from_values(
                                                        ctx,
                                                        v3,
                                                        &CC::B,
                                                        v534.1,
                                                        v534.2,
                                                    );
                                                    let v831 =
                                                        constructor_with_flags(ctx, v826, v819);
                                                    let v832 = C::output(ctx, v831);
                                                    // Rule at src/isa/x64/lower.isle line 1630.
                                                    return Some(v832);
                                                }
                                                &FloatCC::UnorderedOrGreaterThanOrEqual => {
                                                    let v800 = C::unpack_value_array_2(ctx, v798);
                                                    let v826 = &constructor_x64_ucomis(
                                                        ctx, v800.0, v800.1,
                                                    );
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v823 = &constructor_cmove_from_values(
                                                        ctx,
                                                        v3,
                                                        &CC::BE,
                                                        v534.1,
                                                        v534.2,
                                                    );
                                                    let v833 =
                                                        constructor_with_flags(ctx, v826, v823);
                                                    let v834 = C::output(ctx, v833);
                                                    // Rule at src/isa/x64/lower.isle line 1633.
                                                    return Some(v834);
                                                }
                                                &FloatCC::UnorderedOrLessThan => {
                                                    let v800 = C::unpack_value_array_2(ctx, v798);
                                                    let v803 = &constructor_x64_ucomis(
                                                        ctx, v800.1, v800.0,
                                                    );
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v819 = &constructor_cmove_from_values(
                                                        ctx,
                                                        v3,
                                                        &CC::B,
                                                        v534.1,
                                                        v534.2,
                                                    );
                                                    let v820 =
                                                        constructor_with_flags(ctx, v803, v819);
                                                    let v821 = C::output(ctx, v820);
                                                    // Rule at src/isa/x64/lower.isle line 1607.
                                                    return Some(v821);
                                                }
                                                &FloatCC::UnorderedOrLessThanOrEqual => {
                                                    let v800 = C::unpack_value_array_2(ctx, v798);
                                                    let v803 = &constructor_x64_ucomis(
                                                        ctx, v800.1, v800.0,
                                                    );
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v823 = &constructor_cmove_from_values(
                                                        ctx,
                                                        v3,
                                                        &CC::BE,
                                                        v534.1,
                                                        v534.2,
                                                    );
                                                    let v824 =
                                                        constructor_with_flags(ctx, v803, v823);
                                                    let v825 = C::output(ctx, v824);
                                                    // Rule at src/isa/x64/lower.isle line 1610.
                                                    return Some(v825);
                                                }
                                                _ => {}
                                            }
                                        }
                                    }
                                    &InstructionData::IntCompare {
                                        opcode: ref v842,
                                        args: ref v843,
                                        cond: ref v844,
                                    } => {
                                        if let &Opcode::Icmp = v842 {
                                            let v845 = C::unpack_value_array_2(ctx, v843);
                                            let v848 = C::value_type(ctx, v845.0);
                                            let v849 = C::fits_in_64(ctx, v848);
                                            if let Some(v850) = v849 {
                                                let v851 = &C::raw_operand_size_of_type(ctx, v850);
                                                let v852 =
                                                    &constructor_put_in_gpr_mem_imm(ctx, v845.1);
                                                let v853 = constructor_put_in_gpr(ctx, v845.0);
                                                let v854 =
                                                    &constructor_x64_cmp(ctx, v851, v852, v853);
                                                let v855 = &C::intcc_to_cc(ctx, v844);
                                                let v3 = C::value_type(ctx, v2);
                                                let v856 = &constructor_cmove_from_values(
                                                    ctx, v3, v855, v534.1, v534.2,
                                                );
                                                let v857 = constructor_with_flags(ctx, v854, v856);
                                                let v858 = C::output(ctx, v857);
                                                // Rule at src/isa/x64/lower.isle line 1660.
                                                return Some(v858);
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v859 = C::value_type(ctx, v534.0);
                        let v860 = C::fits_in_64(ctx, v859);
                        if let Some(v861) = v860 {
                            let v862 = &C::raw_operand_size_of_type(ctx, v861);
                            let v863 = constructor_put_in_gpr(ctx, v534.0);
                            let v864 = &C::gpr_to_gpr_mem_imm(ctx, v863);
                            let v865 = &constructor_x64_test(ctx, v862, v864, v863);
                            let v3 = C::value_type(ctx, v2);
                            let v866 =
                                &constructor_cmove_from_values(ctx, v3, &CC::NZ, v534.1, v534.2);
                            let v867 = constructor_with_flags(ctx, v865, v866);
                            let v868 = C::output(ctx, v867);
                            // Rule at src/isa/x64/lower.isle line 1667.
                            return Some(v868);
                        }
                        if v859 == I128 {
                            let v870 = C::put_in_regs(ctx, v534.0);
                            let v871 = &constructor_cmp_zero_i128(ctx, &CC::Z, v870);
                            let v872 = constructor_select_icmp(ctx, v871, v534.1, v534.2);
                            let v873 = C::output(ctx, v872);
                            // Rule at src/isa/x64/lower.isle line 1674.
                            return Some(v873);
                        }
                    }
                }
                &Opcode::SelectSpectreGuard => {
                    let v534 = C::unpack_value_array_3(ctx, v533);
                    let v1563 = C::def_inst(ctx, v534.0);
                    if let Some(v1564) = v1563 {
                        let v1565 = &C::inst_data(ctx, v1564);
                        if let &InstructionData::IntCompare {
                            opcode: ref v1566,
                            args: ref v1567,
                            cond: ref v1568,
                        } = v1565
                        {
                            if let &Opcode::Icmp = v1566 {
                                let v1569 = C::unpack_value_array_2(ctx, v1567);
                                let v1572 = &constructor_emit_cmp(ctx, v1568, v1569.0, v1569.1);
                                let v1573 = constructor_select_icmp(ctx, v1572, v534.1, v534.2);
                                let v1574 = C::output(ctx, v1573);
                                // Rule at src/isa/x64/lower.isle line 2929.
                                return Some(v1574);
                            }
                        }
                    }
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v859 = C::value_type(ctx, v534.0);
                        let v860 = C::fits_in_64(ctx, v859);
                        if let Some(v861) = v860 {
                            let v862 = &C::raw_operand_size_of_type(ctx, v861);
                            let v863 = constructor_put_in_gpr(ctx, v534.0);
                            let v864 = &C::gpr_to_gpr_mem_imm(ctx, v863);
                            let v865 = &constructor_x64_test(ctx, v862, v864, v863);
                            let v3 = C::value_type(ctx, v2);
                            let v866 =
                                &constructor_cmove_from_values(ctx, v3, &CC::NZ, v534.1, v534.2);
                            let v867 = constructor_with_flags(ctx, v865, v866);
                            let v868 = C::output(ctx, v867);
                            // Rule at src/isa/x64/lower.isle line 2932.
                            return Some(v868);
                        }
                        if v859 == I128 {
                            let v870 = C::put_in_regs(ctx, v534.0);
                            let v871 = &constructor_cmp_zero_i128(ctx, &CC::Z, v870);
                            let v872 = constructor_select_icmp(ctx, v871, v534.1, v534.2);
                            let v873 = C::output(ctx, v872);
                            // Rule at src/isa/x64/lower.isle line 2937.
                            return Some(v873);
                        }
                    }
                }
                &Opcode::Bitselect => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v52 = C::multi_lane(ctx, v3);
                        if let Some(v53) = v52 {
                            let v534 = C::unpack_value_array_3(ctx, v533);
                            let v547 = constructor_all_ones_or_all_zeros(ctx, v534.0);
                            if let Some(v548) = v547 {
                                let v538 = constructor_put_in_xmm(ctx, v534.0);
                                let v549 = &C::put_in_xmm_mem(ctx, v534.1);
                                let v550 = constructor_put_in_xmm(ctx, v534.2);
                                let v551 = constructor_x64_blend(ctx, v3, v538, v549, v550);
                                let v552 = constructor_output_xmm(ctx, v551);
                                // Rule at src/isa/x64/lower.isle line 1197.
                                return Some(v552);
                            }
                            let v538 = constructor_put_in_xmm(ctx, v534.0);
                            let v539 = constructor_put_in_xmm(ctx, v534.1);
                            let v540 = &C::xmm_to_xmm_mem(ctx, v538);
                            let v541 = constructor_sse_and(ctx, v3, v539, v540);
                            let v542 = &C::put_in_xmm_mem(ctx, v534.2);
                            let v543 = constructor_sse_and_not(ctx, v3, v538, v542);
                            let v544 = &C::xmm_to_xmm_mem(ctx, v541);
                            let v545 = constructor_sse_or(ctx, v3, v543, v544);
                            let v546 = constructor_output_xmm(ctx, v545);
                            // Rule at src/isa/x64/lower.isle line 1183.
                            return Some(v546);
                        }
                    }
                }
                &Opcode::Vselect => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v52 = C::multi_lane(ctx, v3);
                        if let Some(v53) = v52 {
                            let v534 = C::unpack_value_array_3(ctx, v533);
                            let v538 = constructor_put_in_xmm(ctx, v534.0);
                            let v549 = &C::put_in_xmm_mem(ctx, v534.1);
                            let v550 = constructor_put_in_xmm(ctx, v534.2);
                            let v551 = constructor_x64_blend(ctx, v3, v538, v549, v550);
                            let v552 = constructor_output_xmm(ctx, v551);
                            // Rule at src/isa/x64/lower.isle line 1217.
                            return Some(v552);
                        }
                    }
                }
                &Opcode::Fma => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1279 = C::use_fma(ctx);
                        if v1279 == true {
                            let v3 = C::value_type(ctx, v2);
                            let v534 = C::unpack_value_array_3(ctx, v533);
                            let v1280 = constructor_fmadd(ctx, v3, v534.0, v534.1, v534.2);
                            let v1281 = constructor_output_xmm(ctx, v1280);
                            // Rule at src/isa/x64/lower.isle line 2481.
                            return Some(v1281);
                        }
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v534 = C::unpack_value_array_3(ctx, v533);
                                let v1200 = C::put_in_reg(ctx, v534.0);
                                let v1201 = C::put_in_reg(ctx, v534.1);
                                let v1202 = C::put_in_reg(ctx, v534.2);
                                let v1203 =
                                    C::libcall_3(ctx, &LibCall::FmaF32, v1200, v1201, v1202);
                                let v1204 = constructor_output_reg(ctx, v1203);
                                // Rule at src/isa/x64/lower.isle line 2436.
                                return Some(v1204);
                            }
                            F64 => {
                                let v534 = C::unpack_value_array_3(ctx, v533);
                                let v1200 = C::put_in_reg(ctx, v534.0);
                                let v1201 = C::put_in_reg(ctx, v534.1);
                                let v1202 = C::put_in_reg(ctx, v534.2);
                                let v1206 =
                                    C::libcall_3(ctx, &LibCall::FmaF64, v1200, v1201, v1202);
                                let v1207 = constructor_output_reg(ctx, v1206);
                                // Rule at src/isa/x64/lower.isle line 2438.
                                return Some(v1207);
                            }
                            F32X4 => {
                                let v534 = C::unpack_value_array_3(ctx, v533);
                                let v538 = constructor_put_in_xmm(ctx, v534.0);
                                let v539 = constructor_put_in_xmm(ctx, v534.1);
                                let v550 = constructor_put_in_xmm(ctx, v534.2);
                                let v1208 = C::xmm_to_reg(ctx, v538);
                                let v1209 = C::xmm_to_reg(ctx, v539);
                                let v1210 = C::xmm_to_reg(ctx, v550);
                                let v1211 =
                                    C::libcall_3(ctx, &LibCall::FmaF32, v1208, v1209, v1210);
                                let v1212 = C::xmm_new(ctx, v1211);
                                let v1213 = &C::xmm_to_xmm_mem(ctx, v538);
                                let v1214 = constructor_x64_pshufd(ctx, v1213, 0x1);
                                let v1215 = C::xmm_to_reg(ctx, v1214);
                                let v1216 = &C::xmm_to_xmm_mem(ctx, v539);
                                let v1217 = constructor_x64_pshufd(ctx, v1216, 0x1);
                                let v1218 = C::xmm_to_reg(ctx, v1217);
                                let v1219 = &C::xmm_to_xmm_mem(ctx, v550);
                                let v1220 = constructor_x64_pshufd(ctx, v1219, 0x1);
                                let v1221 = C::xmm_to_reg(ctx, v1220);
                                let v1222 =
                                    C::libcall_3(ctx, &LibCall::FmaF32, v1215, v1218, v1221);
                                let v1223 = C::xmm_new(ctx, v1222);
                                let v1224 = &C::xmm_to_xmm_mem(ctx, v538);
                                let v1226 = constructor_x64_pshufd(ctx, v1224, 0x2);
                                let v1227 = C::xmm_to_reg(ctx, v1226);
                                let v1228 = &C::xmm_to_xmm_mem(ctx, v539);
                                let v1229 = constructor_x64_pshufd(ctx, v1228, 0x2);
                                let v1230 = C::xmm_to_reg(ctx, v1229);
                                let v1231 = &C::xmm_to_xmm_mem(ctx, v550);
                                let v1232 = constructor_x64_pshufd(ctx, v1231, 0x2);
                                let v1233 = C::xmm_to_reg(ctx, v1232);
                                let v1234 =
                                    C::libcall_3(ctx, &LibCall::FmaF32, v1227, v1230, v1233);
                                let v1235 = C::xmm_new(ctx, v1234);
                                let v1236 = &C::xmm_to_xmm_mem(ctx, v538);
                                let v1238 = constructor_x64_pshufd(ctx, v1236, 0x3);
                                let v1239 = C::xmm_to_reg(ctx, v1238);
                                let v1240 = &C::xmm_to_xmm_mem(ctx, v539);
                                let v1241 = constructor_x64_pshufd(ctx, v1240, 0x3);
                                let v1242 = C::xmm_to_reg(ctx, v1241);
                                let v1243 = &C::xmm_to_xmm_mem(ctx, v550);
                                let v1244 = constructor_x64_pshufd(ctx, v1243, 0x3);
                                let v1245 = C::xmm_to_reg(ctx, v1244);
                                let v1246 =
                                    C::libcall_3(ctx, &LibCall::FmaF32, v1239, v1242, v1245);
                                let v1247 = C::xmm_new(ctx, v1246);
                                let v1249 = C::xmm_to_reg(ctx, v1223);
                                let v1250 = &constructor_xmm_to_reg_mem(ctx, v1249);
                                let v1251 = &C::xmm_mem_to_reg_mem(ctx, v1250);
                                let v1252 =
                                    constructor_vec_insert_lane(ctx, F32X4, v1212, v1251, 0x1);
                                let v1253 = C::xmm_to_reg(ctx, v1235);
                                let v1254 = &constructor_xmm_to_reg_mem(ctx, v1253);
                                let v1255 = &C::xmm_mem_to_reg_mem(ctx, v1254);
                                let v1256 =
                                    constructor_vec_insert_lane(ctx, F32X4, v1252, v1255, 0x2);
                                let v1257 = C::xmm_to_reg(ctx, v1247);
                                let v1258 = &constructor_xmm_to_reg_mem(ctx, v1257);
                                let v1259 = &C::xmm_mem_to_reg_mem(ctx, v1258);
                                let v1260 =
                                    constructor_vec_insert_lane(ctx, F32X4, v1256, v1259, 0x3);
                                let v1261 = constructor_output_xmm(ctx, v1260);
                                // Rule at src/isa/x64/lower.isle line 2441.
                                return Some(v1261);
                            }
                            F64X2 => {
                                let v534 = C::unpack_value_array_3(ctx, v533);
                                let v538 = constructor_put_in_xmm(ctx, v534.0);
                                let v539 = constructor_put_in_xmm(ctx, v534.1);
                                let v550 = constructor_put_in_xmm(ctx, v534.2);
                                let v1208 = C::xmm_to_reg(ctx, v538);
                                let v1209 = C::xmm_to_reg(ctx, v539);
                                let v1210 = C::xmm_to_reg(ctx, v550);
                                let v1262 =
                                    C::libcall_3(ctx, &LibCall::FmaF64, v1208, v1209, v1210);
                                let v1263 = C::xmm_new(ctx, v1262);
                                let v1213 = &C::xmm_to_xmm_mem(ctx, v538);
                                let v1265 = constructor_x64_pshufd(ctx, v1213, 0xEE);
                                let v1266 = C::xmm_to_reg(ctx, v1265);
                                let v1216 = &C::xmm_to_xmm_mem(ctx, v539);
                                let v1267 = constructor_x64_pshufd(ctx, v1216, 0xEE);
                                let v1268 = C::xmm_to_reg(ctx, v1267);
                                let v1219 = &C::xmm_to_xmm_mem(ctx, v550);
                                let v1269 = constructor_x64_pshufd(ctx, v1219, 0xEE);
                                let v1270 = C::xmm_to_reg(ctx, v1269);
                                let v1271 =
                                    C::libcall_3(ctx, &LibCall::FmaF64, v1266, v1268, v1270);
                                let v1272 = C::xmm_new(ctx, v1271);
                                let v1274 = C::xmm_to_reg(ctx, v1272);
                                let v1275 = &constructor_xmm_to_reg_mem(ctx, v1274);
                                let v1276 = &C::xmm_mem_to_reg_mem(ctx, v1275);
                                let v1277 =
                                    constructor_vec_insert_lane(ctx, F64X2, v1263, v1276, 0x1);
                                let v1278 = constructor_output_xmm(ctx, v1277);
                                // Rule at src/isa/x64/lower.isle line 2465.
                                return Some(v1278);
                            }
                            _ => {}
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::TernaryImm8 {
            opcode: ref v553,
            args: ref v554,
            imm: v555,
        } => {
            if let &Opcode::Insertlane = v553 {
                let v556 = C::unpack_value_array_2(ctx, v554);
                let v561 = constructor_put_in_xmm(ctx, v556.0);
                let v562 = &C::put_in_reg_mem(ctx, v556.1);
                let v559 = C::value_type(ctx, v556.0);
                let v560 = C::u8_from_uimm8(ctx, v555);
                let v563 = constructor_vec_insert_lane(ctx, v559, v561, v562, v560);
                let v564 = constructor_output_xmm(ctx, v563);
                // Rule at src/isa/x64/lower.isle line 1226.
                return Some(v564);
            }
        }
        &InstructionData::Trap {
            opcode: ref v601,
            code: ref v602,
        } => {
            match v601 {
                &Opcode::Trap => {
                    let v603 = &constructor_x64_ud2(ctx, v602);
                    let v604 = constructor_side_effect(ctx, v603);
                    // Rule at src/isa/x64/lower.isle line 1362.
                    return Some(v604);
                }
                &Opcode::ResumableTrap => {
                    let v603 = &constructor_x64_ud2(ctx, v602);
                    let v604 = constructor_side_effect(ctx, v603);
                    // Rule at src/isa/x64/lower.isle line 1389.
                    return Some(v604);
                }
                _ => {}
            }
        }
        &InstructionData::Unary {
            opcode: ref v286,
            arg: v287,
        } => {
            match v286 {
                &Opcode::Splat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v52 = C::multi_lane(ctx, v3);
                        if let Some(v53) = v52 {
                            match v53.0 {
                                0x8 => {
                                    if v53.1 == 0x10 {
                                        let v2027 = constructor_xmm_uninit_value(ctx);
                                        let v2028 = &C::put_in_reg_mem(ctx, v287);
                                        let v2029 = constructor_vec_insert_lane(
                                            ctx, I8X16, v2027, v2028, 0x0,
                                        );
                                        let v2030 = constructor_xmm_zero(ctx, I8X16);
                                        let v2031 = &C::xmm_to_xmm_mem(ctx, v2030);
                                        let v2032 = constructor_x64_pshufb(ctx, v2029, v2031);
                                        let v2033 = constructor_output_xmm(ctx, v2032);
                                        // Rule at src/isa/x64/lower.isle line 3616.
                                        return Some(v2033);
                                    }
                                }
                                0x10 => {
                                    if v53.1 == 0x8 {
                                        let v1011 = C::put_in_reg(ctx, v287);
                                        let v2035 = constructor_xmm_uninit_value(ctx);
                                        let v2034 = RegMem::Reg { reg: v1011 };
                                        let v2036 = constructor_vec_insert_lane(
                                            ctx, I16X8, v2035, &v2034, 0x0,
                                        );
                                        let v2037 = constructor_vec_insert_lane(
                                            ctx, I16X8, v2036, &v2034, 0x1,
                                        );
                                        let v2038 = &C::xmm_to_xmm_mem(ctx, v2037);
                                        let v2039 = constructor_x64_pshufd(ctx, v2038, 0x0);
                                        let v2040 = constructor_output_xmm(ctx, v2039);
                                        // Rule at src/isa/x64/lower.isle line 3622.
                                        return Some(v2040);
                                    }
                                }
                                0x20 => {
                                    if v53.1 == 0x4 {
                                        let v520 = C::value_type(ctx, v287);
                                        let v1635 = C::ty_scalar_float(ctx, v520);
                                        if let Some(v1636) = v1635 {
                                            let v2041 =
                                                constructor_lower_splat_32x4(ctx, F32X4, v287);
                                            let v2042 = constructor_output_xmm(ctx, v2041);
                                            // Rule at src/isa/x64/lower.isle line 3631.
                                            return Some(v2042);
                                        }
                                        let v2043 = constructor_lower_splat_32x4(ctx, I32X4, v287);
                                        let v2044 = constructor_output_xmm(ctx, v2043);
                                        // Rule at src/isa/x64/lower.isle line 3634.
                                        return Some(v2044);
                                    }
                                }
                                0x40 => {
                                    if v53.1 == 0x2 {
                                        let v520 = C::value_type(ctx, v287);
                                        let v1635 = C::ty_scalar_float(ctx, v520);
                                        if let Some(v1636) = v1635 {
                                            let v2045 =
                                                constructor_lower_splat_64x2(ctx, F64X2, v287);
                                            let v2046 = constructor_output_xmm(ctx, v2045);
                                            // Rule at src/isa/x64/lower.isle line 3644.
                                            return Some(v2046);
                                        }
                                        let v2047 = constructor_lower_splat_64x2(ctx, I64X2, v287);
                                        let v2048 = constructor_output_xmm(ctx, v2047);
                                        // Rule at src/isa/x64/lower.isle line 3647.
                                        return Some(v2048);
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::SetPinnedReg => {
                    let v288 = constructor_put_in_gpr(ctx, v287);
                    let v1928 = &constructor_write_pinned_gpr(ctx, v288);
                    let v1929 = constructor_side_effect(ctx, v1928);
                    // Rule at src/isa/x64/lower.isle line 3500.
                    return Some(v1929);
                }
                &Opcode::VanyTrue => {
                    let v457 = constructor_put_in_xmm(ctx, v287);
                    let v1104 = &C::xmm_to_xmm_mem(ctx, v457);
                    let v2049 = &constructor_x64_ptest(ctx, v1104, v457);
                    let v2050 = &constructor_x64_setcc(ctx, &CC::NZ);
                    let v2051 = constructor_with_flags(ctx, v2049, v2050);
                    let v2052 = C::output(ctx, v2051);
                    // Rule at src/isa/x64/lower.isle line 3660.
                    return Some(v2052);
                }
                &Opcode::VallTrue => {
                    let v457 = constructor_put_in_xmm(ctx, v287);
                    let v520 = C::value_type(ctx, v287);
                    let v2053 = constructor_xmm_zero(ctx, v520);
                    let v2054 = constructor_vec_int_type(ctx, v520);
                    let v2055 = &C::xmm_to_xmm_mem(ctx, v2053);
                    let v2056 = constructor_x64_pcmpeq(ctx, v2054, v457, v2055);
                    let v2057 = &C::xmm_to_xmm_mem(ctx, v2056);
                    let v2058 = &constructor_x64_ptest(ctx, v2057, v2056);
                    let v2059 = &constructor_x64_setcc(ctx, &CC::Z);
                    let v2060 = constructor_with_flags(ctx, v2058, v2059);
                    let v2061 = C::output(ctx, v2060);
                    // Rule at src/isa/x64/lower.isle line 3666.
                    return Some(v2061);
                }
                &Opcode::VhighBits => {
                    let v520 = C::value_type(ctx, v287);
                    let v2062 = C::multi_lane(ctx, v520);
                    if let Some(v2063) = v2062 {
                        match v2063.0 {
                            0x8 => {
                                if v2063.1 == 0x10 {
                                    let v457 = constructor_put_in_xmm(ctx, v287);
                                    let v2066 =
                                        constructor_x64_pmovmskb(ctx, &OperandSize::Size32, v457);
                                    let v2067 = constructor_output_gpr(ctx, v2066);
                                    // Rule at src/isa/x64/lower.isle line 3683.
                                    return Some(v2067);
                                }
                            }
                            0x10 => {
                                if v2063.1 == 0x8 {
                                    let v457 = constructor_put_in_xmm(ctx, v287);
                                    let v1104 = &C::xmm_to_xmm_mem(ctx, v457);
                                    let v2072 = constructor_x64_packsswb(ctx, v457, v1104);
                                    let v2073 =
                                        constructor_x64_pmovmskb(ctx, &OperandSize::Size32, v2072);
                                    let v987 = Imm8Reg::Imm8 { imm: 0x8 };
                                    let v2074 = &C::imm8_reg_to_imm8_gpr(ctx, &v987);
                                    let v2075 = constructor_x64_shr(ctx, I64, v2073, v2074);
                                    let v2076 = constructor_output_gpr(ctx, v2075);
                                    // Rule at src/isa/x64/lower.isle line 3698.
                                    return Some(v2076);
                                }
                            }
                            0x20 => {
                                if v2063.1 == 0x4 {
                                    let v457 = constructor_put_in_xmm(ctx, v287);
                                    let v2068 =
                                        constructor_x64_movmskps(ctx, &OperandSize::Size32, v457);
                                    let v2069 = constructor_output_gpr(ctx, v2068);
                                    // Rule at src/isa/x64/lower.isle line 3686.
                                    return Some(v2069);
                                }
                            }
                            0x40 => {
                                if v2063.1 == 0x2 {
                                    let v457 = constructor_put_in_xmm(ctx, v287);
                                    let v2070 =
                                        constructor_x64_movmskpd(ctx, &OperandSize::Size32, v457);
                                    let v2071 = constructor_output_gpr(ctx, v2070);
                                    // Rule at src/isa/x64/lower.isle line 3689.
                                    return Some(v2071);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Ineg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v301 = constructor_imm(ctx, I8X16, 0x0);
                                let v302 = C::xmm_new(ctx, v301);
                                let v303 = &C::put_in_xmm_mem(ctx, v287);
                                let v304 = constructor_x64_psubb(ctx, v302, v303);
                                let v305 = constructor_output_xmm(ctx, v304);
                                // Rule at src/isa/x64/lower.isle line 753.
                                return Some(v305);
                            }
                            I16X8 => {
                                let v307 = constructor_imm(ctx, I16X8, 0x0);
                                let v308 = C::xmm_new(ctx, v307);
                                let v303 = &C::put_in_xmm_mem(ctx, v287);
                                let v309 = constructor_x64_psubw(ctx, v308, v303);
                                let v310 = constructor_output_xmm(ctx, v309);
                                // Rule at src/isa/x64/lower.isle line 756.
                                return Some(v310);
                            }
                            I32X4 => {
                                let v312 = constructor_imm(ctx, I32X4, 0x0);
                                let v313 = C::xmm_new(ctx, v312);
                                let v303 = &C::put_in_xmm_mem(ctx, v287);
                                let v314 = constructor_x64_psubd(ctx, v313, v303);
                                let v315 = constructor_output_xmm(ctx, v314);
                                // Rule at src/isa/x64/lower.isle line 759.
                                return Some(v315);
                            }
                            I64X2 => {
                                let v317 = constructor_imm(ctx, I64X2, 0x0);
                                let v318 = C::xmm_new(ctx, v317);
                                let v303 = &C::put_in_xmm_mem(ctx, v287);
                                let v319 = constructor_x64_psubq(ctx, v318, v303);
                                let v320 = constructor_output_xmm(ctx, v319);
                                // Rule at src/isa/x64/lower.isle line 762.
                                return Some(v320);
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v288 = constructor_put_in_gpr(ctx, v287);
                            let v289 = constructor_x64_neg(ctx, v5, v288);
                            let v290 = constructor_output_gpr(ctx, v289);
                            // Rule at src/isa/x64/lower.isle line 739.
                            return Some(v290);
                        }
                        if v3 == I128 {
                            let v291 = C::put_in_regs(ctx, v287);
                            let v292 = constructor_value_regs_get_gpr(ctx, v291, 0x0);
                            let v293 = constructor_value_regs_get_gpr(ctx, v291, 0x1);
                            let v294 = &constructor_x64_neg_paired(ctx, I64, v292);
                            let v295 = constructor_imm(ctx, I64, 0x0);
                            let v296 = C::gpr_new(ctx, v295);
                            let v297 = &C::gpr_to_gpr_mem_imm(ctx, v293);
                            let v298 = &constructor_x64_sbb_paired(ctx, I64, v296, v297);
                            let v299 = constructor_with_flags(ctx, v294, v298);
                            let v300 = C::output(ctx, v299);
                            // Rule at src/isa/x64/lower.isle line 742.
                            return Some(v300);
                        }
                    }
                }
                &Opcode::Iabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v447 = &C::put_in_xmm_mem(ctx, v287);
                                let v448 = constructor_x64_pabsb(ctx, v447);
                                let v449 = constructor_output_xmm(ctx, v448);
                                // Rule at src/isa/x64/lower.isle line 1028.
                                return Some(v449);
                            }
                            I16X8 => {
                                let v447 = &C::put_in_xmm_mem(ctx, v287);
                                let v450 = constructor_x64_pabsw(ctx, v447);
                                let v451 = constructor_output_xmm(ctx, v450);
                                // Rule at src/isa/x64/lower.isle line 1031.
                                return Some(v451);
                            }
                            I32X4 => {
                                let v447 = &C::put_in_xmm_mem(ctx, v287);
                                let v452 = constructor_x64_pabsd(ctx, v447);
                                let v453 = constructor_output_xmm(ctx, v452);
                                // Rule at src/isa/x64/lower.isle line 1034.
                                return Some(v453);
                            }
                            I64X2 => {
                                let v349 = C::avx512vl_enabled(ctx, v3);
                                if v349 == true {
                                    let v454 = C::avx512f_enabled(ctx, v3);
                                    if v454 == true {
                                        let v447 = &C::put_in_xmm_mem(ctx, v287);
                                        let v455 = constructor_x64_vpabsq(ctx, v447);
                                        let v456 = constructor_output_xmm(ctx, v455);
                                        // Rule at src/isa/x64/lower.isle line 1038.
                                        return Some(v456);
                                    }
                                }
                                let v457 = constructor_put_in_xmm(ctx, v287);
                                let v458 = constructor_imm(ctx, I64X2, 0x0);
                                let v459 = C::xmm_new(ctx, v458);
                                let v460 = &C::xmm_to_xmm_mem(ctx, v457);
                                let v461 = constructor_x64_psubq(ctx, v459, v460);
                                let v462 = &C::xmm_to_xmm_mem(ctx, v457);
                                let v463 = constructor_x64_blendvpd(ctx, v461, v462, v461);
                                let v464 = constructor_output_xmm(ctx, v463);
                                // Rule at src/isa/x64/lower.isle line 1048.
                                return Some(v464);
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v288 = constructor_put_in_gpr(ctx, v287);
                            let v465 = &constructor_x64_neg_paired(ctx, v5, v288);
                            let v466 = constructor_produces_flags_get_reg(ctx, v465);
                            let v467 = C::gpr_new(ctx, v466);
                            let v469 = &C::gpr_to_gpr_mem(ctx, v288);
                            let v470 = &constructor_cmove(ctx, v5, &CC::S, v469, v467);
                            let v471 = &constructor_produces_flags_ignore(ctx, v465);
                            let v472 = constructor_with_flags_reg(ctx, v471, v470);
                            let v473 = constructor_output_reg(ctx, v472);
                            // Rule at src/isa/x64/lower.isle line 1055.
                            return Some(v473);
                        }
                    }
                }
                &Opcode::Bnot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v525 = constructor_i128_not(ctx, v287);
                            let v526 = C::output(ctx, v525);
                            // Rule at src/isa/x64/lower.isle line 1168.
                            return Some(v526);
                        }
                        let v52 = C::multi_lane(ctx, v3);
                        if let Some(v53) = v52 {
                            let v457 = constructor_put_in_xmm(ctx, v287);
                            let v484 = constructor_vector_all_ones(ctx);
                            let v527 = &C::xmm_to_xmm_mem(ctx, v484);
                            let v530 = constructor_sse_xor(ctx, v3, v457, v527);
                            let v531 = constructor_output_xmm(ctx, v530);
                            // Rule at src/isa/x64/lower.isle line 1178.
                            return Some(v531);
                        }
                        let v122 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v123) = v122 {
                            let v288 = constructor_put_in_gpr(ctx, v287);
                            let v523 = constructor_x64_not(ctx, v3, v288);
                            let v524 = constructor_output_gpr(ctx, v523);
                            // Rule at src/isa/x64/lower.isle line 1153.
                            return Some(v524);
                        }
                        let v130 = C::ty_scalar_float(ctx, v3);
                        if let Some(v131) = v130 {
                            let v457 = constructor_put_in_xmm(ctx, v287);
                            let v484 = constructor_vector_all_ones(ctx);
                            let v527 = &C::xmm_to_xmm_mem(ctx, v484);
                            let v528 = constructor_sse_xor(ctx, v131, v457, v527);
                            let v529 = constructor_output_xmm(ctx, v528);
                            // Rule at src/isa/x64/lower.isle line 1173.
                            return Some(v529);
                        }
                    }
                }
                &Opcode::Bitrev => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v288 = constructor_put_in_gpr(ctx, v287);
                                let v970 = constructor_do_bitrev8(ctx, I32, v288);
                                let v971 = constructor_output_gpr(ctx, v970);
                                // Rule at src/isa/x64/lower.isle line 1923.
                                return Some(v971);
                            }
                            I16 => {
                                let v288 = constructor_put_in_gpr(ctx, v287);
                                let v972 = constructor_do_bitrev16(ctx, I32, v288);
                                let v973 = constructor_output_gpr(ctx, v972);
                                // Rule at src/isa/x64/lower.isle line 1926.
                                return Some(v973);
                            }
                            I32 => {
                                let v288 = constructor_put_in_gpr(ctx, v287);
                                let v974 = constructor_do_bitrev32(ctx, I32, v288);
                                let v975 = constructor_output_gpr(ctx, v974);
                                // Rule at src/isa/x64/lower.isle line 1929.
                                return Some(v975);
                            }
                            I64 => {
                                let v288 = constructor_put_in_gpr(ctx, v287);
                                let v976 = constructor_do_bitrev64(ctx, I64, v288);
                                let v977 = constructor_output_gpr(ctx, v976);
                                // Rule at src/isa/x64/lower.isle line 1932.
                                return Some(v977);
                            }
                            I128 => {
                                let v291 = C::put_in_regs(ctx, v287);
                                let v886 = constructor_value_regs_get_gpr(ctx, v291, 0x1);
                                let v978 = constructor_do_bitrev64(ctx, I64, v886);
                                let v979 = C::gpr_to_reg(ctx, v978);
                                let v980 = C::put_in_regs(ctx, v287);
                                let v981 = constructor_value_regs_get_gpr(ctx, v980, 0x0);
                                let v982 = constructor_do_bitrev64(ctx, I64, v981);
                                let v983 = C::gpr_to_reg(ctx, v982);
                                let v984 = C::value_regs(ctx, v979, v983);
                                let v985 = C::output(ctx, v984);
                                // Rule at src/isa/x64/lower.isle line 1935.
                                return Some(v985);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Clz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v874 = C::ty_32_or_64(ctx, v3);
                        if let Some(v875) = v874 {
                            let v876 = C::use_lzcnt(ctx, v3);
                            match v876 {
                                true => {
                                    let v288 = constructor_put_in_gpr(ctx, v287);
                                    let v877 = constructor_x64_lzcnt(ctx, v875, v288);
                                    let v878 = constructor_output_gpr(ctx, v877);
                                    // Rule at src/isa/x64/lower.isle line 1684.
                                    return Some(v878);
                                }
                                false => {
                                    let v288 = constructor_put_in_gpr(ctx, v287);
                                    let v879 = constructor_do_clz(ctx, v875, v875, v288);
                                    let v880 = constructor_output_gpr(ctx, v879);
                                    // Rule at src/isa/x64/lower.isle line 1691.
                                    return Some(v880);
                                }
                                _ => {}
                            }
                        }
                        let v881 = C::ty_8_or_16(ctx, v3);
                        if let Some(v882) = v881 {
                            let v883 = constructor_extend_to_gpr(ctx, v287, I32, &ExtendKind::Zero);
                            let v884 = constructor_do_clz(ctx, I32, v882, v883);
                            let v885 = constructor_output_gpr(ctx, v884);
                            // Rule at src/isa/x64/lower.isle line 1698.
                            return Some(v885);
                        }
                        if v3 == I128 {
                            let v291 = C::put_in_regs(ctx, v287);
                            let v886 = constructor_value_regs_get_gpr(ctx, v291, 0x1);
                            let v887 = constructor_do_clz(ctx, I64, I64, v886);
                            let v888 = C::put_in_regs(ctx, v287);
                            let v889 = constructor_value_regs_get_gpr(ctx, v888, 0x0);
                            let v890 = constructor_do_clz(ctx, I64, I64, v889);
                            let v892 = RegMemImm::Imm { simm32: 0x40 };
                            let v893 = &C::gpr_mem_imm_new(ctx, &v892);
                            let v894 = constructor_x64_add(ctx, I64, v890, v893);
                            let v896 =
                                &constructor_x64_cmp_imm(ctx, &OperandSize::Size64, 0x40, v887);
                            let v897 = &C::gpr_to_gpr_mem(ctx, v887);
                            let v898 = &constructor_cmove(ctx, I64, &CC::NZ, v897, v894);
                            let v899 = constructor_with_flags_reg(ctx, v896, v898);
                            let v900 = C::gpr_new(ctx, v899);
                            let v901 = C::gpr_to_reg(ctx, v900);
                            let v902 = constructor_imm(ctx, I64, 0x0);
                            let v903 = C::value_regs(ctx, v901, v902);
                            let v904 = C::output(ctx, v903);
                            // Rule at src/isa/x64/lower.isle line 1703.
                            return Some(v904);
                        }
                    }
                }
                &Opcode::Ctz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v157 = C::use_bmi1(ctx, v3);
                        match v157 {
                            true => {
                                let v874 = C::ty_32_or_64(ctx, v3);
                                if let Some(v875) = v874 {
                                    let v288 = constructor_put_in_gpr(ctx, v287);
                                    let v905 = constructor_x64_tzcnt(ctx, v875, v288);
                                    let v906 = constructor_output_gpr(ctx, v905);
                                    // Rule at src/isa/x64/lower.isle line 1728.
                                    return Some(v906);
                                }
                            }
                            false => {
                                let v874 = C::ty_32_or_64(ctx, v3);
                                if let Some(v875) = v874 {
                                    let v288 = constructor_put_in_gpr(ctx, v287);
                                    let v907 = constructor_do_ctz(ctx, v875, v875, v288);
                                    let v908 = constructor_output_gpr(ctx, v907);
                                    // Rule at src/isa/x64/lower.isle line 1735.
                                    return Some(v908);
                                }
                            }
                            _ => {}
                        }
                        let v881 = C::ty_8_or_16(ctx, v3);
                        if let Some(v882) = v881 {
                            let v883 = constructor_extend_to_gpr(ctx, v287, I32, &ExtendKind::Zero);
                            let v909 = constructor_do_ctz(ctx, I32, v882, v883);
                            let v910 = constructor_output_gpr(ctx, v909);
                            // Rule at src/isa/x64/lower.isle line 1742.
                            return Some(v910);
                        }
                        if v3 == I128 {
                            let v291 = C::put_in_regs(ctx, v287);
                            let v292 = constructor_value_regs_get_gpr(ctx, v291, 0x0);
                            let v911 = constructor_do_ctz(ctx, I64, I64, v292);
                            let v888 = C::put_in_regs(ctx, v287);
                            let v912 = constructor_value_regs_get_gpr(ctx, v888, 0x1);
                            let v913 = constructor_do_ctz(ctx, I64, I64, v912);
                            let v892 = RegMemImm::Imm { simm32: 0x40 };
                            let v893 = &C::gpr_mem_imm_new(ctx, &v892);
                            let v914 = constructor_x64_add(ctx, I64, v913, v893);
                            let v915 =
                                &constructor_x64_cmp_imm(ctx, &OperandSize::Size64, 0x40, v911);
                            let v916 = &C::gpr_to_gpr_mem(ctx, v914);
                            let v917 = &constructor_cmove(ctx, I64, &CC::Z, v916, v911);
                            let v918 = constructor_with_flags_reg(ctx, v915, v917);
                            let v919 = C::gpr_new(ctx, v918);
                            let v920 = C::gpr_to_reg(ctx, v919);
                            let v902 = constructor_imm(ctx, I64, 0x0);
                            let v921 = C::value_regs(ctx, v920, v902);
                            let v922 = C::output(ctx, v921);
                            // Rule at src/isa/x64/lower.isle line 1747.
                            return Some(v922);
                        }
                    }
                }
                &Opcode::Bswap => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16 => {
                                let v288 = constructor_put_in_gpr(ctx, v287);
                                let v987 = Imm8Reg::Imm8 { imm: 0x8 };
                                let v988 = &C::imm8_reg_to_imm8_gpr(ctx, &v987);
                                let v989 = constructor_x64_rotl(ctx, I16, v288, v988);
                                let v990 = constructor_output_gpr(ctx, v989);
                                // Rule at src/isa/x64/lower.isle line 2002.
                                return Some(v990);
                            }
                            I32 => {
                                let v288 = constructor_put_in_gpr(ctx, v287);
                                let v991 = constructor_x64_bswap(ctx, I32, v288);
                                let v992 = constructor_output_gpr(ctx, v991);
                                // Rule at src/isa/x64/lower.isle line 2005.
                                return Some(v992);
                            }
                            I64 => {
                                let v288 = constructor_put_in_gpr(ctx, v287);
                                let v993 = constructor_x64_bswap(ctx, I64, v288);
                                let v994 = constructor_output_gpr(ctx, v993);
                                // Rule at src/isa/x64/lower.isle line 2008.
                                return Some(v994);
                            }
                            I128 => {
                                let v291 = C::put_in_regs(ctx, v287);
                                let v886 = constructor_value_regs_get_gpr(ctx, v291, 0x1);
                                let v995 = constructor_x64_bswap(ctx, I64, v886);
                                let v996 = C::gpr_to_reg(ctx, v995);
                                let v980 = C::put_in_regs(ctx, v287);
                                let v981 = constructor_value_regs_get_gpr(ctx, v980, 0x0);
                                let v997 = constructor_x64_bswap(ctx, I64, v981);
                                let v998 = C::gpr_to_reg(ctx, v997);
                                let v999 = C::value_regs(ctx, v996, v998);
                                let v1000 = C::output(ctx, v999);
                                // Rule at src/isa/x64/lower.isle line 2011.
                                return Some(v1000);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Popcnt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v923 = C::use_popcnt(ctx, v3);
                        if v923 == true {
                            let v874 = C::ty_32_or_64(ctx, v3);
                            if let Some(v875) = v874 {
                                let v288 = constructor_put_in_gpr(ctx, v287);
                                let v924 = constructor_x64_popcnt(ctx, v875, v288);
                                let v925 = constructor_output_gpr(ctx, v924);
                                // Rule at src/isa/x64/lower.isle line 1766.
                                return Some(v925);
                            }
                            let v881 = C::ty_8_or_16(ctx, v3);
                            if let Some(v882) = v881 {
                                let v883 =
                                    constructor_extend_to_gpr(ctx, v287, I32, &ExtendKind::Zero);
                                let v926 = constructor_x64_popcnt(ctx, I32, v883);
                                let v927 = constructor_output_gpr(ctx, v926);
                                // Rule at src/isa/x64/lower.isle line 1773.
                                return Some(v927);
                            }
                            if v3 == I128 {
                                let v291 = C::put_in_regs(ctx, v287);
                                let v292 = constructor_value_regs_get_gpr(ctx, v291, 0x0);
                                let v928 = constructor_x64_popcnt(ctx, I64, v292);
                                let v888 = C::put_in_regs(ctx, v287);
                                let v912 = constructor_value_regs_get_gpr(ctx, v888, 0x1);
                                let v929 = constructor_x64_popcnt(ctx, I64, v912);
                                let v930 = &C::gpr_to_gpr_mem_imm(ctx, v929);
                                let v931 = constructor_x64_add(ctx, I64, v928, v930);
                                let v932 = C::gpr_to_reg(ctx, v931);
                                let v933 = constructor_imm(ctx, I64, 0x0);
                                let v934 = C::value_regs(ctx, v932, v933);
                                let v935 = C::output(ctx, v934);
                                // Rule at src/isa/x64/lower.isle line 1780.
                                return Some(v935);
                            }
                        }
                        match v3 {
                            I128 => {
                                let v291 = C::put_in_regs(ctx, v287);
                                let v292 = constructor_value_regs_get_gpr(ctx, v291, 0x0);
                                let v940 = constructor_do_popcnt(ctx, I64, v292);
                                let v888 = C::put_in_regs(ctx, v287);
                                let v912 = constructor_value_regs_get_gpr(ctx, v888, 0x1);
                                let v941 = constructor_do_popcnt(ctx, I64, v912);
                                let v942 = &C::gpr_to_gpr_mem_imm(ctx, v941);
                                let v943 = constructor_x64_add(ctx, I64, v940, v942);
                                let v944 = C::gpr_to_reg(ctx, v943);
                                let v933 = constructor_imm(ctx, I64, 0x0);
                                let v945 = C::value_regs(ctx, v944, v933);
                                let v946 = C::output(ctx, v945);
                                // Rule at src/isa/x64/lower.isle line 1799.
                                return Some(v946);
                            }
                            I8X16 => {
                                let v349 = C::avx512vl_enabled(ctx, v3);
                                if v349 == true {
                                    let v947 = C::avx512bitalg_enabled(ctx, v3);
                                    if v947 == true {
                                        let v447 = &C::put_in_xmm_mem(ctx, v287);
                                        let v948 = constructor_x64_vpopcntb(ctx, v447);
                                        let v949 = constructor_output_xmm(ctx, v948);
                                        // Rule at src/isa/x64/lower.isle line 1872.
                                        return Some(v949);
                                    }
                                }
                                let v950 = C::popcount_4bit_table(ctx);
                                let v951 = C::popcount_low_mask(ctx);
                                let v952 = &constructor_const_to_xmm_mem(ctx, v951);
                                let v953 = constructor_put_in_xmm(ctx, v287);
                                let v954 = constructor_sse_and(ctx, I8X16, v953, v952);
                                let v955 = constructor_put_in_xmm(ctx, v287);
                                let v957 = RegMemImm::Imm { simm32: 0x4 };
                                let v958 = &constructor_mov_rmi_to_xmm(ctx, &v957);
                                let v959 = constructor_x64_psrlw(ctx, v955, v958);
                                let v960 = constructor_sse_and(ctx, I8X16, v959, v952);
                                let v961 = C::popcount_4bit_table(ctx);
                                let v962 = constructor_x64_xmm_load_const(ctx, I8X16, v961);
                                let v963 = &C::xmm_to_xmm_mem(ctx, v954);
                                let v964 = constructor_x64_pshufb(ctx, v962, v963);
                                let v965 = &C::xmm_to_xmm_mem(ctx, v960);
                                let v966 = constructor_x64_pshufb(ctx, v962, v965);
                                let v967 = &C::xmm_to_xmm_mem(ctx, v966);
                                let v968 = constructor_x64_paddb(ctx, v964, v967);
                                let v969 = constructor_output_xmm(ctx, v968);
                                // Rule at src/isa/x64/lower.isle line 1906.
                                return Some(v969);
                            }
                            _ => {}
                        }
                        let v874 = C::ty_32_or_64(ctx, v3);
                        if let Some(v875) = v874 {
                            let v288 = constructor_put_in_gpr(ctx, v287);
                            let v936 = constructor_do_popcnt(ctx, v875, v288);
                            let v937 = constructor_output_gpr(ctx, v936);
                            // Rule at src/isa/x64/lower.isle line 1789.
                            return Some(v937);
                        }
                        let v881 = C::ty_8_or_16(ctx, v3);
                        if let Some(v882) = v881 {
                            let v883 = constructor_extend_to_gpr(ctx, v287, I32, &ExtendKind::Zero);
                            let v938 = constructor_do_popcnt(ctx, I32, v883);
                            let v939 = constructor_output_gpr(ctx, v938);
                            // Rule at src/isa/x64/lower.isle line 1794.
                            return Some(v939);
                        }
                    }
                }
                &Opcode::Sqrt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v447 = &C::put_in_xmm_mem(ctx, v287);
                                let v1094 = constructor_x64_sqrtss(ctx, v447);
                                let v1095 = constructor_output_xmm(ctx, v1094);
                                // Rule at src/isa/x64/lower.isle line 2215.
                                return Some(v1095);
                            }
                            F64 => {
                                let v447 = &C::put_in_xmm_mem(ctx, v287);
                                let v1096 = constructor_x64_sqrtsd(ctx, v447);
                                let v1097 = constructor_output_xmm(ctx, v1096);
                                // Rule at src/isa/x64/lower.isle line 2217.
                                return Some(v1097);
                            }
                            F32X4 => {
                                let v447 = &C::put_in_xmm_mem(ctx, v287);
                                let v1098 = constructor_x64_sqrtps(ctx, v447);
                                let v1099 = constructor_output_xmm(ctx, v1098);
                                // Rule at src/isa/x64/lower.isle line 2219.
                                return Some(v1099);
                            }
                            F64X2 => {
                                let v447 = &C::put_in_xmm_mem(ctx, v287);
                                let v1100 = constructor_x64_sqrtpd(ctx, v447);
                                let v1101 = constructor_output_xmm(ctx, v1100);
                                // Rule at src/isa/x64/lower.isle line 2221.
                                return Some(v1101);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fneg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v457 = constructor_put_in_xmm(ctx, v287);
                                let v497 = constructor_imm(ctx, F32, 0x80000000);
                                let v498 = &constructor_reg_to_xmm_mem(ctx, v497);
                                let v499 = constructor_x64_xorps(ctx, v457, v498);
                                let v500 = constructor_output_xmm(ctx, v499);
                                // Rule at src/isa/x64/lower.isle line 1089.
                                return Some(v500);
                            }
                            F64 => {
                                let v457 = constructor_put_in_xmm(ctx, v287);
                                let v502 = constructor_imm(ctx, F64, 0x8000000000000000);
                                let v503 = &constructor_reg_to_xmm_mem(ctx, v502);
                                let v504 = constructor_x64_xorpd(ctx, v457, v503);
                                let v505 = constructor_output_xmm(ctx, v504);
                                // Rule at src/isa/x64/lower.isle line 1092.
                                return Some(v505);
                            }
                            F32X4 => {
                                let v457 = constructor_put_in_xmm(ctx, v287);
                                let v484 = constructor_vector_all_ones(ctx);
                                let v507 = RegMemImm::Imm { simm32: 0x1F };
                                let v508 = &constructor_mov_rmi_to_xmm(ctx, &v507);
                                let v509 = constructor_x64_pslld(ctx, v484, v508);
                                let v510 = &C::xmm_to_xmm_mem(ctx, v509);
                                let v511 = constructor_x64_xorps(ctx, v457, v510);
                                let v512 = constructor_output_xmm(ctx, v511);
                                // Rule at src/isa/x64/lower.isle line 1095.
                                return Some(v512);
                            }
                            F64X2 => {
                                let v457 = constructor_put_in_xmm(ctx, v287);
                                let v484 = constructor_vector_all_ones(ctx);
                                let v514 = RegMemImm::Imm { simm32: 0x3F };
                                let v515 = &constructor_mov_rmi_to_xmm(ctx, &v514);
                                let v516 = constructor_x64_psllq(ctx, v484, v515);
                                let v517 = &C::xmm_to_xmm_mem(ctx, v516);
                                let v518 = constructor_x64_xorpd(ctx, v457, v517);
                                let v519 = constructor_output_xmm(ctx, v518);
                                // Rule at src/isa/x64/lower.isle line 1100.
                                return Some(v519);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v457 = constructor_put_in_xmm(ctx, v287);
                                let v475 = constructor_imm(ctx, F32, 0x7FFFFFFF);
                                let v476 = &constructor_reg_to_xmm_mem(ctx, v475);
                                let v477 = constructor_x64_andps(ctx, v457, v476);
                                let v478 = constructor_output_xmm(ctx, v477);
                                // Rule at src/isa/x64/lower.isle line 1069.
                                return Some(v478);
                            }
                            F64 => {
                                let v457 = constructor_put_in_xmm(ctx, v287);
                                let v480 = constructor_imm(ctx, F64, 0x7FFFFFFFFFFFFFFF);
                                let v481 = &constructor_reg_to_xmm_mem(ctx, v480);
                                let v482 = constructor_x64_andpd(ctx, v457, v481);
                                let v483 = constructor_output_xmm(ctx, v482);
                                // Rule at src/isa/x64/lower.isle line 1072.
                                return Some(v483);
                            }
                            F32X4 => {
                                let v457 = constructor_put_in_xmm(ctx, v287);
                                let v484 = constructor_vector_all_ones(ctx);
                                let v486 = RegMemImm::Imm { simm32: 0x1 };
                                let v487 = &constructor_mov_rmi_to_xmm(ctx, &v486);
                                let v488 = constructor_x64_psrld(ctx, v484, v487);
                                let v489 = &C::xmm_to_xmm_mem(ctx, v488);
                                let v490 = constructor_x64_andps(ctx, v457, v489);
                                let v491 = constructor_output_xmm(ctx, v490);
                                // Rule at src/isa/x64/lower.isle line 1076.
                                return Some(v491);
                            }
                            F64X2 => {
                                let v457 = constructor_put_in_xmm(ctx, v287);
                                let v484 = constructor_vector_all_ones(ctx);
                                let v486 = RegMemImm::Imm { simm32: 0x1 };
                                let v487 = &constructor_mov_rmi_to_xmm(ctx, &v486);
                                let v492 = constructor_x64_psrlq(ctx, v484, v487);
                                let v493 = &C::xmm_to_xmm_mem(ctx, v492);
                                let v494 = constructor_x64_andpd(ctx, v457, v493);
                                let v495 = constructor_output_xmm(ctx, v494);
                                // Rule at src/isa/x64/lower.isle line 1082.
                                return Some(v495);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Ceil => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v520 = C::value_type(ctx, v287);
                        match v520 {
                            F32 => {
                                let v3 = C::value_type(ctx, v2);
                                let v1829 = C::use_sse41(ctx, v3);
                                match v1829 {
                                    true => {
                                        let v447 = &C::put_in_xmm_mem(ctx, v287);
                                        let v1831 =
                                            constructor_x64_roundss(ctx, v447, &RoundImm::RoundUp);
                                        let v1832 = constructor_output_xmm(ctx, v1831);
                                        // Rule at src/isa/x64/lower.isle line 3356.
                                        return Some(v1832);
                                    }
                                    false => {
                                        let v1011 = C::put_in_reg(ctx, v287);
                                        let v1834 = C::libcall_1(ctx, &LibCall::CeilF32, v1011);
                                        let v1835 = constructor_output_reg(ctx, v1834);
                                        // Rule at src/isa/x64/lower.isle line 3359.
                                        return Some(v1835);
                                    }
                                    _ => {}
                                }
                            }
                            F64 => {
                                let v3 = C::value_type(ctx, v2);
                                let v1829 = C::use_sse41(ctx, v3);
                                match v1829 {
                                    true => {
                                        let v447 = &C::put_in_xmm_mem(ctx, v287);
                                        let v1836 =
                                            constructor_x64_roundsd(ctx, v447, &RoundImm::RoundUp);
                                        let v1837 = constructor_output_xmm(ctx, v1836);
                                        // Rule at src/isa/x64/lower.isle line 3362.
                                        return Some(v1837);
                                    }
                                    false => {
                                        let v1011 = C::put_in_reg(ctx, v287);
                                        let v1839 = C::libcall_1(ctx, &LibCall::CeilF64, v1011);
                                        let v1840 = constructor_output_reg(ctx, v1839);
                                        // Rule at src/isa/x64/lower.isle line 3365.
                                        return Some(v1840);
                                    }
                                    _ => {}
                                }
                            }
                            F32X4 => {
                                let v3 = C::value_type(ctx, v2);
                                let v1829 = C::use_sse41(ctx, v3);
                                if v1829 == true {
                                    let v447 = &C::put_in_xmm_mem(ctx, v287);
                                    let v1841 =
                                        constructor_x64_roundps(ctx, v447, &RoundImm::RoundUp);
                                    let v1842 = constructor_output_xmm(ctx, v1841);
                                    // Rule at src/isa/x64/lower.isle line 3368.
                                    return Some(v1842);
                                }
                            }
                            F64X2 => {
                                let v3 = C::value_type(ctx, v2);
                                let v1829 = C::use_sse41(ctx, v3);
                                if v1829 == true {
                                    let v447 = &C::put_in_xmm_mem(ctx, v287);
                                    let v1843 =
                                        constructor_x64_roundpd(ctx, v447, &RoundImm::RoundUp);
                                    let v1844 = constructor_output_xmm(ctx, v1843);
                                    // Rule at src/isa/x64/lower.isle line 3371.
                                    return Some(v1844);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Floor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v520 = C::value_type(ctx, v287);
                        match v520 {
                            F32 => {
                                let v3 = C::value_type(ctx, v2);
                                let v1829 = C::use_sse41(ctx, v3);
                                match v1829 {
                                    true => {
                                        let v447 = &C::put_in_xmm_mem(ctx, v287);
                                        let v1846 = constructor_x64_roundss(
                                            ctx,
                                            v447,
                                            &RoundImm::RoundDown,
                                        );
                                        let v1847 = constructor_output_xmm(ctx, v1846);
                                        // Rule at src/isa/x64/lower.isle line 3376.
                                        return Some(v1847);
                                    }
                                    false => {
                                        let v1011 = C::put_in_reg(ctx, v287);
                                        let v1849 = C::libcall_1(ctx, &LibCall::FloorF32, v1011);
                                        let v1850 = constructor_output_reg(ctx, v1849);
                                        // Rule at src/isa/x64/lower.isle line 3379.
                                        return Some(v1850);
                                    }
                                    _ => {}
                                }
                            }
                            F64 => {
                                let v3 = C::value_type(ctx, v2);
                                let v1829 = C::use_sse41(ctx, v3);
                                match v1829 {
                                    true => {
                                        let v447 = &C::put_in_xmm_mem(ctx, v287);
                                        let v1851 = constructor_x64_roundsd(
                                            ctx,
                                            v447,
                                            &RoundImm::RoundDown,
                                        );
                                        let v1852 = constructor_output_xmm(ctx, v1851);
                                        // Rule at src/isa/x64/lower.isle line 3382.
                                        return Some(v1852);
                                    }
                                    false => {
                                        let v1011 = C::put_in_reg(ctx, v287);
                                        let v1854 = C::libcall_1(ctx, &LibCall::FloorF64, v1011);
                                        let v1855 = constructor_output_reg(ctx, v1854);
                                        // Rule at src/isa/x64/lower.isle line 3385.
                                        return Some(v1855);
                                    }
                                    _ => {}
                                }
                            }
                            F32X4 => {
                                let v3 = C::value_type(ctx, v2);
                                let v1829 = C::use_sse41(ctx, v3);
                                if v1829 == true {
                                    let v447 = &C::put_in_xmm_mem(ctx, v287);
                                    let v1856 =
                                        constructor_x64_roundps(ctx, v447, &RoundImm::RoundDown);
                                    let v1857 = constructor_output_xmm(ctx, v1856);
                                    // Rule at src/isa/x64/lower.isle line 3388.
                                    return Some(v1857);
                                }
                            }
                            F64X2 => {
                                let v3 = C::value_type(ctx, v2);
                                let v1829 = C::use_sse41(ctx, v3);
                                if v1829 == true {
                                    let v447 = &C::put_in_xmm_mem(ctx, v287);
                                    let v1858 =
                                        constructor_x64_roundpd(ctx, v447, &RoundImm::RoundDown);
                                    let v1859 = constructor_output_xmm(ctx, v1858);
                                    // Rule at src/isa/x64/lower.isle line 3391.
                                    return Some(v1859);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Trunc => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v520 = C::value_type(ctx, v287);
                        match v520 {
                            F32 => {
                                let v3 = C::value_type(ctx, v2);
                                let v1829 = C::use_sse41(ctx, v3);
                                match v1829 {
                                    true => {
                                        let v447 = &C::put_in_xmm_mem(ctx, v287);
                                        let v1876 = constructor_x64_roundss(
                                            ctx,
                                            v447,
                                            &RoundImm::RoundZero,
                                        );
                                        let v1877 = constructor_output_xmm(ctx, v1876);
                                        // Rule at src/isa/x64/lower.isle line 3416.
                                        return Some(v1877);
                                    }
                                    false => {
                                        let v1011 = C::put_in_reg(ctx, v287);
                                        let v1879 = C::libcall_1(ctx, &LibCall::TruncF32, v1011);
                                        let v1880 = constructor_output_reg(ctx, v1879);
                                        // Rule at src/isa/x64/lower.isle line 3419.
                                        return Some(v1880);
                                    }
                                    _ => {}
                                }
                            }
                            F64 => {
                                let v3 = C::value_type(ctx, v2);
                                let v1829 = C::use_sse41(ctx, v3);
                                match v1829 {
                                    true => {
                                        let v447 = &C::put_in_xmm_mem(ctx, v287);
                                        let v1881 = constructor_x64_roundsd(
                                            ctx,
                                            v447,
                                            &RoundImm::RoundZero,
                                        );
                                        let v1882 = constructor_output_xmm(ctx, v1881);
                                        // Rule at src/isa/x64/lower.isle line 3422.
                                        return Some(v1882);
                                    }
                                    false => {
                                        let v1011 = C::put_in_reg(ctx, v287);
                                        let v1884 = C::libcall_1(ctx, &LibCall::TruncF64, v1011);
                                        let v1885 = constructor_output_reg(ctx, v1884);
                                        // Rule at src/isa/x64/lower.isle line 3425.
                                        return Some(v1885);
                                    }
                                    _ => {}
                                }
                            }
                            F32X4 => {
                                let v3 = C::value_type(ctx, v2);
                                let v1829 = C::use_sse41(ctx, v3);
                                if v1829 == true {
                                    let v447 = &C::put_in_xmm_mem(ctx, v287);
                                    let v1886 =
                                        constructor_x64_roundps(ctx, v447, &RoundImm::RoundZero);
                                    let v1887 = constructor_output_xmm(ctx, v1886);
                                    // Rule at src/isa/x64/lower.isle line 3428.
                                    return Some(v1887);
                                }
                            }
                            F64X2 => {
                                let v3 = C::value_type(ctx, v2);
                                let v1829 = C::use_sse41(ctx, v3);
                                if v1829 == true {
                                    let v447 = &C::put_in_xmm_mem(ctx, v287);
                                    let v1888 =
                                        constructor_x64_roundpd(ctx, v447, &RoundImm::RoundZero);
                                    let v1889 = constructor_output_xmm(ctx, v1888);
                                    // Rule at src/isa/x64/lower.isle line 3431.
                                    return Some(v1889);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Nearest => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v520 = C::value_type(ctx, v287);
                        match v520 {
                            F32 => {
                                let v3 = C::value_type(ctx, v2);
                                let v1829 = C::use_sse41(ctx, v3);
                                match v1829 {
                                    true => {
                                        let v447 = &C::put_in_xmm_mem(ctx, v287);
                                        let v1861 = constructor_x64_roundss(
                                            ctx,
                                            v447,
                                            &RoundImm::RoundNearest,
                                        );
                                        let v1862 = constructor_output_xmm(ctx, v1861);
                                        // Rule at src/isa/x64/lower.isle line 3396.
                                        return Some(v1862);
                                    }
                                    false => {
                                        let v1011 = C::put_in_reg(ctx, v287);
                                        let v1864 = C::libcall_1(ctx, &LibCall::NearestF32, v1011);
                                        let v1865 = constructor_output_reg(ctx, v1864);
                                        // Rule at src/isa/x64/lower.isle line 3399.
                                        return Some(v1865);
                                    }
                                    _ => {}
                                }
                            }
                            F64 => {
                                let v3 = C::value_type(ctx, v2);
                                let v1829 = C::use_sse41(ctx, v3);
                                match v1829 {
                                    true => {
                                        let v447 = &C::put_in_xmm_mem(ctx, v287);
                                        let v1866 = constructor_x64_roundsd(
                                            ctx,
                                            v447,
                                            &RoundImm::RoundNearest,
                                        );
                                        let v1867 = constructor_output_xmm(ctx, v1866);
                                        // Rule at src/isa/x64/lower.isle line 3402.
                                        return Some(v1867);
                                    }
                                    false => {
                                        let v1011 = C::put_in_reg(ctx, v287);
                                        let v1869 = C::libcall_1(ctx, &LibCall::NearestF64, v1011);
                                        let v1870 = constructor_output_reg(ctx, v1869);
                                        // Rule at src/isa/x64/lower.isle line 3405.
                                        return Some(v1870);
                                    }
                                    _ => {}
                                }
                            }
                            F32X4 => {
                                let v3 = C::value_type(ctx, v2);
                                let v1829 = C::use_sse41(ctx, v3);
                                if v1829 == true {
                                    let v447 = &C::put_in_xmm_mem(ctx, v287);
                                    let v1871 =
                                        constructor_x64_roundps(ctx, v447, &RoundImm::RoundNearest);
                                    let v1872 = constructor_output_xmm(ctx, v1871);
                                    // Rule at src/isa/x64/lower.isle line 3408.
                                    return Some(v1872);
                                }
                            }
                            F64X2 => {
                                let v3 = C::value_type(ctx, v2);
                                let v1829 = C::use_sse41(ctx, v3);
                                if v1829 == true {
                                    let v447 = &C::put_in_xmm_mem(ctx, v287);
                                    let v1873 =
                                        constructor_x64_roundpd(ctx, v447, &RoundImm::RoundNearest);
                                    let v1874 = constructor_output_xmm(ctx, v1873);
                                    // Rule at src/isa/x64/lower.isle line 3411.
                                    return Some(v1874);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::IsNull => {
                    let v520 = C::value_type(ctx, v287);
                    if v520 == R64 {
                        let v288 = constructor_put_in_gpr(ctx, v287);
                        let v1002 = &constructor_x64_cmp_imm(ctx, &OperandSize::Size64, 0x0, v288);
                        let v1003 = &constructor_x64_setcc(ctx, &CC::Z);
                        let v1004 = constructor_with_flags(ctx, v1002, v1003);
                        let v1005 = C::output(ctx, v1004);
                        // Rule at src/isa/x64/lower.isle line 2019.
                        return Some(v1005);
                    }
                }
                &Opcode::IsInvalid => {
                    let v520 = C::value_type(ctx, v287);
                    if v520 == R64 {
                        let v288 = constructor_put_in_gpr(ctx, v287);
                        let v1007 =
                            &constructor_x64_cmp_imm(ctx, &OperandSize::Size64, 0xFFFFFFFF, v288);
                        let v1003 = &constructor_x64_setcc(ctx, &CC::Z);
                        let v1008 = constructor_with_flags(ctx, v1007, v1003);
                        let v1009 = C::output(ctx, v1008);
                        // Rule at src/isa/x64/lower.isle line 2027.
                        return Some(v1009);
                    }
                }
                &Opcode::ScalarToVector => {
                    let v2016 = &C::sinkable_load(ctx, v287);
                    if let Some(v2017) = v2016 {
                        let v520 = C::value_type(ctx, v287);
                        let v2023 = C::ty_64(ctx, v520);
                        if let Some(v2024) = v2023 {
                            let v2020 = &constructor_sink_load_to_xmm_mem(ctx, v2017);
                            let v2025 = constructor_x64_movsd_load(ctx, v2020);
                            let v2026 = constructor_output_xmm(ctx, v2025);
                            // Rule at src/isa/x64/lower.isle line 3611.
                            return Some(v2026);
                        }
                        let v2018 = C::ty_32(ctx, v520);
                        if let Some(v2019) = v2018 {
                            let v2020 = &constructor_sink_load_to_xmm_mem(ctx, v2017);
                            let v2021 = constructor_x64_movss_load(ctx, v2020);
                            let v2022 = constructor_output_xmm(ctx, v2021);
                            // Rule at src/isa/x64/lower.isle line 3609.
                            return Some(v2022);
                        }
                    }
                    let v520 = C::value_type(ctx, v287);
                    let v1635 = C::ty_scalar_float(ctx, v520);
                    if let Some(v1636) = v1635 {
                        let v1010 = constructor_output_value(ctx, v287);
                        // Rule at src/isa/x64/lower.isle line 3599.
                        return Some(v1010);
                    }
                    let v288 = constructor_put_in_gpr(ctx, v287);
                    let v2014 = constructor_bitcast_gpr_to_xmm(ctx, v520, v288);
                    let v2015 = constructor_output_xmm(ctx, v2014);
                    // Rule at src/isa/x64/lower.isle line 3604.
                    return Some(v2015);
                }
                &Opcode::Bmask => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v291 = C::put_in_regs(ctx, v287);
                        let v3 = C::value_type(ctx, v2);
                        let v520 = C::value_type(ctx, v287);
                        let v521 = constructor_lower_bmask(ctx, v3, v520, v291);
                        let v522 = C::output(ctx, v521);
                        // Rule at src/isa/x64/lower.isle line 1146.
                        return Some(v522);
                    }
                }
                &Opcode::Ireduce => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v291 = C::put_in_regs(ctx, v287);
                            let v292 = constructor_value_regs_get_gpr(ctx, v291, 0x0);
                            let v1041 = constructor_output_gpr(ctx, v292);
                            // Rule at src/isa/x64/lower.isle line 2140.
                            return Some(v1041);
                        }
                        let v520 = C::value_type(ctx, v287);
                        if v3 == v520 {
                            let v1010 = constructor_output_value(ctx, v287);
                            // Rule at src/isa/x64/lower.isle line 2134.
                            return Some(v1010);
                        }
                    }
                }
                &Opcode::SwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16X8 => {
                                let v520 = C::value_type(ctx, v287);
                                if v520 == I8X16 {
                                    let v447 = &C::put_in_xmm_mem(ctx, v287);
                                    let v1745 = constructor_x64_pmovsxbw(ctx, v447);
                                    let v1746 = constructor_output_xmm(ctx, v1745);
                                    // Rule at src/isa/x64/lower.isle line 3227.
                                    return Some(v1746);
                                }
                            }
                            I32X4 => {
                                let v520 = C::value_type(ctx, v287);
                                if v520 == I16X8 {
                                    let v447 = &C::put_in_xmm_mem(ctx, v287);
                                    let v1747 = constructor_x64_pmovsxwd(ctx, v447);
                                    let v1748 = constructor_output_xmm(ctx, v1747);
                                    // Rule at src/isa/x64/lower.isle line 3230.
                                    return Some(v1748);
                                }
                            }
                            I64X2 => {
                                let v520 = C::value_type(ctx, v287);
                                if v520 == I32X4 {
                                    let v447 = &C::put_in_xmm_mem(ctx, v287);
                                    let v1749 = constructor_x64_pmovsxdq(ctx, v447);
                                    let v1750 = constructor_output_xmm(ctx, v1749);
                                    // Rule at src/isa/x64/lower.isle line 3233.
                                    return Some(v1750);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::SwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16X8 => {
                                let v520 = C::value_type(ctx, v287);
                                if v520 == I8X16 {
                                    let v457 = constructor_put_in_xmm(ctx, v287);
                                    let v1104 = &C::xmm_to_xmm_mem(ctx, v457);
                                    let v1751 = constructor_x64_palignr(
                                        ctx,
                                        v457,
                                        v1104,
                                        0x8,
                                        &OperandSize::Size32,
                                    );
                                    let v1752 = &C::xmm_to_xmm_mem(ctx, v1751);
                                    let v1753 = constructor_x64_pmovsxbw(ctx, v1752);
                                    let v1754 = constructor_output_xmm(ctx, v1753);
                                    // Rule at src/isa/x64/lower.isle line 3238.
                                    return Some(v1754);
                                }
                            }
                            I32X4 => {
                                let v520 = C::value_type(ctx, v287);
                                if v520 == I16X8 {
                                    let v457 = constructor_put_in_xmm(ctx, v287);
                                    let v1104 = &C::xmm_to_xmm_mem(ctx, v457);
                                    let v1751 = constructor_x64_palignr(
                                        ctx,
                                        v457,
                                        v1104,
                                        0x8,
                                        &OperandSize::Size32,
                                    );
                                    let v1752 = &C::xmm_to_xmm_mem(ctx, v1751);
                                    let v1755 = constructor_x64_pmovsxwd(ctx, v1752);
                                    let v1756 = constructor_output_xmm(ctx, v1755);
                                    // Rule at src/isa/x64/lower.isle line 3242.
                                    return Some(v1756);
                                }
                            }
                            I64X2 => {
                                let v520 = C::value_type(ctx, v287);
                                if v520 == I32X4 {
                                    let v447 = &C::put_in_xmm_mem(ctx, v287);
                                    let v1757 = constructor_x64_pshufd(ctx, v447, 0xEE);
                                    let v1758 = &C::xmm_to_xmm_mem(ctx, v1757);
                                    let v1759 = constructor_x64_pmovsxdq(ctx, v1758);
                                    let v1760 = constructor_output_xmm(ctx, v1759);
                                    // Rule at src/isa/x64/lower.isle line 3246.
                                    return Some(v1760);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::UwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16X8 => {
                                let v520 = C::value_type(ctx, v287);
                                if v520 == I8X16 {
                                    let v447 = &C::put_in_xmm_mem(ctx, v287);
                                    let v1761 = constructor_x64_pmovzxbw(ctx, v447);
                                    let v1762 = constructor_output_xmm(ctx, v1761);
                                    // Rule at src/isa/x64/lower.isle line 3251.
                                    return Some(v1762);
                                }
                            }
                            I32X4 => {
                                let v520 = C::value_type(ctx, v287);
                                if v520 == I16X8 {
                                    let v447 = &C::put_in_xmm_mem(ctx, v287);
                                    let v1763 = constructor_x64_pmovzxwd(ctx, v447);
                                    let v1764 = constructor_output_xmm(ctx, v1763);
                                    // Rule at src/isa/x64/lower.isle line 3254.
                                    return Some(v1764);
                                }
                            }
                            I64X2 => {
                                let v520 = C::value_type(ctx, v287);
                                if v520 == I32X4 {
                                    let v447 = &C::put_in_xmm_mem(ctx, v287);
                                    let v1765 = constructor_x64_pmovzxdq(ctx, v447);
                                    let v1766 = constructor_output_xmm(ctx, v1765);
                                    // Rule at src/isa/x64/lower.isle line 3257.
                                    return Some(v1766);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::UwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16X8 => {
                                let v520 = C::value_type(ctx, v287);
                                if v520 == I8X16 {
                                    let v457 = constructor_put_in_xmm(ctx, v287);
                                    let v1104 = &C::xmm_to_xmm_mem(ctx, v457);
                                    let v1751 = constructor_x64_palignr(
                                        ctx,
                                        v457,
                                        v1104,
                                        0x8,
                                        &OperandSize::Size32,
                                    );
                                    let v1752 = &C::xmm_to_xmm_mem(ctx, v1751);
                                    let v1767 = constructor_x64_pmovzxbw(ctx, v1752);
                                    let v1768 = constructor_output_xmm(ctx, v1767);
                                    // Rule at src/isa/x64/lower.isle line 3262.
                                    return Some(v1768);
                                }
                            }
                            I32X4 => {
                                let v520 = C::value_type(ctx, v287);
                                if v520 == I16X8 {
                                    let v457 = constructor_put_in_xmm(ctx, v287);
                                    let v1104 = &C::xmm_to_xmm_mem(ctx, v457);
                                    let v1751 = constructor_x64_palignr(
                                        ctx,
                                        v457,
                                        v1104,
                                        0x8,
                                        &OperandSize::Size32,
                                    );
                                    let v1752 = &C::xmm_to_xmm_mem(ctx, v1751);
                                    let v1769 = constructor_x64_pmovzxwd(ctx, v1752);
                                    let v1770 = constructor_output_xmm(ctx, v1769);
                                    // Rule at src/isa/x64/lower.isle line 3266.
                                    return Some(v1770);
                                }
                            }
                            I64X2 => {
                                let v520 = C::value_type(ctx, v287);
                                if v520 == I32X4 {
                                    let v447 = &C::put_in_xmm_mem(ctx, v287);
                                    let v1757 = constructor_x64_pshufd(ctx, v447, 0xEE);
                                    let v1758 = &C::xmm_to_xmm_mem(ctx, v1757);
                                    let v1771 = constructor_x64_pmovzxdq(ctx, v1758);
                                    let v1772 = constructor_output_xmm(ctx, v1771);
                                    // Rule at src/isa/x64/lower.isle line 3270.
                                    return Some(v1772);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Uextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v520 = C::value_type(ctx, v287);
                        if v3 == v520 {
                            let v1010 = constructor_output_value(ctx, v287);
                            // Rule at src/isa/x64/lower.isle line 2036.
                            return Some(v1010);
                        }
                        match v3 {
                            I64 => {
                                let v1025 = C::def_inst(ctx, v287);
                                if let Some(v1026) = v1025 {
                                    let v1027 = C::first_result(ctx, v1026);
                                    if let Some(v1028) = v1027 {
                                        let v1029 = C::value_type(ctx, v1028);
                                        if v1029 == I32 {
                                            let v1030 = &C::inst_data(ctx, v1026);
                                            match v1030 {
                                                &InstructionData::Binary {
                                                    opcode: ref v1031,
                                                    args: ref v1032,
                                                } => {
                                                    match v1031 {
                                                        &Opcode::Iadd => {
                                                            let v1010 =
                                                                constructor_output_value(ctx, v287);
                                                            // Rule at src/isa/x64/lower.isle line 2066.
                                                            return Some(v1010);
                                                        }
                                                        &Opcode::Isub => {
                                                            let v1010 =
                                                                constructor_output_value(ctx, v287);
                                                            // Rule at src/isa/x64/lower.isle line 2069.
                                                            return Some(v1010);
                                                        }
                                                        &Opcode::Imul => {
                                                            let v1010 =
                                                                constructor_output_value(ctx, v287);
                                                            // Rule at src/isa/x64/lower.isle line 2072.
                                                            return Some(v1010);
                                                        }
                                                        &Opcode::Band => {
                                                            let v1010 =
                                                                constructor_output_value(ctx, v287);
                                                            // Rule at src/isa/x64/lower.isle line 2075.
                                                            return Some(v1010);
                                                        }
                                                        &Opcode::Bor => {
                                                            let v1010 =
                                                                constructor_output_value(ctx, v287);
                                                            // Rule at src/isa/x64/lower.isle line 2078.
                                                            return Some(v1010);
                                                        }
                                                        &Opcode::Bxor => {
                                                            let v1010 =
                                                                constructor_output_value(ctx, v287);
                                                            // Rule at src/isa/x64/lower.isle line 2081.
                                                            return Some(v1010);
                                                        }
                                                        &Opcode::Ishl => {
                                                            let v1010 =
                                                                constructor_output_value(ctx, v287);
                                                            // Rule at src/isa/x64/lower.isle line 2084.
                                                            return Some(v1010);
                                                        }
                                                        &Opcode::Ushr => {
                                                            let v1010 =
                                                                constructor_output_value(ctx, v287);
                                                            // Rule at src/isa/x64/lower.isle line 2087.
                                                            return Some(v1010);
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                                &InstructionData::Load {
                                                    opcode: ref v1036,
                                                    arg: v1037,
                                                    flags: v1038,
                                                    offset: v1039,
                                                } => {
                                                    if let &Opcode::Uload32 = v1036 {
                                                        let v1010 =
                                                            constructor_output_value(ctx, v287);
                                                        // Rule at src/isa/x64/lower.isle line 2090.
                                                        return Some(v1010);
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                    }
                                }
                                let v1014 = C::fits_in_32(ctx, v520);
                                if let Some(v1015) = v1014 {
                                    let v1016 = constructor_extend_to_gpr(
                                        ctx,
                                        v287,
                                        I64,
                                        &ExtendKind::Zero,
                                    );
                                    let v1021 = constructor_output_gpr(ctx, v1016);
                                    // Rule at src/isa/x64/lower.isle line 2048.
                                    return Some(v1021);
                                }
                            }
                            I128 => {
                                let v1014 = C::fits_in_32(ctx, v520);
                                if let Some(v1015) = v1014 {
                                    let v1016 = constructor_extend_to_gpr(
                                        ctx,
                                        v287,
                                        I64,
                                        &ExtendKind::Zero,
                                    );
                                    let v1017 = C::gpr_to_reg(ctx, v1016);
                                    let v1018 = constructor_imm(ctx, I64, 0x0);
                                    let v1019 = C::value_regs(ctx, v1017, v1018);
                                    let v1020 = C::output(ctx, v1019);
                                    // Rule at src/isa/x64/lower.isle line 2044.
                                    return Some(v1020);
                                }
                                if v520 == I64 {
                                    let v1011 = C::put_in_reg(ctx, v287);
                                    let v15 = constructor_imm(ctx, I64, 0x0);
                                    let v1012 = C::value_regs(ctx, v1011, v15);
                                    let v1013 = C::output(ctx, v1012);
                                    // Rule at src/isa/x64/lower.isle line 2040.
                                    return Some(v1013);
                                }
                            }
                            _ => {}
                        }
                        let v1014 = C::fits_in_32(ctx, v520);
                        if let Some(v1015) = v1014 {
                            let v1022 = C::fits_in_32(ctx, v3);
                            if let Some(v1023) = v1022 {
                                let v883 =
                                    constructor_extend_to_gpr(ctx, v287, I32, &ExtendKind::Zero);
                                let v1024 = constructor_output_gpr(ctx, v883);
                                // Rule at src/isa/x64/lower.isle line 2052.
                                return Some(v1024);
                            }
                        }
                    }
                }
                &Opcode::Sextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v520 = C::value_type(ctx, v287);
                        let v3 = C::value_type(ctx, v2);
                        let v1040 = constructor_generic_sextend(ctx, v287, v520, v3);
                        // Rule at src/isa/x64/lower.isle line 2126.
                        return Some(v1040);
                    }
                }
                &Opcode::Fpromote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F64 {
                            let v457 = constructor_put_in_xmm(ctx, v287);
                            let v1102 = constructor_x64_cvtss2sd(ctx, v457);
                            let v1103 = constructor_output_xmm(ctx, v1102);
                            // Rule at src/isa/x64/lower.isle line 2225.
                            return Some(v1103);
                        }
                    }
                }
                &Opcode::Fdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F32 {
                            let v457 = constructor_put_in_xmm(ctx, v287);
                            let v1107 = constructor_x64_cvtsd2ss(ctx, v457);
                            let v1108 = constructor_output_xmm(ctx, v1107);
                            // Rule at src/isa/x64/lower.isle line 2233.
                            return Some(v1108);
                        }
                    }
                }
                &Opcode::Fvdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F32X4 {
                            let v447 = &C::put_in_xmm_mem(ctx, v287);
                            let v1109 = constructor_x64_cvtpd2ps(ctx, v447);
                            let v1110 = constructor_output_xmm(ctx, v1109);
                            // Rule at src/isa/x64/lower.isle line 2237.
                            return Some(v1110);
                        }
                    }
                }
                &Opcode::FvpromoteLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F64X2 {
                            let v457 = constructor_put_in_xmm(ctx, v287);
                            let v1104 = &C::xmm_to_xmm_mem(ctx, v457);
                            let v1105 = constructor_x64_cvtps2pd(ctx, v1104);
                            let v1106 = constructor_output_xmm(ctx, v1105);
                            // Rule at src/isa/x64/lower.isle line 2229.
                            return Some(v1106);
                        }
                    }
                }
                &Opcode::FcvtToUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v520 = C::value_type(ctx, v287);
                        let v1635 = C::ty_scalar_float(ctx, v520);
                        if let Some(v1636) = v1635 {
                            let v3 = C::value_type(ctx, v2);
                            let v1637 = constructor_cvt_float_to_uint_seq(ctx, v3, v287, false);
                            let v1638 = constructor_output_gpr(ctx, v1637);
                            // Rule at src/isa/x64/lower.isle line 3043.
                            return Some(v1638);
                        }
                    }
                }
                &Opcode::FcvtToSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v520 = C::value_type(ctx, v287);
                        let v1635 = C::ty_scalar_float(ctx, v520);
                        if let Some(v1636) = v1635 {
                            let v3 = C::value_type(ctx, v2);
                            let v1641 = constructor_cvt_float_to_sint_seq(ctx, v3, v287, false);
                            let v1642 = constructor_output_gpr(ctx, v1641);
                            // Rule at src/isa/x64/lower.isle line 3049.
                            return Some(v1642);
                        }
                    }
                }
                &Opcode::FcvtToUintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v520 = C::value_type(ctx, v287);
                            if v520 == F32X4 {
                                let v457 = constructor_put_in_xmm(ctx, v287);
                                let v1659 = constructor_xmm_zero(ctx, F32X4);
                                let v1660 = &C::xmm_to_xmm_mem(ctx, v1659);
                                let v1661 = constructor_x64_maxps(ctx, v457, v1660);
                                let v1662 = &C::xmm_to_xmm_mem(ctx, v1659);
                                let v1663 = constructor_x64_pcmpeqd(ctx, v1659, v1662);
                                let v486 = RegMemImm::Imm { simm32: 0x1 };
                                let v1664 = &constructor_mov_rmi_to_xmm(ctx, &v486);
                                let v1665 = constructor_x64_psrld(ctx, v1663, v1664);
                                let v1666 = &C::xmm_to_xmm_mem(ctx, v1665);
                                let v1667 = constructor_x64_cvtdq2ps(ctx, v1666);
                                let v1668 = &C::xmm_to_xmm_mem(ctx, v1661);
                                let v1669 = constructor_x64_cvttps2dq(ctx, v1668);
                                let v1670 = &C::xmm_to_xmm_mem(ctx, v1667);
                                let v1671 = constructor_x64_subps(ctx, v1661, v1670);
                                let v1672 = &C::xmm_to_xmm_mem(ctx, v1671);
                                let v1673 = constructor_x64_cmpps(
                                    ctx,
                                    v1667,
                                    v1672,
                                    &FcmpImm::LessThanOrEqual,
                                );
                                let v1674 = &C::xmm_to_xmm_mem(ctx, v1671);
                                let v1675 = constructor_x64_cvttps2dq(ctx, v1674);
                                let v1676 = &C::xmm_to_xmm_mem(ctx, v1673);
                                let v1677 = constructor_x64_pxor(ctx, v1675, v1676);
                                let v1678 = constructor_xmm_zero(ctx, I32X4);
                                let v1679 = &C::xmm_to_xmm_mem(ctx, v1678);
                                let v1680 = constructor_x64_pmaxsd(ctx, v1677, v1679);
                                let v1681 = &C::xmm_to_xmm_mem(ctx, v1669);
                                let v1682 = constructor_x64_paddd(ctx, v1680, v1681);
                                let v1683 = constructor_output_xmm(ctx, v1682);
                                // Rule at src/isa/x64/lower.isle line 3127.
                                return Some(v1683);
                            }
                        }
                        let v520 = C::value_type(ctx, v287);
                        let v1635 = C::ty_scalar_float(ctx, v520);
                        if let Some(v1636) = v1635 {
                            let v1639 = constructor_cvt_float_to_uint_seq(ctx, v3, v287, true);
                            let v1640 = constructor_output_gpr(ctx, v1639);
                            // Rule at src/isa/x64/lower.isle line 3046.
                            return Some(v1640);
                        }
                    }
                }
                &Opcode::FcvtToSintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v520 = C::value_type(ctx, v287);
                            if v520 == F32X4 {
                                let v457 = constructor_put_in_xmm(ctx, v287);
                                let v1104 = &C::xmm_to_xmm_mem(ctx, v457);
                                let v1645 =
                                    constructor_x64_cmpps(ctx, v457, v1104, &FcmpImm::Equal);
                                let v1646 = &C::xmm_to_xmm_mem(ctx, v1645);
                                let v1647 = constructor_x64_andps(ctx, v457, v1646);
                                let v1648 = &C::xmm_to_xmm_mem(ctx, v1647);
                                let v1649 = constructor_x64_pxor(ctx, v1645, v1648);
                                let v1650 = &C::xmm_to_xmm_mem(ctx, v1647);
                                let v1651 = constructor_x64_cvttps2dq(ctx, v1650);
                                let v1652 = &C::xmm_to_xmm_mem(ctx, v1649);
                                let v1653 = constructor_x64_pand(ctx, v1651, v1652);
                                let v507 = RegMemImm::Imm { simm32: 0x1F };
                                let v1654 = &constructor_mov_rmi_to_xmm(ctx, &v507);
                                let v1655 = constructor_x64_psrad(ctx, v1653, v1654);
                                let v1656 = &C::xmm_to_xmm_mem(ctx, v1651);
                                let v1657 = constructor_x64_pxor(ctx, v1655, v1656);
                                let v1658 = constructor_output_xmm(ctx, v1657);
                                // Rule at src/isa/x64/lower.isle line 3056.
                                return Some(v1658);
                            }
                        }
                        let v520 = C::value_type(ctx, v287);
                        let v1635 = C::ty_scalar_float(ctx, v520);
                        if let Some(v1636) = v1635 {
                            let v1643 = constructor_cvt_float_to_sint_seq(ctx, v3, v287, true);
                            let v1644 = constructor_output_gpr(ctx, v1643);
                            // Rule at src/isa/x64/lower.isle line 3052.
                            return Some(v1644);
                        }
                    }
                }
                &Opcode::FcvtFromUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v520 = C::value_type(ctx, v287);
                                let v1014 = C::fits_in_32(ctx, v520);
                                if let Some(v1015) = v1014 {
                                    let v1594 = C::ty_int(ctx, v1015);
                                    if let Some(v1595) = v1594 {
                                        let v1016 = constructor_extend_to_gpr(
                                            ctx,
                                            v287,
                                            I64,
                                            &ExtendKind::Zero,
                                        );
                                        let v1596 = &C::gpr_to_gpr_mem(ctx, v1016);
                                        let v1597 = constructor_x64_cvtsi2ss(ctx, I64, v1596);
                                        let v1598 = constructor_output_xmm(ctx, v1597);
                                        // Rule at src/isa/x64/lower.isle line 2971.
                                        return Some(v1598);
                                    }
                                }
                            }
                            F64 => {
                                let v520 = C::value_type(ctx, v287);
                                let v1014 = C::fits_in_32(ctx, v520);
                                if let Some(v1015) = v1014 {
                                    let v1594 = C::ty_int(ctx, v1015);
                                    if let Some(v1595) = v1594 {
                                        let v1016 = constructor_extend_to_gpr(
                                            ctx,
                                            v287,
                                            I64,
                                            &ExtendKind::Zero,
                                        );
                                        let v1596 = &C::gpr_to_gpr_mem(ctx, v1016);
                                        let v1599 = constructor_x64_cvtsi2sd(ctx, I64, v1596);
                                        let v1600 = constructor_output_xmm(ctx, v1599);
                                        // Rule at src/isa/x64/lower.isle line 2974.
                                        return Some(v1600);
                                    }
                                }
                            }
                            F32X4 => {
                                let v349 = C::avx512vl_enabled(ctx, v3);
                                if v349 == true {
                                    let v454 = C::avx512f_enabled(ctx, v3);
                                    if v454 == true {
                                        let v447 = &C::put_in_xmm_mem(ctx, v287);
                                        let v1614 = constructor_x64_vcvtudq2ps(ctx, v447);
                                        let v1615 = constructor_output_xmm(ctx, v1614);
                                        // Rule at src/isa/x64/lower.isle line 2992.
                                        return Some(v1615);
                                    }
                                }
                                let v457 = constructor_put_in_xmm(ctx, v287);
                                let v1617 = RegMemImm::Imm { simm32: 0x10 };
                                let v1618 = &constructor_mov_rmi_to_xmm(ctx, &v1617);
                                let v1619 = constructor_x64_pslld(ctx, v457, v1618);
                                let v1620 = &constructor_mov_rmi_to_xmm(ctx, &v1617);
                                let v1621 = constructor_x64_psrld(ctx, v1619, v1620);
                                let v1622 = &C::xmm_to_xmm_mem(ctx, v1621);
                                let v1623 = constructor_x64_psubd(ctx, v457, v1622);
                                let v1624 = &C::xmm_to_xmm_mem(ctx, v1621);
                                let v1625 = constructor_x64_cvtdq2ps(ctx, v1624);
                                let v486 = RegMemImm::Imm { simm32: 0x1 };
                                let v1626 = &constructor_mov_rmi_to_xmm(ctx, &v486);
                                let v1627 = constructor_x64_psrld(ctx, v1623, v1626);
                                let v1628 = &C::xmm_to_xmm_mem(ctx, v1627);
                                let v1629 = constructor_x64_cvtdq2ps(ctx, v1628);
                                let v1630 = &C::xmm_to_xmm_mem(ctx, v1629);
                                let v1631 = constructor_x64_addps(ctx, v1629, v1630);
                                let v1632 = &C::xmm_to_xmm_mem(ctx, v1625);
                                let v1633 = constructor_x64_addps(ctx, v1631, v1632);
                                let v1634 = constructor_output_xmm(ctx, v1633);
                                // Rule at src/isa/x64/lower.isle line 3019.
                                return Some(v1634);
                            }
                            F64X2 => {
                                let v1025 = C::def_inst(ctx, v287);
                                if let Some(v1026) = v1025 {
                                    let v1030 = &C::inst_data(ctx, v1026);
                                    if let &InstructionData::Unary {
                                        opcode: ref v1603,
                                        arg: v1604,
                                    } = v1030
                                    {
                                        if let &Opcode::UwidenLow = v1603 {
                                            let v1605 = C::value_type(ctx, v1604);
                                            if v1605 == I32X4 {
                                                let v1606 = C::fcvt_uint_mask_const(ctx);
                                                let v1607 =
                                                    &constructor_const_to_xmm_mem(ctx, v1606);
                                                let v1608 = constructor_put_in_xmm(ctx, v1604);
                                                let v1609 =
                                                    constructor_x64_unpcklps(ctx, v1608, v1607);
                                                let v1610 = C::fcvt_uint_mask_high_const(ctx);
                                                let v1611 =
                                                    &constructor_const_to_xmm_mem(ctx, v1610);
                                                let v1612 =
                                                    constructor_x64_subpd(ctx, v1609, v1611);
                                                let v1613 = constructor_output_xmm(ctx, v1612);
                                                // Rule at src/isa/x64/lower.isle line 2984.
                                                return Some(v1613);
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                        let v520 = C::value_type(ctx, v287);
                        if v520 == I64 {
                            let v288 = constructor_put_in_gpr(ctx, v287);
                            let v1601 = constructor_cvt_u64_to_float_seq(ctx, v3, v288);
                            let v1602 = constructor_output_xmm(ctx, v1601);
                            // Rule at src/isa/x64/lower.isle line 2977.
                            return Some(v1602);
                        }
                    }
                }
                &Opcode::FcvtFromSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v520 = C::value_type(ctx, v287);
                                match v520 {
                                    I8 => {
                                        let v1575 = constructor_extend_to_gpr(
                                            ctx,
                                            v287,
                                            I32,
                                            &ExtendKind::Sign,
                                        );
                                        let v1576 = &C::gpr_to_gpr_mem(ctx, v1575);
                                        let v1577 = constructor_x64_cvtsi2ss(ctx, I32, v1576);
                                        let v1578 = constructor_output_xmm(ctx, v1577);
                                        // Rule at src/isa/x64/lower.isle line 2943.
                                        return Some(v1578);
                                    }
                                    I16 => {
                                        let v1575 = constructor_extend_to_gpr(
                                            ctx,
                                            v287,
                                            I32,
                                            &ExtendKind::Sign,
                                        );
                                        let v1576 = &C::gpr_to_gpr_mem(ctx, v1575);
                                        let v1577 = constructor_x64_cvtsi2ss(ctx, I32, v1576);
                                        let v1578 = constructor_output_xmm(ctx, v1577);
                                        // Rule at src/isa/x64/lower.isle line 2946.
                                        return Some(v1578);
                                    }
                                    _ => {}
                                }
                                let v1579 = C::ty_int(ctx, v520);
                                if let Some(v1580) = v1579 {
                                    let v1581 = C::fits_in_64(ctx, v1580);
                                    if let Some(v1582) = v1581 {
                                        let v1583 = &constructor_put_in_gpr_mem(ctx, v287);
                                        let v1584 = constructor_x64_cvtsi2ss(ctx, v1582, v1583);
                                        let v1585 = constructor_output_xmm(ctx, v1584);
                                        // Rule at src/isa/x64/lower.isle line 2949.
                                        return Some(v1585);
                                    }
                                }
                            }
                            F64 => {
                                let v520 = C::value_type(ctx, v287);
                                match v520 {
                                    I8 => {
                                        let v1575 = constructor_extend_to_gpr(
                                            ctx,
                                            v287,
                                            I32,
                                            &ExtendKind::Sign,
                                        );
                                        let v1576 = &C::gpr_to_gpr_mem(ctx, v1575);
                                        let v1586 = constructor_x64_cvtsi2sd(ctx, I32, v1576);
                                        let v1587 = constructor_output_xmm(ctx, v1586);
                                        // Rule at src/isa/x64/lower.isle line 2952.
                                        return Some(v1587);
                                    }
                                    I16 => {
                                        let v1575 = constructor_extend_to_gpr(
                                            ctx,
                                            v287,
                                            I32,
                                            &ExtendKind::Sign,
                                        );
                                        let v1576 = &C::gpr_to_gpr_mem(ctx, v1575);
                                        let v1586 = constructor_x64_cvtsi2sd(ctx, I32, v1576);
                                        let v1587 = constructor_output_xmm(ctx, v1586);
                                        // Rule at src/isa/x64/lower.isle line 2955.
                                        return Some(v1587);
                                    }
                                    _ => {}
                                }
                                let v1579 = C::ty_int(ctx, v520);
                                if let Some(v1580) = v1579 {
                                    let v1581 = C::fits_in_64(ctx, v1580);
                                    if let Some(v1582) = v1581 {
                                        let v1583 = &constructor_put_in_gpr_mem(ctx, v287);
                                        let v1588 = constructor_x64_cvtsi2sd(ctx, v1582, v1583);
                                        let v1589 = constructor_output_xmm(ctx, v1588);
                                        // Rule at src/isa/x64/lower.isle line 2958.
                                        return Some(v1589);
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    let v520 = C::value_type(ctx, v287);
                    if v520 == I32X4 {
                        let v447 = &C::put_in_xmm_mem(ctx, v287);
                        let v1590 = constructor_x64_cvtdq2ps(ctx, v447);
                        let v1591 = constructor_output_xmm(ctx, v1590);
                        // Rule at src/isa/x64/lower.isle line 2961.
                        return Some(v1591);
                    }
                }
                &Opcode::FcvtLowFromSint => {
                    let v447 = &C::put_in_xmm_mem(ctx, v287);
                    let v1592 = constructor_x64_cvtdq2pd(ctx, v447);
                    let v1593 = constructor_output_xmm(ctx, v1592);
                    // Rule at src/isa/x64/lower.isle line 2966.
                    return Some(v1593);
                }
                &Opcode::Isplit => {
                    let v520 = C::value_type(ctx, v287);
                    if v520 == I128 {
                        let v291 = C::put_in_regs(ctx, v287);
                        let v2081 = C::value_regs_get(ctx, v291, 0x0);
                        let v2082 = C::value_regs_get(ctx, v291, 0x1);
                        let v2083 = C::value_reg(ctx, v2081);
                        let v2084 = C::value_reg(ctx, v2082);
                        let v2085 = C::output_pair(ctx, v2083, v2084);
                        // Rule at src/isa/x64/lower.isle line 3711.
                        return Some(v2085);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryConst {
            opcode: ref v1930,
            constant_handle: v1931,
        } => {
            if let &Opcode::Vconst = v1930 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v1932 = C::const_to_vconst(ctx, v1931);
                    let v3 = C::value_type(ctx, v2);
                    let v1933 = constructor_x64_xmm_load_const(ctx, v3, v1932);
                    let v1934 = constructor_output_xmm(ctx, v1933);
                    // Rule at src/isa/x64/lower.isle line 3505.
                    return Some(v1934);
                }
            }
        }
        &InstructionData::UnaryGlobalValue {
            opcode: ref v1468,
            global_value: v1469,
        } => {
            match v1468 {
                &Opcode::SymbolValue => {
                    let v1470 = C::symbol_value_data(ctx, v1469);
                    if let Some(v1471) = v1470 {
                        let v1475 = constructor_load_ext_name(ctx, v1471.0, v1471.2);
                        let v1476 = constructor_output_reg(ctx, v1475);
                        // Rule at src/isa/x64/lower.isle line 2796.
                        return Some(v1476);
                    }
                }
                &Opcode::TlsValue => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1470 = C::symbol_value_data(ctx, v1469);
                        if let Some(v1471) = v1470 {
                            let v3 = C::value_type(ctx, v2);
                            let v2086 = &C::tls_model(ctx, v3);
                            match v2086 {
                                &TlsModel::ElfGd => {
                                    let v2087 = constructor_elf_tls_get_addr(ctx, v1471.0);
                                    let v2088 = constructor_output_gpr(ctx, v2087);
                                    // Rule at src/isa/x64/lower.isle line 3719.
                                    return Some(v2088);
                                }
                                &TlsModel::Macho => {
                                    let v2089 = constructor_macho_tls_get_addr(ctx, v1471.0);
                                    let v2090 = constructor_output_gpr(ctx, v2089);
                                    // Rule at src/isa/x64/lower.isle line 3722.
                                    return Some(v2090);
                                }
                                &TlsModel::Coff => {
                                    let v2091 = constructor_coff_tls_get_addr(ctx, v1471.0);
                                    let v2092 = constructor_output_gpr(ctx, v2091);
                                    // Rule at src/isa/x64/lower.isle line 3725.
                                    return Some(v2092);
                                }
                                _ => {}
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryIeee32 {
            opcode: ref v18,
            imm: v19,
        } => {
            if let &Opcode::F32const = v18 {
                let v20 = C::u64_from_ieee32(ctx, v19);
                let v22 = constructor_imm(ctx, F32, v20);
                let v23 = constructor_output_reg(ctx, v22);
                // Rule at src/isa/x64/lower.isle line 27.
                return Some(v23);
            }
        }
        &InstructionData::UnaryIeee64 {
            opcode: ref v24,
            imm: v25,
        } => {
            if let &Opcode::F64const = v24 {
                let v26 = C::u64_from_ieee64(ctx, v25);
                let v28 = constructor_imm(ctx, F64, v26);
                let v29 = constructor_output_reg(ctx, v28);
                // Rule at src/isa/x64/lower.isle line 32.
                return Some(v29);
            }
        }
        &InstructionData::UnaryImm {
            opcode: ref v7,
            imm: v8,
        } => {
            if let &Opcode::Iconst = v7 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    if v3 == I128 {
                        let v9 = C::u64_from_imm64(ctx, v8);
                        let v13 = constructor_imm(ctx, I64, v9);
                        let v15 = constructor_imm(ctx, I64, 0x0);
                        let v16 = C::value_regs(ctx, v13, v15);
                        let v17 = C::output(ctx, v16);
                        // Rule at src/isa/x64/lower.isle line 20.
                        return Some(v17);
                    }
                    let v4 = C::fits_in_64(ctx, v3);
                    if let Some(v5) = v4 {
                        let v9 = C::u64_from_imm64(ctx, v8);
                        let v10 = constructor_imm(ctx, v5, v9);
                        let v11 = constructor_output_reg(ctx, v10);
                        // Rule at src/isa/x64/lower.isle line 15.
                        return Some(v11);
                    }
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term lower_branch.
pub fn constructor_lower_branch<C: Context>(
    ctx: &mut C,
    arg0: Inst,
    arg1: &MachLabelSlice,
) -> Option<Unit> {
    let v1 = &C::inst_data(ctx, arg0);
    match v1 {
        &InstructionData::BranchTable {
            opcode: ref v55,
            arg: v56,
            table: v57,
        } => {
            if let &Opcode::BrTable = v55 {
                let v59 = C::jump_table_targets(ctx, arg1);
                if let Some(v60) = v59 {
                    let v58 = C::value_type(ctx, v56);
                    let v63 = &C::raw_operand_size_of_type(ctx, v58);
                    let v64 = C::jump_table_size(ctx, &v60.1);
                    let v65 = C::u32_as_u64(ctx, v64);
                    let v66 = constructor_imm(ctx, v58, v65);
                    let v69 = constructor_extend_to_gpr(ctx, v56, I64, &ExtendKind::Zero);
                    let v70 = &constructor_reg_to_gpr_mem_imm(ctx, v66);
                    let v71 = &constructor_x64_cmp(ctx, v63, v70, v69);
                    let v73 = &C::gpr_to_gpr_mem(ctx, v69);
                    let v74 = C::gpr_new(ctx, v66);
                    let v75 = &constructor_cmove(ctx, v58, &CC::B, v73, v74);
                    let v76 = constructor_with_flags_reg(ctx, v71, v75);
                    let v77 = C::gpr_new(ctx, v76);
                    let v78 = &constructor_jmp_table_seq(ctx, v58, v77, v60.0, &v60.1);
                    let v79 = constructor_emit_side_effect(ctx, v78);
                    // Rule at src/isa/x64/lower.isle line 2917.
                    return Some(v79);
                }
            }
        }
        &InstructionData::Brif {
            opcode: ref v9,
            arg: v10,
            blocks: ref v11,
        } => {
            if let &Opcode::Brif = v9 {
                let v26 = C::two_targets(ctx, arg1);
                if let Some(v27) = v26 {
                    let v12 = C::maybe_uextend(ctx, v10);
                    if let Some(v13) = v12 {
                        let v14 = C::def_inst(ctx, v13);
                        if let Some(v15) = v14 {
                            let v16 = &C::inst_data(ctx, v15);
                            match v16 {
                                &InstructionData::FloatCompare {
                                    opcode: ref v33,
                                    args: ref v34,
                                    cond: ref v35,
                                } => {
                                    if let &Opcode::Fcmp = v33 {
                                        let v36 = C::unpack_value_array_2(ctx, v34);
                                        let v39 = &constructor_emit_fcmp(ctx, v35, v36.0, v36.1);
                                        let v40 =
                                            &constructor_jmp_cond_fcmp(ctx, v39, v27.0, v27.1);
                                        let v41 = constructor_emit_side_effect(ctx, v40);
                                        // Rule at src/isa/x64/lower.isle line 2878.
                                        return Some(v41);
                                    }
                                }
                                &InstructionData::IntCompare {
                                    opcode: ref v17,
                                    args: ref v18,
                                    cond: ref v19,
                                } => {
                                    if let &Opcode::Icmp = v17 {
                                        let v20 = C::unpack_value_array_2(ctx, v18);
                                        let v30 = &constructor_emit_cmp(ctx, v19, v20.0, v20.1);
                                        let v31 =
                                            &constructor_jmp_cond_icmp(ctx, v30, v27.0, v27.1);
                                        let v32 = constructor_emit_side_effect(ctx, v31);
                                        // Rule at src/isa/x64/lower.isle line 2875.
                                        return Some(v32);
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    let v42 = C::value_type(ctx, v10);
                    if v42 == I128 {
                        let v44 = C::put_in_regs(ctx, v10);
                        let v45 = &constructor_cmp_zero_i128(ctx, &CC::Z, v44);
                        let v46 = &constructor_jmp_cond_icmp(ctx, v45, v27.0, v27.1);
                        let v47 = constructor_emit_side_effect(ctx, v46);
                        // Rule at src/isa/x64/lower.isle line 2881.
                        return Some(v47);
                    }
                    let v48 = C::ty_int_bool_or_ref(ctx, v42);
                    if let Some(v49) = v48 {
                        let v50 = &constructor_cmp_zero_int_bool_ref(ctx, v10);
                        let v52 = &constructor_jmp_cond(ctx, &CC::NZ, v27.0, v27.1);
                        let v53 = &constructor_with_flags_side_effect(ctx, v50, v52);
                        let v54 = constructor_emit_side_effect(ctx, v53);
                        // Rule at src/isa/x64/lower.isle line 2885.
                        return Some(v54);
                    }
                }
            }
        }
        &InstructionData::Jump {
            opcode: ref v2,
            destination: v3,
        } => {
            if let &Opcode::Jump = v2 {
                let v5 = C::single_target(ctx, arg1);
                if let Some(v6) = v5 {
                    let v7 = &constructor_jmp_known(ctx, v6);
                    let v8 = constructor_emit_side_effect(ctx, v7);
                    // Rule at src/isa/x64/lower.isle line 2870.
                    return Some(v8);
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term sse_and.
pub fn constructor_sse_and<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm, arg2: &XmmMem) -> Xmm {
    match arg0 {
        F32 => {
            let v3 = constructor_x64_andps(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 215.
            return v3;
        }
        F64 => {
            let v4 = constructor_x64_andpd(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 216.
            return v4;
        }
        F32X4 => {
            let v3 = constructor_x64_andps(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 213.
            return v3;
        }
        F64X2 => {
            let v4 = constructor_x64_andpd(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 214.
            return v4;
        }
        _ => {}
    }
    let v5 = C::multi_lane(ctx, arg0);
    if let Some(v6) = v5 {
        let v9 = constructor_x64_pand(ctx, arg1, arg2);
        // Rule at src/isa/x64/lower.isle line 217.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sse_and", "src/isa/x64/lower.isle line 212"
    )
}

// Generated as internal constructor for term sse_and_not.
pub fn constructor_sse_and_not<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    match arg0 {
        F32X4 => {
            let v3 = constructor_x64_andnps(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 240.
            return v3;
        }
        F64X2 => {
            let v4 = constructor_x64_andnpd(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 241.
            return v4;
        }
        _ => {}
    }
    let v5 = C::multi_lane(ctx, arg0);
    if let Some(v6) = v5 {
        let v9 = constructor_x64_pandn(ctx, arg1, arg2);
        // Rule at src/isa/x64/lower.isle line 242.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sse_and_not", "src/isa/x64/lower.isle line 239"
    )
}

// Generated as internal constructor for term sse_or.
pub fn constructor_sse_or<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm, arg2: &XmmMem) -> Xmm {
    match arg0 {
        F32 => {
            let v3 = constructor_x64_orps(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 295.
            return v3;
        }
        F64 => {
            let v4 = constructor_x64_orpd(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 296.
            return v4;
        }
        F32X4 => {
            let v3 = constructor_x64_orps(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 293.
            return v3;
        }
        F64X2 => {
            let v4 = constructor_x64_orpd(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 294.
            return v4;
        }
        _ => {}
    }
    let v5 = C::multi_lane(ctx, arg0);
    if let Some(v6) = v5 {
        let v9 = constructor_x64_por(ctx, arg1, arg2);
        // Rule at src/isa/x64/lower.isle line 297.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sse_or", "src/isa/x64/lower.isle line 292"
    )
}

// Generated as internal constructor for term or_i128.
pub fn constructor_or_i128<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: ValueRegs) -> ValueRegs {
    let v3 = constructor_value_regs_get_gpr(ctx, arg0, 0x0);
    let v5 = constructor_value_regs_get_gpr(ctx, arg0, 0x1);
    let v6 = constructor_value_regs_get_gpr(ctx, arg1, 0x0);
    let v7 = constructor_value_regs_get_gpr(ctx, arg1, 0x1);
    let v9 = &C::gpr_to_gpr_mem_imm(ctx, v6);
    let v10 = constructor_x64_or(ctx, I64, v3, v9);
    let v11 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v12 = constructor_x64_or(ctx, I64, v5, v11);
    let v13 = constructor_value_gprs(ctx, v10, v12);
    // Rule at src/isa/x64/lower.isle line 306.
    return v13;
}

// Generated as internal constructor for term shl_i128.
pub fn constructor_shl_i128<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: Gpr) -> ValueRegs {
    let v3 = constructor_value_regs_get_gpr(ctx, arg0, 0x0);
    let v5 = constructor_value_regs_get_gpr(ctx, arg0, 0x1);
    let v7 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v8 = constructor_x64_shl(ctx, I64, v3, v7);
    let v9 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v10 = constructor_x64_shl(ctx, I64, v5, v9);
    let v12 = constructor_imm(ctx, I64, 0x40);
    let v13 = C::gpr_new(ctx, v12);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, arg1);
    let v15 = constructor_x64_sub(ctx, I64, v13, v14);
    let v16 = &C::gpr_to_imm8_gpr(ctx, v15);
    let v17 = constructor_x64_shr(ctx, I64, v3, v16);
    let v19 = constructor_imm(ctx, I64, 0x0);
    let v20 = C::gpr_new(ctx, v19);
    let v23 = RegMemImm::Imm { simm32: 0x7F };
    let v24 = &C::gpr_mem_imm_new(ctx, &v23);
    let v25 = &constructor_x64_test(ctx, &OperandSize::Size64, v24, arg1);
    let v27 = &C::gpr_to_gpr_mem(ctx, v20);
    let v28 = &constructor_cmove(ctx, I64, &CC::Z, v27, v17);
    let v29 = constructor_with_flags_reg(ctx, v25, v28);
    let v30 = C::gpr_new(ctx, v29);
    let v31 = &C::gpr_to_gpr_mem_imm(ctx, v10);
    let v32 = constructor_x64_or(ctx, I64, v30, v31);
    let v34 = RegMemImm::Imm { simm32: 0x40 };
    let v35 = &C::gpr_mem_imm_new(ctx, &v34);
    let v36 = &constructor_x64_test(ctx, &OperandSize::Size64, v35, arg1);
    let v37 = &C::gpr_to_gpr_mem(ctx, v8);
    let v38 = &constructor_cmove(ctx, I64, &CC::Z, v37, v20);
    let v39 = &C::gpr_to_gpr_mem(ctx, v32);
    let v40 = &constructor_cmove(ctx, I64, &CC::Z, v39, v8);
    let v41 = &constructor_consumes_flags_concat(ctx, v38, v40);
    let v42 = constructor_with_flags(ctx, v36, v41);
    // Rule at src/isa/x64/lower.isle line 369.
    return v42;
}

// Generated as internal constructor for term ishl_i8x16_mask.
pub fn constructor_ishl_i8x16_mask<C: Context>(ctx: &mut C, arg0: &RegMemImm) -> SyntheticAmode {
    match arg0 {
        &RegMemImm::Reg { reg: v3 } => {
            let v4 = &C::ishl_i8x16_mask_table(ctx);
            let v5 = constructor_x64_lea(ctx, v4);
            let v7 = C::gpr_new(ctx, v3);
            let v9 = &C::imm8_to_imm8_gpr(ctx, 0x4);
            let v10 = constructor_x64_shl(ctx, I64, v7, v9);
            let v13 = &C::amode_imm_reg_reg_shift(ctx, 0x0, v5, v10, 0x0);
            let v14 = &C::amode_to_synthetic_amode(ctx, v13);
            // Rule at src/isa/x64/lower.isle line 443.
            return v14.clone();
        }
        &RegMemImm::Mem { addr: ref v15 } => {
            let v17 = constructor_x64_load(ctx, I64, v15, &ExtKind::None);
            let v18 = RegMemImm::Reg { reg: v17 };
            let v19 = &constructor_ishl_i8x16_mask(ctx, &v18);
            // Rule at src/isa/x64/lower.isle line 453.
            return v19.clone();
        }
        &RegMemImm::Imm { simm32: v1 } => {
            let v2 = &C::ishl_i8x16_mask_for_const(ctx, v1);
            // Rule at src/isa/x64/lower.isle line 434.
            return v2.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "ishl_i8x16_mask", "src/isa/x64/lower.isle line 428"
    )
}

// Generated as internal constructor for term shr_i128.
pub fn constructor_shr_i128<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: Gpr) -> ValueRegs {
    let v3 = constructor_value_regs_get_gpr(ctx, arg0, 0x0);
    let v5 = constructor_value_regs_get_gpr(ctx, arg0, 0x1);
    let v7 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v8 = constructor_x64_shr(ctx, I64, v3, v7);
    let v9 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v10 = constructor_x64_shr(ctx, I64, v5, v9);
    let v12 = constructor_imm(ctx, I64, 0x40);
    let v13 = C::gpr_new(ctx, v12);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, arg1);
    let v15 = constructor_x64_sub(ctx, I64, v13, v14);
    let v16 = &C::gpr_to_imm8_gpr(ctx, v15);
    let v17 = constructor_x64_shl(ctx, I64, v5, v16);
    let v19 = constructor_imm(ctx, I64, 0x0);
    let v20 = C::gpr_new(ctx, v19);
    let v23 = RegMemImm::Imm { simm32: 0x7F };
    let v24 = &C::gpr_mem_imm_new(ctx, &v23);
    let v25 = &constructor_x64_test(ctx, &OperandSize::Size64, v24, arg1);
    let v27 = &C::gpr_to_gpr_mem(ctx, v20);
    let v28 = &constructor_cmove(ctx, I64, &CC::Z, v27, v17);
    let v29 = constructor_with_flags_reg(ctx, v25, v28);
    let v30 = C::gpr_new(ctx, v29);
    let v31 = &C::gpr_to_gpr_mem_imm(ctx, v8);
    let v32 = constructor_x64_or(ctx, I64, v30, v31);
    let v34 = RegMemImm::Imm { simm32: 0x40 };
    let v35 = &C::gpr_mem_imm_new(ctx, &v34);
    let v36 = &constructor_x64_test(ctx, &OperandSize::Size64, v35, arg1);
    let v37 = &C::gpr_to_gpr_mem(ctx, v32);
    let v38 = &constructor_cmove(ctx, I64, &CC::Z, v37, v10);
    let v39 = &C::gpr_to_gpr_mem(ctx, v10);
    let v40 = &constructor_cmove(ctx, I64, &CC::Z, v39, v20);
    let v41 = &constructor_consumes_flags_concat(ctx, v38, v40);
    let v42 = constructor_with_flags(ctx, v36, v41);
    // Rule at src/isa/x64/lower.isle line 478.
    return v42;
}

// Generated as internal constructor for term ushr_i8x16_mask.
pub fn constructor_ushr_i8x16_mask<C: Context>(ctx: &mut C, arg0: &RegMemImm) -> SyntheticAmode {
    match arg0 {
        &RegMemImm::Reg { reg: v3 } => {
            let v4 = &C::ushr_i8x16_mask_table(ctx);
            let v5 = constructor_x64_lea(ctx, v4);
            let v7 = C::gpr_new(ctx, v3);
            let v9 = &C::imm8_to_imm8_gpr(ctx, 0x4);
            let v10 = constructor_x64_shl(ctx, I64, v7, v9);
            let v13 = &C::amode_imm_reg_reg_shift(ctx, 0x0, v5, v10, 0x0);
            let v14 = &C::amode_to_synthetic_amode(ctx, v13);
            // Rule at src/isa/x64/lower.isle line 547.
            return v14.clone();
        }
        &RegMemImm::Mem { addr: ref v15 } => {
            let v17 = constructor_x64_load(ctx, I64, v15, &ExtKind::None);
            let v18 = RegMemImm::Reg { reg: v17 };
            let v19 = &constructor_ushr_i8x16_mask(ctx, &v18);
            // Rule at src/isa/x64/lower.isle line 558.
            return v19.clone();
        }
        &RegMemImm::Imm { simm32: v1 } => {
            let v2 = &C::ushr_i8x16_mask_for_const(ctx, v1);
            // Rule at src/isa/x64/lower.isle line 538.
            return v2.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "ushr_i8x16_mask", "src/isa/x64/lower.isle line 532"
    )
}

// Generated as internal constructor for term mask_xmm_shift.
pub fn constructor_mask_xmm_shift<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> RegMemImm {
    let v10 = C::def_inst(ctx, arg1);
    if let Some(v11) = v10 {
        let v12 = &C::inst_data(ctx, v11);
        if let &InstructionData::UnaryImm {
            opcode: ref v13,
            imm: v14,
        } = v12
        {
            if let &Opcode::Iconst = v13 {
                let v15 = C::shift_amount_masked(ctx, arg0, v14);
                let v16 = RegMemImm::Imm { simm32: v15 };
                // Rule at src/isa/x64/lower.isle line 575.
                return v16;
            }
        }
    }
    let v3 = constructor_put_in_gpr(ctx, arg1);
    let v4 = C::shift_mask(ctx, arg0);
    let v5 = RegMemImm::Imm { simm32: v4 };
    let v6 = &C::gpr_mem_imm_new(ctx, &v5);
    let v7 = constructor_x64_and(ctx, I64, v3, v6);
    let v8 = C::gpr_to_reg(ctx, v7);
    let v9 = &C::reg_to_reg_mem_imm(ctx, v8);
    // Rule at src/isa/x64/lower.isle line 573.
    return v9.clone();
}

// Generated as internal constructor for term sar_i128.
pub fn constructor_sar_i128<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: Gpr) -> ValueRegs {
    let v3 = constructor_value_regs_get_gpr(ctx, arg0, 0x0);
    let v5 = constructor_value_regs_get_gpr(ctx, arg0, 0x1);
    let v7 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v8 = constructor_x64_shr(ctx, I64, v3, v7);
    let v9 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v10 = constructor_x64_sar(ctx, I64, v5, v9);
    let v12 = constructor_imm(ctx, I64, 0x40);
    let v13 = C::gpr_new(ctx, v12);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, arg1);
    let v15 = constructor_x64_sub(ctx, I64, v13, v14);
    let v16 = &C::gpr_to_imm8_gpr(ctx, v15);
    let v17 = constructor_x64_shl(ctx, I64, v5, v16);
    let v20 = RegMemImm::Imm { simm32: 0x7F };
    let v21 = &C::gpr_mem_imm_new(ctx, &v20);
    let v22 = &constructor_x64_test(ctx, &OperandSize::Size64, v21, arg1);
    let v25 = constructor_imm(ctx, I64, 0x0);
    let v26 = &C::reg_to_gpr_mem(ctx, v25);
    let v27 = &constructor_cmove(ctx, I64, &CC::Z, v26, v17);
    let v28 = constructor_with_flags_reg(ctx, v22, v27);
    let v29 = C::gpr_new(ctx, v28);
    let v30 = &C::gpr_to_gpr_mem_imm(ctx, v29);
    let v31 = constructor_x64_or(ctx, I64, v8, v30);
    let v33 = &C::imm8_to_imm8_gpr(ctx, 0x3F);
    let v34 = constructor_x64_sar(ctx, I64, v5, v33);
    let v36 = RegMemImm::Imm { simm32: 0x40 };
    let v37 = &C::gpr_mem_imm_new(ctx, &v36);
    let v38 = &constructor_x64_test(ctx, &OperandSize::Size64, v37, arg1);
    let v39 = &C::gpr_to_gpr_mem(ctx, v31);
    let v40 = &constructor_cmove(ctx, I64, &CC::Z, v39, v10);
    let v41 = &C::gpr_to_gpr_mem(ctx, v10);
    let v42 = &constructor_cmove(ctx, I64, &CC::Z, v41, v34);
    let v43 = &constructor_consumes_flags_concat(ctx, v40, v42);
    let v44 = constructor_with_flags(ctx, v38, v43);
    // Rule at src/isa/x64/lower.isle line 589.
    return v44;
}

// Generated as internal constructor for term sshr_i8x16_bigger_shift.
pub fn constructor_sshr_i8x16_bigger_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &RegMemImm,
) -> XmmMemImm {
    match arg1 {
        &RegMemImm::Reg { reg: v7 } => {
            let v8 = C::gpr_new(ctx, v7);
            let v9 = RegMemImm::Imm { simm32: 0x8 };
            let v10 = &C::gpr_mem_imm_new(ctx, &v9);
            let v11 = constructor_x64_add(ctx, arg0, v8, v10);
            let v12 = C::gpr_to_reg(ctx, v11);
            let v13 = RegMemImm::Reg { reg: v12 };
            let v14 = &constructor_mov_rmi_to_xmm(ctx, &v13);
            // Rule at src/isa/x64/lower.isle line 657.
            return v14.clone();
        }
        &RegMemImm::Mem { addr: ref v15 } => {
            let v17 = constructor_imm(ctx, arg0, 0x8);
            let v18 = C::gpr_new(ctx, v17);
            let v19 = &C::gpr_mem_imm_new(ctx, arg1);
            let v20 = constructor_x64_add(ctx, arg0, v18, v19);
            let v21 = C::gpr_to_reg(ctx, v20);
            let v22 = RegMemImm::Reg { reg: v21 };
            let v23 = &constructor_mov_rmi_to_xmm(ctx, &v22);
            // Rule at src/isa/x64/lower.isle line 661.
            return v23.clone();
        }
        &RegMemImm::Imm { simm32: v2 } => {
            let v4 = C::u32_add(ctx, v2, 0x8);
            let v5 = RegMemImm::Imm { simm32: v4 };
            let v6 = &C::xmm_mem_imm_new(ctx, &v5);
            // Rule at src/isa/x64/lower.isle line 655.
            return v6.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sshr_i8x16_bigger_shift", "src/isa/x64/lower.isle line 654"
    )
}

// Generated as internal constructor for term lower_bmask.
pub fn constructor_lower_bmask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: ValueRegs,
) -> ValueRegs {
    if arg0 == I128 {
        let v23 = constructor_lower_bmask(ctx, I64, arg1, arg2);
        let v24 = constructor_value_regs_get_gpr(ctx, v23, 0x0);
        let v25 = C::gpr_to_reg(ctx, v24);
        let v26 = C::gpr_to_reg(ctx, v24);
        let v27 = C::value_regs(ctx, v25, v26);
        // Rule at src/isa/x64/lower.isle line 1138.
        return v27;
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        if arg1 == I128 {
            let v8 = constructor_value_regs_get_gpr(ctx, arg2, 0x0);
            let v16 = constructor_value_regs_get_gpr(ctx, arg2, 0x1);
            let v18 = &C::gpr_to_gpr_mem_imm(ctx, v16);
            let v19 = constructor_x64_or(ctx, I64, v8, v18);
            let v20 = C::gpr_to_reg(ctx, v19);
            let v21 = C::value_reg(ctx, v20);
            let v22 = constructor_lower_bmask(ctx, v2, I64, v21);
            // Rule at src/isa/x64/lower.isle line 1130.
            return v22;
        }
        let v4 = C::fits_in_64(ctx, arg1);
        if let Some(v5) = v4 {
            let v8 = constructor_value_regs_get_gpr(ctx, arg2, 0x0);
            let v9 = &constructor_x64_neg_paired(ctx, v5, v8);
            let v10 = &C::gpr_to_gpr_mem_imm(ctx, v8);
            let v11 = &constructor_x64_sbb_paired(ctx, v2, v8, v10);
            let v12 = constructor_with_flags(ctx, v9, v11);
            let v14 = C::value_regs_get(ctx, v12, 0x1);
            let v15 = C::value_reg(ctx, v14);
            // Rule at src/isa/x64/lower.isle line 1119.
            return v15;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_bmask", "src/isa/x64/lower.isle line 1107"
    )
}

// Generated as internal constructor for term i128_not.
pub fn constructor_i128_not<C: Context>(ctx: &mut C, arg0: Value) -> ValueRegs {
    let v1 = C::put_in_regs(ctx, arg0);
    let v3 = constructor_value_regs_get_gpr(ctx, v1, 0x0);
    let v5 = constructor_value_regs_get_gpr(ctx, v1, 0x1);
    let v7 = constructor_x64_not(ctx, I64, v3);
    let v8 = constructor_x64_not(ctx, I64, v5);
    let v9 = constructor_value_gprs(ctx, v7, v8);
    // Rule at src/isa/x64/lower.isle line 1161.
    return v9;
}

// Generated as internal constructor for term all_ones_or_all_zeros.
pub fn constructor_all_ones_or_all_zeros<C: Context>(ctx: &mut C, arg0: Value) -> Option<bool> {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data(ctx, v2);
        match v3 {
            &InstructionData::FloatCompare {
                opcode: ref v16,
                args: ref v17,
                cond: ref v18,
            } => {
                if let &Opcode::Fcmp = v16 {
                    let v10 = C::value_type(ctx, arg0);
                    let v11 = C::multi_lane(ctx, v10);
                    if let Some(v12) = v11 {
                        // Rule at src/isa/x64/lower.isle line 1209.
                        return Some(true);
                    }
                }
            }
            &InstructionData::IntCompare {
                opcode: ref v4,
                args: ref v5,
                cond: ref v6,
            } => {
                if let &Opcode::Icmp = v4 {
                    let v10 = C::value_type(ctx, arg0);
                    let v11 = C::multi_lane(ctx, v10);
                    if let Some(v12) = v11 {
                        // Rule at src/isa/x64/lower.isle line 1208.
                        return Some(true);
                    }
                }
            }
            &InstructionData::UnaryConst {
                opcode: ref v22,
                constant_handle: v23,
            } => {
                if let &Opcode::Vconst = v22 {
                    let v24 = C::vconst_all_ones_or_all_zeros(ctx, v23);
                    if let Some(v25) = v24 {
                        // Rule at src/isa/x64/lower.isle line 1210.
                        return Some(true);
                    }
                }
            }
            _ => {}
        }
    }
    None
}

// Generated as internal constructor for term vec_insert_lane.
pub fn constructor_vec_insert_lane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &RegMem,
    arg3: u8,
) -> Xmm {
    match arg0 {
        I8X16 => {
            let v4 = &C::reg_mem_to_gpr_mem(ctx, arg2);
            let v5 = constructor_x64_pinsrb(ctx, arg1, v4, arg3);
            // Rule at src/isa/x64/lower.isle line 1237.
            return v5;
        }
        I16X8 => {
            let v4 = &C::reg_mem_to_gpr_mem(ctx, arg2);
            let v6 = constructor_x64_pinsrw(ctx, arg1, v4, arg3);
            // Rule at src/isa/x64/lower.isle line 1241.
            return v6;
        }
        I32X4 => {
            let v4 = &C::reg_mem_to_gpr_mem(ctx, arg2);
            let v7 = constructor_x64_pinsrd(ctx, arg1, v4, arg3);
            // Rule at src/isa/x64/lower.isle line 1245.
            return v7;
        }
        I64X2 => {
            let v4 = &C::reg_mem_to_gpr_mem(ctx, arg2);
            let v8 = constructor_x64_pinsrq(ctx, arg1, v4, arg3);
            // Rule at src/isa/x64/lower.isle line 1249.
            return v8;
        }
        F32X4 => {
            let v9 = &C::reg_mem_to_xmm_mem(ctx, arg2);
            let v10 = C::sse_insertps_lane_imm(ctx, arg3);
            let v11 = constructor_x64_insertps(ctx, arg1, v9, v10);
            // Rule at src/isa/x64/lower.isle line 1253.
            return v11;
        }
        F64X2 => {
            match arg3 {
                0x0 => {
                    if let &RegMem::Reg { reg: v12 } = arg2 {
                        let v13 = &constructor_reg_to_xmm_mem(ctx, v12);
                        let v14 = constructor_x64_movsd_regmove(ctx, arg1, v13);
                        // Rule at src/isa/x64/lower.isle line 1275.
                        return v14;
                    }
                    let v9 = &C::reg_mem_to_xmm_mem(ctx, arg2);
                    let v15 = constructor_x64_movsd_load(ctx, v9);
                    let v16 = &C::xmm_to_xmm_mem(ctx, v15);
                    let v17 = constructor_x64_movsd_regmove(ctx, arg1, v16);
                    // Rule at src/isa/x64/lower.isle line 1277.
                    return v17;
                }
                0x1 => {
                    let v9 = &C::reg_mem_to_xmm_mem(ctx, arg2);
                    let v18 = constructor_x64_movlhps(ctx, arg1, v9);
                    // Rule at src/isa/x64/lower.isle line 1285.
                    return v18;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_insert_lane", "src/isa/x64/lower.isle line 1234"
    )
}

// Generated as internal constructor for term cmp_and_choose.
pub fn constructor_cmp_and_choose<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: Value,
    arg3: Value,
) -> ValueRegs {
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = &C::raw_operand_size_of_type(ctx, v2);
        let v7 = C::put_in_reg(ctx, arg2);
        let v8 = C::put_in_reg(ctx, arg3);
        let v9 = &constructor_reg_to_gpr_mem_imm(ctx, v7);
        let v10 = C::gpr_new(ctx, v8);
        let v11 = &constructor_x64_cmp(ctx, v6, v9, v10);
        let v12 = &C::reg_to_gpr_mem(ctx, v8);
        let v13 = C::gpr_new(ctx, v7);
        let v14 = &constructor_cmove(ctx, v2, arg1, v12, v13);
        let v15 = constructor_with_flags_reg(ctx, v11, v14);
        let v16 = C::value_reg(ctx, v15);
        // Rule at src/isa/x64/lower.isle line 1293.
        return v16;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmp_and_choose", "src/isa/x64/lower.isle line 1292"
    )
}

// Generated as internal constructor for term do_clz.
pub fn constructor_do_clz<C: Context>(ctx: &mut C, arg0: Type, arg1: Type, arg2: Gpr) -> Gpr {
    let v5 = constructor_imm_i64(ctx, I64, -0x1);
    let v6 = C::gpr_new(ctx, v5);
    let v7 = constructor_bsr_or_else(ctx, arg0, arg2, v6);
    let v8 = C::gpr_to_reg(ctx, v7);
    let v9 = C::ty_bits_u64(ctx, arg1);
    let v11 = C::u64_sub(ctx, v9, 0x1);
    let v12 = constructor_imm(ctx, arg0, v11);
    let v13 = C::gpr_new(ctx, v12);
    let v14 = &constructor_reg_to_gpr_mem_imm(ctx, v8);
    let v15 = constructor_x64_sub(ctx, arg0, v13, v14);
    // Rule at src/isa/x64/lower.isle line 1718.
    return v15;
}

// Generated as internal constructor for term do_ctz.
pub fn constructor_do_ctz<C: Context>(ctx: &mut C, arg0: Type, arg1: Type, arg2: Gpr) -> Gpr {
    let v4 = C::ty_bits_u64(ctx, arg1);
    let v5 = constructor_imm(ctx, I64, v4);
    let v6 = C::gpr_new(ctx, v5);
    let v7 = constructor_bsf_or_else(ctx, arg0, arg2, v6);
    // Rule at src/isa/x64/lower.isle line 1761.
    return v7;
}

// Generated as internal constructor for term do_popcnt.
pub fn constructor_do_popcnt<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    match arg0 {
        I32 => {
            let v4 = Imm8Reg::Imm8 { imm: 0x1 };
            let v5 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v47 = constructor_x64_shr(ctx, I32, arg1, v5);
            let v49 = constructor_imm(ctx, I32, 0x77777777);
            let v50 = C::gpr_new(ctx, v49);
            let v51 = &C::gpr_to_gpr_mem_imm(ctx, v50);
            let v52 = constructor_x64_and(ctx, I32, v47, v51);
            let v53 = &C::gpr_to_gpr_mem_imm(ctx, v52);
            let v54 = constructor_x64_sub(ctx, I32, arg1, v53);
            let v14 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v55 = constructor_x64_shr(ctx, I32, v52, v14);
            let v56 = &C::gpr_to_gpr_mem_imm(ctx, v50);
            let v57 = constructor_x64_and(ctx, I32, v55, v56);
            let v58 = &C::gpr_to_gpr_mem_imm(ctx, v57);
            let v59 = constructor_x64_sub(ctx, I32, v54, v58);
            let v20 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v60 = constructor_x64_shr(ctx, I32, v57, v20);
            let v61 = &C::gpr_to_gpr_mem_imm(ctx, v50);
            let v62 = constructor_x64_and(ctx, I32, v60, v61);
            let v63 = &C::gpr_to_gpr_mem_imm(ctx, v62);
            let v64 = constructor_x64_sub(ctx, I32, v59, v63);
            let v27 = Imm8Reg::Imm8 { imm: 0x4 };
            let v28 = &C::imm8_reg_to_imm8_gpr(ctx, &v27);
            let v65 = constructor_x64_shr(ctx, I32, v64, v28);
            let v66 = &C::gpr_to_gpr_mem_imm(ctx, v64);
            let v67 = constructor_x64_add(ctx, I32, v65, v66);
            let v69 = RegMemImm::Imm { simm32: 0xF0F0F0F };
            let v70 = &C::gpr_mem_imm_new(ctx, &v69);
            let v71 = constructor_x64_and(ctx, I32, v67, v70);
            let v73 = RegMemImm::Imm { simm32: 0x1010101 };
            let v74 = &C::gpr_mem_imm_new(ctx, &v73);
            let v75 = constructor_x64_mul(ctx, I32, v71, v74);
            let v77 = Imm8Reg::Imm8 { imm: 0x18 };
            let v78 = &C::imm8_reg_to_imm8_gpr(ctx, &v77);
            let v79 = constructor_x64_shr(ctx, I32, v75, v78);
            // Rule at src/isa/x64/lower.isle line 1852.
            return v79;
        }
        I64 => {
            let v4 = Imm8Reg::Imm8 { imm: 0x1 };
            let v5 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v6 = constructor_x64_shr(ctx, I64, arg1, v5);
            let v8 = constructor_imm(ctx, I64, 0x7777777777777777);
            let v9 = C::gpr_new(ctx, v8);
            let v10 = &C::gpr_to_gpr_mem_imm(ctx, v9);
            let v11 = constructor_x64_and(ctx, I64, v6, v10);
            let v12 = &C::gpr_to_gpr_mem_imm(ctx, v11);
            let v13 = constructor_x64_sub(ctx, I64, arg1, v12);
            let v14 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v15 = constructor_x64_shr(ctx, I64, v11, v14);
            let v16 = &C::gpr_to_gpr_mem_imm(ctx, v9);
            let v17 = constructor_x64_and(ctx, I64, v15, v16);
            let v18 = &C::gpr_to_gpr_mem_imm(ctx, v17);
            let v19 = constructor_x64_sub(ctx, I64, v13, v18);
            let v20 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v21 = constructor_x64_shr(ctx, I64, v17, v20);
            let v22 = &C::gpr_to_gpr_mem_imm(ctx, v9);
            let v23 = constructor_x64_and(ctx, I64, v21, v22);
            let v24 = &C::gpr_to_gpr_mem_imm(ctx, v23);
            let v25 = constructor_x64_sub(ctx, I64, v19, v24);
            let v27 = Imm8Reg::Imm8 { imm: 0x4 };
            let v28 = &C::imm8_reg_to_imm8_gpr(ctx, &v27);
            let v29 = constructor_x64_shr(ctx, I64, v25, v28);
            let v30 = &C::gpr_to_gpr_mem_imm(ctx, v25);
            let v31 = constructor_x64_add(ctx, I64, v29, v30);
            let v33 = constructor_imm(ctx, I64, 0xF0F0F0F0F0F0F0F);
            let v34 = C::gpr_new(ctx, v33);
            let v35 = &C::gpr_to_gpr_mem_imm(ctx, v34);
            let v36 = constructor_x64_and(ctx, I64, v31, v35);
            let v38 = constructor_imm(ctx, I64, 0x101010101010101);
            let v39 = C::gpr_new(ctx, v38);
            let v40 = &C::gpr_to_gpr_mem_imm(ctx, v39);
            let v41 = constructor_x64_mul(ctx, I64, v36, v40);
            let v43 = Imm8Reg::Imm8 { imm: 0x38 };
            let v44 = &C::imm8_reg_to_imm8_gpr(ctx, &v43);
            let v45 = constructor_x64_shr(ctx, I64, v41, v44);
            // Rule at src/isa/x64/lower.isle line 1809.
            return v45;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "do_popcnt", "src/isa/x64/lower.isle line 1808"
    )
}

// Generated as internal constructor for term do_bitrev8.
pub fn constructor_do_bitrev8<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v2 = C::ty_mask(ctx, arg0);
    let v4 = C::u64_and(ctx, v2, 0x5555555555555555);
    let v5 = constructor_imm(ctx, arg0, v4);
    let v6 = C::gpr_new(ctx, v5);
    let v7 = &C::gpr_to_gpr_mem_imm(ctx, v6);
    let v8 = constructor_x64_and(ctx, arg0, arg1, v7);
    let v10 = Imm8Reg::Imm8 { imm: 0x1 };
    let v11 = &C::imm8_reg_to_imm8_gpr(ctx, &v10);
    let v12 = constructor_x64_shr(ctx, arg0, arg1, v11);
    let v13 = &C::gpr_to_gpr_mem_imm(ctx, v6);
    let v14 = constructor_x64_and(ctx, arg0, v12, v13);
    let v15 = &C::imm8_reg_to_imm8_gpr(ctx, &v10);
    let v16 = constructor_x64_shl(ctx, arg0, v8, v15);
    let v17 = &C::gpr_to_gpr_mem_imm(ctx, v14);
    let v18 = constructor_x64_or(ctx, arg0, v16, v17);
    let v20 = C::u64_and(ctx, v2, 0x3333333333333333);
    let v21 = constructor_imm(ctx, arg0, v20);
    let v22 = C::gpr_new(ctx, v21);
    let v23 = &C::gpr_to_gpr_mem_imm(ctx, v22);
    let v24 = constructor_x64_and(ctx, arg0, v18, v23);
    let v26 = Imm8Reg::Imm8 { imm: 0x2 };
    let v27 = &C::imm8_reg_to_imm8_gpr(ctx, &v26);
    let v28 = constructor_x64_shr(ctx, arg0, v18, v27);
    let v29 = &C::gpr_to_gpr_mem_imm(ctx, v22);
    let v30 = constructor_x64_and(ctx, arg0, v28, v29);
    let v31 = &C::imm8_reg_to_imm8_gpr(ctx, &v26);
    let v32 = constructor_x64_shl(ctx, arg0, v24, v31);
    let v33 = &C::gpr_to_gpr_mem_imm(ctx, v30);
    let v34 = constructor_x64_or(ctx, arg0, v32, v33);
    let v36 = C::u64_and(ctx, v2, 0xF0F0F0F0F0F0F0F);
    let v37 = constructor_imm(ctx, arg0, v36);
    let v38 = C::gpr_new(ctx, v37);
    let v39 = &C::gpr_to_gpr_mem_imm(ctx, v38);
    let v40 = constructor_x64_and(ctx, arg0, v34, v39);
    let v42 = Imm8Reg::Imm8 { imm: 0x4 };
    let v43 = &C::imm8_reg_to_imm8_gpr(ctx, &v42);
    let v44 = constructor_x64_shr(ctx, arg0, v34, v43);
    let v45 = &C::gpr_to_gpr_mem_imm(ctx, v38);
    let v46 = constructor_x64_and(ctx, arg0, v44, v45);
    let v47 = &C::imm8_reg_to_imm8_gpr(ctx, &v42);
    let v48 = constructor_x64_shl(ctx, arg0, v40, v47);
    let v49 = &C::gpr_to_gpr_mem_imm(ctx, v46);
    let v50 = constructor_x64_or(ctx, arg0, v48, v49);
    // Rule at src/isa/x64/lower.isle line 1941.
    return v50;
}

// Generated as internal constructor for term do_bitrev16.
pub fn constructor_do_bitrev16<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v2 = constructor_do_bitrev8(ctx, arg0, arg1);
    let v3 = C::ty_mask(ctx, arg0);
    let v5 = C::u64_and(ctx, v3, 0xFF00FF00FF00FF);
    let v6 = constructor_imm(ctx, arg0, v5);
    let v7 = C::gpr_new(ctx, v6);
    let v8 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v9 = constructor_x64_and(ctx, arg0, v2, v8);
    let v11 = Imm8Reg::Imm8 { imm: 0x8 };
    let v12 = &C::imm8_reg_to_imm8_gpr(ctx, &v11);
    let v13 = constructor_x64_shr(ctx, arg0, v2, v12);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v15 = constructor_x64_and(ctx, arg0, v13, v14);
    let v16 = &C::imm8_reg_to_imm8_gpr(ctx, &v11);
    let v17 = constructor_x64_shl(ctx, arg0, v9, v16);
    let v18 = &C::gpr_to_gpr_mem_imm(ctx, v15);
    let v19 = constructor_x64_or(ctx, arg0, v17, v18);
    // Rule at src/isa/x64/lower.isle line 1964.
    return v19;
}

// Generated as internal constructor for term do_bitrev32.
pub fn constructor_do_bitrev32<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v2 = constructor_do_bitrev16(ctx, arg0, arg1);
    let v3 = C::ty_mask(ctx, arg0);
    let v5 = C::u64_and(ctx, v3, 0xFFFF0000FFFF);
    let v6 = constructor_imm(ctx, arg0, v5);
    let v7 = C::gpr_new(ctx, v6);
    let v8 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v9 = constructor_x64_and(ctx, arg0, v2, v8);
    let v11 = Imm8Reg::Imm8 { imm: 0x10 };
    let v12 = &C::imm8_reg_to_imm8_gpr(ctx, &v11);
    let v13 = constructor_x64_shr(ctx, arg0, v2, v12);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v15 = constructor_x64_and(ctx, arg0, v13, v14);
    let v16 = &C::imm8_reg_to_imm8_gpr(ctx, &v11);
    let v17 = constructor_x64_shl(ctx, arg0, v9, v16);
    let v18 = &C::gpr_to_gpr_mem_imm(ctx, v15);
    let v19 = constructor_x64_or(ctx, arg0, v17, v18);
    // Rule at src/isa/x64/lower.isle line 1976.
    return v19;
}

// Generated as internal constructor for term do_bitrev64.
pub fn constructor_do_bitrev64<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    if arg0 == I64 {
        let v2 = constructor_do_bitrev32(ctx, arg0, arg1);
        let v4 = constructor_imm(ctx, arg0, 0xFFFFFFFF);
        let v5 = C::gpr_new(ctx, v4);
        let v6 = &C::gpr_to_gpr_mem_imm(ctx, v5);
        let v7 = constructor_x64_and(ctx, arg0, v2, v6);
        let v9 = Imm8Reg::Imm8 { imm: 0x20 };
        let v10 = &C::imm8_reg_to_imm8_gpr(ctx, &v9);
        let v11 = constructor_x64_shr(ctx, arg0, v2, v10);
        let v12 = &C::imm8_reg_to_imm8_gpr(ctx, &v9);
        let v13 = constructor_x64_shl(ctx, arg0, v7, v12);
        let v14 = &C::gpr_to_gpr_mem_imm(ctx, v11);
        let v15 = constructor_x64_or(ctx, arg0, v13, v14);
        // Rule at src/isa/x64/lower.isle line 1988.
        return v15;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "do_bitrev64", "src/isa/x64/lower.isle line 1987"
    )
}

// Generated as internal constructor for term generic_sextend.
pub fn constructor_generic_sextend<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Type,
    arg2: Type,
) -> InstOutput {
    if arg1 == arg2 {
        let v3 = constructor_output_value(ctx, arg0);
        // Rule at src/isa/x64/lower.isle line 2099.
        return v3;
    }
    match arg2 {
        I64 => {
            let v10 = C::fits_in_32(ctx, arg1);
            if let Some(v11) = v10 {
                let v14 = constructor_extend_to_gpr(ctx, arg0, I64, &ExtendKind::Sign);
                let v20 = constructor_output_gpr(ctx, v14);
                // Rule at src/isa/x64/lower.isle line 2119.
                return v20;
            }
        }
        I128 => {
            if arg1 == I64 {
                let v4 = C::put_in_reg(ctx, arg0);
                let v5 = constructor_put_in_gpr(ctx, arg0);
                let v6 = constructor_spread_sign_bit(ctx, v5);
                let v7 = C::gpr_to_reg(ctx, v6);
                let v8 = C::value_regs(ctx, v4, v7);
                let v9 = C::output(ctx, v8);
                // Rule at src/isa/x64/lower.isle line 2109.
                return v9;
            }
            let v10 = C::fits_in_32(ctx, arg1);
            if let Some(v11) = v10 {
                let v14 = constructor_extend_to_gpr(ctx, arg0, I64, &ExtendKind::Sign);
                let v15 = constructor_spread_sign_bit(ctx, v14);
                let v16 = C::gpr_to_reg(ctx, v14);
                let v17 = C::gpr_to_reg(ctx, v15);
                let v18 = C::value_regs(ctx, v16, v17);
                let v19 = C::output(ctx, v18);
                // Rule at src/isa/x64/lower.isle line 2113.
                return v19;
            }
        }
        _ => {}
    }
    let v10 = C::fits_in_32(ctx, arg1);
    if let Some(v11) = v10 {
        let v21 = C::fits_in_32(ctx, arg2);
        if let Some(v22) = v21 {
            let v24 = constructor_extend_to_gpr(ctx, arg0, I32, &ExtendKind::Sign);
            let v25 = constructor_output_gpr(ctx, v24);
            // Rule at src/isa/x64/lower.isle line 2123.
            return v25;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "generic_sextend", "src/isa/x64/lower.isle line 2096"
    )
}

// Generated as internal constructor for term spread_sign_bit.
pub fn constructor_spread_sign_bit<C: Context>(ctx: &mut C, arg0: Gpr) -> Gpr {
    let v3 = Imm8Reg::Imm8 { imm: 0x3F };
    let v4 = &C::imm8_reg_to_imm8_gpr(ctx, &v3);
    let v5 = constructor_x64_sar(ctx, I64, arg0, v4);
    // Rule at src/isa/x64/lower.isle line 2105.
    return v5;
}

// Generated as internal constructor for term fmadd.
pub fn constructor_fmadd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Xmm {
    let v24 = C::def_inst(ctx, arg2);
    if let Some(v25) = v24 {
        let v26 = &C::inst_data(ctx, v25);
        if let &InstructionData::Unary {
            opcode: ref v27,
            arg: v28,
        } = v26
        {
            if let &Opcode::Fneg = v27 {
                let v29 = constructor_fnmadd(ctx, arg0, arg1, v28, arg3);
                // Rule at src/isa/x64/lower.isle line 2501.
                return v29;
            }
        }
    }
    let v18 = C::def_inst(ctx, arg1);
    if let Some(v19) = v18 {
        let v20 = &C::inst_data(ctx, v19);
        if let &InstructionData::Unary {
            opcode: ref v21,
            arg: v22,
        } = v20
        {
            if let &Opcode::Fneg = v21 {
                let v23 = constructor_fnmadd(ctx, arg0, v22, arg2, arg3);
                // Rule at src/isa/x64/lower.isle line 2500.
                return v23;
            }
        }
    }
    let v14 = &C::sinkable_load(ctx, arg2);
    if let Some(v15) = v14 {
        let v4 = constructor_put_in_xmm(ctx, arg1);
        let v11 = constructor_put_in_xmm(ctx, arg3);
        let v16 = &constructor_sink_load_to_xmm_mem(ctx, v15);
        let v17 = constructor_x64_vfmadd132(ctx, arg0, v4, v11, v16);
        // Rule at src/isa/x64/lower.isle line 2496.
        return v17;
    }
    let v8 = &C::sinkable_load(ctx, arg1);
    if let Some(v9) = v8 {
        let v10 = constructor_put_in_xmm(ctx, arg2);
        let v11 = constructor_put_in_xmm(ctx, arg3);
        let v12 = &constructor_sink_load_to_xmm_mem(ctx, v9);
        let v13 = constructor_x64_vfmadd132(ctx, arg0, v10, v11, v12);
        // Rule at src/isa/x64/lower.isle line 2495.
        return v13;
    }
    let v4 = constructor_put_in_xmm(ctx, arg1);
    let v5 = constructor_put_in_xmm(ctx, arg2);
    let v6 = &C::put_in_xmm_mem(ctx, arg3);
    let v7 = constructor_x64_vfmadd213(ctx, arg0, v4, v5, v6);
    // Rule at src/isa/x64/lower.isle line 2490.
    return v7;
}

// Generated as internal constructor for term fnmadd.
pub fn constructor_fnmadd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Xmm {
    let v24 = C::def_inst(ctx, arg2);
    if let Some(v25) = v24 {
        let v26 = &C::inst_data(ctx, v25);
        if let &InstructionData::Unary {
            opcode: ref v27,
            arg: v28,
        } = v26
        {
            if let &Opcode::Fneg = v27 {
                let v29 = constructor_fmadd(ctx, arg0, arg1, v28, arg3);
                // Rule at src/isa/x64/lower.isle line 2509.
                return v29;
            }
        }
    }
    let v18 = C::def_inst(ctx, arg1);
    if let Some(v19) = v18 {
        let v20 = &C::inst_data(ctx, v19);
        if let &InstructionData::Unary {
            opcode: ref v21,
            arg: v22,
        } = v20
        {
            if let &Opcode::Fneg = v21 {
                let v23 = constructor_fmadd(ctx, arg0, v22, arg2, arg3);
                // Rule at src/isa/x64/lower.isle line 2508.
                return v23;
            }
        }
    }
    let v14 = &C::sinkable_load(ctx, arg2);
    if let Some(v15) = v14 {
        let v4 = constructor_put_in_xmm(ctx, arg1);
        let v11 = constructor_put_in_xmm(ctx, arg3);
        let v16 = &constructor_sink_load_to_xmm_mem(ctx, v15);
        let v17 = constructor_x64_vfnmadd132(ctx, arg0, v4, v11, v16);
        // Rule at src/isa/x64/lower.isle line 2505.
        return v17;
    }
    let v8 = &C::sinkable_load(ctx, arg1);
    if let Some(v9) = v8 {
        let v10 = constructor_put_in_xmm(ctx, arg2);
        let v11 = constructor_put_in_xmm(ctx, arg3);
        let v12 = &constructor_sink_load_to_xmm_mem(ctx, v9);
        let v13 = constructor_x64_vfnmadd132(ctx, arg0, v10, v11, v12);
        // Rule at src/isa/x64/lower.isle line 2504.
        return v13;
    }
    let v4 = constructor_put_in_xmm(ctx, arg1);
    let v5 = constructor_put_in_xmm(ctx, arg2);
    let v6 = &C::put_in_xmm_mem(ctx, arg3);
    let v7 = constructor_x64_vfnmadd213(ctx, arg0, v4, v5, v6);
    // Rule at src/isa/x64/lower.isle line 2503.
    return v7;
}

// Generated as internal constructor for term cmp_zero_i128.
pub fn constructor_cmp_zero_i128<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: ValueRegs,
) -> IcmpCondResult {
    let v1 = &C::cc_nz_or_z(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = constructor_value_regs_get_gpr(ctx, arg1, 0x0);
        let v7 = constructor_value_regs_get_gpr(ctx, arg1, 0x1);
        let v10 = RegMemImm::Imm { simm32: 0x0 };
        let v11 = &C::gpr_mem_imm_new(ctx, &v10);
        let v12 = &constructor_x64_cmp(ctx, &OperandSize::Size64, v11, v5);
        let v14 = &constructor_x64_setcc(ctx, &CC::Z);
        let v15 = constructor_with_flags_reg(ctx, v12, v14);
        let v16 = C::gpr_new(ctx, v15);
        let v17 = &C::gpr_mem_imm_new(ctx, &v10);
        let v18 = &constructor_x64_cmp(ctx, &OperandSize::Size64, v17, v7);
        let v19 = &constructor_x64_setcc(ctx, &CC::Z);
        let v20 = constructor_with_flags_reg(ctx, v18, v19);
        let v21 = C::gpr_new(ctx, v20);
        let v23 = &C::gpr_to_gpr_mem_imm(ctx, v16);
        let v24 = &constructor_x64_test(ctx, &OperandSize::Size8, v23, v21);
        let v25 = &constructor_icmp_cond_result(ctx, v24, v2);
        // Rule at src/isa/x64/lower.isle line 2899.
        return v25.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmp_zero_i128", "src/isa/x64/lower.isle line 2898"
    )
}

// Generated as internal constructor for term cmp_zero_int_bool_ref.
pub fn constructor_cmp_zero_int_bool_ref<C: Context>(ctx: &mut C, arg0: Value) -> ProducesFlags {
    let v1 = C::value_type(ctx, arg0);
    let v2 = &C::raw_operand_size_of_type(ctx, v1);
    let v3 = constructor_put_in_gpr(ctx, arg0);
    let v4 = &C::gpr_to_gpr_mem_imm(ctx, v3);
    let v5 = &constructor_x64_test(ctx, v2, v4, v3);
    // Rule at src/isa/x64/lower.isle line 2910.
    return v5.clone();
}

// Generated as internal constructor for term lower_splat_32x4.
pub fn constructor_lower_splat_32x4<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Xmm {
    let v2 = &C::put_in_reg_mem(ctx, arg1);
    let v3 = constructor_xmm_uninit_value(ctx);
    let v5 = constructor_vec_insert_lane(ctx, arg0, v3, v2, 0x0);
    let v6 = &C::xmm_to_xmm_mem(ctx, v5);
    let v7 = constructor_x64_pshufd(ctx, v6, 0x0);
    // Rule at src/isa/x64/lower.isle line 3638.
    return v7;
}

// Generated as internal constructor for term lower_splat_64x2.
pub fn constructor_lower_splat_64x2<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Xmm {
    let v2 = C::put_in_reg(ctx, arg1);
    let v4 = constructor_xmm_uninit_value(ctx);
    let v3 = RegMem::Reg { reg: v2 };
    let v6 = constructor_vec_insert_lane(ctx, arg0, v4, &v3, 0x0);
    let v8 = constructor_vec_insert_lane(ctx, arg0, v6, &v3, 0x1);
    // Rule at src/isa/x64/lower.isle line 3651.
    return v8;
}

// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src/prelude.isle
// - src/prelude_lower.isle
// - src/isa/s390x/inst.isle
// - src/isa/s390x/lower.isle
// - /Users/afiune/github/go-sdk/hackathon-wasm/rust/wasmtime_hello/target/debug/build/cranelift-codegen-f5cf6ae366df2f83/out/clif_lower.isle

use super::*; // Pulls in all external types.
use std::marker::PhantomData;

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unit(&mut self) -> Unit;
    fn value_type(&mut self, arg0: Value) -> Type;
    fn u32_add(&mut self, arg0: u32, arg1: u32) -> u32;
    fn s32_add_fallible(&mut self, arg0: u32, arg1: u32) -> Option<u32>;
    fn u32_nonnegative(&mut self, arg0: u32) -> Option<u32>;
    fn offset32(&mut self, arg0: Offset32) -> u32;
    fn u32_lteq(&mut self, arg0: u32, arg1: u32) -> Option<Unit>;
    fn u8_lteq(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_lt(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn simm32(&mut self, arg0: Imm64) -> Option<u32>;
    fn uimm8(&mut self, arg0: Imm64) -> Option<u8>;
    fn u8_and(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_as_u32(&mut self, arg0: u8) -> u32;
    fn u8_as_u64(&mut self, arg0: u8) -> u64;
    fn u16_as_u64(&mut self, arg0: u16) -> u64;
    fn u32_as_u64(&mut self, arg0: u32) -> u64;
    fn i64_as_u64(&mut self, arg0: i64) -> u64;
    fn u64_add(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sub(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_mul(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sdiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_udiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_and(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_or(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_xor(&mut self, arg0: u64, arg1: u64) -> u64;
    fn imm64_shl(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_ushr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_sshr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn u64_not(&mut self, arg0: u64) -> u64;
    fn u64_eq(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_le(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_lt(&mut self, arg0: u64, arg1: u64) -> bool;
    fn i64_sextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> i64;
    fn u64_uextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> u64;
    fn imm64_icmp(&mut self, arg0: Type, arg1: &IntCC, arg2: Imm64, arg3: Imm64) -> Imm64;
    fn u64_is_zero(&mut self, arg0: u64) -> bool;
    fn u64_is_odd(&mut self, arg0: u64) -> bool;
    fn ty_bits(&mut self, arg0: Type) -> u8;
    fn ty_bits_u16(&mut self, arg0: Type) -> u16;
    fn ty_bits_u64(&mut self, arg0: Type) -> u64;
    fn ty_mask(&mut self, arg0: Type) -> u64;
    fn ty_bytes(&mut self, arg0: Type) -> u16;
    fn lane_type(&mut self, arg0: Type) -> Type;
    fn mem_flags_trusted(&mut self) -> MemFlags;
    fn intcc_reverse(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_inverse(&mut self, arg0: &IntCC) -> IntCC;
    fn floatcc_reverse(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_inverse(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_unordered(&mut self, arg0: &FloatCC) -> bool;
    fn fits_in_16(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn lane_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32_or_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_8_or_16(&mut self, arg0: Type) -> Option<Type>;
    fn int_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_float_or_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_not_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_ctor(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128_int(&mut self, arg0: Type) -> Option<Type>;
    fn not_vec32x2(&mut self, arg0: Type) -> Option<Type>;
    fn not_i64x2(&mut self, arg0: Type) -> Option<()>;
    fn u8_from_uimm8(&mut self, arg0: Uimm8) -> u8;
    fn u64_from_bool(&mut self, arg0: bool) -> u64;
    fn u64_from_imm64(&mut self, arg0: Imm64) -> u64;
    fn nonzero_u64_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64_power_of_two(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64(&mut self, arg0: u64) -> Imm64;
    fn imm64_masked(&mut self, arg0: Type, arg1: u64) -> Imm64;
    fn u64_from_ieee32(&mut self, arg0: Ieee32) -> u64;
    fn u64_from_ieee64(&mut self, arg0: Ieee64) -> u64;
    fn multi_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_int_lane(&mut self, arg0: Type) -> Option<u32>;
    fn dynamic_fp_lane(&mut self, arg0: Type) -> Option<u32>;
    fn ty_dyn64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn128_int(&mut self, arg0: Type) -> Option<Type>;
    fn offset32_to_u32(&mut self, arg0: Offset32) -> u32;
    fn intcc_unsigned(&mut self, arg0: &IntCC) -> IntCC;
    fn signed_cond_code(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn trap_code_division_by_zero(&mut self) -> TrapCode;
    fn trap_code_integer_overflow(&mut self) -> TrapCode;
    fn trap_code_bad_conversion_to_integer(&mut self) -> TrapCode;
    fn range(&mut self, arg0: usize, arg1: usize) -> Range;
    fn range_view(&mut self, arg0: Range) -> RangeView;
    fn value_reg(&mut self, arg0: Reg) -> ValueRegs;
    fn value_regs(&mut self, arg0: Reg, arg1: Reg) -> ValueRegs;
    fn value_regs_invalid(&mut self) -> ValueRegs;
    fn output_none(&mut self) -> InstOutput;
    fn output(&mut self, arg0: ValueRegs) -> InstOutput;
    fn output_pair(&mut self, arg0: ValueRegs, arg1: ValueRegs) -> InstOutput;
    fn output_builder_new(&mut self) -> InstOutputBuilder;
    fn output_builder_push(&mut self, arg0: &InstOutputBuilder, arg1: ValueRegs) -> Unit;
    fn output_builder_finish(&mut self, arg0: &InstOutputBuilder) -> InstOutput;
    fn temp_writable_reg(&mut self, arg0: Type) -> WritableReg;
    fn is_valid_reg(&mut self, arg0: Reg) -> bool;
    fn invalid_reg(&mut self) -> Reg;
    fn mark_value_used(&mut self, arg0: Value) -> Unit;
    fn put_in_reg(&mut self, arg0: Value) -> Reg;
    fn put_in_regs(&mut self, arg0: Value) -> ValueRegs;
    fn ensure_in_vreg(&mut self, arg0: Reg, arg1: Type) -> Reg;
    fn value_regs_get(&mut self, arg0: ValueRegs, arg1: usize) -> Reg;
    fn value_regs_len(&mut self, arg0: ValueRegs) -> usize;
    fn preg_to_reg(&mut self, arg0: PReg) -> Reg;
    fn value_list_slice(&mut self, arg0: ValueList) -> ValueSlice;
    fn value_slice_empty(&mut self, arg0: ValueSlice) -> Option<()>;
    fn value_slice_unwrap(&mut self, arg0: ValueSlice) -> Option<(Value, ValueSlice)>;
    fn value_slice_len(&mut self, arg0: ValueSlice) -> usize;
    fn value_slice_get(&mut self, arg0: ValueSlice, arg1: usize) -> Value;
    fn writable_reg_to_reg(&mut self, arg0: WritableReg) -> Reg;
    fn inst_results(&mut self, arg0: Inst) -> ValueSlice;
    fn first_result(&mut self, arg0: Inst) -> Option<Value>;
    fn inst_data(&mut self, arg0: Inst) -> InstructionData;
    fn def_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn zero_value(&mut self, arg0: Value) -> Option<Value>;
    fn is_sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn maybe_uextend(&mut self, arg0: Value) -> Option<Value>;
    fn emit(&mut self, arg0: &MInst) -> Unit;
    fn sink_inst(&mut self, arg0: Inst) -> Unit;
    fn emit_u64_le_const(&mut self, arg0: u64) -> VCodeConstant;
    fn emit_u128_le_const(&mut self, arg0: u128) -> VCodeConstant;
    fn const_to_vconst(&mut self, arg0: Constant) -> VCodeConstant;
    fn avoid_div_traps(&mut self, arg0: Type) -> Option<()>;
    fn tls_model(&mut self, arg0: Type) -> TlsModel;
    fn tls_model_is_elf_gd(&mut self) -> Option<Unit>;
    fn tls_model_is_macho(&mut self) -> Option<Unit>;
    fn tls_model_is_coff(&mut self) -> Option<Unit>;
    fn preserve_frame_pointers(&mut self) -> Option<Unit>;
    fn box_external_name(&mut self, arg0: ExternalName) -> BoxExternalName;
    fn func_ref_data(&mut self, arg0: FuncRef) -> (SigRef, ExternalName, RelocDistance);
    fn symbol_value_data(
        &mut self,
        arg0: GlobalValue,
    ) -> Option<(ExternalName, RelocDistance, i64)>;
    fn reloc_distance_near(&mut self, arg0: RelocDistance) -> Option<()>;
    fn vec_mask_from_immediate(&mut self, arg0: Immediate) -> Option<VecMask>;
    fn u128_from_immediate(&mut self, arg0: Immediate) -> Option<u128>;
    fn u128_from_constant(&mut self, arg0: Constant) -> Option<u128>;
    fn u64_from_constant(&mut self, arg0: Constant) -> Option<u64>;
    fn only_writable_reg(&mut self, arg0: WritableValueRegs) -> Option<WritableReg>;
    fn writable_regs_get(&mut self, arg0: WritableValueRegs, arg1: usize) -> WritableReg;
    fn abi_num_args(&mut self, arg0: Sig) -> usize;
    fn abi_get_arg(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_num_rets(&mut self, arg0: Sig) -> usize;
    fn abi_get_ret(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_ret_arg(&mut self, arg0: Sig) -> Option<ABIArg>;
    fn abi_no_ret_arg(&mut self, arg0: Sig) -> Option<()>;
    fn abi_sized_stack_arg_space(&mut self, arg0: Sig) -> i64;
    fn abi_sized_stack_ret_space(&mut self, arg0: Sig) -> i64;
    fn abi_stackslot_addr(&mut self, arg0: WritableReg, arg1: StackSlot, arg2: Offset32) -> MInst;
    fn abi_dynamic_stackslot_addr(&mut self, arg0: WritableReg, arg1: DynamicStackSlot) -> MInst;
    fn abi_arg_only_slot(&mut self, arg0: &ABIArg) -> Option<ABIArgSlot>;
    fn abi_arg_struct_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, u64)>;
    fn abi_arg_implicit_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, Type)>;
    fn real_reg_to_reg(&mut self, arg0: RealReg) -> Reg;
    fn real_reg_to_writable_reg(&mut self, arg0: RealReg) -> WritableReg;
    fn gen_move(&mut self, arg0: Type, arg1: WritableReg, arg2: Reg) -> MInst;
    fn gen_return(&mut self, arg0: ValueSlice) -> Unit;
    fn box_symbol_reloc(&mut self, arg0: &SymbolReloc) -> BoxSymbolReloc;
    fn mie2_enabled(&mut self, arg0: Type) -> Option<()>;
    fn mie2_disabled(&mut self, arg0: Type) -> Option<()>;
    fn vxrs_ext2_enabled(&mut self, arg0: Type) -> Option<()>;
    fn vxrs_ext2_disabled(&mut self, arg0: Type) -> Option<()>;
    fn allow_div_traps(&mut self, arg0: Type) -> Option<()>;
    fn lane_order(&mut self) -> LaneOrder;
    fn be_lane_idx(&mut self, arg0: Type, arg1: u8) -> u8;
    fn be_vec_const(&mut self, arg0: Type, arg1: u128) -> u128;
    fn writable_gpr(&mut self, arg0: u8) -> WritableReg;
    fn zero_reg(&mut self) -> Reg;
    fn gpr32_ty(&mut self, arg0: Type) -> Option<Type>;
    fn gpr64_ty(&mut self, arg0: Type) -> Option<Type>;
    fn vr128_ty(&mut self, arg0: Type) -> Option<Type>;
    fn uimm32shifted(&mut self, arg0: u32, arg1: u8) -> UImm32Shifted;
    fn uimm16shifted(&mut self, arg0: u16, arg1: u8) -> UImm16Shifted;
    fn i64_nonequal(&mut self, arg0: i64, arg1: i64) -> Option<i64>;
    fn u8_as_u16(&mut self, arg0: u8) -> u16;
    fn u64_as_u32(&mut self, arg0: u64) -> u32;
    fn u64_as_i16(&mut self, arg0: u64) -> i16;
    fn u64_pair_split(&mut self, arg0: u128) -> (u64, u64);
    fn u64_pair_concat(&mut self, arg0: u64, arg1: u64) -> u128;
    fn u32_pair_split(&mut self, arg0: u64) -> (u32, u32);
    fn u32_pair_concat(&mut self, arg0: u32, arg1: u32) -> u64;
    fn u16_pair_split(&mut self, arg0: u32) -> (u16, u16);
    fn u16_pair_concat(&mut self, arg0: u16, arg1: u16) -> u32;
    fn u8_pair_split(&mut self, arg0: u16) -> (u8, u8);
    fn u8_pair_concat(&mut self, arg0: u8, arg1: u8) -> u16;
    fn lane_byte_mask(&mut self, arg0: Type, arg1: u8) -> u16;
    fn shuffle_mask_from_u128(&mut self, arg0: u128) -> (u128, u16);
    fn u64_nonzero_hipart(&mut self, arg0: u64) -> Option<u64>;
    fn u64_nonzero_lopart(&mut self, arg0: u64) -> Option<u64>;
    fn i32_from_u64(&mut self, arg0: u64) -> Option<i32>;
    fn i16_from_u64(&mut self, arg0: u64) -> Option<i16>;
    fn i16_from_u32(&mut self, arg0: u32) -> Option<i16>;
    fn uimm32shifted_from_u64(&mut self, arg0: u64) -> Option<UImm32Shifted>;
    fn uimm16shifted_from_u64(&mut self, arg0: u64) -> Option<UImm16Shifted>;
    fn u64_from_value(&mut self, arg0: Value) -> Option<u64>;
    fn u32_from_value(&mut self, arg0: Value) -> Option<u32>;
    fn u8_from_value(&mut self, arg0: Value) -> Option<u8>;
    fn u64_from_signed_value(&mut self, arg0: Value) -> Option<u64>;
    fn u64_from_inverted_value(&mut self, arg0: Value) -> Option<u64>;
    fn i64_from_value(&mut self, arg0: Value) -> Option<i64>;
    fn i32_from_value(&mut self, arg0: Value) -> Option<i32>;
    fn i16_from_value(&mut self, arg0: Value) -> Option<i16>;
    fn i16_from_swapped_value(&mut self, arg0: Value) -> Option<i16>;
    fn i64_from_negated_value(&mut self, arg0: Value) -> Option<i64>;
    fn i32_from_negated_value(&mut self, arg0: Value) -> Option<i32>;
    fn i16_from_negated_value(&mut self, arg0: Value) -> Option<i16>;
    fn uimm16shifted_from_value(&mut self, arg0: Value) -> Option<UImm16Shifted>;
    fn uimm32shifted_from_value(&mut self, arg0: Value) -> Option<UImm32Shifted>;
    fn uimm16shifted_from_inverted_value(&mut self, arg0: Value) -> Option<UImm16Shifted>;
    fn uimm32shifted_from_inverted_value(&mut self, arg0: Value) -> Option<UImm32Shifted>;
    fn len_minus_one(&mut self, arg0: u64) -> Option<u8>;
    fn mask_amt_imm(&mut self, arg0: Type, arg1: i64) -> u8;
    fn mask_as_cond(&mut self, arg0: u8) -> Cond;
    fn intcc_as_cond(&mut self, arg0: &IntCC) -> Cond;
    fn floatcc_as_cond(&mut self, arg0: &FloatCC) -> Cond;
    fn invert_cond(&mut self, arg0: &Cond) -> Cond;
    fn signed(&mut self, arg0: &IntCC) -> Option<()>;
    fn unsigned(&mut self, arg0: &IntCC) -> Option<()>;
    fn vec_length_minus1(&mut self, arg0: &VecMachLabel) -> u32;
    fn vec_element(&mut self, arg0: &VecMachLabel, arg1: u8) -> MachLabel;
    fn zero_offset(&mut self) -> Offset32;
    fn i64_from_offset(&mut self, arg0: Offset32) -> i64;
    fn littleendian(&mut self, arg0: MemFlags) -> Option<()>;
    fn bigendian(&mut self, arg0: MemFlags) -> Option<()>;
    fn memflags_trusted(&mut self) -> MemFlags;
    fn memarg_flags(&mut self, arg0: &MemArg) -> MemFlags;
    fn memarg_reg_plus_reg(&mut self, arg0: Reg, arg1: Reg, arg2: u8, arg3: MemFlags) -> MemArg;
    fn memarg_reg_plus_off(&mut self, arg0: Reg, arg1: i64, arg2: u8, arg3: MemFlags) -> MemArg;
    fn memarg_symbol(&mut self, arg0: ExternalName, arg1: i32, arg2: MemFlags) -> MemArg;
    fn memarg_got(&mut self) -> MemArg;
    fn memarg_stack_off(&mut self, arg0: i64, arg1: i64) -> MemArg;
    fn memarg_initial_sp_offset(&mut self, arg0: i64) -> MemArg;
    fn memarg_symbol_offset_sum(&mut self, arg0: i64, arg1: i64) -> Option<i32>;
    fn memarg_pair_from_memarg(&mut self, arg0: &MemArg) -> Option<MemArgPair>;
    fn memarg_pair_from_reg(&mut self, arg0: Reg, arg1: MemFlags) -> MemArgPair;
    fn sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn writable_regpair(&mut self, arg0: WritableReg, arg1: WritableReg) -> WritableRegPair;
    fn writable_regpair_hi(&mut self, arg0: WritableRegPair) -> WritableReg;
    fn writable_regpair_lo(&mut self, arg0: WritableRegPair) -> WritableReg;
    fn regpair(&mut self, arg0: Reg, arg1: Reg) -> RegPair;
    fn regpair_hi(&mut self, arg0: RegPair) -> Reg;
    fn regpair_lo(&mut self, arg0: RegPair) -> Reg;
    fn inst_builder_new(&mut self) -> VecMInstBuilder;
    fn inst_builder_push(&mut self, arg0: &VecMInstBuilder, arg1: &MInst) -> Unit;
    fn inst_builder_finish(&mut self, arg0: &VecMInstBuilder) -> VecMInst;
    fn real_reg(&mut self, arg0: WritableReg) -> Option<WritableReg>;
    fn same_reg(&mut self, arg0: WritableReg, arg1: Reg) -> Option<Reg>;
    fn preg_stack(&mut self) -> PReg;
    fn preg_gpr_0(&mut self) -> PReg;
    fn args_builder_new(&mut self) -> CallArgListBuilder;
    fn args_builder_push(&mut self, arg0: &CallArgListBuilder, arg1: Reg, arg2: RealReg) -> Unit;
    fn args_builder_finish(&mut self, arg0: &CallArgListBuilder) -> CallArgList;
    fn defs_init(&mut self, arg0: Sig) -> CallRetList;
    fn defs_lookup(&mut self, arg0: &CallRetList, arg1: RealReg) -> Reg;
    fn abi_sig(&mut self, arg0: SigRef) -> Sig;
    fn abi_first_ret(&mut self, arg0: SigRef, arg1: Sig) -> usize;
    fn abi_call_info(
        &mut self,
        arg0: Sig,
        arg1: ExternalName,
        arg2: &CallArgList,
        arg3: &CallRetList,
        arg4: &Opcode,
    ) -> BoxCallInfo;
    fn abi_call_ind_info(
        &mut self,
        arg0: Sig,
        arg1: Reg,
        arg2: &CallArgList,
        arg3: &CallRetList,
        arg4: &Opcode,
    ) -> BoxCallIndInfo;
    fn abi_accumulate_outgoing_args_size(&mut self, arg0: Sig) -> Unit;
    fn abi_lane_order(&mut self, arg0: Sig) -> LaneOrder;
    fn lib_call_info_memcpy(&mut self, arg0: Reg, arg1: Reg, arg2: Reg) -> LibCallInfo;
    fn lib_call_info_tls_get_offset(
        &mut self,
        arg0: WritableReg,
        arg1: Reg,
        arg2: Reg,
        arg3: &SymbolReloc,
    ) -> LibCallInfo;
    fn lib_call_info(&mut self, arg0: &LibCallInfo) -> BoxCallInfo;
    fn lib_accumulate_outgoing_args_size(&mut self, arg0: &LibCallInfo) -> Unit;
    fn fcvt_to_uint_ub32(&mut self, arg0: u8) -> u64;
    fn fcvt_to_uint_lb32(&mut self) -> u64;
    fn fcvt_to_uint_ub64(&mut self, arg0: u8) -> u64;
    fn fcvt_to_uint_lb64(&mut self) -> u64;
    fn fcvt_to_sint_ub32(&mut self, arg0: u8) -> u64;
    fn fcvt_to_sint_lb32(&mut self, arg0: u8) -> u64;
    fn fcvt_to_sint_ub64(&mut self, arg0: u8) -> u64;
    fn fcvt_to_sint_lb64(&mut self, arg0: u8) -> u64;
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn unpack_block_array_2(&mut self, arg0: &BlockArray2) -> (BlockCall, BlockCall);
    fn pack_block_array_2(&mut self, arg0: BlockCall, arg1: BlockCall) -> BlockArray2;
}

pub trait ContextIter {
    type Context;
    type Output;
    fn next(&mut self, ctx: &mut Self::Context) -> Option<Self::Output>;
}

pub struct ContextIterWrapper<Item, I: Iterator<Item = Item>, C: Context> {
    iter: I,
    _ctx: PhantomData<C>,
}
impl<Item, I: Iterator<Item = Item>, C: Context> From<I> for ContextIterWrapper<Item, I, C> {
    fn from(iter: I) -> Self {
        Self {
            iter,
            _ctx: PhantomData,
        }
    }
}
impl<Item, I: Iterator<Item = Item>, C: Context> ContextIter for ContextIterWrapper<Item, I, C> {
    type Context = C;
    type Output = Item;
    fn next(&mut self, _ctx: &mut Self::Context) -> Option<Self::Output> {
        self.iter.next()
    }
}

/// Internal type SideEffectNoResult: defined at src/prelude_lower.isle line 282.
#[derive(Clone, Debug)]
pub enum SideEffectNoResult {
    Inst {
        inst: MInst,
    },
    Inst2 {
        inst1: MInst,
        inst2: MInst,
    },
    Inst3 {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
    },
}

/// Internal type ProducesFlags: defined at src/prelude_lower.isle line 324.
#[derive(Clone, Debug)]
pub enum ProducesFlags {
    AlreadyExistingFlags,
    ProducesFlagsSideEffect { inst: MInst },
    ProducesFlagsTwiceSideEffect { inst1: MInst, inst2: MInst },
    ProducesFlagsReturnsReg { inst: MInst, result: Reg },
    ProducesFlagsReturnsResultWithConsumer { inst: MInst, result: Reg },
}

/// Internal type ConsumesFlags: defined at src/prelude_lower.isle line 346.
#[derive(Clone, Debug)]
pub enum ConsumesFlags {
    ConsumesFlagsSideEffect {
        inst: MInst,
    },
    ConsumesFlagsSideEffect2 {
        inst1: MInst,
        inst2: MInst,
    },
    ConsumesFlagsReturnsResultWithProducer {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsReturnsReg {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsTwiceReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        result: ValueRegs,
    },
    ConsumesFlagsFourTimesReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
        inst4: MInst,
        result: ValueRegs,
    },
}

/// Internal type MInst: defined at src/isa/s390x/inst.isle line 2.
#[derive(Clone, Debug)]
pub enum MInst {
    Nop0,
    Nop2,
    AluRRR {
        alu_op: ALUOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    AluRRSImm16 {
        alu_op: ALUOp,
        rd: WritableReg,
        rn: Reg,
        imm: i16,
    },
    AluRR {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        rm: Reg,
    },
    AluRX {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        mem: MemArg,
    },
    AluRSImm16 {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        imm: i16,
    },
    AluRSImm32 {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        imm: i32,
    },
    AluRUImm32 {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        imm: u32,
    },
    AluRUImm16Shifted {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        imm: UImm16Shifted,
    },
    AluRUImm32Shifted {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        imm: UImm32Shifted,
    },
    SMulWide {
        rd: WritableRegPair,
        rn: Reg,
        rm: Reg,
    },
    UMulWide {
        rd: WritableRegPair,
        ri: Reg,
        rn: Reg,
    },
    SDivMod32 {
        rd: WritableRegPair,
        ri: Reg,
        rn: Reg,
    },
    SDivMod64 {
        rd: WritableRegPair,
        ri: Reg,
        rn: Reg,
    },
    UDivMod32 {
        rd: WritableRegPair,
        ri: RegPair,
        rn: Reg,
    },
    UDivMod64 {
        rd: WritableRegPair,
        ri: RegPair,
        rn: Reg,
    },
    Flogr {
        rd: WritableRegPair,
        rn: Reg,
    },
    ShiftRR {
        shift_op: ShiftOp,
        rd: WritableReg,
        rn: Reg,
        shift_imm: u8,
        shift_reg: Reg,
    },
    RxSBG {
        op: RxSBGOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        start_bit: u8,
        end_bit: u8,
        rotate_amt: i8,
    },
    RxSBGTest {
        op: RxSBGOp,
        rd: Reg,
        rn: Reg,
        start_bit: u8,
        end_bit: u8,
        rotate_amt: i8,
    },
    UnaryRR {
        op: UnaryOp,
        rd: WritableReg,
        rn: Reg,
    },
    CmpRR {
        op: CmpOp,
        rn: Reg,
        rm: Reg,
    },
    CmpRX {
        op: CmpOp,
        rn: Reg,
        mem: MemArg,
    },
    CmpRSImm16 {
        op: CmpOp,
        rn: Reg,
        imm: i16,
    },
    CmpRSImm32 {
        op: CmpOp,
        rn: Reg,
        imm: i32,
    },
    CmpRUImm32 {
        op: CmpOp,
        rn: Reg,
        imm: u32,
    },
    CmpTrapRR {
        op: CmpOp,
        rn: Reg,
        rm: Reg,
        cond: Cond,
        trap_code: TrapCode,
    },
    CmpTrapRSImm16 {
        op: CmpOp,
        rn: Reg,
        imm: i16,
        cond: Cond,
        trap_code: TrapCode,
    },
    CmpTrapRUImm16 {
        op: CmpOp,
        rn: Reg,
        imm: u16,
        cond: Cond,
        trap_code: TrapCode,
    },
    AtomicRmw {
        alu_op: ALUOp,
        rd: WritableReg,
        rn: Reg,
        mem: MemArg,
    },
    AtomicCas32 {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        mem: MemArg,
    },
    AtomicCas64 {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        mem: MemArg,
    },
    Fence,
    Load32 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load32ZExt8 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load32SExt8 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load32ZExt16 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load32SExt16 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64ZExt8 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64SExt8 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64ZExt16 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64SExt16 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64ZExt32 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64SExt32 {
        rd: WritableReg,
        mem: MemArg,
    },
    LoadRev16 {
        rd: WritableReg,
        mem: MemArg,
    },
    LoadRev32 {
        rd: WritableReg,
        mem: MemArg,
    },
    LoadRev64 {
        rd: WritableReg,
        mem: MemArg,
    },
    Store8 {
        rd: Reg,
        mem: MemArg,
    },
    Store16 {
        rd: Reg,
        mem: MemArg,
    },
    Store32 {
        rd: Reg,
        mem: MemArg,
    },
    Store64 {
        rd: Reg,
        mem: MemArg,
    },
    StoreImm8 {
        imm: u8,
        mem: MemArg,
    },
    StoreImm16 {
        imm: i16,
        mem: MemArg,
    },
    StoreImm32SExt16 {
        imm: i16,
        mem: MemArg,
    },
    StoreImm64SExt16 {
        imm: i16,
        mem: MemArg,
    },
    StoreRev16 {
        rd: Reg,
        mem: MemArg,
    },
    StoreRev32 {
        rd: Reg,
        mem: MemArg,
    },
    StoreRev64 {
        rd: Reg,
        mem: MemArg,
    },
    Mvc {
        dst: MemArgPair,
        src: MemArgPair,
        len_minus_one: u8,
    },
    LoadMultiple64 {
        rt: WritableReg,
        rt2: WritableReg,
        mem: MemArg,
    },
    StoreMultiple64 {
        rt: Reg,
        rt2: Reg,
        mem: MemArg,
    },
    Mov32 {
        rd: WritableReg,
        rm: Reg,
    },
    Mov64 {
        rd: WritableReg,
        rm: Reg,
    },
    MovPReg {
        rd: WritableReg,
        rm: PReg,
    },
    Mov32Imm {
        rd: WritableReg,
        imm: u32,
    },
    Mov32SImm16 {
        rd: WritableReg,
        imm: i16,
    },
    Mov64SImm16 {
        rd: WritableReg,
        imm: i16,
    },
    Mov64SImm32 {
        rd: WritableReg,
        imm: i32,
    },
    Mov64UImm16Shifted {
        rd: WritableReg,
        imm: UImm16Shifted,
    },
    Mov64UImm32Shifted {
        rd: WritableReg,
        imm: UImm32Shifted,
    },
    Insert64UImm16Shifted {
        rd: WritableReg,
        ri: Reg,
        imm: UImm16Shifted,
    },
    Insert64UImm32Shifted {
        rd: WritableReg,
        ri: Reg,
        imm: UImm32Shifted,
    },
    LoadAR {
        rd: WritableReg,
        ar: u8,
    },
    InsertAR {
        rd: WritableReg,
        ri: Reg,
        ar: u8,
    },
    Extend {
        rd: WritableReg,
        rn: Reg,
        signed: bool,
        from_bits: u8,
        to_bits: u8,
    },
    CMov32 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        rm: Reg,
    },
    CMov64 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        rm: Reg,
    },
    CMov32SImm16 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        imm: i16,
    },
    CMov64SImm16 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        imm: i16,
    },
    FpuMove32 {
        rd: WritableReg,
        rn: Reg,
    },
    FpuMove64 {
        rd: WritableReg,
        rn: Reg,
    },
    FpuCMov32 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        rm: Reg,
    },
    FpuCMov64 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        rm: Reg,
    },
    FpuRR {
        fpu_op: FPUOp1,
        rd: WritableReg,
        rn: Reg,
    },
    FpuRRR {
        fpu_op: FPUOp2,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    FpuRRRR {
        fpu_op: FPUOp3,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        ra: Reg,
    },
    FpuRound {
        op: FpuRoundOp,
        mode: FpuRoundMode,
        rd: WritableReg,
        rn: Reg,
    },
    FpuCmp32 {
        rn: Reg,
        rm: Reg,
    },
    FpuCmp64 {
        rn: Reg,
        rm: Reg,
    },
    LoadFpuConst32 {
        rd: WritableReg,
        const_data: u32,
    },
    LoadFpuConst64 {
        rd: WritableReg,
        const_data: u64,
    },
    VecRRR {
        op: VecBinaryOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecRR {
        op: VecUnaryOp,
        rd: WritableReg,
        rn: Reg,
    },
    VecShiftRR {
        shift_op: VecShiftOp,
        rd: WritableReg,
        rn: Reg,
        shift_imm: u8,
        shift_reg: Reg,
    },
    VecSelect {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        ra: Reg,
    },
    VecPermute {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        ra: Reg,
    },
    VecPermuteDWImm {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        idx1: u8,
        idx2: u8,
    },
    VecIntCmp {
        op: VecIntCmpOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecIntCmpS {
        op: VecIntCmpOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecFloatCmp {
        op: VecFloatCmpOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecFloatCmpS {
        op: VecFloatCmpOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecInt128SCmpHi {
        tmp: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecInt128UCmpHi {
        tmp: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecLoad {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadRev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadByte16Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadByte32Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadByte64Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadElt16Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadElt32Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadElt64Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecStore {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreRev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreByte16Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreByte32Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreByte64Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreElt16Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreElt32Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreElt64Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecLoadReplicate {
        size: u32,
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadReplicateRev {
        size: u32,
        rd: WritableReg,
        mem: MemArg,
    },
    VecMov {
        rd: WritableReg,
        rn: Reg,
    },
    VecCMov {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        rm: Reg,
    },
    MovToVec128 {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecLoadConst {
        rd: WritableReg,
        const_data: u128,
    },
    VecLoadConstReplicate {
        size: u32,
        rd: WritableReg,
        const_data: u64,
    },
    VecImmByteMask {
        rd: WritableReg,
        mask: u16,
    },
    VecImmBitMask {
        size: u32,
        rd: WritableReg,
        start_bit: u8,
        end_bit: u8,
    },
    VecImmReplicate {
        size: u32,
        rd: WritableReg,
        imm: i16,
    },
    VecLoadLane {
        size: u32,
        rd: WritableReg,
        ri: Reg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecLoadLaneUndef {
        size: u32,
        rd: WritableReg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecLoadLaneRev {
        size: u32,
        rd: WritableReg,
        ri: Reg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecLoadLaneRevUndef {
        size: u32,
        rd: WritableReg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecStoreLane {
        size: u32,
        rd: Reg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecStoreLaneRev {
        size: u32,
        rd: Reg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecInsertLane {
        size: u32,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        lane_imm: u8,
        lane_reg: Reg,
    },
    VecInsertLaneUndef {
        size: u32,
        rd: WritableReg,
        rn: Reg,
        lane_imm: u8,
        lane_reg: Reg,
    },
    VecExtractLane {
        size: u32,
        rd: WritableReg,
        rn: Reg,
        lane_imm: u8,
        lane_reg: Reg,
    },
    VecInsertLaneImm {
        size: u32,
        rd: WritableReg,
        ri: Reg,
        imm: i16,
        lane_imm: u8,
    },
    VecReplicateLane {
        size: u32,
        rd: WritableReg,
        rn: Reg,
        lane_imm: u8,
    },
    Call {
        link: WritableReg,
        info: BoxCallInfo,
    },
    CallInd {
        link: WritableReg,
        info: BoxCallIndInfo,
    },
    Args {
        args: VecArgPair,
    },
    Ret {
        link: Reg,
        rets: VecRetPair,
    },
    Jump {
        dest: MachLabel,
    },
    CondBr {
        taken: MachLabel,
        not_taken: MachLabel,
        cond: Cond,
    },
    TrapIf {
        cond: Cond,
        trap_code: TrapCode,
    },
    OneWayCondBr {
        target: MachLabel,
        cond: Cond,
    },
    IndirectBr {
        rn: Reg,
        targets: VecMachLabel,
    },
    Debugtrap,
    Trap {
        trap_code: TrapCode,
    },
    JTSequence {
        ridx: Reg,
        targets: VecMachLabel,
    },
    LoadSymbolReloc {
        rd: WritableReg,
        symbol_reloc: BoxSymbolReloc,
    },
    LoadAddr {
        rd: WritableReg,
        mem: MemArg,
    },
    Loop {
        body: VecMInst,
        cond: Cond,
    },
    CondBreak {
        cond: Cond,
    },
    VirtualSPOffsetAdj {
        offset: i64,
    },
    DummyUse {
        reg: Reg,
    },
    Unwind {
        inst: UnwindInst,
    },
}

/// Internal type SymbolReloc: defined at src/isa/s390x/inst.isle line 1017.
#[derive(Clone, Debug)]
pub enum SymbolReloc {
    Absolute { name: ExternalName, offset: i64 },
    TlsGd { name: ExternalName },
}

/// Internal type ALUOp: defined at src/isa/s390x/inst.isle line 1034.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ALUOp {
    Add32,
    Add32Ext16,
    Add64,
    Add64Ext16,
    Add64Ext32,
    AddLogical32,
    AddLogical64,
    AddLogical64Ext32,
    Sub32,
    Sub32Ext16,
    Sub64,
    Sub64Ext16,
    Sub64Ext32,
    SubLogical32,
    SubLogical64,
    SubLogical64Ext32,
    Mul32,
    Mul32Ext16,
    Mul64,
    Mul64Ext16,
    Mul64Ext32,
    And32,
    And64,
    Orr32,
    Orr64,
    Xor32,
    Xor64,
    NotAnd32,
    NotAnd64,
    NotOrr32,
    NotOrr64,
    NotXor32,
    NotXor64,
    AndNot32,
    AndNot64,
    OrrNot32,
    OrrNot64,
}

/// Internal type UnaryOp: defined at src/isa/s390x/inst.isle line 1081.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum UnaryOp {
    Abs32,
    Abs64,
    Abs64Ext32,
    Neg32,
    Neg64,
    Neg64Ext32,
    PopcntByte,
    PopcntReg,
    BSwap32,
    BSwap64,
}

/// Internal type ShiftOp: defined at src/isa/s390x/inst.isle line 1096.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ShiftOp {
    RotL32,
    RotL64,
    LShL32,
    LShL64,
    LShR32,
    LShR64,
    AShR32,
    AShR64,
}

/// Internal type RxSBGOp: defined at src/isa/s390x/inst.isle line 1109.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum RxSBGOp {
    Insert,
    And,
    Or,
    Xor,
}

/// Internal type CmpOp: defined at src/isa/s390x/inst.isle line 1118.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CmpOp {
    CmpS32,
    CmpS32Ext16,
    CmpS64,
    CmpS64Ext16,
    CmpS64Ext32,
    CmpL32,
    CmpL32Ext16,
    CmpL64,
    CmpL64Ext16,
    CmpL64Ext32,
}

/// Internal type VecBinaryOp: defined at src/isa/s390x/inst.isle line 1133.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecBinaryOp {
    Add8x16,
    Add16x8,
    Add32x4,
    Add64x2,
    Add128,
    Sub8x16,
    Sub16x8,
    Sub32x4,
    Sub64x2,
    Sub128,
    Mul8x16,
    Mul16x8,
    Mul32x4,
    UMulHi8x16,
    UMulHi16x8,
    UMulHi32x4,
    SMulHi8x16,
    SMulHi16x8,
    SMulHi32x4,
    UMulEven8x16,
    UMulEven16x8,
    UMulEven32x4,
    SMulEven8x16,
    SMulEven16x8,
    SMulEven32x4,
    UMulOdd8x16,
    UMulOdd16x8,
    UMulOdd32x4,
    SMulOdd8x16,
    SMulOdd16x8,
    SMulOdd32x4,
    UMax8x16,
    UMax16x8,
    UMax32x4,
    UMax64x2,
    SMax8x16,
    SMax16x8,
    SMax32x4,
    SMax64x2,
    UMin8x16,
    UMin16x8,
    UMin32x4,
    UMin64x2,
    SMin8x16,
    SMin16x8,
    SMin32x4,
    SMin64x2,
    UAvg8x16,
    UAvg16x8,
    UAvg32x4,
    UAvg64x2,
    SAvg8x16,
    SAvg16x8,
    SAvg32x4,
    SAvg64x2,
    And128,
    Orr128,
    Xor128,
    NotAnd128,
    NotOrr128,
    NotXor128,
    AndNot128,
    OrrNot128,
    BitPermute128,
    LShLByByte128,
    LShRByByte128,
    AShRByByte128,
    LShLByBit128,
    LShRByBit128,
    AShRByBit128,
    Pack16x8,
    Pack32x4,
    Pack64x2,
    PackUSat16x8,
    PackUSat32x4,
    PackUSat64x2,
    PackSSat16x8,
    PackSSat32x4,
    PackSSat64x2,
    MergeLow8x16,
    MergeLow16x8,
    MergeLow32x4,
    MergeLow64x2,
    MergeHigh8x16,
    MergeHigh16x8,
    MergeHigh32x4,
    MergeHigh64x2,
}

/// Internal type VecUnaryOp: defined at src/isa/s390x/inst.isle line 1235.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecUnaryOp {
    Abs8x16,
    Abs16x8,
    Abs32x4,
    Abs64x2,
    Neg8x16,
    Neg16x8,
    Neg32x4,
    Neg64x2,
    Popcnt8x16,
    Popcnt16x8,
    Popcnt32x4,
    Popcnt64x2,
    Clz8x16,
    Clz16x8,
    Clz32x4,
    Clz64x2,
    Ctz8x16,
    Ctz16x8,
    Ctz32x4,
    Ctz64x2,
    UnpackULow8x16,
    UnpackULow16x8,
    UnpackULow32x4,
    UnpackUHigh8x16,
    UnpackUHigh16x8,
    UnpackUHigh32x4,
    UnpackSLow8x16,
    UnpackSLow16x8,
    UnpackSLow32x4,
    UnpackSHigh8x16,
    UnpackSHigh16x8,
    UnpackSHigh32x4,
}

/// Internal type VecShiftOp: defined at src/isa/s390x/inst.isle line 1276.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecShiftOp {
    RotL8x16,
    RotL16x8,
    RotL32x4,
    RotL64x2,
    LShL8x16,
    LShL16x8,
    LShL32x4,
    LShL64x2,
    LShR8x16,
    LShR16x8,
    LShR32x4,
    LShR64x2,
    AShR8x16,
    AShR16x8,
    AShR32x4,
    AShR64x2,
}

/// Internal type VecIntCmpOp: defined at src/isa/s390x/inst.isle line 1297.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecIntCmpOp {
    CmpEq8x16,
    CmpEq16x8,
    CmpEq32x4,
    CmpEq64x2,
    SCmpHi8x16,
    SCmpHi16x8,
    SCmpHi32x4,
    SCmpHi64x2,
    UCmpHi8x16,
    UCmpHi16x8,
    UCmpHi32x4,
    UCmpHi64x2,
}

/// Internal type VecFloatCmpOp: defined at src/isa/s390x/inst.isle line 1314.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecFloatCmpOp {
    CmpEq32x4,
    CmpEq64x2,
    CmpHi32x4,
    CmpHi64x2,
    CmpHiEq32x4,
    CmpHiEq64x2,
}

/// Internal type FPUOp1: defined at src/isa/s390x/inst.isle line 1325.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp1 {
    Abs32,
    Abs64,
    Abs32x4,
    Abs64x2,
    Neg32,
    Neg64,
    Neg32x4,
    Neg64x2,
    NegAbs32,
    NegAbs64,
    NegAbs32x4,
    NegAbs64x2,
    Sqrt32,
    Sqrt64,
    Sqrt32x4,
    Sqrt64x2,
    Cvt32To64,
    Cvt32x4To64x2,
}

/// Internal type FPUOp2: defined at src/isa/s390x/inst.isle line 1348.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp2 {
    Add32,
    Add64,
    Add32x4,
    Add64x2,
    Sub32,
    Sub64,
    Sub32x4,
    Sub64x2,
    Mul32,
    Mul64,
    Mul32x4,
    Mul64x2,
    Div32,
    Div64,
    Div32x4,
    Div64x2,
    Max32,
    Max64,
    Max32x4,
    Max64x2,
    Min32,
    Min64,
    Min32x4,
    Min64x2,
    MaxPseudo32,
    MaxPseudo64,
    MaxPseudo32x4,
    MaxPseudo64x2,
    MinPseudo32,
    MinPseudo64,
    MinPseudo32x4,
    MinPseudo64x2,
}

/// Internal type FPUOp3: defined at src/isa/s390x/inst.isle line 1385.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp3 {
    MAdd32,
    MAdd64,
    MAdd32x4,
    MAdd64x2,
    MSub32,
    MSub64,
    MSub32x4,
    MSub64x2,
}

/// Internal type FpuRoundOp: defined at src/isa/s390x/inst.isle line 1398.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuRoundOp {
    Cvt64To32,
    Cvt64x2To32x4,
    Round32,
    Round64,
    Round32x4,
    Round64x2,
    ToSInt32,
    ToSInt64,
    ToUInt32,
    ToUInt64,
    ToSInt32x4,
    ToSInt64x2,
    ToUInt32x4,
    ToUInt64x2,
    FromSInt32,
    FromSInt64,
    FromUInt32,
    FromUInt64,
    FromSInt32x4,
    FromSInt64x2,
    FromUInt32x4,
    FromUInt64x2,
}

/// Internal type FpuRoundMode: defined at src/isa/s390x/inst.isle line 1425.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuRoundMode {
    Current,
    ToNearest,
    ShorterPrecision,
    ToNearestTiesToEven,
    ToZero,
    ToPosInfinity,
    ToNegInfinity,
}

/// Internal type LaneOrder: defined at src/isa/s390x/inst.isle line 1470.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum LaneOrder {
    LittleEndian,
    BigEndian,
}

/// Internal type ProducesBool: defined at src/isa/s390x/inst.isle line 3350.
#[derive(Clone, Debug)]
pub enum ProducesBool {
    ProducesBool { producer: ProducesFlags, cond: Cond },
}

// Generated as internal constructor for term output_reg.
pub fn constructor_output_reg<C: Context>(ctx: &mut C, arg0: Reg) -> InstOutput {
    let v1 = C::value_reg(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 55.
    return v2;
}

// Generated as internal constructor for term output_value.
pub fn constructor_output_value<C: Context>(ctx: &mut C, arg0: Value) -> InstOutput {
    let v1 = C::put_in_regs(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 59.
    return v2;
}

// Generated as internal constructor for term temp_reg.
pub fn constructor_temp_reg<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    let v1 = C::temp_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/prelude_lower.isle line 79.
    return v2;
}

// Generated as internal constructor for term value_regs_range.
pub fn constructor_value_regs_range<C: Context>(ctx: &mut C, arg0: ValueRegs) -> Range {
    let v2 = C::value_regs_len(ctx, arg0);
    let v3 = C::range(ctx, 0x0, v2);
    // Rule at src/prelude_lower.isle line 128.
    return v3;
}

// Generated as internal constructor for term lo_reg.
pub fn constructor_lo_reg<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::put_in_regs(ctx, arg0);
    let v3 = C::value_regs_get(ctx, v1, 0x0);
    // Rule at src/prelude_lower.isle line 139.
    return v3;
}

// Generated as internal constructor for term emit_side_effect.
pub fn constructor_emit_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> Unit {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            let v2 = C::emit(ctx, v1);
            // Rule at src/prelude_lower.isle line 292.
            return v2;
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v3,
            inst2: ref v4,
        } => {
            let v5 = C::emit(ctx, v3);
            let v6 = C::emit(ctx, v4);
            // Rule at src/prelude_lower.isle line 294.
            return v6;
        }
        &SideEffectNoResult::Inst3 {
            inst1: ref v7,
            inst2: ref v8,
            inst3: ref v9,
        } => {
            let v10 = C::emit(ctx, v7);
            let v11 = C::emit(ctx, v8);
            let v12 = C::emit(ctx, v9);
            // Rule at src/prelude_lower.isle line 297.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_side_effect", "src/prelude_lower.isle line 291"
    )
}

// Generated as internal constructor for term side_effect.
pub fn constructor_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> InstOutput {
    let v1 = constructor_emit_side_effect(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 305.
    return v2;
}

// Generated as internal constructor for term side_effect_concat.
pub fn constructor_side_effect_concat<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
    arg1: &SideEffectNoResult,
) -> SideEffectNoResult {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            match arg1 {
                &SideEffectNoResult::Inst { inst: ref v3 } => {
                    let v4 = SideEffectNoResult::Inst2 {
                        inst1: v1.clone(),
                        inst2: v3.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 310.
                    return v4;
                }
                &SideEffectNoResult::Inst2 {
                    inst1: ref v5,
                    inst2: ref v6,
                } => {
                    let v7 = SideEffectNoResult::Inst3 {
                        inst1: v1.clone(),
                        inst2: v5.clone(),
                        inst3: v6.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 312.
                    return v7;
                }
                _ => {}
            }
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v8,
            inst2: ref v9,
        } => {
            if let &SideEffectNoResult::Inst { inst: ref v3 } = arg1 {
                let v10 = SideEffectNoResult::Inst3 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                    inst3: v3.clone(),
                };
                // Rule at src/prelude_lower.isle line 314.
                return v10;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "side_effect_concat", "src/prelude_lower.isle line 309"
    )
}

// Generated as internal constructor for term produces_flags_append.
pub fn constructor_produces_flags_append<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &MInst,
) -> ProducesFlags {
    if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } = arg0 {
        let v3 = ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: v1.clone(),
            inst2: arg1.clone(),
        };
        // Rule at src/prelude_lower.isle line 339.
        return v3;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_append", "src/prelude_lower.isle line 338"
    )
}

// Generated as internal constructor for term produces_flags_get_reg.
pub fn constructor_produces_flags_get_reg<C: Context>(ctx: &mut C, arg0: &ProducesFlags) -> Reg {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            // Rule at src/prelude_lower.isle line 364.
            return v2;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v3,
            result: v4,
        } => {
            // Rule at src/prelude_lower.isle line 365.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_get_reg", "src/prelude_lower.isle line 363"
    )
}

// Generated as internal constructor for term produces_flags_ignore.
pub fn constructor_produces_flags_ignore<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> ProducesFlags {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            let v3 = ProducesFlags::ProducesFlagsSideEffect { inst: v1.clone() };
            // Rule at src/prelude_lower.isle line 370.
            return v3;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v4,
            result: v5,
        } => {
            let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v4.clone() };
            // Rule at src/prelude_lower.isle line 372.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_ignore", "src/prelude_lower.isle line 369"
    )
}

// Generated as internal constructor for term consumes_flags_concat.
pub fn constructor_consumes_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ConsumesFlags,
    arg1: &ConsumesFlags,
) -> ConsumesFlags {
    match arg0 {
        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v8 } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } = arg1 {
                let v10 = ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                };
                // Rule at src/prelude_lower.isle line 385.
                return v10;
            }
        }
        &ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            if let &ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: ref v4,
                result: v5,
            } = arg1
            {
                let v6 = C::value_regs(ctx, v2, v5);
                let v7 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: v1.clone(),
                    inst2: v4.clone(),
                    result: v6,
                };
                // Rule at src/prelude_lower.isle line 379.
                return v7;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "consumes_flags_concat", "src/prelude_lower.isle line 378"
    )
}

// Generated as internal constructor for term with_flags.
pub fn constructor_with_flags<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> ValueRegs {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v12 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v16 = C::emit(ctx, v13);
                    let v17 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 416.
                    return v17;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v21 = C::emit(ctx, v18);
                    let v22 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 422.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v28 = C::emit(ctx, v23);
                    let v29 = C::emit(ctx, v24);
                    let v30 = C::emit(ctx, v25);
                    let v31 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 434.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v32,
            inst2: ref v33,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v36 = C::emit(ctx, v13);
                    let v37 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 450.
                    return v37;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v38 = C::emit(ctx, v18);
                    let v39 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 457.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v40 = C::emit(ctx, v23);
                    let v41 = C::emit(ctx, v24);
                    let v42 = C::emit(ctx, v25);
                    let v43 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 470.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v1,
            result: v2,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } => {
                    let v6 = C::emit(ctx, v1);
                    let v10 = C::emit(ctx, v9);
                    let v11 = C::value_reg(ctx, v2);
                    // Rule at src/prelude_lower.isle line 410.
                    return v11;
                }
                &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                    inst: ref v4,
                    result: v5,
                } => {
                    let v6 = C::emit(ctx, v1);
                    let v7 = C::emit(ctx, v4);
                    let v8 = C::value_regs(ctx, v2, v5);
                    // Rule at src/prelude_lower.isle line 402.
                    return v8;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags", "src/prelude_lower.isle line 400"
    )
}

// Generated as internal constructor for term with_flags_reg.
pub fn constructor_with_flags_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> Reg {
    let v2 = constructor_with_flags(ctx, arg0, arg1);
    let v4 = C::value_regs_get(ctx, v2, 0x0);
    // Rule at src/prelude_lower.isle line 488.
    return v4;
}

// Generated as internal constructor for term flags_to_producesflags.
pub fn constructor_flags_to_producesflags<C: Context>(ctx: &mut C, arg0: Value) -> ProducesFlags {
    let v1 = C::mark_value_used(ctx, arg0);
    // Rule at src/prelude_lower.isle line 495.
    return ProducesFlags::AlreadyExistingFlags;
}

// Generated as internal constructor for term with_flags_side_effect.
pub fn constructor_with_flags_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> SideEffectNoResult {
    match arg0 {
        &ProducesFlags::AlreadyExistingFlags => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v3 = SideEffectNoResult::Inst { inst: v2.clone() };
                    // Rule at src/prelude_lower.isle line 506.
                    return v3;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v6 = SideEffectNoResult::Inst2 {
                        inst1: v4.clone(),
                        inst2: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 511.
                    return v6;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v7 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v8 = SideEffectNoResult::Inst2 {
                        inst1: v7.clone(),
                        inst2: v2.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 516.
                    return v8;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v9 = SideEffectNoResult::Inst3 {
                        inst1: v7.clone(),
                        inst2: v4.clone(),
                        inst3: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 521.
                    return v9;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v10,
            inst2: ref v11,
        } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } = arg1 {
                let v12 = SideEffectNoResult::Inst3 {
                    inst1: v10.clone(),
                    inst2: v11.clone(),
                    inst3: v2.clone(),
                };
                // Rule at src/prelude_lower.isle line 526.
                return v12;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_side_effect", "src/prelude_lower.isle line 504"
    )
}

// Generated as internal constructor for term lower_return.
pub fn constructor_lower_return<C: Context>(
    ctx: &mut C,
    arg0: Range,
    arg1: ValueSlice,
) -> InstOutput {
    let v2 = C::gen_return(ctx, arg1);
    let v3 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 706.
    return v3;
}

// Generated as internal constructor for term lane_order_equal.
pub fn constructor_lane_order_equal<C: Context>(
    ctx: &mut C,
    arg0: &LaneOrder,
    arg1: &LaneOrder,
) -> bool {
    match arg0 {
        &LaneOrder::LittleEndian => {
            match arg1 {
                &LaneOrder::LittleEndian => {
                    // Rule at src/isa/s390x/inst.isle line 1484.
                    return true;
                }
                &LaneOrder::BigEndian => {
                    // Rule at src/isa/s390x/inst.isle line 1485.
                    return false;
                }
                _ => {}
            }
        }
        &LaneOrder::BigEndian => {
            match arg1 {
                &LaneOrder::LittleEndian => {
                    // Rule at src/isa/s390x/inst.isle line 1486.
                    return false;
                }
                &LaneOrder::BigEndian => {
                    // Rule at src/isa/s390x/inst.isle line 1487.
                    return true;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lane_order_equal", "src/isa/s390x/inst.isle line 1483"
    )
}

// Generated as internal constructor for term lane_order_from_memflags.
pub fn constructor_lane_order_from_memflags<C: Context>(ctx: &mut C, arg0: MemFlags) -> LaneOrder {
    let v4 = C::bigendian(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/s390x/inst.isle line 1492.
        return LaneOrder::BigEndian;
    }
    let v1 = C::littleendian(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 1491.
        return LaneOrder::LittleEndian;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lane_order_from_memflags", "src/isa/s390x/inst.isle line 1490"
    )
}

// Generated as internal constructor for term i64_nonzero.
pub fn constructor_i64_nonzero<C: Context>(ctx: &mut C, arg0: i64) -> Option<i64> {
    let v2 = C::i64_nonequal(ctx, arg0, 0x0);
    if let Some(v3) = v2 {
        // Rule at src/isa/s390x/inst.isle line 1544.
        return Some(arg0);
    }
    None
}

// Generated as internal constructor for term i64_not_neg1.
pub fn constructor_i64_not_neg1<C: Context>(ctx: &mut C, arg0: i64) -> Option<i64> {
    let v2 = C::i64_nonequal(ctx, arg0, -0x1);
    if let Some(v3) = v2 {
        // Rule at src/isa/s390x/inst.isle line 1549.
        return Some(arg0);
    }
    None
}

// Generated as internal constructor for term imm8x16.
pub fn constructor_imm8x16<C: Context>(
    ctx: &mut C,
    arg0: u8,
    arg1: u8,
    arg2: u8,
    arg3: u8,
    arg4: u8,
    arg5: u8,
    arg6: u8,
    arg7: u8,
    arg8: u8,
    arg9: u8,
    arg10: u8,
    arg11: u8,
    arg12: u8,
    arg13: u8,
    arg14: u8,
    arg15: u8,
) -> u128 {
    let v16 = C::u8_pair_concat(ctx, arg0, arg1);
    let v17 = C::u8_pair_concat(ctx, arg2, arg3);
    let v18 = C::u16_pair_concat(ctx, v16, v17);
    let v19 = C::u8_pair_concat(ctx, arg4, arg5);
    let v20 = C::u8_pair_concat(ctx, arg6, arg7);
    let v21 = C::u16_pair_concat(ctx, v19, v20);
    let v22 = C::u32_pair_concat(ctx, v18, v21);
    let v23 = C::u8_pair_concat(ctx, arg8, arg9);
    let v24 = C::u8_pair_concat(ctx, arg10, arg11);
    let v25 = C::u16_pair_concat(ctx, v23, v24);
    let v26 = C::u8_pair_concat(ctx, arg12, arg13);
    let v27 = C::u8_pair_concat(ctx, arg14, arg15);
    let v28 = C::u16_pair_concat(ctx, v26, v27);
    let v29 = C::u32_pair_concat(ctx, v25, v28);
    let v30 = C::u64_pair_concat(ctx, v22, v29);
    // Rule at src/isa/s390x/inst.isle line 1588.
    return v30;
}

// Generated as internal constructor for term mask_amt_reg.
pub fn constructor_mask_amt_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v10 = C::gpr64_ty(ctx, arg0);
    if let Some(v11) = v10 {
        // Rule at src/isa/s390x/inst.isle line 1700.
        return arg1;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = C::mask_amt_imm(ctx, v2, -0x1);
        let v6 = C::u8_as_u16(ctx, v5);
        let v8 = C::uimm16shifted(ctx, v6, 0x0);
        let v9 = constructor_and_uimm16shifted(ctx, v2, arg1, v8);
        // Rule at src/isa/s390x/inst.isle line 1697.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "mask_amt_reg", "src/isa/s390x/inst.isle line 1696"
    )
}

// Generated as internal constructor for term amt_reg.
pub fn constructor_amt_reg<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::value_type(ctx, arg0);
    let v2 = C::fits_in_64(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = C::put_in_reg(ctx, arg0);
        // Rule at src/isa/s390x/inst.isle line 1704.
        return v4;
    }
    let v5 = C::vr128_ty(ctx, v1);
    if let Some(v6) = v5 {
        let v4 = C::put_in_reg(ctx, arg0);
        let v9 = C::zero_reg(ctx);
        let v10 = constructor_vec_extract_lane(ctx, I64X2, v4, 0x1, v9);
        // Rule at src/isa/s390x/inst.isle line 1705.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "amt_reg", "src/isa/s390x/inst.isle line 1703"
    )
}

// Generated as internal constructor for term amt_vr.
pub fn constructor_amt_vr<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v14 = C::u64_from_value(ctx, arg0);
    if let Some(v15) = v14 {
        let v16 = constructor_vec_imm_splat(ctx, I8X16, v15);
        // Rule at src/isa/s390x/inst.isle line 1715.
        return v16;
    }
    let v1 = C::value_type(ctx, arg0);
    let v10 = C::vr128_ty(ctx, v1);
    if let Some(v11) = v10 {
        let v5 = C::put_in_reg(ctx, arg0);
        let v13 = constructor_vec_replicate_lane(ctx, I8X16, v5, 0xF);
        // Rule at src/isa/s390x/inst.isle line 1713.
        return v13;
    }
    let v2 = C::fits_in_64(ctx, v1);
    if let Some(v3) = v2 {
        let v5 = C::put_in_reg(ctx, arg0);
        let v7 = C::zero_reg(ctx);
        let v8 = constructor_vec_insert_lane_undef(ctx, I8X16, v5, 0x0, v7);
        let v9 = constructor_vec_replicate_lane(ctx, I8X16, v8, 0x0);
        // Rule at src/isa/s390x/inst.isle line 1710.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "amt_vr", "src/isa/s390x/inst.isle line 1709"
    )
}

// Generated as internal constructor for term memarg_symbol_offset.
pub fn constructor_memarg_symbol_offset<C: Context>(ctx: &mut C, arg0: i64) -> Option<i32> {
    let v2 = C::memarg_symbol_offset_sum(ctx, arg0, 0x0);
    let v3 = v2?;
    // Rule at src/isa/s390x/inst.isle line 1807.
    return Some(v3);
}

// Generated as internal constructor for term lower_address.
pub fn constructor_lower_address<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Offset32,
) -> MemArg {
    let v7 = C::def_inst(ctx, arg1);
    if let Some(v8) = v7 {
        let v9 = &C::inst_data(ctx, v8);
        match v9 {
            &InstructionData::Binary {
                opcode: ref v10,
                args: ref v11,
            } => {
                if let &Opcode::Iadd = v10 {
                    let v3 = C::i64_from_offset(ctx, arg2);
                    if v3 == 0x0 {
                        let v12 = C::unpack_value_array_2(ctx, v11);
                        let v15 = C::put_in_reg(ctx, v12.0);
                        let v16 = C::put_in_reg(ctx, v12.1);
                        let v17 = &C::memarg_reg_plus_reg(ctx, v15, v16, 0x0, arg0);
                        // Rule at src/isa/s390x/inst.isle line 1817.
                        return v17.clone();
                    }
                }
            }
            &InstructionData::UnaryGlobalValue {
                opcode: ref v18,
                global_value: v19,
            } => {
                if let &Opcode::SymbolValue = v18 {
                    let v20 = C::symbol_value_data(ctx, v19);
                    if let Some(v21) = v20 {
                        let v25 = C::reloc_distance_near(ctx, v21.1);
                        if let Some(v26) = v25 {
                            let v3 = C::i64_from_offset(ctx, arg2);
                            let v27 = C::memarg_symbol_offset_sum(ctx, v3, v21.2);
                            if let Some(v28) = v27 {
                                let v29 = &C::memarg_symbol(ctx, v21.0, v28, arg0);
                                // Rule at src/isa/s390x/inst.isle line 1820.
                                return v29.clone();
                            }
                        }
                    }
                }
            }
            _ => {}
        }
    }
    let v4 = C::put_in_reg(ctx, arg1);
    let v3 = C::i64_from_offset(ctx, arg2);
    let v6 = &C::memarg_reg_plus_off(ctx, v4, v3, 0x0, arg0);
    // Rule at src/isa/s390x/inst.isle line 1814.
    return v6.clone();
}

// Generated as internal constructor for term lower_address_bias.
pub fn constructor_lower_address_bias<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Offset32,
    arg3: u8,
) -> MemArg {
    let v3 = C::i64_from_offset(ctx, arg2);
    if v3 == 0x0 {
        let v7 = C::def_inst(ctx, arg1);
        if let Some(v8) = v7 {
            let v9 = &C::inst_data(ctx, v8);
            if let &InstructionData::Binary {
                opcode: ref v10,
                args: ref v11,
            } = v9
            {
                if let &Opcode::Iadd = v10 {
                    let v12 = C::unpack_value_array_2(ctx, v11);
                    let v15 = C::put_in_reg(ctx, v12.0);
                    let v16 = C::put_in_reg(ctx, v12.1);
                    let v17 = &C::memarg_reg_plus_reg(ctx, v15, v16, arg3, arg0);
                    // Rule at src/isa/s390x/inst.isle line 1834.
                    return v17.clone();
                }
            }
        }
    }
    let v5 = C::put_in_reg(ctx, arg1);
    let v6 = &C::memarg_reg_plus_off(ctx, v5, v3, arg3, arg0);
    // Rule at src/isa/s390x/inst.isle line 1831.
    return v6.clone();
}

// Generated as internal constructor for term load_sym.
pub fn constructor_load_sym<C: Context>(ctx: &mut C, arg0: Inst) -> Option<Inst> {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1
    {
        if let &Opcode::Load = v2 {
            let v6 = C::def_inst(ctx, v3);
            if let Some(v7) = v6 {
                let v8 = &C::inst_data(ctx, v7);
                if let &InstructionData::UnaryGlobalValue {
                    opcode: ref v9,
                    global_value: v10,
                } = v8
                {
                    if let &Opcode::SymbolValue = v9 {
                        let v11 = C::symbol_value_data(ctx, v10);
                        if let Some(v12) = v11 {
                            let v16 = C::reloc_distance_near(ctx, v12.1);
                            if let Some(v17) = v16 {
                                let v18 = C::i64_from_offset(ctx, v5);
                                let v19 = C::memarg_symbol_offset_sum(ctx, v12.2, v18);
                                if let Some(v20) = v19 {
                                    // Rule at src/isa/s390x/inst.isle line 1841.
                                    return Some(arg0);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    None
}

// Generated as internal constructor for term uload16_sym.
pub fn constructor_uload16_sym<C: Context>(ctx: &mut C, arg0: Inst) -> Option<Inst> {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1
    {
        if let &Opcode::Uload16 = v2 {
            let v6 = C::def_inst(ctx, v3);
            if let Some(v7) = v6 {
                let v8 = &C::inst_data(ctx, v7);
                if let &InstructionData::UnaryGlobalValue {
                    opcode: ref v9,
                    global_value: v10,
                } = v8
                {
                    if let &Opcode::SymbolValue = v9 {
                        let v11 = C::symbol_value_data(ctx, v10);
                        if let Some(v12) = v11 {
                            let v16 = C::reloc_distance_near(ctx, v12.1);
                            if let Some(v17) = v16 {
                                let v18 = C::i64_from_offset(ctx, v5);
                                let v19 = C::memarg_symbol_offset_sum(ctx, v12.2, v18);
                                if let Some(v20) = v19 {
                                    // Rule at src/isa/s390x/inst.isle line 1849.
                                    return Some(arg0);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    None
}

// Generated as internal constructor for term memarg_pair.
pub fn constructor_memarg_pair<C: Context>(ctx: &mut C, arg0: &MemArg) -> MemArgPair {
    let v1 = &C::memarg_pair_from_memarg(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 1863.
        return v2.clone();
    }
    let v3 = constructor_load_addr(ctx, arg0);
    let v4 = C::memarg_flags(ctx, arg0);
    let v5 = &C::memarg_pair_from_reg(ctx, v3, v4);
    // Rule at src/isa/s390x/inst.isle line 1864.
    return v5.clone();
}

// Generated as internal constructor for term stack_addr_impl.
pub fn constructor_stack_addr_impl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: StackSlot,
    arg2: Offset32,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg0);
    let v4 = &C::abi_stackslot_addr(ctx, v3, arg1, arg2);
    let v5 = C::emit(ctx, v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 1879.
    return v6;
}

// Generated as internal constructor for term sink_load.
pub fn constructor_sink_load<C: Context>(ctx: &mut C, arg0: Inst) -> MemArg {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1
    {
        if let &Opcode::Load = v2 {
            let v6 = C::sink_inst(ctx, arg0);
            let v7 = &constructor_lower_address(ctx, v4, v3, v5);
            // Rule at src/isa/s390x/inst.isle line 1945.
            return v7.clone();
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sink_load", "src/isa/s390x/inst.isle line 1944"
    )
}

// Generated as internal constructor for term sink_sload16.
pub fn constructor_sink_sload16<C: Context>(ctx: &mut C, arg0: Inst) -> MemArg {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1
    {
        if let &Opcode::Sload16 = v2 {
            let v6 = C::sink_inst(ctx, arg0);
            let v7 = &constructor_lower_address(ctx, v4, v3, v5);
            // Rule at src/isa/s390x/inst.isle line 1952.
            return v7.clone();
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sink_sload16", "src/isa/s390x/inst.isle line 1951"
    )
}

// Generated as internal constructor for term sink_sload32.
pub fn constructor_sink_sload32<C: Context>(ctx: &mut C, arg0: Inst) -> MemArg {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1
    {
        if let &Opcode::Sload32 = v2 {
            let v6 = C::sink_inst(ctx, arg0);
            let v7 = &constructor_lower_address(ctx, v4, v3, v5);
            // Rule at src/isa/s390x/inst.isle line 1959.
            return v7.clone();
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sink_sload32", "src/isa/s390x/inst.isle line 1958"
    )
}

// Generated as internal constructor for term sink_uload16.
pub fn constructor_sink_uload16<C: Context>(ctx: &mut C, arg0: Inst) -> MemArg {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1
    {
        if let &Opcode::Uload16 = v2 {
            let v6 = C::sink_inst(ctx, arg0);
            let v7 = &constructor_lower_address(ctx, v4, v3, v5);
            // Rule at src/isa/s390x/inst.isle line 1966.
            return v7.clone();
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sink_uload16", "src/isa/s390x/inst.isle line 1965"
    )
}

// Generated as internal constructor for term sink_uload32.
pub fn constructor_sink_uload32<C: Context>(ctx: &mut C, arg0: Inst) -> MemArg {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1
    {
        if let &Opcode::Uload32 = v2 {
            let v6 = C::sink_inst(ctx, arg0);
            let v7 = &constructor_lower_address(ctx, v4, v3, v5);
            // Rule at src/isa/s390x/inst.isle line 1973.
            return v7.clone();
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sink_uload32", "src/isa/s390x/inst.isle line 1972"
    )
}

// Generated as internal constructor for term temp_writable_regpair.
pub fn constructor_temp_writable_regpair<C: Context>(ctx: &mut C) -> WritableRegPair {
    let v1 = C::temp_writable_reg(ctx, I64);
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = C::writable_regpair(ctx, v1, v2);
    // Rule at src/isa/s390x/inst.isle line 1989.
    return v3;
}

// Generated as internal constructor for term writable_regpair_to_regpair.
pub fn constructor_writable_regpair_to_regpair<C: Context>(
    ctx: &mut C,
    arg0: WritableRegPair,
) -> RegPair {
    let v1 = C::writable_regpair_hi(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    let v3 = C::writable_regpair_lo(ctx, arg0);
    let v4 = C::writable_reg_to_reg(ctx, v3);
    let v5 = C::regpair(ctx, v2, v4);
    // Rule at src/isa/s390x/inst.isle line 2005.
    return v5;
}

// Generated as internal constructor for term alu_rrr.
pub fn constructor_alu_rrr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRRR {
        alu_op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2025.
    return v7;
}

// Generated as internal constructor for term alu_rrr_with_flags_paired.
pub fn constructor_alu_rrr_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: Reg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v5 = MInst::AluRRR {
        alu_op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v7 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v5,
        result: v6,
    };
    // Rule at src/isa/s390x/inst.isle line 2032.
    return v7;
}

// Generated as internal constructor for term alu_rrsimm16.
pub fn constructor_alu_rrsimm16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: i16,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRRSImm16 {
        alu_op: arg1.clone(),
        rd: v4,
        rn: arg2,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2039.
    return v7;
}

// Generated as internal constructor for term alu_rr.
pub fn constructor_alu_rr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRR {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        rm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2046.
    return v7;
}

// Generated as internal constructor for term alu_rr_with_flags_paired.
pub fn constructor_alu_rr_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: Reg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v5 = MInst::AluRR {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        rm: arg3,
    };
    let v7 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v5,
        result: v6,
    };
    // Rule at src/isa/s390x/inst.isle line 2053.
    return v7;
}

// Generated as internal constructor for term alu_rx.
pub fn constructor_alu_rx<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: &MemArg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRX {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        mem: arg3.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2060.
    return v7;
}

// Generated as internal constructor for term alu_rx_with_flags_paired.
pub fn constructor_alu_rx_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: &MemArg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v5 = MInst::AluRX {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        mem: arg3.clone(),
    };
    let v7 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v5,
        result: v6,
    };
    // Rule at src/isa/s390x/inst.isle line 2067.
    return v7;
}

// Generated as internal constructor for term alu_rsimm16.
pub fn constructor_alu_rsimm16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: i16,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRSImm16 {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2074.
    return v7;
}

// Generated as internal constructor for term alu_rsimm32.
pub fn constructor_alu_rsimm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: i32,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRSImm32 {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2081.
    return v7;
}

// Generated as internal constructor for term alu_ruimm32.
pub fn constructor_alu_ruimm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: u32,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRUImm32 {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2088.
    return v7;
}

// Generated as internal constructor for term alu_ruimm32_with_flags_paired.
pub fn constructor_alu_ruimm32_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: u32,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v5 = MInst::AluRUImm32 {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        imm: arg3,
    };
    let v7 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v5,
        result: v6,
    };
    // Rule at src/isa/s390x/inst.isle line 2095.
    return v7;
}

// Generated as internal constructor for term alu_ruimm16shifted.
pub fn constructor_alu_ruimm16shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: UImm16Shifted,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRUImm16Shifted {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2102.
    return v7;
}

// Generated as internal constructor for term alu_ruimm32shifted.
pub fn constructor_alu_ruimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: UImm32Shifted,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRUImm32Shifted {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2109.
    return v7;
}

// Generated as internal constructor for term smul_wide.
pub fn constructor_smul_wide<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> RegPair {
    let v2 = constructor_temp_writable_regpair(ctx);
    let v3 = MInst::SMulWide {
        rd: v2,
        rn: arg0,
        rm: arg1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2116.
    return v5;
}

// Generated as internal constructor for term umul_wide.
pub fn constructor_umul_wide<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> RegPair {
    let v2 = constructor_temp_writable_regpair(ctx);
    let v3 = MInst::UMulWide {
        rd: v2,
        ri: arg0,
        rn: arg1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2123.
    return v5;
}

// Generated as internal constructor for term sdivmod32.
pub fn constructor_sdivmod32<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> RegPair {
    let v2 = constructor_temp_writable_regpair(ctx);
    let v3 = MInst::SDivMod32 {
        rd: v2,
        ri: arg0,
        rn: arg1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2130.
    return v5;
}

// Generated as internal constructor for term sdivmod64.
pub fn constructor_sdivmod64<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> RegPair {
    let v2 = constructor_temp_writable_regpair(ctx);
    let v3 = MInst::SDivMod64 {
        rd: v2,
        ri: arg0,
        rn: arg1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2137.
    return v5;
}

// Generated as internal constructor for term udivmod32.
pub fn constructor_udivmod32<C: Context>(ctx: &mut C, arg0: RegPair, arg1: Reg) -> RegPair {
    let v2 = constructor_temp_writable_regpair(ctx);
    let v3 = MInst::UDivMod32 {
        rd: v2,
        ri: arg0,
        rn: arg1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2144.
    return v5;
}

// Generated as internal constructor for term udivmod64.
pub fn constructor_udivmod64<C: Context>(ctx: &mut C, arg0: RegPair, arg1: Reg) -> RegPair {
    let v2 = constructor_temp_writable_regpair(ctx);
    let v3 = MInst::UDivMod64 {
        rd: v2,
        ri: arg0,
        rn: arg1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2151.
    return v5;
}

// Generated as internal constructor for term shift_rr.
pub fn constructor_shift_rr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ShiftOp,
    arg2: Reg,
    arg3: u8,
    arg4: Reg,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg0);
    let v6 = MInst::ShiftRR {
        shift_op: arg1.clone(),
        rd: v5,
        rn: arg2,
        shift_imm: arg3,
        shift_reg: arg4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/s390x/inst.isle line 2158.
    return v8;
}

// Generated as internal constructor for term rxsbg_test.
pub fn constructor_rxsbg_test<C: Context>(
    ctx: &mut C,
    arg0: &RxSBGOp,
    arg1: Reg,
    arg2: Reg,
    arg3: u8,
    arg4: u8,
    arg5: i8,
) -> ProducesFlags {
    let v6 = MInst::RxSBGTest {
        op: arg0.clone(),
        rd: arg1,
        rn: arg2,
        start_bit: arg3,
        end_bit: arg4,
        rotate_amt: arg5,
    };
    let v7 = ProducesFlags::ProducesFlagsSideEffect { inst: v6 };
    // Rule at src/isa/s390x/inst.isle line 2165.
    return v7;
}

// Generated as internal constructor for term unary_rr.
pub fn constructor_unary_rr<C: Context>(ctx: &mut C, arg0: Type, arg1: &UnaryOp, arg2: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg0);
    let v4 = MInst::UnaryRR {
        op: arg1.clone(),
        rd: v3,
        rn: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 2171.
    return v6;
}

// Generated as internal constructor for term cmp_rr.
pub fn constructor_cmp_rr<C: Context>(
    ctx: &mut C,
    arg0: &CmpOp,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = MInst::CmpRR {
        op: arg0.clone(),
        rn: arg1,
        rm: arg2,
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/s390x/inst.isle line 2178.
    return v4;
}

// Generated as internal constructor for term cmp_rx.
pub fn constructor_cmp_rx<C: Context>(
    ctx: &mut C,
    arg0: &CmpOp,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = MInst::CmpRX {
        op: arg0.clone(),
        rn: arg1,
        mem: arg2.clone(),
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/s390x/inst.isle line 2183.
    return v4;
}

// Generated as internal constructor for term cmp_rsimm16.
pub fn constructor_cmp_rsimm16<C: Context>(
    ctx: &mut C,
    arg0: &CmpOp,
    arg1: Reg,
    arg2: i16,
) -> ProducesFlags {
    let v3 = MInst::CmpRSImm16 {
        op: arg0.clone(),
        rn: arg1,
        imm: arg2,
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/s390x/inst.isle line 2188.
    return v4;
}

// Generated as internal constructor for term cmp_rsimm32.
pub fn constructor_cmp_rsimm32<C: Context>(
    ctx: &mut C,
    arg0: &CmpOp,
    arg1: Reg,
    arg2: i32,
) -> ProducesFlags {
    let v3 = MInst::CmpRSImm32 {
        op: arg0.clone(),
        rn: arg1,
        imm: arg2,
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/s390x/inst.isle line 2193.
    return v4;
}

// Generated as internal constructor for term cmp_ruimm32.
pub fn constructor_cmp_ruimm32<C: Context>(
    ctx: &mut C,
    arg0: &CmpOp,
    arg1: Reg,
    arg2: u32,
) -> ProducesFlags {
    let v3 = MInst::CmpRUImm32 {
        op: arg0.clone(),
        rn: arg1,
        imm: arg2,
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/s390x/inst.isle line 2198.
    return v4;
}

// Generated as internal constructor for term atomic_rmw_impl.
pub fn constructor_atomic_rmw_impl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: &MemArg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AtomicRmw {
        alu_op: arg1.clone(),
        rd: v4,
        rn: arg2,
        mem: arg3.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2203.
    return v7;
}

// Generated as internal constructor for term atomic_cas32.
pub fn constructor_atomic_cas32<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I32);
    let v5 = MInst::AtomicCas32 {
        rd: v4,
        ri: arg0,
        rn: arg1,
        mem: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2210.
    return v7;
}

// Generated as internal constructor for term atomic_cas64.
pub fn constructor_atomic_cas64<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::AtomicCas64 {
        rd: v4,
        ri: arg0,
        rn: arg1,
        mem: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2217.
    return v7;
}

// Generated as internal constructor for term fence_impl.
pub fn constructor_fence_impl<C: Context>(ctx: &mut C) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst { inst: MInst::Fence };
    // Rule at src/isa/s390x/inst.isle line 2224.
    return v1;
}

// Generated as internal constructor for term load32.
pub fn constructor_load32<C: Context>(ctx: &mut C, arg0: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I32);
    let v3 = MInst::Load32 {
        rd: v2,
        mem: arg0.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2229.
    return v5;
}

// Generated as internal constructor for term load64.
pub fn constructor_load64<C: Context>(ctx: &mut C, arg0: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::Load64 {
        rd: v2,
        mem: arg0.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2236.
    return v5;
}

// Generated as internal constructor for term loadrev16.
pub fn constructor_loadrev16<C: Context>(ctx: &mut C, arg0: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I32);
    let v3 = MInst::LoadRev16 {
        rd: v2,
        mem: arg0.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2243.
    return v5;
}

// Generated as internal constructor for term loadrev32.
pub fn constructor_loadrev32<C: Context>(ctx: &mut C, arg0: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I32);
    let v3 = MInst::LoadRev32 {
        rd: v2,
        mem: arg0.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2250.
    return v5;
}

// Generated as internal constructor for term loadrev64.
pub fn constructor_loadrev64<C: Context>(ctx: &mut C, arg0: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::LoadRev64 {
        rd: v2,
        mem: arg0.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2257.
    return v5;
}

// Generated as internal constructor for term store8.
pub fn constructor_store8<C: Context>(ctx: &mut C, arg0: Reg, arg1: &MemArg) -> SideEffectNoResult {
    let v2 = MInst::Store8 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2264.
    return v3;
}

// Generated as internal constructor for term store16.
pub fn constructor_store16<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::Store16 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2269.
    return v3;
}

// Generated as internal constructor for term store32.
pub fn constructor_store32<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::Store32 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2274.
    return v3;
}

// Generated as internal constructor for term store64.
pub fn constructor_store64<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::Store64 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2279.
    return v3;
}

// Generated as internal constructor for term store8_imm.
pub fn constructor_store8_imm<C: Context>(
    ctx: &mut C,
    arg0: u8,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreImm8 {
        imm: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2284.
    return v3;
}

// Generated as internal constructor for term store16_imm.
pub fn constructor_store16_imm<C: Context>(
    ctx: &mut C,
    arg0: i16,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreImm16 {
        imm: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2289.
    return v3;
}

// Generated as internal constructor for term store32_simm16.
pub fn constructor_store32_simm16<C: Context>(
    ctx: &mut C,
    arg0: i16,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreImm32SExt16 {
        imm: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2294.
    return v3;
}

// Generated as internal constructor for term store64_simm16.
pub fn constructor_store64_simm16<C: Context>(
    ctx: &mut C,
    arg0: i16,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreImm64SExt16 {
        imm: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2299.
    return v3;
}

// Generated as internal constructor for term storerev16.
pub fn constructor_storerev16<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreRev16 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2304.
    return v3;
}

// Generated as internal constructor for term storerev32.
pub fn constructor_storerev32<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreRev32 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2309.
    return v3;
}

// Generated as internal constructor for term storerev64.
pub fn constructor_storerev64<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreRev64 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2314.
    return v3;
}

// Generated as internal constructor for term mvc.
pub fn constructor_mvc<C: Context>(
    ctx: &mut C,
    arg0: &MemArgPair,
    arg1: &MemArgPair,
    arg2: u8,
) -> SideEffectNoResult {
    let v3 = MInst::Mvc {
        dst: arg0.clone(),
        src: arg1.clone(),
        len_minus_one: arg2,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/s390x/inst.isle line 2319.
    return v4;
}

// Generated as internal constructor for term load_ar.
pub fn constructor_load_ar<C: Context>(ctx: &mut C, arg0: u8) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::LoadAR { rd: v2, ar: arg0 };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2324.
    return v5;
}

// Generated as internal constructor for term insert_ar.
pub fn constructor_insert_ar<C: Context>(ctx: &mut C, arg0: Reg, arg1: u8) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::InsertAR {
        rd: v3,
        ri: arg0,
        ar: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 2331.
    return v6;
}

// Generated as internal constructor for term fpu_rr.
pub fn constructor_fpu_rr<C: Context>(ctx: &mut C, arg0: Type, arg1: &FPUOp1, arg2: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg0);
    let v4 = MInst::FpuRR {
        fpu_op: arg1.clone(),
        rd: v3,
        rn: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 2338.
    return v6;
}

// Generated as internal constructor for term fpu_rrr.
pub fn constructor_fpu_rrr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FPUOp2,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::FpuRRR {
        fpu_op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2345.
    return v7;
}

// Generated as internal constructor for term fpu_rrrr.
pub fn constructor_fpu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FPUOp3,
    arg2: Reg,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg0);
    let v6 = MInst::FpuRRRR {
        fpu_op: arg1.clone(),
        rd: v5,
        rn: arg2,
        rm: arg3,
        ra: arg4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/s390x/inst.isle line 2352.
    return v8;
}

// Generated as internal constructor for term fpu_cmp32.
pub fn constructor_fpu_cmp32<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> ProducesFlags {
    let v2 = MInst::FpuCmp32 { rn: arg0, rm: arg1 };
    let v3 = ProducesFlags::ProducesFlagsSideEffect { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2359.
    return v3;
}

// Generated as internal constructor for term fpu_cmp64.
pub fn constructor_fpu_cmp64<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> ProducesFlags {
    let v2 = MInst::FpuCmp64 { rn: arg0, rm: arg1 };
    let v3 = ProducesFlags::ProducesFlagsSideEffect { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2364.
    return v3;
}

// Generated as internal constructor for term fpu_round.
pub fn constructor_fpu_round<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FpuRoundOp,
    arg2: &FpuRoundMode,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::FpuRound {
        op: arg1.clone(),
        mode: arg2.clone(),
        rd: v4,
        rn: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2369.
    return v7;
}

// Generated as internal constructor for term vec_rrr.
pub fn constructor_vec_rrr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecBinaryOp,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecRRR {
        op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2376.
    return v7;
}

// Generated as internal constructor for term vec_rr.
pub fn constructor_vec_rr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecUnaryOp,
    arg2: Reg,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg0);
    let v4 = MInst::VecRR {
        op: arg1.clone(),
        rd: v3,
        rn: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 2383.
    return v6;
}

// Generated as internal constructor for term vec_shift_rr.
pub fn constructor_vec_shift_rr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecShiftOp,
    arg2: Reg,
    arg3: u8,
    arg4: Reg,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg0);
    let v6 = MInst::VecShiftRR {
        shift_op: arg1.clone(),
        rd: v5,
        rn: arg2,
        shift_imm: arg3,
        shift_reg: arg4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/s390x/inst.isle line 2390.
    return v8;
}

// Generated as internal constructor for term vec_select.
pub fn constructor_vec_select<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecSelect {
        rd: v4,
        rn: arg1,
        rm: arg2,
        ra: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2397.
    return v7;
}

// Generated as internal constructor for term vec_permute.
pub fn constructor_vec_permute<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecPermute {
        rd: v4,
        rn: arg1,
        rm: arg2,
        ra: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2404.
    return v7;
}

// Generated as internal constructor for term vec_permute_dw_imm.
pub fn constructor_vec_permute_dw_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
    arg3: Reg,
    arg4: u8,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg0);
    let v6 = MInst::VecPermuteDWImm {
        rd: v5,
        rn: arg1,
        rm: arg3,
        idx1: arg2,
        idx2: arg4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/s390x/inst.isle line 2411.
    return v8;
}

// Generated as internal constructor for term vec_int_cmp.
pub fn constructor_vec_int_cmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecIntCmpOp,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecIntCmp {
        op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2418.
    return v7;
}

// Generated as internal constructor for term vec_int_cmps.
pub fn constructor_vec_int_cmps<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecIntCmpOp,
    arg2: Reg,
    arg3: Reg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecIntCmpS {
        op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v5 };
    // Rule at src/isa/s390x/inst.isle line 2425.
    return v6;
}

// Generated as internal constructor for term vec_float_cmp.
pub fn constructor_vec_float_cmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecFloatCmpOp,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecFloatCmp {
        op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2431.
    return v7;
}

// Generated as internal constructor for term vec_float_cmps.
pub fn constructor_vec_float_cmps<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecFloatCmpOp,
    arg2: Reg,
    arg3: Reg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecFloatCmpS {
        op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v5 };
    // Rule at src/isa/s390x/inst.isle line 2438.
    return v6;
}

// Generated as internal constructor for term vec_int128_scmphi.
pub fn constructor_vec_int128_scmphi<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
) -> ProducesBool {
    let v3 = C::temp_writable_reg(ctx, I128);
    let v7 = &C::mask_as_cond(ctx, 0x4);
    let v4 = MInst::VecInt128SCmpHi {
        tmp: v3,
        rn: arg0,
        rm: arg1,
    };
    let v5 = ProducesFlags::ProducesFlagsSideEffect { inst: v4 };
    let v8 = &constructor_bool(ctx, &v5, v7);
    // Rule at src/isa/s390x/inst.isle line 2444.
    return v8.clone();
}

// Generated as internal constructor for term vec_int128_ucmphi.
pub fn constructor_vec_int128_ucmphi<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
) -> ProducesBool {
    let v3 = C::temp_writable_reg(ctx, I128);
    let v7 = &C::mask_as_cond(ctx, 0x4);
    let v4 = MInst::VecInt128UCmpHi {
        tmp: v3,
        rn: arg0,
        rm: arg1,
    };
    let v5 = ProducesFlags::ProducesFlagsSideEffect { inst: v4 };
    let v8 = &constructor_bool(ctx, &v5, v7);
    // Rule at src/isa/s390x/inst.isle line 2451.
    return v8.clone();
}

// Generated as internal constructor for term vec_load.
pub fn constructor_vec_load<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoad {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2458.
    return v5;
}

// Generated as internal constructor for term vec_loadrev.
pub fn constructor_vec_loadrev<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadRev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2465.
    return v5;
}

// Generated as internal constructor for term vec_load_byte16rev.
pub fn constructor_vec_load_byte16rev<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadByte16Rev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2472.
    return v5;
}

// Generated as internal constructor for term vec_load_byte32rev.
pub fn constructor_vec_load_byte32rev<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadByte32Rev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2479.
    return v5;
}

// Generated as internal constructor for term vec_load_byte64rev.
pub fn constructor_vec_load_byte64rev<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadByte64Rev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2486.
    return v5;
}

// Generated as internal constructor for term vec_load_elt16rev.
pub fn constructor_vec_load_elt16rev<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadElt16Rev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2493.
    return v5;
}

// Generated as internal constructor for term vec_load_elt32rev.
pub fn constructor_vec_load_elt32rev<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadElt32Rev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2500.
    return v5;
}

// Generated as internal constructor for term vec_load_elt64rev.
pub fn constructor_vec_load_elt64rev<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadElt64Rev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2507.
    return v5;
}

// Generated as internal constructor for term vec_store.
pub fn constructor_vec_store<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStore {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2514.
    return v3;
}

// Generated as internal constructor for term vec_storerev.
pub fn constructor_vec_storerev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreRev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2519.
    return v3;
}

// Generated as internal constructor for term vec_store_byte16rev.
pub fn constructor_vec_store_byte16rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreByte16Rev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2524.
    return v3;
}

// Generated as internal constructor for term vec_store_byte32rev.
pub fn constructor_vec_store_byte32rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreByte32Rev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2529.
    return v3;
}

// Generated as internal constructor for term vec_store_byte64rev.
pub fn constructor_vec_store_byte64rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreByte64Rev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2534.
    return v3;
}

// Generated as internal constructor for term vec_store_elt16rev.
pub fn constructor_vec_store_elt16rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreElt16Rev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2539.
    return v3;
}

// Generated as internal constructor for term vec_store_elt32rev.
pub fn constructor_vec_store_elt32rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreElt32Rev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2544.
    return v3;
}

// Generated as internal constructor for term vec_store_elt64rev.
pub fn constructor_vec_store_elt64rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreElt64Rev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2549.
    return v3;
}

// Generated as internal constructor for term vec_load_replicate.
pub fn constructor_vec_load_replicate<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::multi_lane(ctx, v2);
        if let Some(v4) = v3 {
            let v8 = C::temp_writable_reg(ctx, v2);
            let v9 = MInst::VecLoadReplicate {
                size: v4.0,
                rd: v8,
                mem: arg1.clone(),
            };
            let v10 = C::emit(ctx, &v9);
            let v11 = C::writable_reg_to_reg(ctx, v8);
            // Rule at src/isa/s390x/inst.isle line 2554.
            return v11;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_replicate", "src/isa/s390x/inst.isle line 2553"
    )
}

// Generated as internal constructor for term vec_load_replicate_rev.
pub fn constructor_vec_load_replicate_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::multi_lane(ctx, v2);
        if let Some(v4) = v3 {
            let v8 = C::temp_writable_reg(ctx, v2);
            let v9 = MInst::VecLoadReplicateRev {
                size: v4.0,
                rd: v8,
                mem: arg1.clone(),
            };
            let v10 = C::emit(ctx, &v9);
            let v11 = C::writable_reg_to_reg(ctx, v8);
            // Rule at src/isa/s390x/inst.isle line 2561.
            return v11;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_replicate_rev", "src/isa/s390x/inst.isle line 2560"
    )
}

// Generated as internal constructor for term mov_to_vec128.
pub fn constructor_mov_to_vec128<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg0);
    let v4 = MInst::MovToVec128 {
        rd: v3,
        rn: arg1,
        rm: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 2568.
    return v6;
}

// Generated as internal constructor for term vec_load_const.
pub fn constructor_vec_load_const<C: Context>(ctx: &mut C, arg0: Type, arg1: u128) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::temp_writable_reg(ctx, v2);
        let v5 = MInst::VecLoadConst {
            rd: v4,
            const_data: arg1,
        };
        let v6 = C::emit(ctx, &v5);
        let v7 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src/isa/s390x/inst.isle line 2575.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_const", "src/isa/s390x/inst.isle line 2574"
    )
}

// Generated as internal constructor for term vec_load_const_replicate.
pub fn constructor_vec_load_const_replicate<C: Context>(ctx: &mut C, arg0: Type, arg1: u64) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = C::temp_writable_reg(ctx, arg0);
        let v7 = MInst::VecLoadConstReplicate {
            size: v2.0,
            rd: v6,
            const_data: arg1,
        };
        let v8 = C::emit(ctx, &v7);
        let v9 = C::writable_reg_to_reg(ctx, v6);
        // Rule at src/isa/s390x/inst.isle line 2582.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_const_replicate", "src/isa/s390x/inst.isle line 2581"
    )
}

// Generated as internal constructor for term vec_imm_byte_mask.
pub fn constructor_vec_imm_byte_mask<C: Context>(ctx: &mut C, arg0: Type, arg1: u16) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::temp_writable_reg(ctx, v2);
        let v5 = MInst::VecImmByteMask { rd: v4, mask: arg1 };
        let v6 = C::emit(ctx, &v5);
        let v7 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src/isa/s390x/inst.isle line 2589.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_imm_byte_mask", "src/isa/s390x/inst.isle line 2588"
    )
}

// Generated as internal constructor for term vec_imm_bit_mask.
pub fn constructor_vec_imm_bit_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u8,
    arg2: u8,
) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::multi_lane(ctx, v2);
        if let Some(v4) = v3 {
            let v9 = C::temp_writable_reg(ctx, v2);
            let v10 = MInst::VecImmBitMask {
                size: v4.0,
                rd: v9,
                start_bit: arg1,
                end_bit: arg2,
            };
            let v11 = C::emit(ctx, &v10);
            let v12 = C::writable_reg_to_reg(ctx, v9);
            // Rule at src/isa/s390x/inst.isle line 2596.
            return v12;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_imm_bit_mask", "src/isa/s390x/inst.isle line 2595"
    )
}

// Generated as internal constructor for term vec_imm_replicate.
pub fn constructor_vec_imm_replicate<C: Context>(ctx: &mut C, arg0: Type, arg1: i16) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::multi_lane(ctx, v2);
        if let Some(v4) = v3 {
            let v8 = C::temp_writable_reg(ctx, v2);
            let v9 = MInst::VecImmReplicate {
                size: v4.0,
                rd: v8,
                imm: arg1,
            };
            let v10 = C::emit(ctx, &v9);
            let v11 = C::writable_reg_to_reg(ctx, v8);
            // Rule at src/isa/s390x/inst.isle line 2603.
            return v11;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_imm_replicate", "src/isa/s390x/inst.isle line 2602"
    )
}

// Generated as internal constructor for term vec_load_lane.
pub fn constructor_vec_load_lane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v8 = C::temp_writable_reg(ctx, arg0);
        let v9 = MInst::VecLoadLane {
            size: v2.0,
            rd: v8,
            ri: arg1,
            mem: arg2.clone(),
            lane_imm: arg3,
        };
        let v10 = C::emit(ctx, &v9);
        let v11 = C::writable_reg_to_reg(ctx, v8);
        // Rule at src/isa/s390x/inst.isle line 2610.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_lane", "src/isa/s390x/inst.isle line 2609"
    )
}

// Generated as internal constructor for term vec_load_lane_undef.
pub fn constructor_vec_load_lane_undef<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
    arg2: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v7 = C::temp_writable_reg(ctx, arg0);
        let v8 = MInst::VecLoadLaneUndef {
            size: v2.0,
            rd: v7,
            mem: arg1.clone(),
            lane_imm: arg2,
        };
        let v9 = C::emit(ctx, &v8);
        let v10 = C::writable_reg_to_reg(ctx, v7);
        // Rule at src/isa/s390x/inst.isle line 2617.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_lane_undef", "src/isa/s390x/inst.isle line 2616"
    )
}

// Generated as internal constructor for term vec_load_lane_rev.
pub fn constructor_vec_load_lane_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v8 = C::temp_writable_reg(ctx, arg0);
        let v9 = MInst::VecLoadLaneRev {
            size: v2.0,
            rd: v8,
            ri: arg1,
            mem: arg2.clone(),
            lane_imm: arg3,
        };
        let v10 = C::emit(ctx, &v9);
        let v11 = C::writable_reg_to_reg(ctx, v8);
        // Rule at src/isa/s390x/inst.isle line 2624.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_lane_rev", "src/isa/s390x/inst.isle line 2623"
    )
}

// Generated as internal constructor for term vec_load_lane_rev_undef.
pub fn constructor_vec_load_lane_rev_undef<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
    arg2: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v7 = C::temp_writable_reg(ctx, arg0);
        let v8 = MInst::VecLoadLaneRevUndef {
            size: v2.0,
            rd: v7,
            mem: arg1.clone(),
            lane_imm: arg2,
        };
        let v9 = C::emit(ctx, &v8);
        let v10 = C::writable_reg_to_reg(ctx, v7);
        // Rule at src/isa/s390x/inst.isle line 2631.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_lane_rev_undef", "src/isa/s390x/inst.isle line 2630"
    )
}

// Generated as internal constructor for term vec_store_lane.
pub fn constructor_vec_store_lane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> SideEffectNoResult {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v8 = MInst::VecStoreLane {
            size: v2.0,
            rd: arg1,
            mem: arg2.clone(),
            lane_imm: arg3,
        };
        let v9 = SideEffectNoResult::Inst { inst: v8 };
        // Rule at src/isa/s390x/inst.isle line 2638.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_store_lane", "src/isa/s390x/inst.isle line 2637"
    )
}

// Generated as internal constructor for term vec_store_lane_rev.
pub fn constructor_vec_store_lane_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> SideEffectNoResult {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v8 = MInst::VecStoreLaneRev {
            size: v2.0,
            rd: arg1,
            mem: arg2.clone(),
            lane_imm: arg3,
        };
        let v9 = SideEffectNoResult::Inst { inst: v8 };
        // Rule at src/isa/s390x/inst.isle line 2643.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_store_lane_rev", "src/isa/s390x/inst.isle line 2642"
    )
}

// Generated as internal constructor for term vec_insert_lane.
pub fn constructor_vec_insert_lane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: u8,
    arg4: Reg,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v9 = C::temp_writable_reg(ctx, arg0);
        let v10 = MInst::VecInsertLane {
            size: v2.0,
            rd: v9,
            ri: arg1,
            rn: arg2,
            lane_imm: arg3,
            lane_reg: arg4,
        };
        let v11 = C::emit(ctx, &v10);
        let v12 = C::writable_reg_to_reg(ctx, v9);
        // Rule at src/isa/s390x/inst.isle line 2648.
        return v12;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_insert_lane", "src/isa/s390x/inst.isle line 2647"
    )
}

// Generated as internal constructor for term vec_insert_lane_undef.
pub fn constructor_vec_insert_lane_undef<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
    arg3: Reg,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v8 = C::temp_writable_reg(ctx, arg0);
        let v9 = MInst::VecInsertLaneUndef {
            size: v2.0,
            rd: v8,
            rn: arg1,
            lane_imm: arg2,
            lane_reg: arg3,
        };
        let v10 = C::emit(ctx, &v9);
        let v11 = C::writable_reg_to_reg(ctx, v8);
        // Rule at src/isa/s390x/inst.isle line 2655.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_insert_lane_undef", "src/isa/s390x/inst.isle line 2654"
    )
}

// Generated as internal constructor for term vec_extract_lane.
pub fn constructor_vec_extract_lane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
    arg3: Reg,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v9 = C::temp_writable_reg(ctx, I64);
        let v10 = MInst::VecExtractLane {
            size: v2.0,
            rd: v9,
            rn: arg1,
            lane_imm: arg2,
            lane_reg: arg3,
        };
        let v11 = C::emit(ctx, &v10);
        let v12 = C::writable_reg_to_reg(ctx, v9);
        // Rule at src/isa/s390x/inst.isle line 2662.
        return v12;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_extract_lane", "src/isa/s390x/inst.isle line 2661"
    )
}

// Generated as internal constructor for term vec_insert_lane_imm.
pub fn constructor_vec_insert_lane_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: i16,
    arg3: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v8 = C::temp_writable_reg(ctx, arg0);
        let v9 = MInst::VecInsertLaneImm {
            size: v2.0,
            rd: v8,
            ri: arg1,
            imm: arg2,
            lane_imm: arg3,
        };
        let v10 = C::emit(ctx, &v9);
        let v11 = C::writable_reg_to_reg(ctx, v8);
        // Rule at src/isa/s390x/inst.isle line 2669.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_insert_lane_imm", "src/isa/s390x/inst.isle line 2668"
    )
}

// Generated as internal constructor for term vec_replicate_lane.
pub fn constructor_vec_replicate_lane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v7 = C::temp_writable_reg(ctx, arg0);
        let v8 = MInst::VecReplicateLane {
            size: v2.0,
            rd: v7,
            rn: arg1,
            lane_imm: arg2,
        };
        let v9 = C::emit(ctx, &v8);
        let v10 = C::writable_reg_to_reg(ctx, v7);
        // Rule at src/isa/s390x/inst.isle line 2676.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_replicate_lane", "src/isa/s390x/inst.isle line 2675"
    )
}

// Generated as internal constructor for term load_symbol_reloc.
pub fn constructor_load_symbol_reloc<C: Context>(ctx: &mut C, arg0: &SymbolReloc) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = C::box_symbol_reloc(ctx, arg0);
    let v4 = MInst::LoadSymbolReloc {
        rd: v2,
        symbol_reloc: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2683.
    return v6;
}

// Generated as internal constructor for term load_addr.
pub fn constructor_load_addr<C: Context>(ctx: &mut C, arg0: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::LoadAddr {
        rd: v2,
        mem: arg0.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2690.
    return v5;
}

// Generated as internal constructor for term call_impl.
pub fn constructor_call_impl<C: Context>(
    ctx: &mut C,
    arg0: WritableReg,
    arg1: BoxCallInfo,
) -> SideEffectNoResult {
    let v2 = MInst::Call {
        link: arg0,
        info: arg1,
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2697.
    return v3;
}

// Generated as internal constructor for term call_ind_impl.
pub fn constructor_call_ind_impl<C: Context>(
    ctx: &mut C,
    arg0: WritableReg,
    arg1: BoxCallIndInfo,
) -> SideEffectNoResult {
    let v2 = MInst::CallInd {
        link: arg0,
        info: arg1,
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2702.
    return v3;
}

// Generated as internal constructor for term jump_impl.
pub fn constructor_jump_impl<C: Context>(ctx: &mut C, arg0: MachLabel) -> SideEffectNoResult {
    let v1 = MInst::Jump { dest: arg0 };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/s390x/inst.isle line 2707.
    return v2;
}

// Generated as internal constructor for term cond_br.
pub fn constructor_cond_br<C: Context>(
    ctx: &mut C,
    arg0: MachLabel,
    arg1: MachLabel,
    arg2: &Cond,
) -> ConsumesFlags {
    let v3 = MInst::CondBr {
        taken: arg0,
        not_taken: arg1,
        cond: arg2.clone(),
    };
    let v4 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/s390x/inst.isle line 2712.
    return v4;
}

// Generated as internal constructor for term oneway_cond_br.
pub fn constructor_oneway_cond_br<C: Context>(
    ctx: &mut C,
    arg0: MachLabel,
    arg1: &Cond,
) -> ConsumesFlags {
    let v2 = MInst::OneWayCondBr {
        target: arg0,
        cond: arg1.clone(),
    };
    let v3 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2717.
    return v3;
}

// Generated as internal constructor for term jt_sequence.
pub fn constructor_jt_sequence<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &VecMachLabel,
) -> SideEffectNoResult {
    let v2 = MInst::JTSequence {
        ridx: arg0,
        targets: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2722.
    return v3;
}

// Generated as internal constructor for term push_alu_reg.
pub fn constructor_push_alu_reg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &ALUOp,
    arg2: WritableReg,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v3 = C::real_reg(ctx, arg2);
    if let Some(v4) = v3 {
        let v7 = MInst::AluRRR {
            alu_op: arg1.clone(),
            rd: v4,
            rn: arg3,
            rm: arg4,
        };
        let v8 = C::inst_builder_push(ctx, arg0, &v7);
        let v9 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src/isa/s390x/inst.isle line 2760.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_alu_reg", "src/isa/s390x/inst.isle line 2759"
    )
}

// Generated as internal constructor for term push_alu_uimm32shifted.
pub fn constructor_push_alu_uimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &ALUOp,
    arg2: WritableReg,
    arg3: Reg,
    arg4: UImm32Shifted,
) -> Reg {
    let v3 = C::real_reg(ctx, arg2);
    if let Some(v4) = v3 {
        let v7 = MInst::AluRUImm32Shifted {
            alu_op: arg1.clone(),
            rd: v4,
            ri: arg3,
            imm: arg4,
        };
        let v8 = C::inst_builder_push(ctx, arg0, &v7);
        let v9 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src/isa/s390x/inst.isle line 2766.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_alu_uimm32shifted", "src/isa/s390x/inst.isle line 2765"
    )
}

// Generated as internal constructor for term push_shift.
pub fn constructor_push_shift<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &ShiftOp,
    arg2: WritableReg,
    arg3: Reg,
    arg4: u8,
    arg5: Reg,
) -> Reg {
    let v3 = C::real_reg(ctx, arg2);
    if let Some(v4) = v3 {
        let v8 = MInst::ShiftRR {
            shift_op: arg1.clone(),
            rd: v4,
            rn: arg3,
            shift_imm: arg4,
            shift_reg: arg5,
        };
        let v9 = C::inst_builder_push(ctx, arg0, &v8);
        let v10 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src/isa/s390x/inst.isle line 2772.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_shift", "src/isa/s390x/inst.isle line 2771"
    )
}

// Generated as internal constructor for term push_rxsbg.
pub fn constructor_push_rxsbg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &RxSBGOp,
    arg2: WritableReg,
    arg3: Reg,
    arg4: Reg,
    arg5: u8,
    arg6: u8,
    arg7: i8,
) -> Reg {
    let v3 = C::real_reg(ctx, arg2);
    if let Some(v4) = v3 {
        let v10 = C::same_reg(ctx, v4, arg3);
        if let Some(v11) = v10 {
            let v12 = MInst::RxSBG {
                op: arg1.clone(),
                rd: v4,
                ri: arg3,
                rn: arg4,
                start_bit: arg5,
                end_bit: arg6,
                rotate_amt: arg7,
            };
            let v13 = C::inst_builder_push(ctx, arg0, &v12);
            let v14 = C::writable_reg_to_reg(ctx, v4);
            // Rule at src/isa/s390x/inst.isle line 2779.
            return v14;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_rxsbg", "src/isa/s390x/inst.isle line 2778"
    )
}

// Generated as internal constructor for term push_unary.
pub fn constructor_push_unary<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &UnaryOp,
    arg2: WritableReg,
    arg3: Reg,
) -> Reg {
    let v3 = C::real_reg(ctx, arg2);
    if let Some(v4) = v3 {
        let v6 = MInst::UnaryRR {
            op: arg1.clone(),
            rd: v4,
            rn: arg3,
        };
        let v7 = C::inst_builder_push(ctx, arg0, &v6);
        let v8 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src/isa/s390x/inst.isle line 2787.
        return v8;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_unary", "src/isa/s390x/inst.isle line 2786"
    )
}

// Generated as internal constructor for term push_atomic_cas32.
pub fn constructor_push_atomic_cas32<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: WritableReg,
    arg2: Reg,
    arg3: &MemArg,
) -> Reg {
    let v2 = C::real_reg(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = C::writable_reg_to_reg(ctx, v3);
        let v7 = MInst::AtomicCas32 {
            rd: v3,
            ri: v6,
            rn: arg2,
            mem: arg3.clone(),
        };
        let v8 = C::inst_builder_push(ctx, arg0, &v7);
        let v9 = C::writable_reg_to_reg(ctx, v3);
        // Rule at src/isa/s390x/inst.isle line 2793.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_atomic_cas32", "src/isa/s390x/inst.isle line 2792"
    )
}

// Generated as internal constructor for term push_atomic_cas64.
pub fn constructor_push_atomic_cas64<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: WritableReg,
    arg2: Reg,
    arg3: &MemArg,
) -> Reg {
    let v2 = C::real_reg(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = C::writable_reg_to_reg(ctx, v3);
        let v7 = MInst::AtomicCas64 {
            rd: v3,
            ri: v6,
            rn: arg2,
            mem: arg3.clone(),
        };
        let v8 = C::inst_builder_push(ctx, arg0, &v7);
        let v9 = C::writable_reg_to_reg(ctx, v3);
        // Rule at src/isa/s390x/inst.isle line 2799.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_atomic_cas64", "src/isa/s390x/inst.isle line 2798"
    )
}

// Generated as internal constructor for term push_break_if.
pub fn constructor_push_break_if<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &ProducesFlags,
    arg2: &Cond,
) -> Reg {
    if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v2 } = arg1 {
        let v4 = C::inst_builder_push(ctx, arg0, v2);
        let v5 = MInst::CondBreak { cond: arg2.clone() };
        let v6 = C::inst_builder_push(ctx, arg0, &v5);
        let v7 = C::invalid_reg(ctx);
        // Rule at src/isa/s390x/inst.isle line 2805.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_break_if", "src/isa/s390x/inst.isle line 2804"
    )
}

// Generated as internal constructor for term emit_loop.
pub fn constructor_emit_loop<C: Context>(ctx: &mut C, arg0: &VecMInstBuilder, arg1: &Cond) -> Unit {
    let v2 = C::inst_builder_finish(ctx, arg0);
    let v3 = MInst::Loop {
        body: v2,
        cond: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    // Rule at src/isa/s390x/inst.isle line 2812.
    return v4;
}

// Generated as internal constructor for term copy_reg.
pub fn constructor_copy_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v8 = C::gpr64_ty(ctx, arg0);
    if let Some(v9) = v8 {
        let v10 = C::temp_writable_reg(ctx, v9);
        let v11 = MInst::Mov64 { rd: v10, rm: arg1 };
        let v12 = C::emit(ctx, &v11);
        let v13 = C::writable_reg_to_reg(ctx, v10);
        // Rule at src/isa/s390x/inst.isle line 2824.
        return v13;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::temp_writable_reg(ctx, v2);
        let v5 = MInst::Mov32 { rd: v4, rm: arg1 };
        let v6 = C::emit(ctx, &v5);
        let v7 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src/isa/s390x/inst.isle line 2820.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "copy_reg", "src/isa/s390x/inst.isle line 2819"
    )
}

// Generated as internal constructor for term emit_load.
pub fn constructor_emit_load<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: WritableReg,
    arg2: &MemArg,
) -> Unit {
    match arg0 {
        I32 => {
            let v3 = MInst::Load32 {
                rd: arg1,
                mem: arg2.clone(),
            };
            let v4 = C::emit(ctx, &v3);
            // Rule at src/isa/s390x/inst.isle line 2831.
            return v4;
        }
        I64 => {
            let v5 = MInst::Load64 {
                rd: arg1,
                mem: arg2.clone(),
            };
            let v6 = C::emit(ctx, &v5);
            // Rule at src/isa/s390x/inst.isle line 2833.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_load", "src/isa/s390x/inst.isle line 2830"
    )
}

// Generated as internal constructor for term mov_preg.
pub fn constructor_mov_preg<C: Context>(ctx: &mut C, arg0: PReg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::MovPReg { rd: v2, rm: arg0 };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2838.
    return v5;
}

// Generated as internal constructor for term sp.
pub fn constructor_sp<C: Context>(ctx: &mut C) -> Reg {
    let v0 = C::preg_stack(ctx);
    let v1 = constructor_mov_preg(ctx, v0);
    // Rule at src/isa/s390x/inst.isle line 2851.
    return v1;
}

// Generated as internal constructor for term arg_store.
pub fn constructor_arg_store<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> SideEffectNoResult {
    match arg0 {
        I8 => {
            let v3 = &constructor_store8(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 2857.
            return v3.clone();
        }
        I16 => {
            let v4 = &constructor_store16(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 2858.
            return v4.clone();
        }
        I32 => {
            let v5 = &constructor_store32(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 2859.
            return v5.clone();
        }
        I64 => {
            let v6 = &constructor_store64(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 2860.
            return v6.clone();
        }
        R64 => {
            let v6 = &constructor_store64(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 2861.
            return v6.clone();
        }
        F32 => {
            let v9 = &constructor_vec_store_lane(ctx, F32X4, arg1, arg2, 0x0);
            // Rule at src/isa/s390x/inst.isle line 2862.
            return v9.clone();
        }
        F64 => {
            let v11 = &constructor_vec_store_lane(ctx, F64X2, arg1, arg2, 0x0);
            // Rule at src/isa/s390x/inst.isle line 2863.
            return v11.clone();
        }
        _ => {}
    }
    let v12 = C::vr128_ty(ctx, arg0);
    if let Some(v13) = v12 {
        let v14 = &constructor_vec_store(ctx, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 2864.
        return v14.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "arg_store", "src/isa/s390x/inst.isle line 2856"
    )
}

// Generated as internal constructor for term arg_load.
pub fn constructor_arg_load<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    match arg0 {
        I8 => {
            let v3 = constructor_zext32_mem(ctx, I8, arg1);
            // Rule at src/isa/s390x/inst.isle line 2867.
            return v3;
        }
        I16 => {
            let v5 = constructor_zext32_mem(ctx, I16, arg1);
            // Rule at src/isa/s390x/inst.isle line 2868.
            return v5;
        }
        I32 => {
            let v6 = constructor_load32(ctx, arg1);
            // Rule at src/isa/s390x/inst.isle line 2869.
            return v6;
        }
        I64 => {
            let v7 = constructor_load64(ctx, arg1);
            // Rule at src/isa/s390x/inst.isle line 2870.
            return v7;
        }
        R64 => {
            let v7 = constructor_load64(ctx, arg1);
            // Rule at src/isa/s390x/inst.isle line 2871.
            return v7;
        }
        F32 => {
            let v10 = constructor_vec_load_lane_undef(ctx, F32X4, arg1, 0x0);
            // Rule at src/isa/s390x/inst.isle line 2872.
            return v10;
        }
        F64 => {
            let v12 = constructor_vec_load_lane_undef(ctx, F64X2, arg1, 0x0);
            // Rule at src/isa/s390x/inst.isle line 2873.
            return v12;
        }
        _ => {}
    }
    let v13 = C::vr128_ty(ctx, arg0);
    if let Some(v14) = v13 {
        let v15 = constructor_vec_load(ctx, v14, arg1);
        // Rule at src/isa/s390x/inst.isle line 2874.
        return v15;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "arg_load", "src/isa/s390x/inst.isle line 2866"
    )
}

// Generated as internal constructor for term vec_elt_rev.
pub fn constructor_vec_elt_rev<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                if v2.1 == 0x10 {
                    let v9 = constructor_vec_permute_dw_imm(ctx, I64X2, arg1, 0x1, arg1, 0x0);
                    let v11 = constructor_vec_rot_imm(ctx, I64X2, v9, 0x20);
                    let v14 = constructor_vec_rot_imm(ctx, I32X4, v11, 0x10);
                    let v17 = constructor_vec_rot_imm(ctx, I16X8, v14, 0x8);
                    // Rule at src/isa/s390x/inst.isle line 2886.
                    return v17;
                }
            }
            0x10 => {
                if v2.1 == 0x8 {
                    let v9 = constructor_vec_permute_dw_imm(ctx, I64X2, arg1, 0x1, arg1, 0x0);
                    let v11 = constructor_vec_rot_imm(ctx, I64X2, v9, 0x20);
                    let v14 = constructor_vec_rot_imm(ctx, I32X4, v11, 0x10);
                    // Rule at src/isa/s390x/inst.isle line 2883.
                    return v14;
                }
            }
            0x20 => {
                if v2.1 == 0x4 {
                    let v9 = constructor_vec_permute_dw_imm(ctx, I64X2, arg1, 0x1, arg1, 0x0);
                    let v11 = constructor_vec_rot_imm(ctx, I64X2, v9, 0x20);
                    // Rule at src/isa/s390x/inst.isle line 2880.
                    return v11;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    let v9 = constructor_vec_permute_dw_imm(ctx, I64X2, arg1, 0x1, arg1, 0x0);
                    // Rule at src/isa/s390x/inst.isle line 2878.
                    return v9;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_elt_rev", "src/isa/s390x/inst.isle line 2877"
    )
}

// Generated as internal constructor for term abi_vec_elt_rev.
pub fn constructor_abi_vec_elt_rev<C: Context>(
    ctx: &mut C,
    arg0: &LaneOrder,
    arg1: Type,
    arg2: Reg,
) -> Reg {
    let v2 = C::gpr32_ty(ctx, arg1);
    if let Some(v3) = v2 {
        // Rule at src/isa/s390x/inst.isle line 2894.
        return arg2;
    }
    let v5 = C::gpr64_ty(ctx, arg1);
    if let Some(v6) = v5 {
        // Rule at src/isa/s390x/inst.isle line 2895.
        return arg2;
    }
    let v7 = C::ty_scalar_float(ctx, arg1);
    if let Some(v8) = v7 {
        // Rule at src/isa/s390x/inst.isle line 2896.
        return arg2;
    }
    let v9 = &C::lane_order(ctx);
    let v10 = constructor_lane_order_equal(ctx, arg0, v9);
    match v10 {
        true => {
            // Rule at src/isa/s390x/inst.isle line 2897.
            return arg2;
        }
        false => {
            let v11 = C::vr128_ty(ctx, arg1);
            if let Some(v12) = v11 {
                let v13 = constructor_vec_elt_rev(ctx, v12, arg2);
                // Rule at src/isa/s390x/inst.isle line 2900.
                return v13;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "abi_vec_elt_rev", "src/isa/s390x/inst.isle line 2893"
    )
}

// Generated as internal constructor for term memcpy.
pub fn constructor_memcpy<C: Context>(
    ctx: &mut C,
    arg0: &MemArg,
    arg1: &MemArg,
    arg2: u64,
) -> SideEffectNoResult {
    let v3 = C::len_minus_one(ctx, arg2);
    if let Some(v4) = v3 {
        let v5 = &constructor_memarg_pair(ctx, arg0);
        let v6 = &constructor_memarg_pair(ctx, arg1);
        let v7 = &constructor_mvc(ctx, v5, v6, v4);
        // Rule at src/isa/s390x/inst.isle line 2906.
        return v7.clone();
    }
    let v8 = constructor_load_addr(ctx, arg0);
    let v9 = constructor_load_addr(ctx, arg1);
    let v11 = constructor_imm(ctx, I64, arg2);
    let v12 = &C::lib_call_info_memcpy(ctx, v8, v9, v11);
    let v13 = C::lib_accumulate_outgoing_args_size(ctx, v12);
    let v14 = &constructor_lib_call(ctx, v12);
    // Rule at src/isa/s390x/inst.isle line 2908.
    return v14.clone();
}

// Generated as internal constructor for term copy_to_buffer.
pub fn constructor_copy_to_buffer<C: Context>(
    ctx: &mut C,
    arg0: i64,
    arg1: &ABIArg,
    arg2: Value,
) -> InstOutput {
    let v2 = &C::abi_arg_only_slot(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = C::output_none(ctx);
        // Rule at src/isa/s390x/inst.isle line 2915.
        return v5;
    }
    let v6 = C::abi_arg_struct_pointer(ctx, arg1);
    if let Some(v7) = v6 {
        let v11 = &C::memarg_stack_off(ctx, arg0, v7.1);
        let v12 = C::put_in_reg(ctx, arg2);
        let v15 = C::memflags_trusted(ctx);
        let v16 = &C::memarg_reg_plus_off(ctx, v12, 0x0, 0x0, v15);
        let v17 = &constructor_memcpy(ctx, v11, v16, v7.2);
        let v18 = constructor_side_effect(ctx, v17);
        // Rule at src/isa/s390x/inst.isle line 2916.
        return v18;
    }
    let v19 = C::abi_arg_implicit_pointer(ctx, arg1);
    if let Some(v20) = v19 {
        let v24 = C::value_type(ctx, arg2);
        if v20.2 == v24 {
            let v25 = C::put_in_reg(ctx, arg2);
            let v26 = &C::memarg_stack_off(ctx, arg0, v20.1);
            let v27 = &constructor_arg_store(ctx, v20.2, v25, v26);
            let v28 = constructor_side_effect(ctx, v27);
            // Rule at src/isa/s390x/inst.isle line 2920.
            return v28;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "copy_to_buffer", "src/isa/s390x/inst.isle line 2914"
    )
}

// Generated as internal constructor for term copy_to_arg.
pub fn constructor_copy_to_arg<C: Context>(
    ctx: &mut C,
    arg0: &CallArgListBuilder,
    arg1: &LaneOrder,
    arg2: i64,
    arg3: &ABIArg,
    arg4: Value,
) -> InstOutput {
    let v4 = &C::abi_arg_only_slot(ctx, arg3);
    if let Some(v5) = v4 {
        let v7 = constructor_prepare_arg_val(ctx, v5, arg4);
        let v8 = constructor_copy_reg_to_arg_slot(ctx, arg0, arg1, arg2, v5, v7);
        // Rule at src/isa/s390x/inst.isle line 2927.
        return v8;
    }
    let v9 = C::abi_arg_struct_pointer(ctx, arg3);
    if let Some(v10) = v9 {
        let v14 = &C::memarg_stack_off(ctx, arg2, v10.1);
        let v15 = constructor_load_addr(ctx, v14);
        let v16 = constructor_copy_reg_to_arg_slot(ctx, arg0, arg1, arg2, &v10.0, v15);
        // Rule at src/isa/s390x/inst.isle line 2929.
        return v16;
    }
    let v17 = C::abi_arg_implicit_pointer(ctx, arg3);
    if let Some(v18) = v17 {
        let v22 = &C::memarg_stack_off(ctx, arg2, v18.1);
        let v23 = constructor_load_addr(ctx, v22);
        let v24 = constructor_copy_reg_to_arg_slot(ctx, arg0, arg1, arg2, &v18.0, v23);
        // Rule at src/isa/s390x/inst.isle line 2932.
        return v24;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "copy_to_arg", "src/isa/s390x/inst.isle line 2926"
    )
}

// Generated as internal constructor for term copy_from_arg.
pub fn constructor_copy_from_arg<C: Context>(
    ctx: &mut C,
    arg0: &CallRetList,
    arg1: &LaneOrder,
    arg2: i64,
    arg3: &ABIArg,
) -> ValueRegs {
    let v4 = &C::abi_arg_only_slot(ctx, arg3);
    if let Some(v5) = v4 {
        let v6 = constructor_copy_reg_from_arg_slot(ctx, arg0, arg1, arg2, v5);
        let v7 = C::value_reg(ctx, v6);
        // Rule at src/isa/s390x/inst.isle line 2938.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "copy_from_arg", "src/isa/s390x/inst.isle line 2937"
    )
}

// Generated as internal constructor for term prepare_arg_val.
pub fn constructor_prepare_arg_val<C: Context>(ctx: &mut C, arg0: &ABIArgSlot, arg1: Value) -> Reg {
    match arg0 {
        &ABIArgSlot::Reg {
            reg: v1,
            ty: v2,
            extension: ref v3,
        } => {
            match v3 {
                &ArgumentExtension::None => {
                    if v2 == R64 {
                        let v6 = C::put_in_reg(ctx, arg1);
                        let v7 = constructor_copy_reg(ctx, I64, v6);
                        // Rule at src/isa/s390x/inst.isle line 2945.
                        return v7;
                    }
                    let v6 = C::put_in_reg(ctx, arg1);
                    // Rule at src/isa/s390x/inst.isle line 2947.
                    return v6;
                }
                &ArgumentExtension::Uext => {
                    let v8 = constructor_put_in_reg_zext64(ctx, arg1);
                    // Rule at src/isa/s390x/inst.isle line 2949.
                    return v8;
                }
                &ArgumentExtension::Sext => {
                    let v9 = constructor_put_in_reg_sext64(ctx, arg1);
                    // Rule at src/isa/s390x/inst.isle line 2951.
                    return v9;
                }
                _ => {}
            }
        }
        &ABIArgSlot::Stack {
            offset: v10,
            ty: v11,
            extension: ref v12,
        } => {
            match v12 {
                &ArgumentExtension::None => {
                    let v6 = C::put_in_reg(ctx, arg1);
                    // Rule at src/isa/s390x/inst.isle line 2953.
                    return v6;
                }
                &ArgumentExtension::Uext => {
                    let v8 = constructor_put_in_reg_zext64(ctx, arg1);
                    // Rule at src/isa/s390x/inst.isle line 2955.
                    return v8;
                }
                &ArgumentExtension::Sext => {
                    let v9 = constructor_put_in_reg_sext64(ctx, arg1);
                    // Rule at src/isa/s390x/inst.isle line 2957.
                    return v9;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "prepare_arg_val", "src/isa/s390x/inst.isle line 2944"
    )
}

// Generated as internal constructor for term copy_reg_to_arg_slot.
pub fn constructor_copy_reg_to_arg_slot<C: Context>(
    ctx: &mut C,
    arg0: &CallArgListBuilder,
    arg1: &LaneOrder,
    arg2: i64,
    arg3: &ABIArgSlot,
    arg4: Reg,
) -> InstOutput {
    match arg3 {
        &ABIArgSlot::Reg {
            reg: v4,
            ty: v5,
            extension: ref v6,
        } => {
            let v8 = constructor_abi_vec_elt_rev(ctx, arg1, v5, arg4);
            let v9 = C::args_builder_push(ctx, arg0, v8, v4);
            let v10 = C::output_none(ctx);
            // Rule at src/isa/s390x/inst.isle line 2963.
            return v10;
        }
        &ABIArgSlot::Stack {
            offset: v11,
            ty: v12,
            extension: ref v13,
        } => {
            let v14 = constructor_abi_ext_ty(ctx, v13, v12);
            let v15 = &C::memarg_stack_off(ctx, arg2, v11);
            let v16 = &constructor_arg_store(ctx, v14, arg4, v15);
            let v17 = constructor_side_effect(ctx, v16);
            // Rule at src/isa/s390x/inst.isle line 2966.
            return v17;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "copy_reg_to_arg_slot", "src/isa/s390x/inst.isle line 2962"
    )
}

// Generated as internal constructor for term copy_reg_from_arg_slot.
pub fn constructor_copy_reg_from_arg_slot<C: Context>(
    ctx: &mut C,
    arg0: &CallRetList,
    arg1: &LaneOrder,
    arg2: i64,
    arg3: &ABIArgSlot,
) -> Reg {
    match arg3 {
        &ABIArgSlot::Reg {
            reg: v4,
            ty: v5,
            extension: ref v6,
        } => {
            let v7 = C::defs_lookup(ctx, arg0, v4);
            let v8 = constructor_abi_vec_elt_rev(ctx, arg1, v5, v7);
            // Rule at src/isa/s390x/inst.isle line 2971.
            return v8;
        }
        &ABIArgSlot::Stack {
            offset: v9,
            ty: v10,
            extension: ref v11,
        } => {
            let v12 = constructor_abi_ext_ty(ctx, v11, v10);
            let v13 = &C::memarg_stack_off(ctx, arg2, v9);
            let v14 = constructor_arg_load(ctx, v12, v13);
            // Rule at src/isa/s390x/inst.isle line 2973.
            return v14;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "copy_reg_from_arg_slot", "src/isa/s390x/inst.isle line 2970"
    )
}

// Generated as internal constructor for term abi_ext_ty.
pub fn constructor_abi_ext_ty<C: Context>(
    ctx: &mut C,
    arg0: &ArgumentExtension,
    arg1: Type,
) -> Type {
    match arg0 {
        &ArgumentExtension::Uext => {
            let v2 = C::gpr32_ty(ctx, arg1);
            if let Some(v3) = v2 {
                // Rule at src/isa/s390x/inst.isle line 2979.
                return I64;
            }
        }
        &ArgumentExtension::Sext => {
            let v2 = C::gpr32_ty(ctx, arg1);
            if let Some(v3) = v2 {
                // Rule at src/isa/s390x/inst.isle line 2980.
                return I64;
            }
        }
        _ => {}
    }
    // Rule at src/isa/s390x/inst.isle line 2978.
    return arg1;
}

// Generated as internal constructor for term imm.
pub fn constructor_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: u64) -> Reg {
    match arg0 {
        F32 => {
            let v46 = C::temp_writable_reg(ctx, F32);
            let v17 = C::u64_as_u32(ctx, arg1);
            let v47 = MInst::LoadFpuConst32 {
                rd: v46,
                const_data: v17,
            };
            let v48 = C::emit(ctx, &v47);
            let v49 = C::writable_reg_to_reg(ctx, v46);
            // Rule at src/isa/s390x/inst.isle line 3052.
            return v49;
        }
        F64 => {
            let v51 = C::temp_writable_reg(ctx, F64);
            let v52 = MInst::LoadFpuConst64 {
                rd: v51,
                const_data: arg1,
            };
            let v53 = C::emit(ctx, &v52);
            let v54 = C::writable_reg_to_reg(ctx, v51);
            // Rule at src/isa/s390x/inst.isle line 3059.
            return v54;
        }
        _ => {}
    }
    let v1 = C::fits_in_16(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::temp_writable_reg(ctx, v2);
        let v5 = C::u64_as_i16(ctx, arg1);
        let v6 = MInst::Mov32SImm16 { rd: v4, imm: v5 };
        let v7 = C::emit(ctx, &v6);
        let v8 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src/isa/s390x/inst.isle line 2989.
        return v8;
    }
    let v9 = C::gpr32_ty(ctx, arg0);
    if let Some(v10) = v9 {
        let v11 = C::i16_from_u64(ctx, arg1);
        if let Some(v12) = v11 {
            let v13 = C::temp_writable_reg(ctx, v10);
            let v14 = MInst::Mov32SImm16 { rd: v13, imm: v12 };
            let v15 = C::emit(ctx, &v14);
            let v16 = C::writable_reg_to_reg(ctx, v13);
            // Rule at src/isa/s390x/inst.isle line 2995.
            return v16;
        }
        let v13 = C::temp_writable_reg(ctx, v10);
        let v17 = C::u64_as_u32(ctx, arg1);
        let v18 = MInst::Mov32Imm { rd: v13, imm: v17 };
        let v19 = C::emit(ctx, &v18);
        let v20 = C::writable_reg_to_reg(ctx, v13);
        // Rule at src/isa/s390x/inst.isle line 3001.
        return v20;
    }
    let v21 = C::gpr64_ty(ctx, arg0);
    if let Some(v22) = v21 {
        let v11 = C::i16_from_u64(ctx, arg1);
        if let Some(v12) = v11 {
            let v23 = C::temp_writable_reg(ctx, v22);
            let v24 = MInst::Mov64SImm16 { rd: v23, imm: v12 };
            let v25 = C::emit(ctx, &v24);
            let v26 = C::writable_reg_to_reg(ctx, v23);
            // Rule at src/isa/s390x/inst.isle line 3007.
            return v26;
        }
        let v27 = C::i32_from_u64(ctx, arg1);
        if let Some(v28) = v27 {
            let v23 = C::temp_writable_reg(ctx, v22);
            let v29 = MInst::Mov64SImm32 { rd: v23, imm: v28 };
            let v30 = C::emit(ctx, &v29);
            let v26 = C::writable_reg_to_reg(ctx, v23);
            // Rule at src/isa/s390x/inst.isle line 3013.
            return v26;
        }
        let v31 = C::uimm16shifted_from_u64(ctx, arg1);
        if let Some(v32) = v31 {
            let v23 = C::temp_writable_reg(ctx, v22);
            let v33 = MInst::Mov64UImm16Shifted { rd: v23, imm: v32 };
            let v34 = C::emit(ctx, &v33);
            let v26 = C::writable_reg_to_reg(ctx, v23);
            // Rule at src/isa/s390x/inst.isle line 3019.
            return v26;
        }
        let v35 = C::uimm32shifted_from_u64(ctx, arg1);
        if let Some(v36) = v35 {
            let v23 = C::temp_writable_reg(ctx, v22);
            let v37 = MInst::Mov64UImm32Shifted { rd: v23, imm: v36 };
            let v38 = C::emit(ctx, &v37);
            let v26 = C::writable_reg_to_reg(ctx, v23);
            // Rule at src/isa/s390x/inst.isle line 3025.
            return v26;
        }
        let v39 = C::u64_nonzero_hipart(ctx, arg1);
        if let Some(v40) = v39 {
            let v41 = C::u64_nonzero_lopart(ctx, arg1);
            if let Some(v42) = v41 {
                let v43 = constructor_imm(ctx, v22, v40);
                let v44 = constructor_insert_imm(ctx, v22, v43, v42);
                // Rule at src/isa/s390x/inst.isle line 3031.
                return v44;
            }
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "imm", "src/isa/s390x/inst.isle line 2986"
    )
}

// Generated as internal constructor for term insert_imm.
pub fn constructor_insert_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u64) -> Reg {
    let v3 = C::uimm16shifted_from_u64(ctx, arg2);
    if let Some(v4) = v3 {
        let v5 = C::temp_writable_reg(ctx, arg0);
        let v6 = MInst::Insert64UImm16Shifted {
            rd: v5,
            ri: arg1,
            imm: v4,
        };
        let v7 = C::emit(ctx, &v6);
        let v8 = C::writable_reg_to_reg(ctx, v5);
        // Rule at src/isa/s390x/inst.isle line 3039.
        return v8;
    }
    let v9 = C::uimm32shifted_from_u64(ctx, arg2);
    if let Some(v10) = v9 {
        let v5 = C::temp_writable_reg(ctx, arg0);
        let v11 = MInst::Insert64UImm32Shifted {
            rd: v5,
            ri: arg1,
            imm: v10,
        };
        let v12 = C::emit(ctx, &v11);
        let v8 = C::writable_reg_to_reg(ctx, v5);
        // Rule at src/isa/s390x/inst.isle line 3045.
        return v8;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "insert_imm", "src/isa/s390x/inst.isle line 3036"
    )
}

// Generated as internal constructor for term imm32.
pub fn constructor_imm32<C: Context>(ctx: &mut C, arg0: Type, arg1: i32) -> Reg {
    if arg0 == I64 {
        let v3 = C::temp_writable_reg(ctx, I64);
        let v4 = MInst::Mov64SImm32 { rd: v3, imm: arg1 };
        let v5 = C::emit(ctx, &v4);
        let v6 = C::writable_reg_to_reg(ctx, v3);
        // Rule at src/isa/s390x/inst.isle line 3066.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "imm32", "src/isa/s390x/inst.isle line 3065"
    )
}

// Generated as internal constructor for term vec_imm.
pub fn constructor_vec_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: u128) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        if arg1 == 0x0 {
            let v5 = constructor_vec_imm_byte_mask(ctx, v2, 0x0);
            // Rule at src/isa/s390x/inst.isle line 3073.
            return v5;
        }
        let v6 = C::u64_pair_split(ctx, arg1);
        if v6.0 == v6.1 {
            let v10 = constructor_vec_imm_splat(ctx, I64X2, v6.0);
            // Rule at src/isa/s390x/inst.isle line 3075.
            return v10;
        }
        let v11 = constructor_vec_load_const(ctx, v2, arg1);
        // Rule at src/isa/s390x/inst.isle line 3077.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_imm", "src/isa/s390x/inst.isle line 3072"
    )
}

// Generated as internal constructor for term vec_imm_splat.
pub fn constructor_vec_imm_splat<C: Context>(ctx: &mut C, arg0: Type, arg1: u64) -> Reg {
    let v6 = C::multi_lane(ctx, arg0);
    if let Some(v7) = v6 {
        match v7.0 {
            0x8 => {
                let v10 = C::u64_as_i16(ctx, arg1);
                let v11 = constructor_vec_imm_replicate(ctx, arg0, v10);
                // Rule at src/isa/s390x/inst.isle line 3084.
                return v11;
            }
            0x10 => {
                let v12 = C::u32_pair_split(ctx, arg1);
                let v21 = C::u16_pair_split(ctx, v12.1);
                let v24 = C::u8_pair_split(ctx, v21.1);
                if v24.0 == v24.1 {
                    let v28 = C::u8_as_u64(ctx, v24.0);
                    let v29 = constructor_vec_imm_splat(ctx, I8X16, v28);
                    // Rule at src/isa/s390x/inst.isle line 3092.
                    return v29;
                }
                let v10 = C::u64_as_i16(ctx, arg1);
                let v11 = constructor_vec_imm_replicate(ctx, arg0, v10);
                // Rule at src/isa/s390x/inst.isle line 3086.
                return v11;
            }
            0x20 => {
                let v12 = C::u32_pair_split(ctx, arg1);
                let v21 = C::u16_pair_split(ctx, v12.1);
                if v21.0 == v21.1 {
                    let v31 = C::u16_as_u64(ctx, v21.0);
                    let v32 = constructor_vec_imm_splat(ctx, I16X8, v31);
                    // Rule at src/isa/s390x/inst.isle line 3094.
                    return v32;
                }
                let v15 = C::i16_from_u32(ctx, v12.1);
                if let Some(v16) = v15 {
                    let v17 = constructor_vec_imm_replicate(ctx, arg0, v16);
                    // Rule at src/isa/s390x/inst.isle line 3088.
                    return v17;
                }
            }
            0x40 => {
                let v12 = C::u32_pair_split(ctx, arg1);
                if v12.0 == v12.1 {
                    let v34 = C::u32_as_u64(ctx, v12.0);
                    let v35 = constructor_vec_imm_splat(ctx, I32X4, v34);
                    // Rule at src/isa/s390x/inst.isle line 3096.
                    return v35;
                }
                let v18 = C::i16_from_u64(ctx, arg1);
                if let Some(v19) = v18 {
                    let v20 = constructor_vec_imm_replicate(ctx, arg0, v19);
                    // Rule at src/isa/s390x/inst.isle line 3090.
                    return v20;
                }
            }
            _ => {}
        }
    }
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        if arg1 == 0x0 {
            let v5 = constructor_vec_imm_byte_mask(ctx, v2, 0x0);
            // Rule at src/isa/s390x/inst.isle line 3082.
            return v5;
        }
        let v36 = constructor_vec_load_const_replicate(ctx, v2, arg1);
        // Rule at src/isa/s390x/inst.isle line 3098.
        return v36;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_imm_splat", "src/isa/s390x/inst.isle line 3081"
    )
}

// Generated as internal constructor for term ty_ext32.
pub fn constructor_ty_ext32<C: Context>(ctx: &mut C, arg0: Type) -> Type {
    match arg0 {
        I8 => {
            // Rule at src/isa/s390x/inst.isle line 3106.
            return I32;
        }
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 3107.
            return I32;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 3108.
            return I32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 3109.
            return I64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "ty_ext32", "src/isa/s390x/inst.isle line 3105"
    )
}

// Generated as internal constructor for term ty_ext64.
pub fn constructor_ty_ext64<C: Context>(ctx: &mut C, arg0: Type) -> Type {
    match arg0 {
        I8 => {
            // Rule at src/isa/s390x/inst.isle line 3113.
            return I64;
        }
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 3114.
            return I64;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 3115.
            return I64;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 3116.
            return I64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "ty_ext64", "src/isa/s390x/inst.isle line 3112"
    )
}

// Generated as internal constructor for term zext32_reg.
pub fn constructor_zext32_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I32);
    let v5 = C::ty_bits(ctx, arg0);
    let v7 = MInst::Extend {
        rd: v3,
        rn: arg1,
        signed: false,
        from_bits: v5,
        to_bits: 0x20,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 3121.
    return v9;
}

// Generated as internal constructor for term sext32_reg.
pub fn constructor_sext32_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I32);
    let v5 = C::ty_bits(ctx, arg0);
    let v7 = MInst::Extend {
        rd: v3,
        rn: arg1,
        signed: true,
        from_bits: v5,
        to_bits: 0x20,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 3128.
    return v9;
}

// Generated as internal constructor for term zext64_reg.
pub fn constructor_zext64_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v5 = C::ty_bits(ctx, arg0);
    let v7 = MInst::Extend {
        rd: v3,
        rn: arg1,
        signed: false,
        from_bits: v5,
        to_bits: 0x40,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 3135.
    return v9;
}

// Generated as internal constructor for term sext64_reg.
pub fn constructor_sext64_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v5 = C::ty_bits(ctx, arg0);
    let v7 = MInst::Extend {
        rd: v3,
        rn: arg1,
        signed: true,
        from_bits: v5,
        to_bits: 0x40,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 3142.
    return v9;
}

// Generated as internal constructor for term zext32_mem.
pub fn constructor_zext32_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    match arg0 {
        I8 => {
            let v3 = C::temp_writable_reg(ctx, I32);
            let v4 = MInst::Load32ZExt8 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v5 = C::emit(ctx, &v4);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3150.
            return v6;
        }
        I16 => {
            let v3 = C::temp_writable_reg(ctx, I32);
            let v7 = MInst::Load32ZExt16 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v8 = C::emit(ctx, &v7);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3154.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "zext32_mem", "src/isa/s390x/inst.isle line 3149"
    )
}

// Generated as internal constructor for term sext32_mem.
pub fn constructor_sext32_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    match arg0 {
        I8 => {
            let v3 = C::temp_writable_reg(ctx, I32);
            let v4 = MInst::Load32SExt8 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v5 = C::emit(ctx, &v4);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3161.
            return v6;
        }
        I16 => {
            let v3 = C::temp_writable_reg(ctx, I32);
            let v7 = MInst::Load32SExt16 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v8 = C::emit(ctx, &v7);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3165.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sext32_mem", "src/isa/s390x/inst.isle line 3160"
    )
}

// Generated as internal constructor for term zext64_mem.
pub fn constructor_zext64_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    match arg0 {
        I8 => {
            let v3 = C::temp_writable_reg(ctx, I64);
            let v4 = MInst::Load64ZExt8 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v5 = C::emit(ctx, &v4);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3172.
            return v6;
        }
        I16 => {
            let v3 = C::temp_writable_reg(ctx, I64);
            let v7 = MInst::Load64ZExt16 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v8 = C::emit(ctx, &v7);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3176.
            return v6;
        }
        I32 => {
            let v3 = C::temp_writable_reg(ctx, I64);
            let v9 = MInst::Load64ZExt32 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v10 = C::emit(ctx, &v9);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3180.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "zext64_mem", "src/isa/s390x/inst.isle line 3171"
    )
}

// Generated as internal constructor for term sext64_mem.
pub fn constructor_sext64_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    match arg0 {
        I8 => {
            let v3 = C::temp_writable_reg(ctx, I64);
            let v4 = MInst::Load64SExt8 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v5 = C::emit(ctx, &v4);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3187.
            return v6;
        }
        I16 => {
            let v3 = C::temp_writable_reg(ctx, I64);
            let v7 = MInst::Load64SExt16 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v8 = C::emit(ctx, &v7);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3191.
            return v6;
        }
        I32 => {
            let v3 = C::temp_writable_reg(ctx, I64);
            let v9 = MInst::Load64SExt32 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v10 = C::emit(ctx, &v9);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3195.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sext64_mem", "src/isa/s390x/inst.isle line 3186"
    )
}

// Generated as internal constructor for term put_in_reg_zext32.
pub fn constructor_put_in_reg_zext32<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v2 = C::u64_from_value(ctx, arg0);
    if let Some(v3) = v2 {
        let v1 = C::value_type(ctx, arg0);
        let v4 = constructor_ty_ext32(ctx, v1);
        let v5 = constructor_imm(ctx, v4, v3);
        // Rule at src/isa/s390x/inst.isle line 3203.
        return v5;
    }
    let v1 = C::value_type(ctx, arg0);
    let v21 = C::ty_32_or_64(ctx, v1);
    if let Some(v22) = v21 {
        let v19 = C::put_in_reg(ctx, arg0);
        // Rule at src/isa/s390x/inst.isle line 3209.
        return v19;
    }
    let v6 = C::fits_in_16(ctx, v1);
    if let Some(v7) = v6 {
        let v8 = C::sinkable_inst(ctx, arg0);
        if let Some(v9) = v8 {
            let v10 = &C::inst_data(ctx, v9);
            if let &InstructionData::Load {
                opcode: ref v11,
                arg: v12,
                flags: v13,
                offset: v14,
            } = v10
            {
                if let &Opcode::Load = v11 {
                    let v15 = C::bigendian(ctx, v13);
                    if let Some(v16) = v15 {
                        let v17 = &constructor_sink_load(ctx, v9);
                        let v18 = constructor_zext32_mem(ctx, v7, v17);
                        // Rule at src/isa/s390x/inst.isle line 3205.
                        return v18;
                    }
                }
            }
        }
        let v19 = C::put_in_reg(ctx, arg0);
        let v20 = constructor_zext32_reg(ctx, v7, v19);
        // Rule at src/isa/s390x/inst.isle line 3207.
        return v20;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_zext32", "src/isa/s390x/inst.isle line 3202"
    )
}

// Generated as internal constructor for term put_in_reg_sext32.
pub fn constructor_put_in_reg_sext32<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v2 = C::u64_from_signed_value(ctx, arg0);
    if let Some(v3) = v2 {
        let v1 = C::value_type(ctx, arg0);
        let v4 = constructor_ty_ext32(ctx, v1);
        let v5 = constructor_imm(ctx, v4, v3);
        // Rule at src/isa/s390x/inst.isle line 3214.
        return v5;
    }
    let v1 = C::value_type(ctx, arg0);
    let v21 = C::ty_32_or_64(ctx, v1);
    if let Some(v22) = v21 {
        let v19 = C::put_in_reg(ctx, arg0);
        // Rule at src/isa/s390x/inst.isle line 3220.
        return v19;
    }
    let v6 = C::fits_in_16(ctx, v1);
    if let Some(v7) = v6 {
        let v8 = C::sinkable_inst(ctx, arg0);
        if let Some(v9) = v8 {
            let v10 = &C::inst_data(ctx, v9);
            if let &InstructionData::Load {
                opcode: ref v11,
                arg: v12,
                flags: v13,
                offset: v14,
            } = v10
            {
                if let &Opcode::Load = v11 {
                    let v15 = C::bigendian(ctx, v13);
                    if let Some(v16) = v15 {
                        let v17 = &constructor_sink_load(ctx, v9);
                        let v18 = constructor_sext32_mem(ctx, v7, v17);
                        // Rule at src/isa/s390x/inst.isle line 3216.
                        return v18;
                    }
                }
            }
        }
        let v19 = C::put_in_reg(ctx, arg0);
        let v20 = constructor_sext32_reg(ctx, v7, v19);
        // Rule at src/isa/s390x/inst.isle line 3218.
        return v20;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_sext32", "src/isa/s390x/inst.isle line 3213"
    )
}

// Generated as internal constructor for term put_in_reg_zext64.
pub fn constructor_put_in_reg_zext64<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v2 = C::u64_from_value(ctx, arg0);
    if let Some(v3) = v2 {
        let v1 = C::value_type(ctx, arg0);
        let v4 = constructor_ty_ext64(ctx, v1);
        let v5 = constructor_imm(ctx, v4, v3);
        // Rule at src/isa/s390x/inst.isle line 3225.
        return v5;
    }
    let v1 = C::value_type(ctx, arg0);
    let v21 = C::gpr64_ty(ctx, v1);
    if let Some(v22) = v21 {
        let v19 = C::put_in_reg(ctx, arg0);
        // Rule at src/isa/s390x/inst.isle line 3231.
        return v19;
    }
    let v6 = C::gpr32_ty(ctx, v1);
    if let Some(v7) = v6 {
        let v8 = C::sinkable_inst(ctx, arg0);
        if let Some(v9) = v8 {
            let v10 = &C::inst_data(ctx, v9);
            if let &InstructionData::Load {
                opcode: ref v11,
                arg: v12,
                flags: v13,
                offset: v14,
            } = v10
            {
                if let &Opcode::Load = v11 {
                    let v15 = C::bigendian(ctx, v13);
                    if let Some(v16) = v15 {
                        let v17 = &constructor_sink_load(ctx, v9);
                        let v18 = constructor_zext64_mem(ctx, v7, v17);
                        // Rule at src/isa/s390x/inst.isle line 3227.
                        return v18;
                    }
                }
            }
        }
        let v19 = C::put_in_reg(ctx, arg0);
        let v20 = constructor_zext64_reg(ctx, v7, v19);
        // Rule at src/isa/s390x/inst.isle line 3229.
        return v20;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_zext64", "src/isa/s390x/inst.isle line 3224"
    )
}

// Generated as internal constructor for term put_in_reg_sext64.
pub fn constructor_put_in_reg_sext64<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v2 = C::u64_from_signed_value(ctx, arg0);
    if let Some(v3) = v2 {
        let v1 = C::value_type(ctx, arg0);
        let v4 = constructor_ty_ext64(ctx, v1);
        let v5 = constructor_imm(ctx, v4, v3);
        // Rule at src/isa/s390x/inst.isle line 3236.
        return v5;
    }
    let v1 = C::value_type(ctx, arg0);
    let v21 = C::gpr64_ty(ctx, v1);
    if let Some(v22) = v21 {
        let v19 = C::put_in_reg(ctx, arg0);
        // Rule at src/isa/s390x/inst.isle line 3242.
        return v19;
    }
    let v6 = C::gpr32_ty(ctx, v1);
    if let Some(v7) = v6 {
        let v8 = C::sinkable_inst(ctx, arg0);
        if let Some(v9) = v8 {
            let v10 = &C::inst_data(ctx, v9);
            if let &InstructionData::Load {
                opcode: ref v11,
                arg: v12,
                flags: v13,
                offset: v14,
            } = v10
            {
                if let &Opcode::Load = v11 {
                    let v15 = C::bigendian(ctx, v13);
                    if let Some(v16) = v15 {
                        let v17 = &constructor_sink_load(ctx, v9);
                        let v18 = constructor_sext64_mem(ctx, v7, v17);
                        // Rule at src/isa/s390x/inst.isle line 3238.
                        return v18;
                    }
                }
            }
        }
        let v19 = C::put_in_reg(ctx, arg0);
        let v20 = constructor_sext64_reg(ctx, v7, v19);
        // Rule at src/isa/s390x/inst.isle line 3240.
        return v20;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_sext64", "src/isa/s390x/inst.isle line 3235"
    )
}

// Generated as internal constructor for term cmov_imm.
pub fn constructor_cmov_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Cond,
    arg2: i16,
    arg3: Reg,
) -> ConsumesFlags {
    let v10 = C::gpr64_ty(ctx, arg0);
    if let Some(v11) = v10 {
        let v12 = C::temp_writable_reg(ctx, v11);
        let v14 = C::writable_reg_to_reg(ctx, v12);
        let v13 = MInst::CMov64SImm16 {
            rd: v12,
            cond: arg1.clone(),
            ri: arg3,
            imm: arg2,
        };
        let v15 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: v13,
            result: v14,
        };
        // Rule at src/isa/s390x/inst.isle line 3254.
        return v15;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = C::temp_writable_reg(ctx, v2);
        let v8 = C::writable_reg_to_reg(ctx, v6);
        let v7 = MInst::CMov32SImm16 {
            rd: v6,
            cond: arg1.clone(),
            ri: arg3,
            imm: arg2,
        };
        let v9 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: v7,
            result: v8,
        };
        // Rule at src/isa/s390x/inst.isle line 3250.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmov_imm", "src/isa/s390x/inst.isle line 3249"
    )
}

// Generated as internal constructor for term cmov_imm_imm.
pub fn constructor_cmov_imm_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Cond,
    arg2: i16,
    arg3: i16,
) -> ConsumesFlags {
    let v14 = C::gpr64_ty(ctx, arg0);
    if let Some(v15) = v14 {
        let v16 = C::temp_writable_reg(ctx, v15);
        let v17 = C::temp_writable_reg(ctx, v15);
        let v19 = C::writable_reg_to_reg(ctx, v16);
        let v21 = C::writable_reg_to_reg(ctx, v17);
        let v22 = C::value_reg(ctx, v21);
        let v18 = MInst::Mov64SImm16 { rd: v16, imm: arg3 };
        let v20 = MInst::CMov64SImm16 {
            rd: v17,
            cond: arg1.clone(),
            ri: v19,
            imm: arg2,
        };
        let v23 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
            inst1: v18,
            inst2: v20,
            result: v22,
        };
        // Rule at src/isa/s390x/inst.isle line 3268.
        return v23;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = C::temp_writable_reg(ctx, v2);
        let v7 = C::temp_writable_reg(ctx, v2);
        let v9 = C::writable_reg_to_reg(ctx, v6);
        let v11 = C::writable_reg_to_reg(ctx, v7);
        let v12 = C::value_reg(ctx, v11);
        let v8 = MInst::Mov32SImm16 { rd: v6, imm: arg3 };
        let v10 = MInst::CMov32SImm16 {
            rd: v7,
            cond: arg1.clone(),
            ri: v9,
            imm: arg2,
        };
        let v13 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
            inst1: v8,
            inst2: v10,
            result: v12,
        };
        // Rule at src/isa/s390x/inst.isle line 3261.
        return v13;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmov_imm_imm", "src/isa/s390x/inst.isle line 3260"
    )
}

// Generated as internal constructor for term cmov_reg_reg.
pub fn constructor_cmov_reg_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Cond,
    arg2: Reg,
    arg3: Reg,
) -> ConsumesFlags {
    match arg0 {
        F32 => {
            let v17 = C::temp_writable_reg(ctx, F32);
            let v19 = C::writable_reg_to_reg(ctx, v17);
            let v18 = MInst::FpuCMov32 {
                rd: v17,
                cond: arg1.clone(),
                ri: arg3,
                rm: arg2,
            };
            let v20 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v18,
                result: v19,
            };
            // Rule at src/isa/s390x/inst.isle line 3286.
            return v20;
        }
        F64 => {
            let v22 = C::temp_writable_reg(ctx, F64);
            let v24 = C::writable_reg_to_reg(ctx, v22);
            let v23 = MInst::FpuCMov64 {
                rd: v22,
                cond: arg1.clone(),
                ri: arg3,
                rm: arg2,
            };
            let v25 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v23,
                result: v24,
            };
            // Rule at src/isa/s390x/inst.isle line 3290.
            return v25;
        }
        _ => {}
    }
    let v10 = C::gpr64_ty(ctx, arg0);
    if let Some(v11) = v10 {
        let v12 = C::temp_writable_reg(ctx, v11);
        let v14 = C::writable_reg_to_reg(ctx, v12);
        let v13 = MInst::CMov64 {
            rd: v12,
            cond: arg1.clone(),
            ri: arg3,
            rm: arg2,
        };
        let v15 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: v13,
            result: v14,
        };
        // Rule at src/isa/s390x/inst.isle line 3282.
        return v15;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = C::temp_writable_reg(ctx, v2);
        let v8 = C::writable_reg_to_reg(ctx, v6);
        let v7 = MInst::CMov32 {
            rd: v6,
            cond: arg1.clone(),
            ri: arg3,
            rm: arg2,
        };
        let v9 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: v7,
            result: v8,
        };
        // Rule at src/isa/s390x/inst.isle line 3278.
        return v9;
    }
    let v26 = C::vr128_ty(ctx, arg0);
    if let Some(v27) = v26 {
        let v22 = C::temp_writable_reg(ctx, F64);
        let v24 = C::writable_reg_to_reg(ctx, v22);
        let v28 = MInst::VecCMov {
            rd: v22,
            cond: arg1.clone(),
            ri: arg3,
            rm: arg2,
        };
        let v29 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: v28,
            result: v24,
        };
        // Rule at src/isa/s390x/inst.isle line 3294.
        return v29;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmov_reg_reg", "src/isa/s390x/inst.isle line 3277"
    )
}

// Generated as internal constructor for term trap_if.
pub fn constructor_trap_if<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &Cond,
    arg2: &TrapCode,
) -> Reg {
    let v3 = &constructor_trap_if_impl(ctx, arg1, arg2);
    let v4 = &constructor_with_flags_side_effect(ctx, arg0, v3);
    let v5 = constructor_side_effect(ctx, v4);
    let v6 = C::invalid_reg(ctx);
    // Rule at src/isa/s390x/inst.isle line 3303.
    return v6;
}

// Generated as internal constructor for term icmps_reg_and_trap.
pub fn constructor_icmps_reg_and_trap<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &Cond,
    arg4: &TrapCode,
) -> Reg {
    let v5 = &constructor_cmpop_cmps(ctx, arg0);
    let v6 = MInst::CmpTrapRR {
        op: v5.clone(),
        rn: arg1,
        rm: arg2,
        cond: arg3.clone(),
        trap_code: arg4.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::invalid_reg(ctx);
    // Rule at src/isa/s390x/inst.isle line 3309.
    return v8;
}

// Generated as internal constructor for term icmps_simm16_and_trap.
pub fn constructor_icmps_simm16_and_trap<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: i16,
    arg3: &Cond,
    arg4: &TrapCode,
) -> Reg {
    let v5 = &constructor_cmpop_cmps(ctx, arg0);
    let v6 = MInst::CmpTrapRSImm16 {
        op: v5.clone(),
        rn: arg1,
        imm: arg2,
        cond: arg3.clone(),
        trap_code: arg4.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::invalid_reg(ctx);
    // Rule at src/isa/s390x/inst.isle line 3315.
    return v8;
}

// Generated as internal constructor for term icmpu_reg_and_trap.
pub fn constructor_icmpu_reg_and_trap<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &Cond,
    arg4: &TrapCode,
) -> Reg {
    let v5 = &constructor_cmpop_cmpu(ctx, arg0);
    let v6 = MInst::CmpTrapRR {
        op: v5.clone(),
        rn: arg1,
        rm: arg2,
        cond: arg3.clone(),
        trap_code: arg4.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::invalid_reg(ctx);
    // Rule at src/isa/s390x/inst.isle line 3321.
    return v8;
}

// Generated as internal constructor for term icmpu_uimm16_and_trap.
pub fn constructor_icmpu_uimm16_and_trap<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u16,
    arg3: &Cond,
    arg4: &TrapCode,
) -> Reg {
    let v5 = &constructor_cmpop_cmpu(ctx, arg0);
    let v6 = MInst::CmpTrapRUImm16 {
        op: v5.clone(),
        rn: arg1,
        imm: arg2,
        cond: arg3.clone(),
        trap_code: arg4.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::invalid_reg(ctx);
    // Rule at src/isa/s390x/inst.isle line 3327.
    return v8;
}

// Generated as internal constructor for term trap_impl.
pub fn constructor_trap_impl<C: Context>(ctx: &mut C, arg0: &TrapCode) -> SideEffectNoResult {
    let v1 = MInst::Trap {
        trap_code: arg0.clone(),
    };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/s390x/inst.isle line 3333.
    return v2;
}

// Generated as internal constructor for term trap_if_impl.
pub fn constructor_trap_if_impl<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: &TrapCode,
) -> ConsumesFlags {
    let v2 = MInst::TrapIf {
        cond: arg0.clone(),
        trap_code: arg1.clone(),
    };
    let v3 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 3337.
    return v3;
}

// Generated as internal constructor for term debugtrap_impl.
pub fn constructor_debugtrap_impl<C: Context>(ctx: &mut C) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst {
        inst: MInst::Debugtrap,
    };
    // Rule at src/isa/s390x/inst.isle line 3341.
    return v1;
}

// Generated as internal constructor for term bool.
pub fn constructor_bool<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &Cond,
) -> ProducesBool {
    let v2 = ProducesBool::ProducesBool {
        producer: arg0.clone(),
        cond: arg1.clone(),
    };
    // Rule at src/isa/s390x/inst.isle line 3352.
    return v2;
}

// Generated as internal constructor for term invert_bool.
pub fn constructor_invert_bool<C: Context>(ctx: &mut C, arg0: &ProducesBool) -> ProducesBool {
    if let &ProducesBool::ProducesBool {
        producer: ref v1,
        cond: ref v2,
    } = arg0
    {
        let v3 = &C::invert_cond(ctx, v2);
        let v4 = &constructor_bool(ctx, v1, v3);
        // Rule at src/isa/s390x/inst.isle line 3356.
        return v4.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "invert_bool", "src/isa/s390x/inst.isle line 3355"
    )
}

// Generated as internal constructor for term select_bool_reg.
pub fn constructor_select_bool_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ProducesBool,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    if let &ProducesBool::ProducesBool {
        producer: ref v2,
        cond: ref v3,
    } = arg1
    {
        let v6 = &constructor_cmov_reg_reg(ctx, arg0, v3, arg2, arg3);
        let v7 = constructor_with_flags_reg(ctx, v2, v6);
        // Rule at src/isa/s390x/inst.isle line 3361.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "select_bool_reg", "src/isa/s390x/inst.isle line 3360"
    )
}

// Generated as internal constructor for term select_bool_imm.
pub fn constructor_select_bool_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ProducesBool,
    arg2: i16,
    arg3: i16,
) -> Reg {
    if let &ProducesBool::ProducesBool {
        producer: ref v2,
        cond: ref v3,
    } = arg1
    {
        let v6 = &constructor_cmov_imm_imm(ctx, arg0, v3, arg2, arg3);
        let v7 = constructor_with_flags_reg(ctx, v2, v6);
        // Rule at src/isa/s390x/inst.isle line 3366.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "select_bool_imm", "src/isa/s390x/inst.isle line 3365"
    )
}

// Generated as internal constructor for term lower_bool.
pub fn constructor_lower_bool<C: Context>(ctx: &mut C, arg0: Type, arg1: &ProducesBool) -> Reg {
    if arg0 == I8 {
        let v5 = constructor_select_bool_imm(ctx, I8, arg1, 0x1, 0x0);
        // Rule at src/isa/s390x/inst.isle line 3372.
        return v5;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_bool", "src/isa/s390x/inst.isle line 3371"
    )
}

// Generated as internal constructor for term lower_bool_to_mask.
pub fn constructor_lower_bool_to_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ProducesBool,
) -> Reg {
    if arg0 == I128 {
        let v8 = constructor_lower_bool_to_mask(ctx, I64, arg1);
        let v10 = constructor_mov_to_vec128(ctx, I128, v8, v8);
        // Rule at src/isa/s390x/inst.isle line 3379.
        return v10;
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_select_bool_imm(ctx, v2, arg1, -0x1, 0x0);
        // Rule at src/isa/s390x/inst.isle line 3376.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_bool_to_mask", "src/isa/s390x/inst.isle line 3375"
    )
}

// Generated as internal constructor for term cond_br_bool.
pub fn constructor_cond_br_bool<C: Context>(
    ctx: &mut C,
    arg0: &ProducesBool,
    arg1: MachLabel,
    arg2: MachLabel,
) -> SideEffectNoResult {
    if let &ProducesBool::ProducesBool {
        producer: ref v1,
        cond: ref v2,
    } = arg0
    {
        let v5 = &constructor_cond_br(ctx, arg1, arg2, v2);
        let v6 = &constructor_with_flags_side_effect(ctx, v1, v5);
        // Rule at src/isa/s390x/inst.isle line 3385.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cond_br_bool", "src/isa/s390x/inst.isle line 3384"
    )
}

// Generated as internal constructor for term oneway_cond_br_bool.
pub fn constructor_oneway_cond_br_bool<C: Context>(
    ctx: &mut C,
    arg0: &ProducesBool,
    arg1: MachLabel,
) -> SideEffectNoResult {
    if let &ProducesBool::ProducesBool {
        producer: ref v1,
        cond: ref v2,
    } = arg0
    {
        let v4 = &constructor_oneway_cond_br(ctx, arg1, v2);
        let v5 = &constructor_with_flags_side_effect(ctx, v1, v4);
        // Rule at src/isa/s390x/inst.isle line 3390.
        return v5.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "oneway_cond_br_bool", "src/isa/s390x/inst.isle line 3389"
    )
}

// Generated as internal constructor for term trap_if_bool.
pub fn constructor_trap_if_bool<C: Context>(
    ctx: &mut C,
    arg0: &ProducesBool,
    arg1: &TrapCode,
) -> SideEffectNoResult {
    if let &ProducesBool::ProducesBool {
        producer: ref v1,
        cond: ref v2,
    } = arg0
    {
        let v4 = &constructor_trap_if_impl(ctx, v2, arg1);
        let v5 = &constructor_with_flags_side_effect(ctx, v1, v4);
        // Rule at src/isa/s390x/inst.isle line 3395.
        return v5.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "trap_if_bool", "src/isa/s390x/inst.isle line 3394"
    )
}

// Generated as internal constructor for term casloop_val_reg.
pub fn constructor_casloop_val_reg<C: Context>(ctx: &mut C) -> WritableReg {
    let v1 = C::writable_gpr(ctx, 0x0);
    // Rule at src/isa/s390x/inst.isle line 3408.
    return v1;
}

// Generated as internal constructor for term casloop_tmp_reg.
pub fn constructor_casloop_tmp_reg<C: Context>(ctx: &mut C) -> WritableReg {
    let v1 = C::writable_gpr(ctx, 0x1);
    // Rule at src/isa/s390x/inst.isle line 3412.
    return v1;
}

// Generated as internal constructor for term casloop_emit.
pub fn constructor_casloop_emit<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: Reg,
    arg4: Reg,
) -> PReg {
    let v7 = &C::memarg_reg_plus_off(ctx, arg3, 0x0, 0x0, arg2);
    let v8 = constructor_ty_ext32(ctx, arg1);
    let v9 = constructor_casloop_val_reg(ctx);
    let v10 = constructor_push_atomic_cas(ctx, arg0, v8, v9, arg4, v7);
    let v11 = constructor_ty_ext32(ctx, arg1);
    let v12 = constructor_casloop_val_reg(ctx);
    let v13 = constructor_emit_load(ctx, v11, v12, v7);
    let v15 = &C::intcc_as_cond(ctx, &IntCC::NotEqual);
    let v16 = constructor_emit_loop(ctx, arg0, v15);
    let v17 = C::preg_gpr_0(ctx);
    // Rule at src/isa/s390x/inst.isle line 3421.
    return v17;
}

// Generated as internal constructor for term casloop_result.
pub fn constructor_casloop_result<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: PReg,
) -> Reg {
    let v1 = C::ty_32_or_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::bigendian(ctx, arg1);
        if let Some(v5) = v4 {
            let v7 = constructor_mov_preg(ctx, arg2);
            // Rule at src/isa/s390x/inst.isle line 3443.
            return v7;
        }
        let v8 = C::littleendian(ctx, arg1);
        if let Some(v9) = v8 {
            let v10 = C::preg_to_reg(ctx, arg2);
            let v11 = constructor_bswap_reg(ctx, v2, v10);
            // Rule at src/isa/s390x/inst.isle line 3445.
            return v11;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "casloop_result", "src/isa/s390x/inst.isle line 3442"
    )
}

// Generated as internal constructor for term casloop.
pub fn constructor_casloop<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v5 = constructor_casloop_emit(ctx, arg0, arg1, arg2, arg3, arg4);
    let v6 = constructor_casloop_result(ctx, arg1, arg2, v5);
    // Rule at src/isa/s390x/inst.isle line 3450.
    return v6;
}

// Generated as internal constructor for term casloop_bitshift.
pub fn constructor_casloop_bitshift<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v3 = constructor_lshl_imm(ctx, I32, arg0, 0x3);
    // Rule at src/isa/s390x/inst.isle line 3465.
    return v3;
}

// Generated as internal constructor for term casloop_aligned_addr.
pub fn constructor_casloop_aligned_addr<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v4 = C::uimm16shifted(ctx, 0xFFFC, 0x0);
    let v5 = constructor_and_uimm16shifted(ctx, I64, arg0, v4);
    // Rule at src/isa/s390x/inst.isle line 3470.
    return v5;
}

// Generated as internal constructor for term casloop_rotate_in.
pub fn constructor_casloop_rotate_in<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    match arg1 {
        I8 => {
            let v6 = constructor_casloop_tmp_reg(ctx);
            let v8 = constructor_push_rot_imm_reg(ctx, arg0, I32, v6, arg4, 0x0, arg3);
            // Rule at src/isa/s390x/inst.isle line 3480.
            return v8;
        }
        I16 => {
            let v9 = C::bigendian(ctx, arg2);
            if let Some(v10) = v9 {
                let v6 = constructor_casloop_tmp_reg(ctx);
                let v8 = constructor_push_rot_imm_reg(ctx, arg0, I32, v6, arg4, 0x0, arg3);
                // Rule at src/isa/s390x/inst.isle line 3482.
                return v8;
            }
            let v11 = C::littleendian(ctx, arg2);
            if let Some(v12) = v11 {
                let v6 = constructor_casloop_tmp_reg(ctx);
                let v14 = constructor_push_rot_imm_reg(ctx, arg0, I32, v6, arg4, 0x10, arg3);
                // Rule at src/isa/s390x/inst.isle line 3484.
                return v14;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "casloop_rotate_in", "src/isa/s390x/inst.isle line 3479"
    )
}

// Generated as internal constructor for term casloop_rotate_out.
pub fn constructor_casloop_rotate_out<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    match arg1 {
        I8 => {
            let v6 = constructor_casloop_tmp_reg(ctx);
            let v8 = constructor_neg_reg(ctx, I32, arg3);
            let v9 = constructor_push_rot_imm_reg(ctx, arg0, I32, v6, arg4, 0x0, v8);
            // Rule at src/isa/s390x/inst.isle line 3493.
            return v9;
        }
        I16 => {
            let v10 = C::bigendian(ctx, arg2);
            if let Some(v11) = v10 {
                let v6 = constructor_casloop_tmp_reg(ctx);
                let v12 = constructor_push_rot_imm_reg(ctx, arg0, I32, v6, arg4, 0x0, arg3);
                // Rule at src/isa/s390x/inst.isle line 3495.
                return v12;
            }
            let v13 = C::littleendian(ctx, arg2);
            if let Some(v14) = v13 {
                let v6 = constructor_casloop_tmp_reg(ctx);
                let v16 = constructor_push_rot_imm_reg(ctx, arg0, I32, v6, arg4, 0x10, arg3);
                // Rule at src/isa/s390x/inst.isle line 3497.
                return v16;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "casloop_rotate_out", "src/isa/s390x/inst.isle line 3492"
    )
}

// Generated as internal constructor for term casloop_rotate_result.
pub fn constructor_casloop_rotate_result<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    match arg0 {
        I8 => {
            let v6 = constructor_rot_imm_reg(ctx, I32, arg3, 0x8, arg2);
            // Rule at src/isa/s390x/inst.isle line 3508.
            return v6;
        }
        I16 => {
            let v7 = C::bigendian(ctx, arg1);
            if let Some(v8) = v7 {
                let v10 = constructor_rot_imm_reg(ctx, I32, arg3, 0x10, arg2);
                // Rule at src/isa/s390x/inst.isle line 3510.
                return v10;
            }
            let v11 = C::littleendian(ctx, arg1);
            if let Some(v12) = v11 {
                let v13 = constructor_rot_reg(ctx, I32, arg3, arg2);
                let v14 = constructor_bswap_reg(ctx, I32, v13);
                // Rule at src/isa/s390x/inst.isle line 3512.
                return v14;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "casloop_rotate_result", "src/isa/s390x/inst.isle line 3507"
    )
}

// Generated as internal constructor for term casloop_subword.
pub fn constructor_casloop_subword<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: Reg,
    arg4: Reg,
    arg5: Reg,
) -> Reg {
    let v6 = constructor_casloop_emit(ctx, arg0, arg1, arg2, arg3, arg5);
    let v7 = C::preg_to_reg(ctx, v6);
    let v8 = constructor_casloop_rotate_result(ctx, arg1, arg2, arg4, v7);
    // Rule at src/isa/s390x/inst.isle line 3517.
    return v8;
}

// Generated as internal constructor for term writable_link_reg.
pub fn constructor_writable_link_reg<C: Context>(ctx: &mut C) -> WritableReg {
    let v1 = C::writable_gpr(ctx, 0xE);
    // Rule at src/isa/s390x/inst.isle line 3566.
    return v1;
}

// Generated as internal constructor for term abi_call.
pub fn constructor_abi_call<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: ExternalName,
    arg2: &CallArgList,
    arg3: &CallRetList,
    arg4: &Opcode,
) -> SideEffectNoResult {
    let v5 = constructor_writable_link_reg(ctx);
    let v6 = C::abi_call_info(ctx, arg0, arg1, arg2, arg3, arg4);
    let v7 = &constructor_call_impl(ctx, v5, v6);
    // Rule at src/isa/s390x/inst.isle line 3569.
    return v7.clone();
}

// Generated as internal constructor for term abi_call_ind.
pub fn constructor_abi_call_ind<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: Reg,
    arg2: &CallArgList,
    arg3: &CallRetList,
    arg4: &Opcode,
) -> SideEffectNoResult {
    let v5 = constructor_writable_link_reg(ctx);
    let v6 = C::abi_call_ind_info(ctx, arg0, arg1, arg2, arg3, arg4);
    let v7 = &constructor_call_ind_impl(ctx, v5, v6);
    // Rule at src/isa/s390x/inst.isle line 3573.
    return v7.clone();
}

// Generated as internal constructor for term lib_call.
pub fn constructor_lib_call<C: Context>(ctx: &mut C, arg0: &LibCallInfo) -> SideEffectNoResult {
    let v1 = constructor_writable_link_reg(ctx);
    let v2 = C::lib_call_info(ctx, arg0);
    let v3 = &constructor_call_impl(ctx, v1, v2);
    // Rule at src/isa/s390x/inst.isle line 3597.
    return v3.clone();
}

// Generated as internal constructor for term vec_widen_type.
pub fn constructor_vec_widen_type<C: Context>(ctx: &mut C, arg0: Type) -> Type {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3607.
            return I16X8;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3608.
            return I32X4;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3609.
            return I64X2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_widen_type", "src/isa/s390x/inst.isle line 3606"
    )
}

// Generated as internal constructor for term vecop_pack.
pub fn constructor_vecop_pack<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3612.
            return VecBinaryOp::Pack16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3613.
            return VecBinaryOp::Pack32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 3614.
            return VecBinaryOp::Pack64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_pack", "src/isa/s390x/inst.isle line 3611"
    )
}

// Generated as internal constructor for term vec_pack.
pub fn constructor_vec_pack<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_pack(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3617.
    return v4;
}

// Generated as internal constructor for term vecop_pack_ssat.
pub fn constructor_vecop_pack_ssat<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3620.
            return VecBinaryOp::PackSSat16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3621.
            return VecBinaryOp::PackSSat32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 3622.
            return VecBinaryOp::PackSSat64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_pack_ssat", "src/isa/s390x/inst.isle line 3619"
    )
}

// Generated as internal constructor for term vec_pack_ssat.
pub fn constructor_vec_pack_ssat<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_pack_ssat(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3625.
    return v4;
}

// Generated as internal constructor for term vecop_pack_usat.
pub fn constructor_vecop_pack_usat<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3628.
            return VecBinaryOp::PackUSat16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3629.
            return VecBinaryOp::PackUSat32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 3630.
            return VecBinaryOp::PackUSat64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_pack_usat", "src/isa/s390x/inst.isle line 3627"
    )
}

// Generated as internal constructor for term vec_pack_usat.
pub fn constructor_vec_pack_usat<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_pack_usat(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3633.
    return v4;
}

// Generated as internal constructor for term vecop_unpacks_low.
pub fn constructor_vecop_unpacks_low<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3636.
            return VecUnaryOp::UnpackSLow8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3637.
            return VecUnaryOp::UnpackSLow16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3638.
            return VecUnaryOp::UnpackSLow32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_unpacks_low", "src/isa/s390x/inst.isle line 3635"
    )
}

// Generated as internal constructor for term vec_unpacks_low.
pub fn constructor_vec_unpacks_low<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_unpacks_low(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 3641.
    return v3;
}

// Generated as internal constructor for term vecop_unpacks_high.
pub fn constructor_vecop_unpacks_high<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3644.
            return VecUnaryOp::UnpackSHigh8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3645.
            return VecUnaryOp::UnpackSHigh16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3646.
            return VecUnaryOp::UnpackSHigh32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_unpacks_high", "src/isa/s390x/inst.isle line 3643"
    )
}

// Generated as internal constructor for term vec_unpacks_high.
pub fn constructor_vec_unpacks_high<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_unpacks_high(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 3649.
    return v3;
}

// Generated as internal constructor for term vecop_unpacku_low.
pub fn constructor_vecop_unpacku_low<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3652.
            return VecUnaryOp::UnpackULow8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3653.
            return VecUnaryOp::UnpackULow16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3654.
            return VecUnaryOp::UnpackULow32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_unpacku_low", "src/isa/s390x/inst.isle line 3651"
    )
}

// Generated as internal constructor for term vec_unpacku_low.
pub fn constructor_vec_unpacku_low<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_unpacku_low(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 3657.
    return v3;
}

// Generated as internal constructor for term vecop_unpacku_high.
pub fn constructor_vecop_unpacku_high<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3660.
            return VecUnaryOp::UnpackUHigh8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3661.
            return VecUnaryOp::UnpackUHigh16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3662.
            return VecUnaryOp::UnpackUHigh32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_unpacku_high", "src/isa/s390x/inst.isle line 3659"
    )
}

// Generated as internal constructor for term vec_unpacku_high.
pub fn constructor_vec_unpacku_high<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_unpacku_high(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 3665.
    return v3;
}

// Generated as internal constructor for term vec_pack_lane_order.
pub fn constructor_vec_pack_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &C::lane_order(ctx);
    match v3 {
        &LaneOrder::LittleEndian => {
            let v5 = constructor_vec_pack(ctx, arg0, arg2, arg1);
            // Rule at src/isa/s390x/inst.isle line 3676.
            return v5;
        }
        &LaneOrder::BigEndian => {
            let v4 = constructor_vec_pack(ctx, arg0, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 3673.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_pack_lane_order", "src/isa/s390x/inst.isle line 3672"
    )
}

// Generated as internal constructor for term vec_pack_ssat_lane_order.
pub fn constructor_vec_pack_ssat_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &C::lane_order(ctx);
    match v3 {
        &LaneOrder::LittleEndian => {
            let v5 = constructor_vec_pack_ssat(ctx, arg0, arg2, arg1);
            // Rule at src/isa/s390x/inst.isle line 3684.
            return v5;
        }
        &LaneOrder::BigEndian => {
            let v4 = constructor_vec_pack_ssat(ctx, arg0, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 3681.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_pack_ssat_lane_order", "src/isa/s390x/inst.isle line 3680"
    )
}

// Generated as internal constructor for term vec_pack_usat_lane_order.
pub fn constructor_vec_pack_usat_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &C::lane_order(ctx);
    match v3 {
        &LaneOrder::LittleEndian => {
            let v5 = constructor_vec_pack_usat(ctx, arg0, arg2, arg1);
            // Rule at src/isa/s390x/inst.isle line 3692.
            return v5;
        }
        &LaneOrder::BigEndian => {
            let v4 = constructor_vec_pack_usat(ctx, arg0, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 3689.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_pack_usat_lane_order", "src/isa/s390x/inst.isle line 3688"
    )
}

// Generated as internal constructor for term vec_unpacks_low_lane_order.
pub fn constructor_vec_unpacks_low_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &C::lane_order(ctx);
    match v2 {
        &LaneOrder::LittleEndian => {
            let v4 = constructor_vec_unpacks_low(ctx, arg0, arg1);
            // Rule at src/isa/s390x/inst.isle line 3705.
            return v4;
        }
        &LaneOrder::BigEndian => {
            let v3 = constructor_vec_unpacks_high(ctx, arg0, arg1);
            // Rule at src/isa/s390x/inst.isle line 3702.
            return v3;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_unpacks_low_lane_order", "src/isa/s390x/inst.isle line 3701"
    )
}

// Generated as internal constructor for term vec_unpacks_high_lane_order.
pub fn constructor_vec_unpacks_high_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &C::lane_order(ctx);
    match v2 {
        &LaneOrder::LittleEndian => {
            let v4 = constructor_vec_unpacks_high(ctx, arg0, arg1);
            // Rule at src/isa/s390x/inst.isle line 3713.
            return v4;
        }
        &LaneOrder::BigEndian => {
            let v3 = constructor_vec_unpacks_low(ctx, arg0, arg1);
            // Rule at src/isa/s390x/inst.isle line 3710.
            return v3;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_unpacks_high_lane_order", "src/isa/s390x/inst.isle line 3709"
    )
}

// Generated as internal constructor for term vec_unpacku_low_lane_order.
pub fn constructor_vec_unpacku_low_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &C::lane_order(ctx);
    match v2 {
        &LaneOrder::LittleEndian => {
            let v4 = constructor_vec_unpacku_low(ctx, arg0, arg1);
            // Rule at src/isa/s390x/inst.isle line 3721.
            return v4;
        }
        &LaneOrder::BigEndian => {
            let v3 = constructor_vec_unpacku_high(ctx, arg0, arg1);
            // Rule at src/isa/s390x/inst.isle line 3718.
            return v3;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_unpacku_low_lane_order", "src/isa/s390x/inst.isle line 3717"
    )
}

// Generated as internal constructor for term vec_unpacku_high_lane_order.
pub fn constructor_vec_unpacku_high_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &C::lane_order(ctx);
    match v2 {
        &LaneOrder::LittleEndian => {
            let v4 = constructor_vec_unpacku_high(ctx, arg0, arg1);
            // Rule at src/isa/s390x/inst.isle line 3729.
            return v4;
        }
        &LaneOrder::BigEndian => {
            let v3 = constructor_vec_unpacku_low(ctx, arg0, arg1);
            // Rule at src/isa/s390x/inst.isle line 3726.
            return v3;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_unpacku_high_lane_order", "src/isa/s390x/inst.isle line 3725"
    )
}

// Generated as internal constructor for term vecop_merge_low.
pub fn constructor_vecop_merge_low<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3737.
            return VecBinaryOp::MergeLow8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3738.
            return VecBinaryOp::MergeLow16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3739.
            return VecBinaryOp::MergeLow32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 3740.
            return VecBinaryOp::MergeLow64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_merge_low", "src/isa/s390x/inst.isle line 3736"
    )
}

// Generated as internal constructor for term vec_merge_low.
pub fn constructor_vec_merge_low<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_merge_low(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3743.
    return v4;
}

// Generated as internal constructor for term vecop_merge_high.
pub fn constructor_vecop_merge_high<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3746.
            return VecBinaryOp::MergeHigh8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3747.
            return VecBinaryOp::MergeHigh16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3748.
            return VecBinaryOp::MergeHigh32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 3749.
            return VecBinaryOp::MergeHigh64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_merge_high", "src/isa/s390x/inst.isle line 3745"
    )
}

// Generated as internal constructor for term vec_merge_high.
pub fn constructor_vec_merge_high<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_vecop_merge_high(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3752.
    return v4;
}

// Generated as internal constructor for term vec_merge_low_lane_order.
pub fn constructor_vec_merge_low_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &C::lane_order(ctx);
    match v3 {
        &LaneOrder::LittleEndian => {
            let v5 = constructor_vec_merge_low(ctx, arg0, arg2, arg1);
            // Rule at src/isa/s390x/inst.isle line 3766.
            return v5;
        }
        &LaneOrder::BigEndian => {
            let v4 = constructor_vec_merge_high(ctx, arg0, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 3763.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_merge_low_lane_order", "src/isa/s390x/inst.isle line 3762"
    )
}

// Generated as internal constructor for term vec_merge_high_lane_order.
pub fn constructor_vec_merge_high_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &C::lane_order(ctx);
    match v3 {
        &LaneOrder::LittleEndian => {
            let v5 = constructor_vec_merge_high(ctx, arg0, arg2, arg1);
            // Rule at src/isa/s390x/inst.isle line 3774.
            return v5;
        }
        &LaneOrder::BigEndian => {
            let v4 = constructor_vec_merge_low(ctx, arg0, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 3771.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_merge_high_lane_order", "src/isa/s390x/inst.isle line 3770"
    )
}

// Generated as internal constructor for term clz_reg.
pub fn constructor_clz_reg<C: Context>(ctx: &mut C, arg0: i16, arg1: Reg) -> Reg {
    if arg0 == 0x40 {
        let v2 = constructor_temp_writable_regpair(ctx);
        let v3 = MInst::Flogr { rd: v2, rn: arg1 };
        let v4 = C::emit(ctx, &v3);
        let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
        let v6 = C::regpair_hi(ctx, v5);
        // Rule at src/isa/s390x/inst.isle line 3785.
        return v6;
    }
    let v2 = constructor_temp_writable_regpair(ctx);
    let v10 = &C::intcc_as_cond(ctx, &IntCC::Equal);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    let v6 = C::regpair_hi(ctx, v5);
    let v11 = &constructor_cmov_imm(ctx, I64, v10, arg0, v6);
    let v3 = MInst::Flogr { rd: v2, rn: arg1 };
    let v7 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    let v12 = constructor_with_flags_reg(ctx, &v7, v11);
    // Rule at src/isa/s390x/inst.isle line 3791.
    return v12;
}

// Generated as internal constructor for term vecop_clz.
pub fn constructor_vecop_clz<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3799.
            return VecUnaryOp::Clz8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3800.
            return VecUnaryOp::Clz16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3801.
            return VecUnaryOp::Clz32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 3802.
            return VecUnaryOp::Clz64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_clz", "src/isa/s390x/inst.isle line 3798"
    )
}

// Generated as internal constructor for term vec_clz.
pub fn constructor_vec_clz<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_clz(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 3805.
    return v3;
}

// Generated as internal constructor for term vecop_ctz.
pub fn constructor_vecop_ctz<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3809.
            return VecUnaryOp::Ctz8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3810.
            return VecUnaryOp::Ctz16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3811.
            return VecUnaryOp::Ctz32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 3812.
            return VecUnaryOp::Ctz64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_ctz", "src/isa/s390x/inst.isle line 3808"
    )
}

// Generated as internal constructor for term vec_ctz.
pub fn constructor_vec_ctz<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_ctz(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 3815.
    return v3;
}

// Generated as internal constructor for term uint_sat_reg.
pub fn constructor_uint_sat_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Type, arg2: Reg) -> Reg {
    if arg0 == arg1 {
        // Rule at src/isa/s390x/inst.isle line 3821.
        return arg2;
    }
    match arg0 {
        I8 => {
            let v3 = C::ty_32_or_64(ctx, arg1);
            if let Some(v4) = v3 {
                let v6 = &constructor_icmpu_uimm32(ctx, v4, arg2, 0x100);
                let v8 = &C::intcc_as_cond(ctx, &IntCC::UnsignedGreaterThan);
                let v10 = &constructor_cmov_imm(ctx, v4, v8, 0xFF, arg2);
                let v11 = constructor_with_flags_reg(ctx, v6, v10);
                // Rule at src/isa/s390x/inst.isle line 3822.
                return v11;
            }
        }
        I16 => {
            let v3 = C::ty_32_or_64(ctx, arg1);
            if let Some(v4) = v3 {
                let v13 = &constructor_icmpu_uimm32(ctx, v4, arg2, 0xFFFF);
                let v8 = &C::intcc_as_cond(ctx, &IntCC::UnsignedGreaterThan);
                let v15 = &constructor_cmov_imm(ctx, v4, v8, -0x1, arg2);
                let v16 = constructor_with_flags_reg(ctx, v13, v15);
                // Rule at src/isa/s390x/inst.isle line 3825.
                return v16;
            }
        }
        I32 => {
            if arg1 == I64 {
                let v19 = constructor_imm(ctx, I64, 0xFFFFFFFF);
                let v20 = &constructor_icmpu_reg(ctx, I64, arg2, v19);
                let v21 = &C::intcc_as_cond(ctx, &IntCC::UnsignedGreaterThan);
                let v22 = &constructor_bool(ctx, v20, v21);
                let v23 = constructor_select_bool_reg(ctx, I64, v22, v19, arg2);
                // Rule at src/isa/s390x/inst.isle line 3828.
                return v23;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "uint_sat_reg", "src/isa/s390x/inst.isle line 3820"
    )
}

// Generated as internal constructor for term sint_sat_reg.
pub fn constructor_sint_sat_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Type, arg2: Reg) -> Reg {
    if arg0 == arg1 {
        // Rule at src/isa/s390x/inst.isle line 3836.
        return arg2;
    }
    match arg0 {
        I8 => {
            let v3 = C::ty_32_or_64(ctx, arg1);
            if let Some(v4) = v3 {
                let v6 = &constructor_icmps_simm16(ctx, v4, arg2, 0x7F);
                let v8 = &C::intcc_as_cond(ctx, &IntCC::SignedGreaterThan);
                let v9 = &constructor_cmov_imm(ctx, v4, v8, 0x7F, arg2);
                let v10 = constructor_with_flags_reg(ctx, v6, v9);
                let v12 = &constructor_icmps_simm16(ctx, v4, v10, -0x80);
                let v14 = &C::intcc_as_cond(ctx, &IntCC::SignedLessThan);
                let v15 = &constructor_cmov_imm(ctx, v4, v14, -0x80, v10);
                let v16 = constructor_with_flags_reg(ctx, v12, v15);
                // Rule at src/isa/s390x/inst.isle line 3837.
                return v16;
            }
        }
        I16 => {
            let v3 = C::ty_32_or_64(ctx, arg1);
            if let Some(v4) = v3 {
                let v18 = &constructor_icmps_simm16(ctx, v4, arg2, 0x7FFF);
                let v8 = &C::intcc_as_cond(ctx, &IntCC::SignedGreaterThan);
                let v19 = &constructor_cmov_imm(ctx, v4, v8, 0x7FFF, arg2);
                let v20 = constructor_with_flags_reg(ctx, v18, v19);
                let v22 = &constructor_icmps_simm16(ctx, v4, v20, -0x8000);
                let v14 = &C::intcc_as_cond(ctx, &IntCC::SignedLessThan);
                let v23 = &constructor_cmov_imm(ctx, v4, v14, -0x8000, v20);
                let v24 = constructor_with_flags_reg(ctx, v22, v23);
                // Rule at src/isa/s390x/inst.isle line 3843.
                return v24;
            }
        }
        I32 => {
            if arg1 == I64 {
                let v27 = constructor_imm32(ctx, I64, 0x7FFFFFFF);
                let v28 = &constructor_icmps_reg(ctx, I64, arg2, v27);
                let v29 = &C::intcc_as_cond(ctx, &IntCC::SignedGreaterThan);
                let v30 = &constructor_bool(ctx, v28, v29);
                let v31 = constructor_select_bool_reg(ctx, I64, v30, v27, arg2);
                let v33 = constructor_imm32(ctx, I64, -0x80000000);
                let v34 = &constructor_icmps_reg(ctx, I64, v31, v33);
                let v35 = &C::intcc_as_cond(ctx, &IntCC::SignedLessThan);
                let v36 = &constructor_bool(ctx, v34, v35);
                let v37 = constructor_select_bool_reg(ctx, I64, v36, v33, v31);
                // Rule at src/isa/s390x/inst.isle line 3849.
                return v37;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sint_sat_reg", "src/isa/s390x/inst.isle line 3835"
    )
}

// Generated as internal constructor for term aluop_add.
pub fn constructor_aluop_add<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I8 => {
            // Rule at src/isa/s390x/inst.isle line 3865.
            return ALUOp::Add32;
        }
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 3866.
            return ALUOp::Add32;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 3867.
            return ALUOp::Add32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 3868.
            return ALUOp::Add64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_add", "src/isa/s390x/inst.isle line 3864"
    )
}

// Generated as internal constructor for term aluop_add_sext16.
pub fn constructor_aluop_add_sext16<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 3871.
            return ALUOp::Add32Ext16;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 3872.
            return ALUOp::Add32Ext16;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 3873.
            return ALUOp::Add64Ext16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_add_sext16", "src/isa/s390x/inst.isle line 3870"
    )
}

// Generated as internal constructor for term aluop_add_sext32.
pub fn constructor_aluop_add_sext32<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    if arg0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 3876.
        return ALUOp::Add64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_add_sext32", "src/isa/s390x/inst.isle line 3875"
    )
}

// Generated as internal constructor for term add_reg.
pub fn constructor_add_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_add(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3879.
    return v4;
}

// Generated as internal constructor for term add_reg_sext32.
pub fn constructor_add_reg_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_add_sext32(ctx, arg0);
    let v4 = constructor_alu_rr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3882.
    return v4;
}

// Generated as internal constructor for term add_simm16.
pub fn constructor_add_simm16<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: i16) -> Reg {
    let v3 = &constructor_aluop_add(ctx, arg0);
    let v4 = constructor_alu_rrsimm16(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3885.
    return v4;
}

// Generated as internal constructor for term add_simm32.
pub fn constructor_add_simm32<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: i32) -> Reg {
    let v3 = &constructor_aluop_add(ctx, arg0);
    let v4 = constructor_alu_rsimm32(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3888.
    return v4;
}

// Generated as internal constructor for term add_mem.
pub fn constructor_add_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: &MemArg) -> Reg {
    let v3 = &constructor_aluop_add(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3891.
    return v4;
}

// Generated as internal constructor for term add_mem_sext16.
pub fn constructor_add_mem_sext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_add_sext16(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3894.
    return v4;
}

// Generated as internal constructor for term add_mem_sext32.
pub fn constructor_add_mem_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_add_sext32(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3897.
    return v4;
}

// Generated as internal constructor for term vecop_add.
pub fn constructor_vecop_add<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I128 => {
            // Rule at src/isa/s390x/inst.isle line 3904.
            return VecBinaryOp::Add128;
        }
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3900.
            return VecBinaryOp::Add8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3901.
            return VecBinaryOp::Add16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3902.
            return VecBinaryOp::Add32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 3903.
            return VecBinaryOp::Add64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_add", "src/isa/s390x/inst.isle line 3899"
    )
}

// Generated as internal constructor for term vec_add.
pub fn constructor_vec_add<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_add(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3907.
    return v4;
}

// Generated as internal constructor for term aluop_add_logical.
pub fn constructor_aluop_add_logical<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 3913.
            return ALUOp::AddLogical32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 3914.
            return ALUOp::AddLogical64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_add_logical", "src/isa/s390x/inst.isle line 3912"
    )
}

// Generated as internal constructor for term aluop_add_logical_zext32.
pub fn constructor_aluop_add_logical_zext32<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    if arg0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 3917.
        return ALUOp::AddLogical64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_add_logical_zext32", "src/isa/s390x/inst.isle line 3916"
    )
}

// Generated as internal constructor for term add_logical_reg.
pub fn constructor_add_logical_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_add_logical(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3920.
    return v4;
}

// Generated as internal constructor for term add_logical_reg_with_flags_paired.
pub fn constructor_add_logical_reg_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = &constructor_aluop_add_logical(ctx, arg0);
    let v4 = &constructor_alu_rrr_with_flags_paired(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3923.
    return v4.clone();
}

// Generated as internal constructor for term add_logical_reg_zext32.
pub fn constructor_add_logical_reg_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_add_logical_zext32(ctx, arg0);
    let v4 = constructor_alu_rr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3927.
    return v4;
}

// Generated as internal constructor for term add_logical_reg_zext32_with_flags_paired.
pub fn constructor_add_logical_reg_zext32_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = &constructor_aluop_add_logical_zext32(ctx, arg0);
    let v4 = &constructor_alu_rr_with_flags_paired(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3930.
    return v4.clone();
}

// Generated as internal constructor for term add_logical_zimm32.
pub fn constructor_add_logical_zimm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u32,
) -> Reg {
    let v3 = &constructor_aluop_add_logical(ctx, arg0);
    let v4 = constructor_alu_ruimm32(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3934.
    return v4;
}

// Generated as internal constructor for term add_logical_zimm32_with_flags_paired.
pub fn constructor_add_logical_zimm32_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u32,
) -> ProducesFlags {
    let v3 = &constructor_aluop_add_logical(ctx, arg0);
    let v4 = &constructor_alu_ruimm32_with_flags_paired(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3937.
    return v4.clone();
}

// Generated as internal constructor for term add_logical_mem.
pub fn constructor_add_logical_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_add_logical(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3941.
    return v4;
}

// Generated as internal constructor for term add_logical_mem_with_flags_paired.
pub fn constructor_add_logical_mem_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_aluop_add_logical(ctx, arg0);
    let v4 = &constructor_alu_rx_with_flags_paired(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3944.
    return v4.clone();
}

// Generated as internal constructor for term add_logical_mem_zext32.
pub fn constructor_add_logical_mem_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_add_logical_zext32(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3948.
    return v4;
}

// Generated as internal constructor for term add_logical_mem_zext32_with_flags_paired.
pub fn constructor_add_logical_mem_zext32_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_aluop_add_logical_zext32(ctx, arg0);
    let v4 = &constructor_alu_rx_with_flags_paired(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3951.
    return v4.clone();
}

// Generated as internal constructor for term aluop_sub.
pub fn constructor_aluop_sub<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I8 => {
            // Rule at src/isa/s390x/inst.isle line 3958.
            return ALUOp::Sub32;
        }
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 3959.
            return ALUOp::Sub32;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 3960.
            return ALUOp::Sub32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 3961.
            return ALUOp::Sub64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_sub", "src/isa/s390x/inst.isle line 3957"
    )
}

// Generated as internal constructor for term aluop_sub_sext16.
pub fn constructor_aluop_sub_sext16<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 3964.
            return ALUOp::Sub32Ext16;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 3965.
            return ALUOp::Sub32Ext16;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 3966.
            return ALUOp::Sub64Ext16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_sub_sext16", "src/isa/s390x/inst.isle line 3963"
    )
}

// Generated as internal constructor for term aluop_sub_sext32.
pub fn constructor_aluop_sub_sext32<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    if arg0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 3969.
        return ALUOp::Sub64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_sub_sext32", "src/isa/s390x/inst.isle line 3968"
    )
}

// Generated as internal constructor for term sub_reg.
pub fn constructor_sub_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_sub(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3972.
    return v4;
}

// Generated as internal constructor for term sub_reg_sext32.
pub fn constructor_sub_reg_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_sub_sext32(ctx, arg0);
    let v4 = constructor_alu_rr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3975.
    return v4;
}

// Generated as internal constructor for term sub_mem.
pub fn constructor_sub_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: &MemArg) -> Reg {
    let v3 = &constructor_aluop_sub(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3978.
    return v4;
}

// Generated as internal constructor for term sub_mem_sext16.
pub fn constructor_sub_mem_sext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_sub_sext16(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3981.
    return v4;
}

// Generated as internal constructor for term sub_mem_sext32.
pub fn constructor_sub_mem_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_sub_sext32(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3984.
    return v4;
}

// Generated as internal constructor for term vecop_sub.
pub fn constructor_vecop_sub<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I128 => {
            // Rule at src/isa/s390x/inst.isle line 3991.
            return VecBinaryOp::Sub128;
        }
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3987.
            return VecBinaryOp::Sub8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3988.
            return VecBinaryOp::Sub16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3989.
            return VecBinaryOp::Sub32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 3990.
            return VecBinaryOp::Sub64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_sub", "src/isa/s390x/inst.isle line 3986"
    )
}

// Generated as internal constructor for term vec_sub.
pub fn constructor_vec_sub<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_sub(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3994.
    return v4;
}

// Generated as internal constructor for term aluop_sub_logical.
pub fn constructor_aluop_sub_logical<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4000.
            return ALUOp::SubLogical32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4001.
            return ALUOp::SubLogical64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_sub_logical", "src/isa/s390x/inst.isle line 3999"
    )
}

// Generated as internal constructor for term aluop_sub_logical_zext32.
pub fn constructor_aluop_sub_logical_zext32<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    if arg0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4004.
        return ALUOp::SubLogical64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_sub_logical_zext32", "src/isa/s390x/inst.isle line 4003"
    )
}

// Generated as internal constructor for term sub_logical_reg.
pub fn constructor_sub_logical_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_sub_logical(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4007.
    return v4;
}

// Generated as internal constructor for term sub_logical_reg_zext32.
pub fn constructor_sub_logical_reg_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_sub_logical_zext32(ctx, arg0);
    let v4 = constructor_alu_rr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4010.
    return v4;
}

// Generated as internal constructor for term sub_logical_zimm32.
pub fn constructor_sub_logical_zimm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u32,
) -> Reg {
    let v3 = &constructor_aluop_sub_logical(ctx, arg0);
    let v4 = constructor_alu_ruimm32(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4013.
    return v4;
}

// Generated as internal constructor for term sub_logical_mem.
pub fn constructor_sub_logical_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_sub_logical(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4016.
    return v4;
}

// Generated as internal constructor for term sub_logical_mem_zext32.
pub fn constructor_sub_logical_mem_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_sub_logical(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4019.
    return v4;
}

// Generated as internal constructor for term aluop_mul.
pub fn constructor_aluop_mul<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I8 => {
            // Rule at src/isa/s390x/inst.isle line 4025.
            return ALUOp::Mul32;
        }
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 4026.
            return ALUOp::Mul32;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4027.
            return ALUOp::Mul32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4028.
            return ALUOp::Mul64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_mul", "src/isa/s390x/inst.isle line 4024"
    )
}

// Generated as internal constructor for term aluop_mul_sext16.
pub fn constructor_aluop_mul_sext16<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 4031.
            return ALUOp::Mul32Ext16;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4032.
            return ALUOp::Mul32Ext16;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4033.
            return ALUOp::Mul64Ext16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_mul_sext16", "src/isa/s390x/inst.isle line 4030"
    )
}

// Generated as internal constructor for term aluop_mul_sext32.
pub fn constructor_aluop_mul_sext32<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    if arg0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4036.
        return ALUOp::Mul64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_mul_sext32", "src/isa/s390x/inst.isle line 4035"
    )
}

// Generated as internal constructor for term mul_reg.
pub fn constructor_mul_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_mul(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4039.
    return v4;
}

// Generated as internal constructor for term mul_reg_sext32.
pub fn constructor_mul_reg_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_mul_sext32(ctx, arg0);
    let v4 = constructor_alu_rr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4042.
    return v4;
}

// Generated as internal constructor for term mul_simm16.
pub fn constructor_mul_simm16<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: i16) -> Reg {
    let v3 = &constructor_aluop_mul(ctx, arg0);
    let v4 = constructor_alu_rsimm16(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4045.
    return v4;
}

// Generated as internal constructor for term mul_simm32.
pub fn constructor_mul_simm32<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: i32) -> Reg {
    let v3 = &constructor_aluop_mul(ctx, arg0);
    let v4 = constructor_alu_rsimm32(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4048.
    return v4;
}

// Generated as internal constructor for term mul_mem.
pub fn constructor_mul_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: &MemArg) -> Reg {
    let v3 = &constructor_aluop_mul(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4051.
    return v4;
}

// Generated as internal constructor for term mul_mem_sext16.
pub fn constructor_mul_mem_sext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_mul_sext16(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4054.
    return v4;
}

// Generated as internal constructor for term mul_mem_sext32.
pub fn constructor_mul_mem_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_mul_sext32(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4057.
    return v4;
}

// Generated as internal constructor for term vecop_mul.
pub fn constructor_vecop_mul<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4060.
            return VecBinaryOp::Mul8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4061.
            return VecBinaryOp::Mul16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4062.
            return VecBinaryOp::Mul32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_mul", "src/isa/s390x/inst.isle line 4059"
    )
}

// Generated as internal constructor for term vec_mul.
pub fn constructor_vec_mul<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_mul(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4066.
    return v4;
}

// Generated as internal constructor for term vecop_umulhi.
pub fn constructor_vecop_umulhi<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4069.
            return VecBinaryOp::UMulHi8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4070.
            return VecBinaryOp::UMulHi16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4071.
            return VecBinaryOp::UMulHi32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_umulhi", "src/isa/s390x/inst.isle line 4068"
    )
}

// Generated as internal constructor for term vec_umulhi.
pub fn constructor_vec_umulhi<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_umulhi(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4075.
    return v4;
}

// Generated as internal constructor for term vecop_smulhi.
pub fn constructor_vecop_smulhi<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4078.
            return VecBinaryOp::SMulHi8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4079.
            return VecBinaryOp::SMulHi16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4080.
            return VecBinaryOp::SMulHi32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_smulhi", "src/isa/s390x/inst.isle line 4077"
    )
}

// Generated as internal constructor for term vec_smulhi.
pub fn constructor_vec_smulhi<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_smulhi(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4084.
    return v4;
}

// Generated as internal constructor for term vecop_umul_even.
pub fn constructor_vecop_umul_even<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4087.
            return VecBinaryOp::UMulEven8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4088.
            return VecBinaryOp::UMulEven16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4089.
            return VecBinaryOp::UMulEven32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_umul_even", "src/isa/s390x/inst.isle line 4086"
    )
}

// Generated as internal constructor for term vec_umul_even.
pub fn constructor_vec_umul_even<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_umul_even(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4093.
    return v4;
}

// Generated as internal constructor for term vecop_smul_even.
pub fn constructor_vecop_smul_even<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4096.
            return VecBinaryOp::SMulEven8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4097.
            return VecBinaryOp::SMulEven16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4098.
            return VecBinaryOp::SMulEven32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_smul_even", "src/isa/s390x/inst.isle line 4095"
    )
}

// Generated as internal constructor for term vec_smul_even.
pub fn constructor_vec_smul_even<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_smul_even(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4102.
    return v4;
}

// Generated as internal constructor for term vecop_umul_odd.
pub fn constructor_vecop_umul_odd<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4105.
            return VecBinaryOp::UMulOdd8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4106.
            return VecBinaryOp::UMulOdd16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4107.
            return VecBinaryOp::UMulOdd32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_umul_odd", "src/isa/s390x/inst.isle line 4104"
    )
}

// Generated as internal constructor for term vec_umul_odd.
pub fn constructor_vec_umul_odd<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_umul_odd(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4111.
    return v4;
}

// Generated as internal constructor for term vecop_smul_odd.
pub fn constructor_vecop_smul_odd<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4114.
            return VecBinaryOp::SMulOdd8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4115.
            return VecBinaryOp::SMulOdd16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4116.
            return VecBinaryOp::SMulOdd32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_smul_odd", "src/isa/s390x/inst.isle line 4113"
    )
}

// Generated as internal constructor for term vec_smul_odd.
pub fn constructor_vec_smul_odd<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_smul_odd(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4120.
    return v4;
}

// Generated as internal constructor for term udivmod.
pub fn constructor_udivmod<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: RegPair,
    arg2: Reg,
) -> RegPair {
    match arg0 {
        I32 => {
            let v3 = constructor_udivmod32(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4126.
            return v3;
        }
        I64 => {
            let v4 = constructor_udivmod64(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4127.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "udivmod", "src/isa/s390x/inst.isle line 4125"
    )
}

// Generated as internal constructor for term sdivmod.
pub fn constructor_sdivmod<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> RegPair {
    match arg0 {
        I32 => {
            let v3 = constructor_sdivmod32(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4133.
            return v3;
        }
        I64 => {
            let v4 = constructor_sdivmod64(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4134.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sdivmod", "src/isa/s390x/inst.isle line 4132"
    )
}

// Generated as internal constructor for term vecop_umax.
pub fn constructor_vecop_umax<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4140.
            return VecBinaryOp::UMax8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4141.
            return VecBinaryOp::UMax16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4142.
            return VecBinaryOp::UMax32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4143.
            return VecBinaryOp::UMax64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_umax", "src/isa/s390x/inst.isle line 4139"
    )
}

// Generated as internal constructor for term vec_umax.
pub fn constructor_vec_umax<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_umax(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4146.
    return v4;
}

// Generated as internal constructor for term vecop_smax.
pub fn constructor_vecop_smax<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4152.
            return VecBinaryOp::SMax8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4153.
            return VecBinaryOp::SMax16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4154.
            return VecBinaryOp::SMax32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4155.
            return VecBinaryOp::SMax64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_smax", "src/isa/s390x/inst.isle line 4151"
    )
}

// Generated as internal constructor for term vec_smax.
pub fn constructor_vec_smax<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_smax(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4158.
    return v4;
}

// Generated as internal constructor for term vecop_umin.
pub fn constructor_vecop_umin<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4164.
            return VecBinaryOp::UMin8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4165.
            return VecBinaryOp::UMin16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4166.
            return VecBinaryOp::UMin32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4167.
            return VecBinaryOp::UMin64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_umin", "src/isa/s390x/inst.isle line 4163"
    )
}

// Generated as internal constructor for term vec_umin.
pub fn constructor_vec_umin<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_umin(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4170.
    return v4;
}

// Generated as internal constructor for term vecop_smin.
pub fn constructor_vecop_smin<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4176.
            return VecBinaryOp::SMin8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4177.
            return VecBinaryOp::SMin16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4178.
            return VecBinaryOp::SMin32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4179.
            return VecBinaryOp::SMin64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_smin", "src/isa/s390x/inst.isle line 4175"
    )
}

// Generated as internal constructor for term vec_smin.
pub fn constructor_vec_smin<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_smin(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4182.
    return v4;
}

// Generated as internal constructor for term vecop_uavg.
pub fn constructor_vecop_uavg<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4188.
            return VecBinaryOp::UAvg8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4189.
            return VecBinaryOp::UAvg16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4190.
            return VecBinaryOp::UAvg32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4191.
            return VecBinaryOp::UAvg64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_uavg", "src/isa/s390x/inst.isle line 4187"
    )
}

// Generated as internal constructor for term vec_uavg.
pub fn constructor_vec_uavg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_uavg(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4194.
    return v4;
}

// Generated as internal constructor for term aluop_and.
pub fn constructor_aluop_and<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/s390x/inst.isle line 4201.
        return ALUOp::And64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 4200.
        return ALUOp::And32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_and", "src/isa/s390x/inst.isle line 4199"
    )
}

// Generated as internal constructor for term and_reg.
pub fn constructor_and_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_and(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4204.
    return v4;
}

// Generated as internal constructor for term and_uimm16shifted.
pub fn constructor_and_uimm16shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: UImm16Shifted,
) -> Reg {
    let v3 = &constructor_aluop_and(ctx, arg0);
    let v4 = constructor_alu_ruimm16shifted(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4207.
    return v4;
}

// Generated as internal constructor for term and_uimm32shifted.
pub fn constructor_and_uimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: UImm32Shifted,
) -> Reg {
    let v3 = &constructor_aluop_and(ctx, arg0);
    let v4 = constructor_alu_ruimm32shifted(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4210.
    return v4;
}

// Generated as internal constructor for term and_mem.
pub fn constructor_and_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: &MemArg) -> Reg {
    let v3 = &constructor_aluop_and(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4213.
    return v4;
}

// Generated as internal constructor for term vec_and.
pub fn constructor_vec_and<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::And128, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4216.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_and", "src/isa/s390x/inst.isle line 4215"
    )
}

// Generated as internal constructor for term aluop_or.
pub fn constructor_aluop_or<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/s390x/inst.isle line 4223.
        return ALUOp::Orr64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 4222.
        return ALUOp::Orr32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_or", "src/isa/s390x/inst.isle line 4221"
    )
}

// Generated as internal constructor for term or_reg.
pub fn constructor_or_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_or(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4226.
    return v4;
}

// Generated as internal constructor for term or_uimm16shifted.
pub fn constructor_or_uimm16shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: UImm16Shifted,
) -> Reg {
    let v3 = &constructor_aluop_or(ctx, arg0);
    let v4 = constructor_alu_ruimm16shifted(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4229.
    return v4;
}

// Generated as internal constructor for term or_uimm32shifted.
pub fn constructor_or_uimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: UImm32Shifted,
) -> Reg {
    let v3 = &constructor_aluop_or(ctx, arg0);
    let v4 = constructor_alu_ruimm32shifted(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4232.
    return v4;
}

// Generated as internal constructor for term or_mem.
pub fn constructor_or_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: &MemArg) -> Reg {
    let v3 = &constructor_aluop_or(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4235.
    return v4;
}

// Generated as internal constructor for term vec_or.
pub fn constructor_vec_or<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::Orr128, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4238.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_or", "src/isa/s390x/inst.isle line 4237"
    )
}

// Generated as internal constructor for term aluop_xor.
pub fn constructor_aluop_xor<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/s390x/inst.isle line 4245.
        return ALUOp::Xor64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 4244.
        return ALUOp::Xor32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_xor", "src/isa/s390x/inst.isle line 4243"
    )
}

// Generated as internal constructor for term xor_reg.
pub fn constructor_xor_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_xor(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4248.
    return v4;
}

// Generated as internal constructor for term xor_uimm32shifted.
pub fn constructor_xor_uimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: UImm32Shifted,
) -> Reg {
    let v3 = &constructor_aluop_xor(ctx, arg0);
    let v4 = constructor_alu_ruimm32shifted(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4251.
    return v4;
}

// Generated as internal constructor for term xor_mem.
pub fn constructor_xor_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: &MemArg) -> Reg {
    let v3 = &constructor_aluop_xor(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4254.
    return v4;
}

// Generated as internal constructor for term push_xor_uimm32shifted.
pub fn constructor_push_xor_uimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: WritableReg,
    arg3: Reg,
    arg4: UImm32Shifted,
) -> Reg {
    let v5 = &constructor_aluop_xor(ctx, arg1);
    let v6 = constructor_push_alu_uimm32shifted(ctx, arg0, v5, arg2, arg3, arg4);
    // Rule at src/isa/s390x/inst.isle line 4257.
    return v6;
}

// Generated as internal constructor for term vec_xor.
pub fn constructor_vec_xor<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::Xor128, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4261.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_xor", "src/isa/s390x/inst.isle line 4260"
    )
}

// Generated as internal constructor for term not_reg.
pub fn constructor_not_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v8 = C::gpr64_ty(ctx, arg0);
    if let Some(v9) = v8 {
        let v6 = C::uimm32shifted(ctx, 0xFFFFFFFF, 0x0);
        let v10 = constructor_xor_uimm32shifted(ctx, v9, arg1, v6);
        let v12 = C::uimm32shifted(ctx, 0xFFFFFFFF, 0x20);
        let v13 = constructor_xor_uimm32shifted(ctx, v9, v10, v12);
        // Rule at src/isa/s390x/inst.isle line 4269.
        return v13;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = C::uimm32shifted(ctx, 0xFFFFFFFF, 0x0);
        let v7 = constructor_xor_uimm32shifted(ctx, v2, arg1, v6);
        // Rule at src/isa/s390x/inst.isle line 4267.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "not_reg", "src/isa/s390x/inst.isle line 4266"
    )
}

// Generated as internal constructor for term push_not_reg.
pub fn constructor_push_not_reg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: WritableReg,
    arg3: Reg,
) -> Reg {
    let v10 = C::gpr64_ty(ctx, arg1);
    if let Some(v11) = v10 {
        let v8 = C::uimm32shifted(ctx, 0xFFFFFFFF, 0x0);
        let v12 = constructor_push_xor_uimm32shifted(ctx, arg0, v11, arg2, arg3, v8);
        let v14 = C::uimm32shifted(ctx, 0xFFFFFFFF, 0x20);
        let v15 = constructor_push_xor_uimm32shifted(ctx, arg0, v11, arg2, v12, v14);
        // Rule at src/isa/s390x/inst.isle line 4277.
        return v15;
    }
    let v2 = C::gpr32_ty(ctx, arg1);
    if let Some(v3) = v2 {
        let v8 = C::uimm32shifted(ctx, 0xFFFFFFFF, 0x0);
        let v9 = constructor_push_xor_uimm32shifted(ctx, arg0, v3, arg2, arg3, v8);
        // Rule at src/isa/s390x/inst.isle line 4275.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_not_reg", "src/isa/s390x/inst.isle line 4274"
    )
}

// Generated as internal constructor for term vec_not.
pub fn constructor_vec_not<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = constructor_vec_not_or(ctx, arg0, arg1, arg1);
    // Rule at src/isa/s390x/inst.isle line 4282.
    return v2;
}

// Generated as internal constructor for term aluop_not_and.
pub fn constructor_aluop_not_and<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/s390x/inst.isle line 4289.
        return ALUOp::NotAnd64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 4288.
        return ALUOp::NotAnd32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_not_and", "src/isa/s390x/inst.isle line 4287"
    )
}

// Generated as internal constructor for term not_and_reg.
pub fn constructor_not_and_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_not_and(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4292.
    return v4;
}

// Generated as internal constructor for term vec_not_and.
pub fn constructor_vec_not_and<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::NotAnd128, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4295.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_not_and", "src/isa/s390x/inst.isle line 4294"
    )
}

// Generated as internal constructor for term aluop_not_or.
pub fn constructor_aluop_not_or<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/s390x/inst.isle line 4302.
        return ALUOp::NotOrr64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 4301.
        return ALUOp::NotOrr32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_not_or", "src/isa/s390x/inst.isle line 4300"
    )
}

// Generated as internal constructor for term not_or_reg.
pub fn constructor_not_or_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_not_or(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4305.
    return v4;
}

// Generated as internal constructor for term vec_not_or.
pub fn constructor_vec_not_or<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::NotOrr128, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4308.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_not_or", "src/isa/s390x/inst.isle line 4307"
    )
}

// Generated as internal constructor for term aluop_not_xor.
pub fn constructor_aluop_not_xor<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/s390x/inst.isle line 4315.
        return ALUOp::NotXor64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 4314.
        return ALUOp::NotXor32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_not_xor", "src/isa/s390x/inst.isle line 4313"
    )
}

// Generated as internal constructor for term not_xor_reg.
pub fn constructor_not_xor_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_not_xor(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4318.
    return v4;
}

// Generated as internal constructor for term vec_not_xor.
pub fn constructor_vec_not_xor<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::NotXor128, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4321.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_not_xor", "src/isa/s390x/inst.isle line 4320"
    )
}

// Generated as internal constructor for term aluop_and_not.
pub fn constructor_aluop_and_not<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/s390x/inst.isle line 4328.
        return ALUOp::AndNot64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 4327.
        return ALUOp::AndNot32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_and_not", "src/isa/s390x/inst.isle line 4326"
    )
}

// Generated as internal constructor for term and_not_reg.
pub fn constructor_and_not_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_and_not(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4331.
    return v4;
}

// Generated as internal constructor for term vec_and_not.
pub fn constructor_vec_and_not<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::AndNot128, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4334.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_and_not", "src/isa/s390x/inst.isle line 4333"
    )
}

// Generated as internal constructor for term aluop_or_not.
pub fn constructor_aluop_or_not<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/s390x/inst.isle line 4341.
        return ALUOp::OrrNot64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 4340.
        return ALUOp::OrrNot32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_or_not", "src/isa/s390x/inst.isle line 4339"
    )
}

// Generated as internal constructor for term or_not_reg.
pub fn constructor_or_not_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_or_not(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4344.
    return v4;
}

// Generated as internal constructor for term vec_or_not.
pub fn constructor_vec_or_not<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::OrrNot128, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4347.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_or_not", "src/isa/s390x/inst.isle line 4346"
    )
}

// Generated as internal constructor for term vec_bitpermute.
pub fn constructor_vec_bitpermute<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I64X2, &VecBinaryOp::BitPermute128, arg0, arg1);
    // Rule at src/isa/s390x/inst.isle line 4353.
    return v4;
}

// Generated as internal constructor for term unaryop_abs.
pub fn constructor_unaryop_abs<C: Context>(ctx: &mut C, arg0: Type) -> UnaryOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4359.
            return UnaryOp::Abs32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4360.
            return UnaryOp::Abs64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "unaryop_abs", "src/isa/s390x/inst.isle line 4358"
    )
}

// Generated as internal constructor for term unaryop_abs_sext32.
pub fn constructor_unaryop_abs_sext32<C: Context>(ctx: &mut C, arg0: Type) -> UnaryOp {
    if arg0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4363.
        return UnaryOp::Abs64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "unaryop_abs_sext32", "src/isa/s390x/inst.isle line 4362"
    )
}

// Generated as internal constructor for term abs_reg.
pub fn constructor_abs_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_unaryop_abs(ctx, arg0);
    let v3 = constructor_unary_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4366.
    return v3;
}

// Generated as internal constructor for term abs_reg_sext32.
pub fn constructor_abs_reg_sext32<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_unaryop_abs_sext32(ctx, arg0);
    let v3 = constructor_unary_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4369.
    return v3;
}

// Generated as internal constructor for term vecop_abs.
pub fn constructor_vecop_abs<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4372.
            return VecUnaryOp::Abs8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4373.
            return VecUnaryOp::Abs16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4374.
            return VecUnaryOp::Abs32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4375.
            return VecUnaryOp::Abs64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_abs", "src/isa/s390x/inst.isle line 4371"
    )
}

// Generated as internal constructor for term vec_abs.
pub fn constructor_vec_abs<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_abs(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4378.
    return v3;
}

// Generated as internal constructor for term unaryop_neg.
pub fn constructor_unaryop_neg<C: Context>(ctx: &mut C, arg0: Type) -> UnaryOp {
    match arg0 {
        I8 => {
            // Rule at src/isa/s390x/inst.isle line 4384.
            return UnaryOp::Neg32;
        }
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 4385.
            return UnaryOp::Neg32;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4386.
            return UnaryOp::Neg32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4387.
            return UnaryOp::Neg64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "unaryop_neg", "src/isa/s390x/inst.isle line 4383"
    )
}

// Generated as internal constructor for term unaryop_neg_sext32.
pub fn constructor_unaryop_neg_sext32<C: Context>(ctx: &mut C, arg0: Type) -> UnaryOp {
    if arg0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4390.
        return UnaryOp::Neg64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "unaryop_neg_sext32", "src/isa/s390x/inst.isle line 4389"
    )
}

// Generated as internal constructor for term neg_reg.
pub fn constructor_neg_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_unaryop_neg(ctx, arg0);
    let v3 = constructor_unary_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4393.
    return v3;
}

// Generated as internal constructor for term neg_reg_sext32.
pub fn constructor_neg_reg_sext32<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_unaryop_neg_sext32(ctx, arg0);
    let v3 = constructor_unary_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4396.
    return v3;
}

// Generated as internal constructor for term vecop_neg.
pub fn constructor_vecop_neg<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4399.
            return VecUnaryOp::Neg8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4400.
            return VecUnaryOp::Neg16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4401.
            return VecUnaryOp::Neg32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4402.
            return VecUnaryOp::Neg64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_neg", "src/isa/s390x/inst.isle line 4398"
    )
}

// Generated as internal constructor for term vec_neg.
pub fn constructor_vec_neg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_neg(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4405.
    return v3;
}

// Generated as internal constructor for term unaryop_bswap.
pub fn constructor_unaryop_bswap<C: Context>(ctx: &mut C, arg0: Type) -> UnaryOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4411.
            return UnaryOp::BSwap32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4412.
            return UnaryOp::BSwap64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "unaryop_bswap", "src/isa/s390x/inst.isle line 4410"
    )
}

// Generated as internal constructor for term bswap_reg.
pub fn constructor_bswap_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_unaryop_bswap(ctx, arg0);
    let v3 = constructor_unary_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4415.
    return v3;
}

// Generated as internal constructor for term push_bswap_reg.
pub fn constructor_push_bswap_reg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: WritableReg,
    arg3: Reg,
) -> Reg {
    let v4 = &constructor_unaryop_bswap(ctx, arg1);
    let v5 = constructor_push_unary(ctx, arg0, v4, arg2, arg3);
    // Rule at src/isa/s390x/inst.isle line 4418.
    return v5;
}

// Generated as internal constructor for term shiftop_rot.
pub fn constructor_shiftop_rot<C: Context>(ctx: &mut C, arg0: Type) -> ShiftOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4424.
            return ShiftOp::RotL32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4425.
            return ShiftOp::RotL64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "shiftop_rot", "src/isa/s390x/inst.isle line 4423"
    )
}

// Generated as internal constructor for term rot_reg.
pub fn constructor_rot_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_shiftop_rot(ctx, arg0);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src/isa/s390x/inst.isle line 4428.
    return v5;
}

// Generated as internal constructor for term rot_imm.
pub fn constructor_rot_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_shiftop_rot(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src/isa/s390x/inst.isle line 4432.
    return v5;
}

// Generated as internal constructor for term rot_imm_reg.
pub fn constructor_rot_imm_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
    arg3: Reg,
) -> Reg {
    let v4 = &constructor_shiftop_rot(ctx, arg0);
    let v5 = constructor_shift_rr(ctx, arg0, v4, arg1, arg2, arg3);
    // Rule at src/isa/s390x/inst.isle line 4436.
    return v5;
}

// Generated as internal constructor for term push_rot_imm_reg.
pub fn constructor_push_rot_imm_reg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: WritableReg,
    arg3: Reg,
    arg4: u8,
    arg5: Reg,
) -> Reg {
    let v6 = &constructor_shiftop_rot(ctx, arg1);
    let v7 = constructor_push_shift(ctx, arg0, v6, arg2, arg3, arg4, arg5);
    // Rule at src/isa/s390x/inst.isle line 4440.
    return v7;
}

// Generated as internal constructor for term vec_shiftop_rot.
pub fn constructor_vec_shiftop_rot<C: Context>(ctx: &mut C, arg0: Type) -> VecShiftOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4444.
            return VecShiftOp::RotL8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4445.
            return VecShiftOp::RotL16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4446.
            return VecShiftOp::RotL32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4447.
            return VecShiftOp::RotL64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_shiftop_rot", "src/isa/s390x/inst.isle line 4443"
    )
}

// Generated as internal constructor for term vec_rot_reg.
pub fn constructor_vec_rot_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vec_shiftop_rot(ctx, arg0);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src/isa/s390x/inst.isle line 4450.
    return v5;
}

// Generated as internal constructor for term vec_rot_imm.
pub fn constructor_vec_rot_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_vec_shiftop_rot(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src/isa/s390x/inst.isle line 4454.
    return v5;
}

// Generated as internal constructor for term shiftop_lshl.
pub fn constructor_shiftop_lshl<C: Context>(ctx: &mut C, arg0: Type) -> ShiftOp {
    match arg0 {
        I8 => {
            // Rule at src/isa/s390x/inst.isle line 4461.
            return ShiftOp::LShL32;
        }
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 4462.
            return ShiftOp::LShL32;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4463.
            return ShiftOp::LShL32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4464.
            return ShiftOp::LShL64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "shiftop_lshl", "src/isa/s390x/inst.isle line 4460"
    )
}

// Generated as internal constructor for term lshl_reg.
pub fn constructor_lshl_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_shiftop_lshl(ctx, arg0);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src/isa/s390x/inst.isle line 4467.
    return v5;
}

// Generated as internal constructor for term lshl_imm.
pub fn constructor_lshl_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_shiftop_lshl(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src/isa/s390x/inst.isle line 4471.
    return v5;
}

// Generated as internal constructor for term vec_shiftop_lshl.
pub fn constructor_vec_shiftop_lshl<C: Context>(ctx: &mut C, arg0: Type) -> VecShiftOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4475.
            return VecShiftOp::LShL8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4476.
            return VecShiftOp::LShL16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4477.
            return VecShiftOp::LShL32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4478.
            return VecShiftOp::LShL64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_shiftop_lshl", "src/isa/s390x/inst.isle line 4474"
    )
}

// Generated as internal constructor for term vec_lshl_reg.
pub fn constructor_vec_lshl_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vec_shiftop_lshl(ctx, arg0);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src/isa/s390x/inst.isle line 4481.
    return v5;
}

// Generated as internal constructor for term vec_lshl_imm.
pub fn constructor_vec_lshl_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_vec_shiftop_lshl(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src/isa/s390x/inst.isle line 4485.
    return v5;
}

// Generated as internal constructor for term vec_lshl_by_byte.
pub fn constructor_vec_lshl_by_byte<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I8X16, &VecBinaryOp::LShLByByte128, arg0, arg1);
    // Rule at src/isa/s390x/inst.isle line 4489.
    return v4;
}

// Generated as internal constructor for term vec_lshl_by_bit.
pub fn constructor_vec_lshl_by_bit<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I8X16, &VecBinaryOp::LShLByBit128, arg0, arg1);
    // Rule at src/isa/s390x/inst.isle line 4492.
    return v4;
}

// Generated as internal constructor for term shiftop_lshr.
pub fn constructor_shiftop_lshr<C: Context>(ctx: &mut C, arg0: Type) -> ShiftOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4498.
            return ShiftOp::LShR32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4499.
            return ShiftOp::LShR64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "shiftop_lshr", "src/isa/s390x/inst.isle line 4497"
    )
}

// Generated as internal constructor for term lshr_reg.
pub fn constructor_lshr_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_shiftop_lshr(ctx, arg0);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src/isa/s390x/inst.isle line 4502.
    return v5;
}

// Generated as internal constructor for term lshr_imm.
pub fn constructor_lshr_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_shiftop_lshr(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src/isa/s390x/inst.isle line 4506.
    return v5;
}

// Generated as internal constructor for term vec_shiftop_lshr.
pub fn constructor_vec_shiftop_lshr<C: Context>(ctx: &mut C, arg0: Type) -> VecShiftOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4510.
            return VecShiftOp::LShR8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4511.
            return VecShiftOp::LShR16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4512.
            return VecShiftOp::LShR32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4513.
            return VecShiftOp::LShR64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_shiftop_lshr", "src/isa/s390x/inst.isle line 4509"
    )
}

// Generated as internal constructor for term vec_lshr_reg.
pub fn constructor_vec_lshr_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vec_shiftop_lshr(ctx, arg0);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src/isa/s390x/inst.isle line 4516.
    return v5;
}

// Generated as internal constructor for term vec_lshr_imm.
pub fn constructor_vec_lshr_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_vec_shiftop_lshr(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src/isa/s390x/inst.isle line 4520.
    return v5;
}

// Generated as internal constructor for term vec_lshr_by_byte.
pub fn constructor_vec_lshr_by_byte<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I8X16, &VecBinaryOp::LShRByByte128, arg0, arg1);
    // Rule at src/isa/s390x/inst.isle line 4524.
    return v4;
}

// Generated as internal constructor for term vec_lshr_by_bit.
pub fn constructor_vec_lshr_by_bit<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I8X16, &VecBinaryOp::LShRByBit128, arg0, arg1);
    // Rule at src/isa/s390x/inst.isle line 4527.
    return v4;
}

// Generated as internal constructor for term shiftop_ashr.
pub fn constructor_shiftop_ashr<C: Context>(ctx: &mut C, arg0: Type) -> ShiftOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4533.
            return ShiftOp::AShR32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4534.
            return ShiftOp::AShR64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "shiftop_ashr", "src/isa/s390x/inst.isle line 4532"
    )
}

// Generated as internal constructor for term ashr_reg.
pub fn constructor_ashr_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_shiftop_ashr(ctx, arg0);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src/isa/s390x/inst.isle line 4537.
    return v5;
}

// Generated as internal constructor for term ashr_imm.
pub fn constructor_ashr_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_shiftop_ashr(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src/isa/s390x/inst.isle line 4541.
    return v5;
}

// Generated as internal constructor for term vec_shiftop_ashr.
pub fn constructor_vec_shiftop_ashr<C: Context>(ctx: &mut C, arg0: Type) -> VecShiftOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4545.
            return VecShiftOp::AShR8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4546.
            return VecShiftOp::AShR16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4547.
            return VecShiftOp::AShR32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4548.
            return VecShiftOp::AShR64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_shiftop_ashr", "src/isa/s390x/inst.isle line 4544"
    )
}

// Generated as internal constructor for term vec_ashr_reg.
pub fn constructor_vec_ashr_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vec_shiftop_ashr(ctx, arg0);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src/isa/s390x/inst.isle line 4551.
    return v5;
}

// Generated as internal constructor for term vec_ashr_imm.
pub fn constructor_vec_ashr_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_vec_shiftop_ashr(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src/isa/s390x/inst.isle line 4555.
    return v5;
}

// Generated as internal constructor for term vec_ashr_by_byte.
pub fn constructor_vec_ashr_by_byte<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I8X16, &VecBinaryOp::AShRByByte128, arg0, arg1);
    // Rule at src/isa/s390x/inst.isle line 4559.
    return v4;
}

// Generated as internal constructor for term vec_ashr_by_bit.
pub fn constructor_vec_ashr_by_bit<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I8X16, &VecBinaryOp::AShRByBit128, arg0, arg1);
    // Rule at src/isa/s390x/inst.isle line 4562.
    return v4;
}

// Generated as internal constructor for term popcnt_byte.
pub fn constructor_popcnt_byte<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v3 = constructor_unary_rr(ctx, I64, &UnaryOp::PopcntByte, arg0);
    // Rule at src/isa/s390x/inst.isle line 4568.
    return v3;
}

// Generated as internal constructor for term popcnt_reg.
pub fn constructor_popcnt_reg<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v3 = constructor_unary_rr(ctx, I64, &UnaryOp::PopcntReg, arg0);
    // Rule at src/isa/s390x/inst.isle line 4571.
    return v3;
}

// Generated as internal constructor for term vecop_popcnt.
pub fn constructor_vecop_popcnt<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4574.
            return VecUnaryOp::Popcnt8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4575.
            return VecUnaryOp::Popcnt16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4576.
            return VecUnaryOp::Popcnt32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4577.
            return VecUnaryOp::Popcnt64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_popcnt", "src/isa/s390x/inst.isle line 4573"
    )
}

// Generated as internal constructor for term vec_popcnt.
pub fn constructor_vec_popcnt<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_popcnt(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4580.
    return v3;
}

// Generated as internal constructor for term atomic_rmw_and.
pub fn constructor_atomic_rmw_and<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    match arg0 {
        I32 => {
            let v5 = constructor_atomic_rmw_impl(ctx, I32, &ALUOp::And32, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4586.
            return v5;
        }
        I64 => {
            let v8 = constructor_atomic_rmw_impl(ctx, I64, &ALUOp::And64, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4587.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_and", "src/isa/s390x/inst.isle line 4585"
    )
}

// Generated as internal constructor for term atomic_rmw_or.
pub fn constructor_atomic_rmw_or<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    match arg0 {
        I32 => {
            let v5 = constructor_atomic_rmw_impl(ctx, I32, &ALUOp::Orr32, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4590.
            return v5;
        }
        I64 => {
            let v8 = constructor_atomic_rmw_impl(ctx, I64, &ALUOp::Orr64, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4591.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_or", "src/isa/s390x/inst.isle line 4589"
    )
}

// Generated as internal constructor for term atomic_rmw_xor.
pub fn constructor_atomic_rmw_xor<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    match arg0 {
        I32 => {
            let v5 = constructor_atomic_rmw_impl(ctx, I32, &ALUOp::Xor32, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4594.
            return v5;
        }
        I64 => {
            let v8 = constructor_atomic_rmw_impl(ctx, I64, &ALUOp::Xor64, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4595.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_xor", "src/isa/s390x/inst.isle line 4593"
    )
}

// Generated as internal constructor for term atomic_rmw_add.
pub fn constructor_atomic_rmw_add<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    match arg0 {
        I32 => {
            let v5 = constructor_atomic_rmw_impl(ctx, I32, &ALUOp::Add32, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4598.
            return v5;
        }
        I64 => {
            let v8 = constructor_atomic_rmw_impl(ctx, I64, &ALUOp::Add64, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4599.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_add", "src/isa/s390x/inst.isle line 4597"
    )
}

// Generated as internal constructor for term atomic_cas_impl.
pub fn constructor_atomic_cas_impl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &MemArg,
) -> Reg {
    match arg0 {
        I32 => {
            let v4 = constructor_atomic_cas32(ctx, arg1, arg2, arg3);
            // Rule at src/isa/s390x/inst.isle line 4605.
            return v4;
        }
        I64 => {
            let v5 = constructor_atomic_cas64(ctx, arg1, arg2, arg3);
            // Rule at src/isa/s390x/inst.isle line 4606.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_cas_impl", "src/isa/s390x/inst.isle line 4604"
    )
}

// Generated as internal constructor for term push_atomic_cas.
pub fn constructor_push_atomic_cas<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: WritableReg,
    arg3: Reg,
    arg4: &MemArg,
) -> Reg {
    match arg1 {
        I32 => {
            let v5 = constructor_push_atomic_cas32(ctx, arg0, arg2, arg3, arg4);
            // Rule at src/isa/s390x/inst.isle line 4609.
            return v5;
        }
        I64 => {
            let v6 = constructor_push_atomic_cas64(ctx, arg0, arg2, arg3, arg4);
            // Rule at src/isa/s390x/inst.isle line 4610.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_atomic_cas", "src/isa/s390x/inst.isle line 4608"
    )
}

// Generated as internal constructor for term fpuop2_add.
pub fn constructor_fpuop2_add<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4616.
            return FPUOp2::Add32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4617.
            return FPUOp2::Add64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4618.
            return FPUOp2::Add32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4619.
            return FPUOp2::Add64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_add", "src/isa/s390x/inst.isle line 4615"
    )
}

// Generated as internal constructor for term fadd_reg.
pub fn constructor_fadd_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_fpuop2_add(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4622.
    return v4;
}

// Generated as internal constructor for term fpuop2_sub.
pub fn constructor_fpuop2_sub<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4628.
            return FPUOp2::Sub32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4629.
            return FPUOp2::Sub64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4630.
            return FPUOp2::Sub32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4631.
            return FPUOp2::Sub64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_sub", "src/isa/s390x/inst.isle line 4627"
    )
}

// Generated as internal constructor for term fsub_reg.
pub fn constructor_fsub_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_fpuop2_sub(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4634.
    return v4;
}

// Generated as internal constructor for term fpuop2_mul.
pub fn constructor_fpuop2_mul<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4640.
            return FPUOp2::Mul32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4641.
            return FPUOp2::Mul64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4642.
            return FPUOp2::Mul32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4643.
            return FPUOp2::Mul64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_mul", "src/isa/s390x/inst.isle line 4639"
    )
}

// Generated as internal constructor for term fmul_reg.
pub fn constructor_fmul_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_fpuop2_mul(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4646.
    return v4;
}

// Generated as internal constructor for term fpuop2_div.
pub fn constructor_fpuop2_div<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4652.
            return FPUOp2::Div32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4653.
            return FPUOp2::Div64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4654.
            return FPUOp2::Div32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4655.
            return FPUOp2::Div64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_div", "src/isa/s390x/inst.isle line 4651"
    )
}

// Generated as internal constructor for term fdiv_reg.
pub fn constructor_fdiv_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_fpuop2_div(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4658.
    return v4;
}

// Generated as internal constructor for term fpuop2_min.
pub fn constructor_fpuop2_min<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4664.
            return FPUOp2::Min32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4665.
            return FPUOp2::Min64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4666.
            return FPUOp2::Min32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4667.
            return FPUOp2::Min64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_min", "src/isa/s390x/inst.isle line 4663"
    )
}

// Generated as internal constructor for term fmin_reg.
pub fn constructor_fmin_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_fpuop2_min(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4670.
    return v4;
}

// Generated as internal constructor for term fpuop2_max.
pub fn constructor_fpuop2_max<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4676.
            return FPUOp2::Max32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4677.
            return FPUOp2::Max64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4678.
            return FPUOp2::Max32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4679.
            return FPUOp2::Max64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_max", "src/isa/s390x/inst.isle line 4675"
    )
}

// Generated as internal constructor for term fmax_reg.
pub fn constructor_fmax_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_fpuop2_max(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4682.
    return v4;
}

// Generated as internal constructor for term fpuop2_min_pseudo.
pub fn constructor_fpuop2_min_pseudo<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4688.
            return FPUOp2::MinPseudo32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4689.
            return FPUOp2::MinPseudo64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4690.
            return FPUOp2::MinPseudo32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4691.
            return FPUOp2::MinPseudo64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_min_pseudo", "src/isa/s390x/inst.isle line 4687"
    )
}

// Generated as internal constructor for term fmin_pseudo_reg.
pub fn constructor_fmin_pseudo_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_fpuop2_min_pseudo(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4694.
    return v4;
}

// Generated as internal constructor for term fpuop2_max_pseudo.
pub fn constructor_fpuop2_max_pseudo<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4700.
            return FPUOp2::MaxPseudo32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4701.
            return FPUOp2::MaxPseudo64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4702.
            return FPUOp2::MaxPseudo32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4703.
            return FPUOp2::MaxPseudo64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_max_pseudo", "src/isa/s390x/inst.isle line 4699"
    )
}

// Generated as internal constructor for term fmax_pseudo_reg.
pub fn constructor_fmax_pseudo_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_fpuop2_max_pseudo(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4706.
    return v4;
}

// Generated as internal constructor for term fpuop3_fma.
pub fn constructor_fpuop3_fma<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp3 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4712.
            return FPUOp3::MAdd32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4713.
            return FPUOp3::MAdd64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4714.
            return FPUOp3::MAdd32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4715.
            return FPUOp3::MAdd64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop3_fma", "src/isa/s390x/inst.isle line 4711"
    )
}

// Generated as internal constructor for term fma_reg.
pub fn constructor_fma_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = &constructor_fpuop3_fma(ctx, arg0);
    let v5 = constructor_fpu_rrrr(ctx, arg0, v4, arg1, arg2, arg3);
    // Rule at src/isa/s390x/inst.isle line 4718.
    return v5;
}

// Generated as internal constructor for term fpuop1_sqrt.
pub fn constructor_fpuop1_sqrt<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp1 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4724.
            return FPUOp1::Sqrt32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4725.
            return FPUOp1::Sqrt64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4726.
            return FPUOp1::Sqrt32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4727.
            return FPUOp1::Sqrt64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop1_sqrt", "src/isa/s390x/inst.isle line 4723"
    )
}

// Generated as internal constructor for term sqrt_reg.
pub fn constructor_sqrt_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_fpuop1_sqrt(ctx, arg0);
    let v3 = constructor_fpu_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4730.
    return v3;
}

// Generated as internal constructor for term fpuop1_neg.
pub fn constructor_fpuop1_neg<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp1 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4736.
            return FPUOp1::Neg32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4737.
            return FPUOp1::Neg64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4738.
            return FPUOp1::Neg32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4739.
            return FPUOp1::Neg64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop1_neg", "src/isa/s390x/inst.isle line 4735"
    )
}

// Generated as internal constructor for term fneg_reg.
pub fn constructor_fneg_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_fpuop1_neg(ctx, arg0);
    let v3 = constructor_fpu_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4742.
    return v3;
}

// Generated as internal constructor for term fpuop1_abs.
pub fn constructor_fpuop1_abs<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp1 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4748.
            return FPUOp1::Abs32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4749.
            return FPUOp1::Abs64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4750.
            return FPUOp1::Abs32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4751.
            return FPUOp1::Abs64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop1_abs", "src/isa/s390x/inst.isle line 4747"
    )
}

// Generated as internal constructor for term fabs_reg.
pub fn constructor_fabs_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_fpuop1_abs(ctx, arg0);
    let v3 = constructor_fpu_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4754.
    return v3;
}

// Generated as internal constructor for term fpuroundop_round.
pub fn constructor_fpuroundop_round<C: Context>(ctx: &mut C, arg0: Type) -> FpuRoundOp {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4760.
            return FpuRoundOp::Round32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4761.
            return FpuRoundOp::Round64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4762.
            return FpuRoundOp::Round32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4763.
            return FpuRoundOp::Round64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuroundop_round", "src/isa/s390x/inst.isle line 4759"
    )
}

// Generated as internal constructor for term ceil_reg.
pub fn constructor_ceil_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_fpuroundop_round(ctx, arg0);
    let v4 = constructor_fpu_round(ctx, arg0, v2, &FpuRoundMode::ToPosInfinity, arg1);
    // Rule at src/isa/s390x/inst.isle line 4766.
    return v4;
}

// Generated as internal constructor for term floor_reg.
pub fn constructor_floor_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_fpuroundop_round(ctx, arg0);
    let v4 = constructor_fpu_round(ctx, arg0, v2, &FpuRoundMode::ToNegInfinity, arg1);
    // Rule at src/isa/s390x/inst.isle line 4770.
    return v4;
}

// Generated as internal constructor for term trunc_reg.
pub fn constructor_trunc_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_fpuroundop_round(ctx, arg0);
    let v4 = constructor_fpu_round(ctx, arg0, v2, &FpuRoundMode::ToZero, arg1);
    // Rule at src/isa/s390x/inst.isle line 4774.
    return v4;
}

// Generated as internal constructor for term nearest_reg.
pub fn constructor_nearest_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_fpuroundop_round(ctx, arg0);
    let v4 = constructor_fpu_round(ctx, arg0, v2, &FpuRoundMode::ToNearestTiesToEven, arg1);
    // Rule at src/isa/s390x/inst.isle line 4778.
    return v4;
}

// Generated as internal constructor for term fpromote_reg.
pub fn constructor_fpromote_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Type, arg2: Reg) -> Reg {
    if arg0 == arg1 {
        // Rule at src/isa/s390x/inst.isle line 4785.
        return arg2;
    }
    match arg0 {
        F64 => {
            if arg1 == F32 {
                let v5 = constructor_fpu_rr(ctx, F64, &FPUOp1::Cvt32To64, arg2);
                // Rule at src/isa/s390x/inst.isle line 4786.
                return v5;
            }
        }
        F64X2 => {
            if arg1 == F32X4 {
                let v7 = constructor_fpu_rr(ctx, F64, &FPUOp1::Cvt32x4To64x2, arg2);
                // Rule at src/isa/s390x/inst.isle line 4788.
                return v7;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpromote_reg", "src/isa/s390x/inst.isle line 4784"
    )
}

// Generated as internal constructor for term fdemote_reg.
pub fn constructor_fdemote_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: &FpuRoundMode,
    arg3: Reg,
) -> Reg {
    if arg0 == arg1 {
        // Rule at src/isa/s390x/inst.isle line 4795.
        return arg3;
    }
    match arg0 {
        F32 => {
            if arg1 == F64 {
                let v6 = constructor_fpu_round(ctx, F32, &FpuRoundOp::Cvt64To32, arg2, arg3);
                // Rule at src/isa/s390x/inst.isle line 4796.
                return v6;
            }
        }
        F32X4 => {
            if arg1 == F64X2 {
                let v9 = constructor_fpu_round(ctx, F32X4, &FpuRoundOp::Cvt64x2To32x4, arg2, arg3);
                // Rule at src/isa/s390x/inst.isle line 4798.
                return v9;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fdemote_reg", "src/isa/s390x/inst.isle line 4794"
    )
}

// Generated as internal constructor for term fcvt_from_uint_reg.
pub fn constructor_fcvt_from_uint_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FpuRoundMode,
    arg2: Reg,
) -> Reg {
    match arg0 {
        F32 => {
            let v7 = C::zero_reg(ctx);
            let v8 = constructor_vec_insert_lane_undef(ctx, I32X4, arg2, 0x0, v7);
            let v9 = constructor_fpu_round(ctx, F32, &FpuRoundOp::FromUInt32, arg1, v8);
            // Rule at src/isa/s390x/inst.isle line 4805.
            return v9;
        }
        F64 => {
            let v7 = C::zero_reg(ctx);
            let v13 = constructor_vec_insert_lane_undef(ctx, I64X2, arg2, 0x0, v7);
            let v14 = constructor_fpu_round(ctx, F64, &FpuRoundOp::FromUInt64, arg1, v13);
            // Rule at src/isa/s390x/inst.isle line 4807.
            return v14;
        }
        F32X4 => {
            let v17 = constructor_fpu_round(ctx, F32X4, &FpuRoundOp::FromUInt32x4, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4809.
            return v17;
        }
        F64X2 => {
            let v20 = constructor_fpu_round(ctx, F64X2, &FpuRoundOp::FromUInt64x2, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4811.
            return v20;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_from_uint_reg", "src/isa/s390x/inst.isle line 4804"
    )
}

// Generated as internal constructor for term fcvt_from_sint_reg.
pub fn constructor_fcvt_from_sint_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FpuRoundMode,
    arg2: Reg,
) -> Reg {
    match arg0 {
        F32 => {
            let v7 = C::zero_reg(ctx);
            let v8 = constructor_vec_insert_lane_undef(ctx, I32X4, arg2, 0x0, v7);
            let v9 = constructor_fpu_round(ctx, F32, &FpuRoundOp::FromSInt32, arg1, v8);
            // Rule at src/isa/s390x/inst.isle line 4818.
            return v9;
        }
        F64 => {
            let v7 = C::zero_reg(ctx);
            let v13 = constructor_vec_insert_lane_undef(ctx, I64X2, arg2, 0x0, v7);
            let v14 = constructor_fpu_round(ctx, F64, &FpuRoundOp::FromSInt64, arg1, v13);
            // Rule at src/isa/s390x/inst.isle line 4820.
            return v14;
        }
        F32X4 => {
            let v17 = constructor_fpu_round(ctx, F32X4, &FpuRoundOp::FromSInt32x4, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4822.
            return v17;
        }
        F64X2 => {
            let v20 = constructor_fpu_round(ctx, F64X2, &FpuRoundOp::FromSInt64x2, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4824.
            return v20;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_from_sint_reg", "src/isa/s390x/inst.isle line 4817"
    )
}

// Generated as internal constructor for term fcvt_flt_ty.
pub fn constructor_fcvt_flt_ty<C: Context>(ctx: &mut C, arg0: Type, arg1: Type) -> Type {
    match arg1 {
        F32 => {
            let v1 = C::fits_in_32(ctx, arg0);
            if let Some(v2) = v1 {
                let v4 = C::vxrs_ext2_enabled(ctx, arg1);
                if let Some(v5) = v4 {
                    // Rule at src/isa/s390x/inst.isle line 4831.
                    return F32;
                }
            }
            let v7 = C::fits_in_64(ctx, arg0);
            if let Some(v8) = v7 {
                // Rule at src/isa/s390x/inst.isle line 4832.
                return F64;
            }
        }
        F64 => {
            let v7 = C::fits_in_64(ctx, arg0);
            if let Some(v8) = v7 {
                // Rule at src/isa/s390x/inst.isle line 4833.
                return F64;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_flt_ty", "src/isa/s390x/inst.isle line 4830"
    )
}

// Generated as internal constructor for term fcvt_int_ty.
pub fn constructor_fcvt_int_ty<C: Context>(ctx: &mut C, arg0: Type, arg1: Type) -> Type {
    match arg1 {
        F32 => {
            let v1 = C::fits_in_32(ctx, arg0);
            if let Some(v2) = v1 {
                let v4 = C::vxrs_ext2_enabled(ctx, arg1);
                if let Some(v5) = v4 {
                    // Rule at src/isa/s390x/inst.isle line 4836.
                    return I32;
                }
            }
            let v7 = C::fits_in_64(ctx, arg0);
            if let Some(v8) = v7 {
                // Rule at src/isa/s390x/inst.isle line 4837.
                return I64;
            }
        }
        F64 => {
            let v7 = C::fits_in_64(ctx, arg0);
            if let Some(v8) = v7 {
                // Rule at src/isa/s390x/inst.isle line 4838.
                return I64;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_int_ty", "src/isa/s390x/inst.isle line 4835"
    )
}

// Generated as internal constructor for term fcvt_to_uint_reg.
pub fn constructor_fcvt_to_uint_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FpuRoundMode,
    arg2: Reg,
) -> Reg {
    match arg0 {
        F32 => {
            let v6 = constructor_fpu_round(ctx, F32, &FpuRoundOp::ToUInt32, arg1, arg2);
            let v8 = C::zero_reg(ctx);
            let v9 = constructor_vec_extract_lane(ctx, I32X4, v6, 0x0, v8);
            // Rule at src/isa/s390x/inst.isle line 4844.
            return v9;
        }
        F64 => {
            let v13 = constructor_fpu_round(ctx, F64, &FpuRoundOp::ToUInt64, arg1, arg2);
            let v8 = C::zero_reg(ctx);
            let v14 = constructor_vec_extract_lane(ctx, I64X2, v13, 0x0, v8);
            // Rule at src/isa/s390x/inst.isle line 4846.
            return v14;
        }
        F32X4 => {
            let v17 = constructor_fpu_round(ctx, F32X4, &FpuRoundOp::ToUInt32x4, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4848.
            return v17;
        }
        F64X2 => {
            let v20 = constructor_fpu_round(ctx, F64X2, &FpuRoundOp::ToUInt64x2, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4850.
            return v20;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_to_uint_reg", "src/isa/s390x/inst.isle line 4843"
    )
}

// Generated as internal constructor for term fcvt_to_uint_ub.
pub fn constructor_fcvt_to_uint_ub<C: Context>(ctx: &mut C, arg0: Type, arg1: Type) -> Reg {
    match arg0 {
        F32 => {
            let v3 = C::ty_bits(ctx, arg1);
            let v4 = C::fcvt_to_uint_ub32(ctx, v3);
            let v5 = constructor_imm(ctx, F32, v4);
            // Rule at src/isa/s390x/inst.isle line 4854.
            return v5;
        }
        F64 => {
            let v3 = C::ty_bits(ctx, arg1);
            let v7 = C::fcvt_to_uint_ub64(ctx, v3);
            let v8 = constructor_imm(ctx, F64, v7);
            // Rule at src/isa/s390x/inst.isle line 4856.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_to_uint_ub", "src/isa/s390x/inst.isle line 4853"
    )
}

// Generated as internal constructor for term fcvt_to_uint_lb.
pub fn constructor_fcvt_to_uint_lb<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    match arg0 {
        F32 => {
            let v2 = C::fcvt_to_uint_lb32(ctx);
            let v3 = constructor_imm(ctx, F32, v2);
            // Rule at src/isa/s390x/inst.isle line 4860.
            return v3;
        }
        F64 => {
            let v5 = C::fcvt_to_uint_lb64(ctx);
            let v6 = constructor_imm(ctx, F64, v5);
            // Rule at src/isa/s390x/inst.isle line 4861.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_to_uint_lb", "src/isa/s390x/inst.isle line 4859"
    )
}

// Generated as internal constructor for term fcvt_to_sint_reg.
pub fn constructor_fcvt_to_sint_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FpuRoundMode,
    arg2: Reg,
) -> Reg {
    match arg0 {
        F32 => {
            let v6 = constructor_fpu_round(ctx, F32, &FpuRoundOp::ToSInt32, arg1, arg2);
            let v8 = C::zero_reg(ctx);
            let v9 = constructor_vec_extract_lane(ctx, F32X4, v6, 0x0, v8);
            // Rule at src/isa/s390x/inst.isle line 4876.
            return v9;
        }
        F64 => {
            let v13 = constructor_fpu_round(ctx, F64, &FpuRoundOp::ToSInt64, arg1, arg2);
            let v8 = C::zero_reg(ctx);
            let v14 = constructor_vec_extract_lane(ctx, F64X2, v13, 0x0, v8);
            // Rule at src/isa/s390x/inst.isle line 4878.
            return v14;
        }
        F32X4 => {
            let v16 = constructor_fpu_round(ctx, F32X4, &FpuRoundOp::ToSInt32x4, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4880.
            return v16;
        }
        F64X2 => {
            let v18 = constructor_fpu_round(ctx, F64X2, &FpuRoundOp::ToSInt64x2, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4882.
            return v18;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_to_sint_reg", "src/isa/s390x/inst.isle line 4875"
    )
}

// Generated as internal constructor for term fcvt_to_sint_ub.
pub fn constructor_fcvt_to_sint_ub<C: Context>(ctx: &mut C, arg0: Type, arg1: Type) -> Reg {
    match arg0 {
        F32 => {
            let v3 = C::ty_bits(ctx, arg1);
            let v4 = C::fcvt_to_sint_ub32(ctx, v3);
            let v5 = constructor_imm(ctx, F32, v4);
            // Rule at src/isa/s390x/inst.isle line 4886.
            return v5;
        }
        F64 => {
            let v3 = C::ty_bits(ctx, arg1);
            let v7 = C::fcvt_to_sint_ub64(ctx, v3);
            let v8 = constructor_imm(ctx, F64, v7);
            // Rule at src/isa/s390x/inst.isle line 4888.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_to_sint_ub", "src/isa/s390x/inst.isle line 4885"
    )
}

// Generated as internal constructor for term fcvt_to_sint_lb.
pub fn constructor_fcvt_to_sint_lb<C: Context>(ctx: &mut C, arg0: Type, arg1: Type) -> Reg {
    match arg0 {
        F32 => {
            let v3 = C::ty_bits(ctx, arg1);
            let v4 = C::fcvt_to_sint_lb32(ctx, v3);
            let v5 = constructor_imm(ctx, F32, v4);
            // Rule at src/isa/s390x/inst.isle line 4892.
            return v5;
        }
        F64 => {
            let v3 = C::ty_bits(ctx, arg1);
            let v7 = C::fcvt_to_sint_lb64(ctx, v3);
            let v8 = constructor_imm(ctx, F64, v7);
            // Rule at src/isa/s390x/inst.isle line 4894.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_to_sint_lb", "src/isa/s390x/inst.isle line 4891"
    )
}

// Generated as internal constructor for term cmpop_cmps.
pub fn constructor_cmpop_cmps<C: Context>(ctx: &mut C, arg0: Type) -> CmpOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4910.
            return CmpOp::CmpS32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4911.
            return CmpOp::CmpS64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmpop_cmps", "src/isa/s390x/inst.isle line 4909"
    )
}

// Generated as internal constructor for term cmpop_cmps_sext16.
pub fn constructor_cmpop_cmps_sext16<C: Context>(ctx: &mut C, arg0: Type) -> CmpOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4914.
            return CmpOp::CmpS32Ext16;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4915.
            return CmpOp::CmpS64Ext16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmpop_cmps_sext16", "src/isa/s390x/inst.isle line 4913"
    )
}

// Generated as internal constructor for term cmpop_cmps_sext32.
pub fn constructor_cmpop_cmps_sext32<C: Context>(ctx: &mut C, arg0: Type) -> CmpOp {
    if arg0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4918.
        return CmpOp::CmpS64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmpop_cmps_sext32", "src/isa/s390x/inst.isle line 4917"
    )
}

// Generated as internal constructor for term icmps_reg.
pub fn constructor_icmps_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps(ctx, arg0);
    let v4 = &constructor_cmp_rr(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4921.
    return v4.clone();
}

// Generated as internal constructor for term icmps_reg_sext32.
pub fn constructor_icmps_reg_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps_sext32(ctx, arg0);
    let v4 = &constructor_cmp_rr(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4924.
    return v4.clone();
}

// Generated as internal constructor for term icmps_simm16.
pub fn constructor_icmps_simm16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: i16,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps(ctx, arg0);
    let v4 = &constructor_cmp_rsimm16(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4927.
    return v4.clone();
}

// Generated as internal constructor for term icmps_simm32.
pub fn constructor_icmps_simm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: i32,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps(ctx, arg0);
    let v4 = &constructor_cmp_rsimm32(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4930.
    return v4.clone();
}

// Generated as internal constructor for term icmps_mem.
pub fn constructor_icmps_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps(ctx, arg0);
    let v4 = &constructor_cmp_rx(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4933.
    return v4.clone();
}

// Generated as internal constructor for term icmps_mem_sext16.
pub fn constructor_icmps_mem_sext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps_sext16(ctx, arg0);
    let v4 = &constructor_cmp_rx(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4936.
    return v4.clone();
}

// Generated as internal constructor for term icmps_mem_sext32.
pub fn constructor_icmps_mem_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps_sext32(ctx, arg0);
    let v4 = &constructor_cmp_rx(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4939.
    return v4.clone();
}

// Generated as internal constructor for term cmpop_cmpu.
pub fn constructor_cmpop_cmpu<C: Context>(ctx: &mut C, arg0: Type) -> CmpOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4945.
            return CmpOp::CmpL32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4946.
            return CmpOp::CmpL64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmpop_cmpu", "src/isa/s390x/inst.isle line 4944"
    )
}

// Generated as internal constructor for term cmpop_cmpu_zext16.
pub fn constructor_cmpop_cmpu_zext16<C: Context>(ctx: &mut C, arg0: Type) -> CmpOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4949.
            return CmpOp::CmpL32Ext16;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4950.
            return CmpOp::CmpL64Ext16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmpop_cmpu_zext16", "src/isa/s390x/inst.isle line 4948"
    )
}

// Generated as internal constructor for term cmpop_cmpu_zext32.
pub fn constructor_cmpop_cmpu_zext32<C: Context>(ctx: &mut C, arg0: Type) -> CmpOp {
    if arg0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4953.
        return CmpOp::CmpL64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmpop_cmpu_zext32", "src/isa/s390x/inst.isle line 4952"
    )
}

// Generated as internal constructor for term icmpu_reg.
pub fn constructor_icmpu_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmpu(ctx, arg0);
    let v4 = &constructor_cmp_rr(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4956.
    return v4.clone();
}

// Generated as internal constructor for term icmpu_reg_zext32.
pub fn constructor_icmpu_reg_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmpu_zext32(ctx, arg0);
    let v4 = &constructor_cmp_rr(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4959.
    return v4.clone();
}

// Generated as internal constructor for term icmpu_uimm32.
pub fn constructor_icmpu_uimm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u32,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmpu(ctx, arg0);
    let v4 = &constructor_cmp_ruimm32(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4962.
    return v4.clone();
}

// Generated as internal constructor for term icmpu_mem.
pub fn constructor_icmpu_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmpu(ctx, arg0);
    let v4 = &constructor_cmp_rx(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4965.
    return v4.clone();
}

// Generated as internal constructor for term icmpu_mem_zext16.
pub fn constructor_icmpu_mem_zext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmpu_zext16(ctx, arg0);
    let v4 = &constructor_cmp_rx(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4968.
    return v4.clone();
}

// Generated as internal constructor for term icmpu_mem_zext32.
pub fn constructor_icmpu_mem_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmpu_zext32(ctx, arg0);
    let v4 = &constructor_cmp_rx(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4971.
    return v4.clone();
}

// Generated as internal constructor for term vecop_int_cmpeq.
pub fn constructor_vecop_int_cmpeq<C: Context>(ctx: &mut C, arg0: Type) -> VecIntCmpOp {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                if v2.1 == 0x10 {
                    // Rule at src/isa/s390x/inst.isle line 4977.
                    return VecIntCmpOp::CmpEq8x16;
                }
            }
            0x10 => {
                if v2.1 == 0x8 {
                    // Rule at src/isa/s390x/inst.isle line 4978.
                    return VecIntCmpOp::CmpEq16x8;
                }
            }
            0x20 => {
                if v2.1 == 0x4 {
                    // Rule at src/isa/s390x/inst.isle line 4979.
                    return VecIntCmpOp::CmpEq32x4;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src/isa/s390x/inst.isle line 4980.
                    return VecIntCmpOp::CmpEq64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_int_cmpeq", "src/isa/s390x/inst.isle line 4976"
    )
}

// Generated as internal constructor for term vec_cmpeq.
pub fn constructor_vec_cmpeq<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_int_cmpeq(ctx, v2);
        let v6 = constructor_vec_int_cmp(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4983.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_cmpeq", "src/isa/s390x/inst.isle line 4982"
    )
}

// Generated as internal constructor for term vec_cmpeqs.
pub fn constructor_vec_cmpeqs<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_int_cmpeq(ctx, v2);
        let v6 = &constructor_vec_int_cmps(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4985.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_cmpeqs", "src/isa/s390x/inst.isle line 4984"
    )
}

// Generated as internal constructor for term vecop_int_cmph.
pub fn constructor_vecop_int_cmph<C: Context>(ctx: &mut C, arg0: Type) -> VecIntCmpOp {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                if v2.1 == 0x10 {
                    // Rule at src/isa/s390x/inst.isle line 4988.
                    return VecIntCmpOp::SCmpHi8x16;
                }
            }
            0x10 => {
                if v2.1 == 0x8 {
                    // Rule at src/isa/s390x/inst.isle line 4989.
                    return VecIntCmpOp::SCmpHi16x8;
                }
            }
            0x20 => {
                if v2.1 == 0x4 {
                    // Rule at src/isa/s390x/inst.isle line 4990.
                    return VecIntCmpOp::SCmpHi32x4;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src/isa/s390x/inst.isle line 4991.
                    return VecIntCmpOp::SCmpHi64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_int_cmph", "src/isa/s390x/inst.isle line 4987"
    )
}

// Generated as internal constructor for term vec_cmph.
pub fn constructor_vec_cmph<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_int_cmph(ctx, v2);
        let v6 = constructor_vec_int_cmp(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4994.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_cmph", "src/isa/s390x/inst.isle line 4993"
    )
}

// Generated as internal constructor for term vec_cmphs.
pub fn constructor_vec_cmphs<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_int_cmph(ctx, v2);
        let v6 = &constructor_vec_int_cmps(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4996.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_cmphs", "src/isa/s390x/inst.isle line 4995"
    )
}

// Generated as internal constructor for term vecop_int_cmphl.
pub fn constructor_vecop_int_cmphl<C: Context>(ctx: &mut C, arg0: Type) -> VecIntCmpOp {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                if v2.1 == 0x10 {
                    // Rule at src/isa/s390x/inst.isle line 4999.
                    return VecIntCmpOp::UCmpHi8x16;
                }
            }
            0x10 => {
                if v2.1 == 0x8 {
                    // Rule at src/isa/s390x/inst.isle line 5000.
                    return VecIntCmpOp::UCmpHi16x8;
                }
            }
            0x20 => {
                if v2.1 == 0x4 {
                    // Rule at src/isa/s390x/inst.isle line 5001.
                    return VecIntCmpOp::UCmpHi32x4;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src/isa/s390x/inst.isle line 5002.
                    return VecIntCmpOp::UCmpHi64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_int_cmphl", "src/isa/s390x/inst.isle line 4998"
    )
}

// Generated as internal constructor for term vec_cmphl.
pub fn constructor_vec_cmphl<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_int_cmphl(ctx, v2);
        let v6 = constructor_vec_int_cmp(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 5005.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_cmphl", "src/isa/s390x/inst.isle line 5004"
    )
}

// Generated as internal constructor for term vec_cmphls.
pub fn constructor_vec_cmphls<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_int_cmphl(ctx, v2);
        let v6 = &constructor_vec_int_cmps(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 5007.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_cmphls", "src/isa/s390x/inst.isle line 5006"
    )
}

// Generated as internal constructor for term fcmp_reg.
pub fn constructor_fcmp_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    match arg0 {
        F32 => {
            let v3 = &constructor_fpu_cmp32(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 5013.
            return v3.clone();
        }
        F64 => {
            let v4 = &constructor_fpu_cmp64(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 5014.
            return v4.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcmp_reg", "src/isa/s390x/inst.isle line 5012"
    )
}

// Generated as internal constructor for term vecop_float_cmpeq.
pub fn constructor_vecop_float_cmpeq<C: Context>(ctx: &mut C, arg0: Type) -> VecFloatCmpOp {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x20 => {
                if v2.1 == 0x4 {
                    // Rule at src/isa/s390x/inst.isle line 5020.
                    return VecFloatCmpOp::CmpEq32x4;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src/isa/s390x/inst.isle line 5021.
                    return VecFloatCmpOp::CmpEq64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_float_cmpeq", "src/isa/s390x/inst.isle line 5019"
    )
}

// Generated as internal constructor for term vec_fcmpeq.
pub fn constructor_vec_fcmpeq<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_float_cmpeq(ctx, v2);
        let v6 = constructor_vec_float_cmp(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 5024.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_fcmpeq", "src/isa/s390x/inst.isle line 5023"
    )
}

// Generated as internal constructor for term vec_fcmpeqs.
pub fn constructor_vec_fcmpeqs<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_float_cmpeq(ctx, v2);
        let v6 = &constructor_vec_float_cmps(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 5026.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_fcmpeqs", "src/isa/s390x/inst.isle line 5025"
    )
}

// Generated as internal constructor for term vecop_float_cmph.
pub fn constructor_vecop_float_cmph<C: Context>(ctx: &mut C, arg0: Type) -> VecFloatCmpOp {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x20 => {
                if v2.1 == 0x4 {
                    // Rule at src/isa/s390x/inst.isle line 5029.
                    return VecFloatCmpOp::CmpHi32x4;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src/isa/s390x/inst.isle line 5030.
                    return VecFloatCmpOp::CmpHi64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_float_cmph", "src/isa/s390x/inst.isle line 5028"
    )
}

// Generated as internal constructor for term vec_fcmph.
pub fn constructor_vec_fcmph<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_float_cmph(ctx, v2);
        let v6 = constructor_vec_float_cmp(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 5033.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_fcmph", "src/isa/s390x/inst.isle line 5032"
    )
}

// Generated as internal constructor for term vec_fcmphs.
pub fn constructor_vec_fcmphs<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_float_cmph(ctx, v2);
        let v6 = &constructor_vec_float_cmps(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 5035.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_fcmphs", "src/isa/s390x/inst.isle line 5034"
    )
}

// Generated as internal constructor for term vecop_float_cmphe.
pub fn constructor_vecop_float_cmphe<C: Context>(ctx: &mut C, arg0: Type) -> VecFloatCmpOp {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x20 => {
                if v2.1 == 0x4 {
                    // Rule at src/isa/s390x/inst.isle line 5038.
                    return VecFloatCmpOp::CmpHiEq32x4;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src/isa/s390x/inst.isle line 5039.
                    return VecFloatCmpOp::CmpHiEq64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_float_cmphe", "src/isa/s390x/inst.isle line 5037"
    )
}

// Generated as internal constructor for term vec_fcmphe.
pub fn constructor_vec_fcmphe<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_float_cmphe(ctx, v2);
        let v6 = constructor_vec_float_cmp(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 5042.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_fcmphe", "src/isa/s390x/inst.isle line 5041"
    )
}

// Generated as internal constructor for term vec_fcmphes.
pub fn constructor_vec_fcmphes<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_float_cmphe(ctx, v2);
        let v6 = &constructor_vec_float_cmps(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 5044.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_fcmphes", "src/isa/s390x/inst.isle line 5043"
    )
}

// Generated as internal constructor for term lower.
pub fn constructor_lower<C: Context>(ctx: &mut C, arg0: Inst) -> Option<InstOutput> {
    let v4 = &C::inst_data(ctx, arg0);
    match v4 {
        &InstructionData::AtomicCas {
            opcode: ref v1678,
            args: ref v1679,
            flags: v1680,
        } => {
            if let &Opcode::AtomicCas = v1678 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v515 = C::ty_32_or_64(ctx, v3);
                    if let Some(v516) = v515 {
                        let v1685 = C::bigendian(ctx, v1680);
                        if let Some(v1686) = v1685 {
                            let v1681 = C::unpack_value_array_3(ctx, v1679);
                            let v1687 = C::put_in_reg(ctx, v1681.1);
                            let v1688 = C::put_in_reg(ctx, v1681.2);
                            let v1639 = C::zero_offset(ctx);
                            let v1689 = &constructor_lower_address(ctx, v1680, v1681.0, v1639);
                            let v1690 = constructor_atomic_cas_impl(ctx, v516, v1687, v1688, v1689);
                            let v1691 = constructor_output_reg(ctx, v1690);
                            // Rule at src/isa/s390x/lower.isle line 3181.
                            return Some(v1691);
                        }
                        let v1692 = C::littleendian(ctx, v1680);
                        if let Some(v1693) = v1692 {
                            let v1681 = C::unpack_value_array_3(ctx, v1679);
                            let v1687 = C::put_in_reg(ctx, v1681.1);
                            let v1694 = constructor_bswap_reg(ctx, v516, v1687);
                            let v1695 = C::put_in_reg(ctx, v1681.2);
                            let v1696 = constructor_bswap_reg(ctx, v516, v1695);
                            let v1697 = C::zero_offset(ctx);
                            let v1698 = &constructor_lower_address(ctx, v1680, v1681.0, v1697);
                            let v1699 = constructor_atomic_cas_impl(ctx, v516, v1694, v1696, v1698);
                            let v1700 = constructor_bswap_reg(ctx, v516, v1699);
                            let v1701 = constructor_output_reg(ctx, v1700);
                            // Rule at src/isa/s390x/lower.isle line 3188.
                            return Some(v1701);
                        }
                    }
                    let v367 = C::ty_8_or_16(ctx, v3);
                    if let Some(v368) = v367 {
                        let v1681 = C::unpack_value_array_3(ctx, v1679);
                        let v1687 = C::put_in_reg(ctx, v1681.1);
                        let v1688 = C::put_in_reg(ctx, v1681.2);
                        let v1702 = C::put_in_reg(ctx, v1681.0);
                        let v1703 = constructor_casloop_bitshift(ctx, v1702);
                        let v1704 = constructor_casloop_aligned_addr(ctx, v1702);
                        let v1705 = &C::inst_builder_new(ctx);
                        let v1706 = constructor_casloop_val_reg(ctx);
                        let v1707 = C::writable_reg_to_reg(ctx, v1706);
                        let v1708 =
                            constructor_casloop_rotate_in(ctx, v1705, v368, v1680, v1703, v1707);
                        let v1709 = constructor_casloop_tmp_reg(ctx);
                        let v1710 = constructor_atomic_cas_body(
                            ctx, v1705, v368, v1680, v1709, v1708, v1687, v1688,
                        );
                        let v1711 =
                            constructor_casloop_rotate_out(ctx, v1705, v368, v1680, v1703, v1710);
                        let v1712 = constructor_casloop_subword(
                            ctx, v1705, v368, v1680, v1704, v1703, v1711,
                        );
                        let v1713 = constructor_output_reg(ctx, v1712);
                        // Rule at src/isa/s390x/lower.isle line 3195.
                        return Some(v1713);
                    }
                }
            }
        }
        &InstructionData::AtomicRmw {
            opcode: ref v1622,
            args: ref v1623,
            flags: v1624,
            op: ref v1625,
        } => {
            if let &Opcode::AtomicRmw = v1622 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v515 = C::ty_32_or_64(ctx, v3);
                    if let Some(v516) = v515 {
                        match v1625 {
                            &AtomicRmwOp::Add => {
                                let v1629 = C::bigendian(ctx, v1624);
                                if let Some(v1630) = v1629 {
                                    let v1626 = C::unpack_value_array_2(ctx, v1623);
                                    let v1631 = C::put_in_reg(ctx, v1626.1);
                                    let v1632 = C::zero_offset(ctx);
                                    let v1633 =
                                        &constructor_lower_address(ctx, v1624, v1626.0, v1632);
                                    let v1654 = constructor_atomic_rmw_add(ctx, v516, v1631, v1633);
                                    let v1655 = constructor_output_reg(ctx, v1654);
                                    // Rule at src/isa/s390x/lower.isle line 2961.
                                    return Some(v1655);
                                }
                            }
                            &AtomicRmwOp::And => {
                                let v1629 = C::bigendian(ctx, v1624);
                                if let Some(v1630) = v1629 {
                                    let v1626 = C::unpack_value_array_2(ctx, v1623);
                                    let v1631 = C::put_in_reg(ctx, v1626.1);
                                    let v1632 = C::zero_offset(ctx);
                                    let v1633 =
                                        &constructor_lower_address(ctx, v1624, v1626.0, v1632);
                                    let v1634 = constructor_atomic_rmw_and(ctx, v516, v1631, v1633);
                                    let v1635 = constructor_output_reg(ctx, v1634);
                                    // Rule at src/isa/s390x/lower.isle line 2925.
                                    return Some(v1635);
                                }
                                let v1636 = C::littleendian(ctx, v1624);
                                if let Some(v1637) = v1636 {
                                    let v1626 = C::unpack_value_array_2(ctx, v1623);
                                    let v1631 = C::put_in_reg(ctx, v1626.1);
                                    let v1638 = constructor_bswap_reg(ctx, v516, v1631);
                                    let v1639 = C::zero_offset(ctx);
                                    let v1640 =
                                        &constructor_lower_address(ctx, v1624, v1626.0, v1639);
                                    let v1641 = constructor_atomic_rmw_and(ctx, v516, v1638, v1640);
                                    let v1642 = constructor_bswap_reg(ctx, v516, v1641);
                                    let v1643 = constructor_output_reg(ctx, v1642);
                                    // Rule at src/isa/s390x/lower.isle line 2931.
                                    return Some(v1643);
                                }
                            }
                            &AtomicRmwOp::Or => {
                                let v1629 = C::bigendian(ctx, v1624);
                                if let Some(v1630) = v1629 {
                                    let v1626 = C::unpack_value_array_2(ctx, v1623);
                                    let v1631 = C::put_in_reg(ctx, v1626.1);
                                    let v1632 = C::zero_offset(ctx);
                                    let v1633 =
                                        &constructor_lower_address(ctx, v1624, v1626.0, v1632);
                                    let v1644 = constructor_atomic_rmw_or(ctx, v516, v1631, v1633);
                                    let v1645 = constructor_output_reg(ctx, v1644);
                                    // Rule at src/isa/s390x/lower.isle line 2937.
                                    return Some(v1645);
                                }
                                let v1636 = C::littleendian(ctx, v1624);
                                if let Some(v1637) = v1636 {
                                    let v1626 = C::unpack_value_array_2(ctx, v1623);
                                    let v1631 = C::put_in_reg(ctx, v1626.1);
                                    let v1638 = constructor_bswap_reg(ctx, v516, v1631);
                                    let v1639 = C::zero_offset(ctx);
                                    let v1640 =
                                        &constructor_lower_address(ctx, v1624, v1626.0, v1639);
                                    let v1646 = constructor_atomic_rmw_or(ctx, v516, v1638, v1640);
                                    let v1647 = constructor_bswap_reg(ctx, v516, v1646);
                                    let v1648 = constructor_output_reg(ctx, v1647);
                                    // Rule at src/isa/s390x/lower.isle line 2943.
                                    return Some(v1648);
                                }
                            }
                            &AtomicRmwOp::Sub => {
                                let v1629 = C::bigendian(ctx, v1624);
                                if let Some(v1630) = v1629 {
                                    let v1626 = C::unpack_value_array_2(ctx, v1623);
                                    let v1631 = C::put_in_reg(ctx, v1626.1);
                                    let v1656 = constructor_neg_reg(ctx, v516, v1631);
                                    let v1639 = C::zero_offset(ctx);
                                    let v1640 =
                                        &constructor_lower_address(ctx, v1624, v1626.0, v1639);
                                    let v1657 = constructor_atomic_rmw_add(ctx, v516, v1656, v1640);
                                    let v1658 = constructor_output_reg(ctx, v1657);
                                    // Rule at src/isa/s390x/lower.isle line 2967.
                                    return Some(v1658);
                                }
                            }
                            &AtomicRmwOp::Xor => {
                                let v1629 = C::bigendian(ctx, v1624);
                                if let Some(v1630) = v1629 {
                                    let v1626 = C::unpack_value_array_2(ctx, v1623);
                                    let v1631 = C::put_in_reg(ctx, v1626.1);
                                    let v1632 = C::zero_offset(ctx);
                                    let v1633 =
                                        &constructor_lower_address(ctx, v1624, v1626.0, v1632);
                                    let v1649 = constructor_atomic_rmw_xor(ctx, v516, v1631, v1633);
                                    let v1650 = constructor_output_reg(ctx, v1649);
                                    // Rule at src/isa/s390x/lower.isle line 2949.
                                    return Some(v1650);
                                }
                                let v1636 = C::littleendian(ctx, v1624);
                                if let Some(v1637) = v1636 {
                                    let v1626 = C::unpack_value_array_2(ctx, v1623);
                                    let v1631 = C::put_in_reg(ctx, v1626.1);
                                    let v1638 = constructor_bswap_reg(ctx, v516, v1631);
                                    let v1639 = C::zero_offset(ctx);
                                    let v1640 =
                                        &constructor_lower_address(ctx, v1624, v1626.0, v1639);
                                    let v1651 = constructor_atomic_rmw_xor(ctx, v516, v1638, v1640);
                                    let v1652 = constructor_bswap_reg(ctx, v516, v1651);
                                    let v1653 = constructor_output_reg(ctx, v1652);
                                    // Rule at src/isa/s390x/lower.isle line 2955.
                                    return Some(v1653);
                                }
                            }
                            _ => {}
                        }
                        let v1626 = C::unpack_value_array_2(ctx, v1623);
                        let v1631 = C::put_in_reg(ctx, v1626.1);
                        let v1659 = C::put_in_reg(ctx, v1626.0);
                        let v1660 = &C::inst_builder_new(ctx);
                        let v1661 = constructor_casloop_val_reg(ctx);
                        let v1662 = C::writable_reg_to_reg(ctx, v1661);
                        let v1663 = constructor_casloop_tmp_reg(ctx);
                        let v1664 = constructor_atomic_rmw_body(
                            ctx, v1660, v516, v1624, v1625, v1663, v1662, v1631,
                        );
                        let v1665 = constructor_casloop(ctx, v1660, v516, v1624, v1659, v1664);
                        let v1666 = constructor_output_reg(ctx, v1665);
                        // Rule at src/isa/s390x/lower.isle line 2976.
                        return Some(v1666);
                    }
                    let v367 = C::ty_8_or_16(ctx, v3);
                    if let Some(v368) = v367 {
                        let v1626 = C::unpack_value_array_2(ctx, v1623);
                        let v1631 = C::put_in_reg(ctx, v1626.1);
                        let v1659 = C::put_in_reg(ctx, v1626.0);
                        let v1667 = constructor_casloop_bitshift(ctx, v1659);
                        let v1668 = constructor_casloop_aligned_addr(ctx, v1659);
                        let v1669 = &C::inst_builder_new(ctx);
                        let v1670 = constructor_casloop_val_reg(ctx);
                        let v1671 = C::writable_reg_to_reg(ctx, v1670);
                        let v1672 =
                            constructor_casloop_rotate_in(ctx, v1669, v368, v1624, v1667, v1671);
                        let v1673 = constructor_casloop_tmp_reg(ctx);
                        let v1674 = constructor_atomic_rmw_body(
                            ctx, v1669, v368, v1624, v1625, v1673, v1672, v1631,
                        );
                        let v1675 =
                            constructor_casloop_rotate_out(ctx, v1669, v368, v1624, v1667, v1674);
                        let v1676 = constructor_casloop_subword(
                            ctx, v1669, v368, v1624, v1668, v1667, v1675,
                        );
                        let v1677 = constructor_output_reg(ctx, v1676);
                        // Rule at src/isa/s390x/lower.isle line 2988.
                        return Some(v1677);
                    }
                }
            }
        }
        &InstructionData::Binary {
            opcode: ref v37,
            args: ref v38,
        } => {
            match v37 {
                &Opcode::Swizzle => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v1447 = &C::lane_order(ctx);
                            match v1447 {
                                &LaneOrder::LittleEndian => {
                                    let v1454 = constructor_vec_imm(ctx, v149, 0x0);
                                    let v39 = C::unpack_value_array_2(ctx, v38);
                                    let v43 = C::put_in_reg(ctx, v39.0);
                                    let v1456 = constructor_vec_imm_splat(ctx, I8X16, 0xEF);
                                    let v394 = C::put_in_reg(ctx, v39.1);
                                    let v1457 = constructor_vec_not(ctx, I8X16, v394);
                                    let v1458 = constructor_vec_umax(ctx, I8X16, v1456, v1457);
                                    let v1459 =
                                        constructor_vec_permute(ctx, v149, v1454, v43, v1458);
                                    let v1460 = constructor_output_reg(ctx, v1459);
                                    // Rule at src/isa/s390x/lower.isle line 2278.
                                    return Some(v1460);
                                }
                                &LaneOrder::BigEndian => {
                                    let v39 = C::unpack_value_array_2(ctx, v38);
                                    let v62 = C::put_in_reg(ctx, v39.0);
                                    let v1448 = constructor_vec_imm(ctx, v149, 0x0);
                                    let v1450 = constructor_vec_imm_splat(ctx, I8X16, 0x10);
                                    let v394 = C::put_in_reg(ctx, v39.1);
                                    let v1451 = constructor_vec_umin(ctx, I8X16, v1450, v394);
                                    let v1452 =
                                        constructor_vec_permute(ctx, v149, v62, v1448, v1451);
                                    let v1453 = constructor_output_reg(ctx, v1452);
                                    // Rule at src/isa/s390x/lower.isle line 2259.
                                    return Some(v1453);
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::Smin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v310 = constructor_put_in_reg_sext32(ctx, v39.0);
                            let v311 = constructor_put_in_reg_sext32(ctx, v39.1);
                            let v288 = constructor_ty_ext32(ctx, v61);
                            let v312 = &constructor_icmps_reg(ctx, v288, v310, v311);
                            let v324 = &C::intcc_as_cond(ctx, &IntCC::SignedGreaterThan);
                            let v325 = &constructor_bool(ctx, v312, v324);
                            let v326 = constructor_select_bool_reg(ctx, v61, v325, v311, v310);
                            let v327 = constructor_output_reg(ctx, v326);
                            // Rule at src/isa/s390x/lower.isle line 316.
                            return Some(v327);
                        }
                        if v3 == I128 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v328 = &constructor_vec_int128_scmphi(ctx, v62, v63);
                            let v329 = constructor_select_bool_reg(ctx, I128, v328, v63, v62);
                            let v330 = constructor_output_reg(ctx, v329);
                            // Rule at src/isa/s390x/lower.isle line 324.
                            return Some(v330);
                        }
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v331 = constructor_vec_smin(ctx, v149, v62, v63);
                            let v332 = constructor_output_reg(ctx, v331);
                            // Rule at src/isa/s390x/lower.isle line 331.
                            return Some(v332);
                        }
                    }
                }
                &Opcode::Umin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v286 = constructor_put_in_reg_zext32(ctx, v39.0);
                            let v287 = constructor_put_in_reg_zext32(ctx, v39.1);
                            let v288 = constructor_ty_ext32(ctx, v61);
                            let v289 = &constructor_icmpu_reg(ctx, v288, v286, v287);
                            let v301 = &C::intcc_as_cond(ctx, &IntCC::UnsignedGreaterThan);
                            let v302 = &constructor_bool(ctx, v289, v301);
                            let v303 = constructor_select_bool_reg(ctx, v61, v302, v287, v286);
                            let v304 = constructor_output_reg(ctx, v303);
                            // Rule at src/isa/s390x/lower.isle line 272.
                            return Some(v304);
                        }
                        if v3 == I128 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v305 = &constructor_vec_int128_ucmphi(ctx, v62, v63);
                            let v306 = constructor_select_bool_reg(ctx, I128, v305, v63, v62);
                            let v307 = constructor_output_reg(ctx, v306);
                            // Rule at src/isa/s390x/lower.isle line 280.
                            return Some(v307);
                        }
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v308 = constructor_vec_umin(ctx, v149, v62, v63);
                            let v309 = constructor_output_reg(ctx, v308);
                            // Rule at src/isa/s390x/lower.isle line 287.
                            return Some(v309);
                        }
                    }
                }
                &Opcode::Smax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v310 = constructor_put_in_reg_sext32(ctx, v39.0);
                            let v311 = constructor_put_in_reg_sext32(ctx, v39.1);
                            let v288 = constructor_ty_ext32(ctx, v61);
                            let v312 = &constructor_icmps_reg(ctx, v288, v310, v311);
                            let v314 = &C::intcc_as_cond(ctx, &IntCC::SignedLessThan);
                            let v315 = &constructor_bool(ctx, v312, v314);
                            let v316 = constructor_select_bool_reg(ctx, v61, v315, v311, v310);
                            let v317 = constructor_output_reg(ctx, v316);
                            // Rule at src/isa/s390x/lower.isle line 294.
                            return Some(v317);
                        }
                        if v3 == I128 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v318 = &constructor_vec_int128_scmphi(ctx, v63, v62);
                            let v319 = constructor_select_bool_reg(ctx, I128, v318, v63, v62);
                            let v320 = constructor_output_reg(ctx, v319);
                            // Rule at src/isa/s390x/lower.isle line 302.
                            return Some(v320);
                        }
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v321 = constructor_vec_smax(ctx, v149, v62, v63);
                            let v322 = constructor_output_reg(ctx, v321);
                            // Rule at src/isa/s390x/lower.isle line 309.
                            return Some(v322);
                        }
                    }
                }
                &Opcode::Umax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v286 = constructor_put_in_reg_zext32(ctx, v39.0);
                            let v287 = constructor_put_in_reg_zext32(ctx, v39.1);
                            let v288 = constructor_ty_ext32(ctx, v61);
                            let v289 = &constructor_icmpu_reg(ctx, v288, v286, v287);
                            let v291 = &C::intcc_as_cond(ctx, &IntCC::UnsignedLessThan);
                            let v292 = &constructor_bool(ctx, v289, v291);
                            let v293 = constructor_select_bool_reg(ctx, v61, v292, v287, v286);
                            let v294 = constructor_output_reg(ctx, v293);
                            // Rule at src/isa/s390x/lower.isle line 250.
                            return Some(v294);
                        }
                        if v3 == I128 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v295 = &constructor_vec_int128_ucmphi(ctx, v63, v62);
                            let v296 = constructor_select_bool_reg(ctx, I128, v295, v63, v62);
                            let v297 = constructor_output_reg(ctx, v296);
                            // Rule at src/isa/s390x/lower.isle line 258.
                            return Some(v297);
                        }
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v298 = constructor_vec_umax(ctx, v149, v62, v63);
                            let v299 = constructor_output_reg(ctx, v298);
                            // Rule at src/isa/s390x/lower.isle line 265.
                            return Some(v299);
                        }
                    }
                }
                &Opcode::AvgRound => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v333 = constructor_vec_uavg(ctx, v149, v62, v63);
                            let v334 = constructor_output_reg(ctx, v333);
                            // Rule at src/isa/s390x/lower.isle line 338.
                            return Some(v334);
                        }
                    }
                }
                &Opcode::UaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v150 = constructor_vec_add(ctx, v149, v62, v63);
                            let v151 = C::put_in_reg(ctx, v39.0);
                            let v152 = constructor_vec_cmphl(ctx, v149, v151, v150);
                            let v153 = constructor_vec_or(ctx, v149, v150, v152);
                            let v154 = constructor_output_reg(ctx, v153);
                            // Rule at src/isa/s390x/lower.isle line 116.
                            return Some(v154);
                        }
                    }
                }
                &Opcode::SaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v155 = constructor_vec_widen_type(ctx, v149);
                            let v156 = constructor_vec_widen_type(ctx, v149);
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v157 = C::put_in_reg(ctx, v39.0);
                            let v158 = constructor_vec_unpacks_high(ctx, v149, v157);
                            let v159 = C::put_in_reg(ctx, v39.1);
                            let v160 = constructor_vec_unpacks_high(ctx, v149, v159);
                            let v161 = constructor_vec_add(ctx, v156, v158, v160);
                            let v162 = constructor_vec_widen_type(ctx, v149);
                            let v163 = C::put_in_reg(ctx, v39.0);
                            let v164 = constructor_vec_unpacks_low(ctx, v149, v163);
                            let v165 = C::put_in_reg(ctx, v39.1);
                            let v166 = constructor_vec_unpacks_low(ctx, v149, v165);
                            let v167 = constructor_vec_add(ctx, v162, v164, v166);
                            let v168 = constructor_vec_pack_ssat(ctx, v155, v161, v167);
                            let v169 = constructor_output_reg(ctx, v168);
                            // Rule at src/isa/s390x/lower.isle line 124.
                            return Some(v169);
                        }
                    }
                }
                &Opcode::UsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v247 = constructor_vec_sub(ctx, v149, v62, v63);
                            let v151 = C::put_in_reg(ctx, v39.0);
                            let v159 = C::put_in_reg(ctx, v39.1);
                            let v248 = constructor_vec_cmphl(ctx, v149, v151, v159);
                            let v249 = constructor_vec_and(ctx, v149, v247, v248);
                            let v250 = constructor_output_reg(ctx, v249);
                            // Rule at src/isa/s390x/lower.isle line 188.
                            return Some(v250);
                        }
                    }
                }
                &Opcode::SsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v155 = constructor_vec_widen_type(ctx, v149);
                            let v156 = constructor_vec_widen_type(ctx, v149);
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v157 = C::put_in_reg(ctx, v39.0);
                            let v158 = constructor_vec_unpacks_high(ctx, v149, v157);
                            let v159 = C::put_in_reg(ctx, v39.1);
                            let v160 = constructor_vec_unpacks_high(ctx, v149, v159);
                            let v251 = constructor_vec_sub(ctx, v156, v158, v160);
                            let v162 = constructor_vec_widen_type(ctx, v149);
                            let v163 = C::put_in_reg(ctx, v39.0);
                            let v164 = constructor_vec_unpacks_low(ctx, v149, v163);
                            let v165 = C::put_in_reg(ctx, v39.1);
                            let v166 = constructor_vec_unpacks_low(ctx, v149, v165);
                            let v252 = constructor_vec_sub(ctx, v162, v164, v166);
                            let v253 = constructor_vec_pack_ssat(ctx, v155, v251, v252);
                            let v254 = constructor_output_reg(ctx, v253);
                            // Rule at src/isa/s390x/lower.isle line 195.
                            return Some(v254);
                        }
                    }
                }
                &Opcode::Iadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v75 = C::def_inst(ctx, v39.0);
                            if let Some(v76) = v75 {
                                let v77 = &C::inst_data(ctx, v76);
                                if let &InstructionData::Unary {
                                    opcode: ref v78,
                                    arg: v79,
                                } = v77
                                {
                                    if let &Opcode::Sextend = v78 {
                                        let v80 = C::value_type(ctx, v79);
                                        if v80 == I32 {
                                            let v42 = C::put_in_reg(ctx, v39.1);
                                            let v81 = C::put_in_reg(ctx, v79);
                                            let v82 =
                                                constructor_add_reg_sext32(ctx, v61, v42, v81);
                                            let v83 = constructor_output_reg(ctx, v82);
                                            // Rule at src/isa/s390x/lower.isle line 73.
                                            return Some(v83);
                                        }
                                    }
                                }
                            }
                            let v88 = C::i16_from_value(ctx, v39.0);
                            if let Some(v89) = v88 {
                                let v42 = C::put_in_reg(ctx, v39.1);
                                let v90 = constructor_add_simm16(ctx, v61, v42, v89);
                                let v91 = constructor_output_reg(ctx, v90);
                                // Rule at src/isa/s390x/lower.isle line 79.
                                return Some(v91);
                            }
                            let v96 = C::i32_from_value(ctx, v39.0);
                            if let Some(v97) = v96 {
                                let v42 = C::put_in_reg(ctx, v39.1);
                                let v98 = constructor_add_simm32(ctx, v61, v42, v97);
                                let v99 = constructor_output_reg(ctx, v98);
                                // Rule at src/isa/s390x/lower.isle line 83.
                                return Some(v99);
                            }
                            let v118 = C::sinkable_inst(ctx, v39.0);
                            if let Some(v119) = v118 {
                                let v120 = &C::inst_data(ctx, v119);
                                if let &InstructionData::Load {
                                    opcode: ref v121,
                                    arg: v122,
                                    flags: v123,
                                    offset: v124,
                                } = v120
                                {
                                    match v121 {
                                        &Opcode::Load => {
                                            let v125 = C::bigendian(ctx, v123);
                                            if let Some(v126) = v125 {
                                                let v115 = C::value_type(ctx, v39.0);
                                                let v116 = C::ty_32_or_64(ctx, v115);
                                                if let Some(v117) = v116 {
                                                    let v42 = C::put_in_reg(ctx, v39.1);
                                                    let v127 = &constructor_sink_load(ctx, v119);
                                                    let v128 =
                                                        constructor_add_mem(ctx, v61, v42, v127);
                                                    let v129 = constructor_output_reg(ctx, v128);
                                                    // Rule at src/isa/s390x/lower.isle line 89.
                                                    return Some(v129);
                                                }
                                                if v115 == I16 {
                                                    let v42 = C::put_in_reg(ctx, v39.1);
                                                    let v127 = &constructor_sink_load(ctx, v119);
                                                    let v132 = constructor_add_mem_sext16(
                                                        ctx, v61, v42, v127,
                                                    );
                                                    let v133 = constructor_output_reg(ctx, v132);
                                                    // Rule at src/isa/s390x/lower.isle line 95.
                                                    return Some(v133);
                                                }
                                            }
                                        }
                                        &Opcode::Sload16 => {
                                            let v125 = C::bigendian(ctx, v123);
                                            if let Some(v126) = v125 {
                                                let v42 = C::put_in_reg(ctx, v39.1);
                                                let v137 = &constructor_sink_sload16(ctx, v119);
                                                let v138 =
                                                    constructor_add_mem_sext16(ctx, v61, v42, v137);
                                                let v139 = constructor_output_reg(ctx, v138);
                                                // Rule at src/isa/s390x/lower.isle line 101.
                                                return Some(v139);
                                            }
                                        }
                                        &Opcode::Sload32 => {
                                            let v125 = C::bigendian(ctx, v123);
                                            if let Some(v126) = v125 {
                                                let v42 = C::put_in_reg(ctx, v39.1);
                                                let v143 = &constructor_sink_sload32(ctx, v119);
                                                let v144 =
                                                    constructor_add_mem_sext32(ctx, v61, v42, v143);
                                                let v145 = constructor_output_reg(ctx, v144);
                                                // Rule at src/isa/s390x/lower.isle line 105.
                                                return Some(v145);
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v66 = C::def_inst(ctx, v39.1);
                            if let Some(v67) = v66 {
                                let v68 = &C::inst_data(ctx, v67);
                                if let &InstructionData::Unary {
                                    opcode: ref v69,
                                    arg: v70,
                                } = v68
                                {
                                    if let &Opcode::Sextend = v69 {
                                        let v71 = C::value_type(ctx, v70);
                                        if v71 == I32 {
                                            let v62 = C::put_in_reg(ctx, v39.0);
                                            let v72 = C::put_in_reg(ctx, v70);
                                            let v73 =
                                                constructor_add_reg_sext32(ctx, v61, v62, v72);
                                            let v74 = constructor_output_reg(ctx, v73);
                                            // Rule at src/isa/s390x/lower.isle line 71.
                                            return Some(v74);
                                        }
                                    }
                                }
                            }
                            let v84 = C::i16_from_value(ctx, v39.1);
                            if let Some(v85) = v84 {
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v86 = constructor_add_simm16(ctx, v61, v62, v85);
                                let v87 = constructor_output_reg(ctx, v86);
                                // Rule at src/isa/s390x/lower.isle line 77.
                                return Some(v87);
                            }
                            let v92 = C::i32_from_value(ctx, v39.1);
                            if let Some(v93) = v92 {
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v94 = constructor_add_simm32(ctx, v61, v62, v93);
                                let v95 = constructor_output_reg(ctx, v94);
                                // Rule at src/isa/s390x/lower.isle line 81.
                                return Some(v95);
                            }
                            let v103 = C::sinkable_inst(ctx, v39.1);
                            if let Some(v104) = v103 {
                                let v105 = &C::inst_data(ctx, v104);
                                if let &InstructionData::Load {
                                    opcode: ref v106,
                                    arg: v107,
                                    flags: v108,
                                    offset: v109,
                                } = v105
                                {
                                    match v106 {
                                        &Opcode::Load => {
                                            let v110 = C::bigendian(ctx, v108);
                                            if let Some(v111) = v110 {
                                                let v100 = C::value_type(ctx, v39.1);
                                                let v101 = C::ty_32_or_64(ctx, v100);
                                                if let Some(v102) = v101 {
                                                    let v62 = C::put_in_reg(ctx, v39.0);
                                                    let v112 = &constructor_sink_load(ctx, v104);
                                                    let v113 =
                                                        constructor_add_mem(ctx, v61, v62, v112);
                                                    let v114 = constructor_output_reg(ctx, v113);
                                                    // Rule at src/isa/s390x/lower.isle line 87.
                                                    return Some(v114);
                                                }
                                                if v100 == I16 {
                                                    let v62 = C::put_in_reg(ctx, v39.0);
                                                    let v112 = &constructor_sink_load(ctx, v104);
                                                    let v130 = constructor_add_mem_sext16(
                                                        ctx, v61, v62, v112,
                                                    );
                                                    let v131 = constructor_output_reg(ctx, v130);
                                                    // Rule at src/isa/s390x/lower.isle line 93.
                                                    return Some(v131);
                                                }
                                            }
                                        }
                                        &Opcode::Sload16 => {
                                            let v110 = C::bigendian(ctx, v108);
                                            if let Some(v111) = v110 {
                                                let v62 = C::put_in_reg(ctx, v39.0);
                                                let v134 = &constructor_sink_sload16(ctx, v104);
                                                let v135 =
                                                    constructor_add_mem_sext16(ctx, v61, v62, v134);
                                                let v136 = constructor_output_reg(ctx, v135);
                                                // Rule at src/isa/s390x/lower.isle line 99.
                                                return Some(v136);
                                            }
                                        }
                                        &Opcode::Sload32 => {
                                            let v110 = C::bigendian(ctx, v108);
                                            if let Some(v111) = v110 {
                                                let v62 = C::put_in_reg(ctx, v39.0);
                                                let v140 = &constructor_sink_sload32(ctx, v104);
                                                let v141 =
                                                    constructor_add_mem_sext32(ctx, v61, v62, v140);
                                                let v142 = constructor_output_reg(ctx, v141);
                                                // Rule at src/isa/s390x/lower.isle line 103.
                                                return Some(v142);
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                        }
                        let v35 = C::vr128_ty(ctx, v3);
                        if let Some(v36) = v35 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v146 = constructor_vec_add(ctx, v36, v62, v63);
                            let v147 = constructor_output_reg(ctx, v146);
                            // Rule at src/isa/s390x/lower.isle line 109.
                            return Some(v147);
                        }
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v64 = constructor_add_reg(ctx, v61, v62, v63);
                            let v65 = constructor_output_reg(ctx, v64);
                            // Rule at src/isa/s390x/lower.isle line 67.
                            return Some(v65);
                        }
                    }
                }
                &Opcode::Isub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v66 = C::def_inst(ctx, v39.1);
                            if let Some(v67) = v66 {
                                let v68 = &C::inst_data(ctx, v67);
                                if let &InstructionData::Unary {
                                    opcode: ref v69,
                                    arg: v70,
                                } = v68
                                {
                                    if let &Opcode::Sextend = v69 {
                                        let v71 = C::value_type(ctx, v70);
                                        if v71 == I32 {
                                            let v62 = C::put_in_reg(ctx, v39.0);
                                            let v72 = C::put_in_reg(ctx, v70);
                                            let v227 =
                                                constructor_sub_reg_sext32(ctx, v61, v62, v72);
                                            let v228 = constructor_output_reg(ctx, v227);
                                            // Rule at src/isa/s390x/lower.isle line 157.
                                            return Some(v228);
                                        }
                                    }
                                }
                            }
                            let v229 = C::i16_from_negated_value(ctx, v39.1);
                            if let Some(v230) = v229 {
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v231 = constructor_add_simm16(ctx, v61, v62, v230);
                                let v232 = constructor_output_reg(ctx, v231);
                                // Rule at src/isa/s390x/lower.isle line 161.
                                return Some(v232);
                            }
                            let v233 = C::i32_from_negated_value(ctx, v39.1);
                            if let Some(v234) = v233 {
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v235 = constructor_add_simm32(ctx, v61, v62, v234);
                                let v236 = constructor_output_reg(ctx, v235);
                                // Rule at src/isa/s390x/lower.isle line 163.
                                return Some(v236);
                            }
                            let v103 = C::sinkable_inst(ctx, v39.1);
                            if let Some(v104) = v103 {
                                let v105 = &C::inst_data(ctx, v104);
                                if let &InstructionData::Load {
                                    opcode: ref v106,
                                    arg: v107,
                                    flags: v108,
                                    offset: v109,
                                } = v105
                                {
                                    match v106 {
                                        &Opcode::Load => {
                                            let v110 = C::bigendian(ctx, v108);
                                            if let Some(v111) = v110 {
                                                let v100 = C::value_type(ctx, v39.1);
                                                let v101 = C::ty_32_or_64(ctx, v100);
                                                if let Some(v102) = v101 {
                                                    let v62 = C::put_in_reg(ctx, v39.0);
                                                    let v112 = &constructor_sink_load(ctx, v104);
                                                    let v237 =
                                                        constructor_sub_mem(ctx, v61, v62, v112);
                                                    let v238 = constructor_output_reg(ctx, v237);
                                                    // Rule at src/isa/s390x/lower.isle line 167.
                                                    return Some(v238);
                                                }
                                                if v100 == I16 {
                                                    let v62 = C::put_in_reg(ctx, v39.0);
                                                    let v112 = &constructor_sink_load(ctx, v104);
                                                    let v239 = constructor_sub_mem_sext16(
                                                        ctx, v61, v62, v112,
                                                    );
                                                    let v240 = constructor_output_reg(ctx, v239);
                                                    // Rule at src/isa/s390x/lower.isle line 171.
                                                    return Some(v240);
                                                }
                                            }
                                        }
                                        &Opcode::Sload16 => {
                                            let v110 = C::bigendian(ctx, v108);
                                            if let Some(v111) = v110 {
                                                let v62 = C::put_in_reg(ctx, v39.0);
                                                let v134 = &constructor_sink_sload16(ctx, v104);
                                                let v241 =
                                                    constructor_sub_mem_sext16(ctx, v61, v62, v134);
                                                let v242 = constructor_output_reg(ctx, v241);
                                                // Rule at src/isa/s390x/lower.isle line 175.
                                                return Some(v242);
                                            }
                                        }
                                        &Opcode::Sload32 => {
                                            let v110 = C::bigendian(ctx, v108);
                                            if let Some(v111) = v110 {
                                                let v62 = C::put_in_reg(ctx, v39.0);
                                                let v140 = &constructor_sink_sload32(ctx, v104);
                                                let v243 =
                                                    constructor_sub_mem_sext32(ctx, v61, v62, v140);
                                                let v244 = constructor_output_reg(ctx, v243);
                                                // Rule at src/isa/s390x/lower.isle line 177.
                                                return Some(v244);
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                        }
                        let v35 = C::vr128_ty(ctx, v3);
                        if let Some(v36) = v35 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v245 = constructor_vec_sub(ctx, v36, v62, v63);
                            let v246 = constructor_output_reg(ctx, v245);
                            // Rule at src/isa/s390x/lower.isle line 181.
                            return Some(v246);
                        }
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v225 = constructor_sub_reg(ctx, v61, v62, v63);
                            let v226 = constructor_output_reg(ctx, v225);
                            // Rule at src/isa/s390x/lower.isle line 153.
                            return Some(v226);
                        }
                    }
                }
                &Opcode::Imul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v75 = C::def_inst(ctx, v39.0);
                            if let Some(v76) = v75 {
                                let v77 = &C::inst_data(ctx, v76);
                                if let &InstructionData::Unary {
                                    opcode: ref v78,
                                    arg: v79,
                                } = v77
                                {
                                    if let &Opcode::Sextend = v78 {
                                        let v80 = C::value_type(ctx, v79);
                                        if v80 == I32 {
                                            let v42 = C::put_in_reg(ctx, v39.1);
                                            let v81 = C::put_in_reg(ctx, v79);
                                            let v339 =
                                                constructor_mul_reg_sext32(ctx, v61, v42, v81);
                                            let v340 = constructor_output_reg(ctx, v339);
                                            // Rule at src/isa/s390x/lower.isle line 351.
                                            return Some(v340);
                                        }
                                    }
                                }
                            }
                            let v88 = C::i16_from_value(ctx, v39.0);
                            if let Some(v89) = v88 {
                                let v42 = C::put_in_reg(ctx, v39.1);
                                let v343 = constructor_mul_simm16(ctx, v61, v42, v89);
                                let v344 = constructor_output_reg(ctx, v343);
                                // Rule at src/isa/s390x/lower.isle line 357.
                                return Some(v344);
                            }
                            let v96 = C::i32_from_value(ctx, v39.0);
                            if let Some(v97) = v96 {
                                let v42 = C::put_in_reg(ctx, v39.1);
                                let v347 = constructor_mul_simm32(ctx, v61, v42, v97);
                                let v348 = constructor_output_reg(ctx, v347);
                                // Rule at src/isa/s390x/lower.isle line 361.
                                return Some(v348);
                            }
                            let v118 = C::sinkable_inst(ctx, v39.0);
                            if let Some(v119) = v118 {
                                let v120 = &C::inst_data(ctx, v119);
                                if let &InstructionData::Load {
                                    opcode: ref v121,
                                    arg: v122,
                                    flags: v123,
                                    offset: v124,
                                } = v120
                                {
                                    match v121 {
                                        &Opcode::Load => {
                                            let v125 = C::bigendian(ctx, v123);
                                            if let Some(v126) = v125 {
                                                let v115 = C::value_type(ctx, v39.0);
                                                let v116 = C::ty_32_or_64(ctx, v115);
                                                if let Some(v117) = v116 {
                                                    let v42 = C::put_in_reg(ctx, v39.1);
                                                    let v127 = &constructor_sink_load(ctx, v119);
                                                    let v351 =
                                                        constructor_mul_mem(ctx, v61, v42, v127);
                                                    let v352 = constructor_output_reg(ctx, v351);
                                                    // Rule at src/isa/s390x/lower.isle line 367.
                                                    return Some(v352);
                                                }
                                                if v115 == I16 {
                                                    let v42 = C::put_in_reg(ctx, v39.1);
                                                    let v127 = &constructor_sink_load(ctx, v119);
                                                    let v355 = constructor_mul_mem_sext16(
                                                        ctx, v61, v42, v127,
                                                    );
                                                    let v356 = constructor_output_reg(ctx, v355);
                                                    // Rule at src/isa/s390x/lower.isle line 373.
                                                    return Some(v356);
                                                }
                                            }
                                        }
                                        &Opcode::Sload16 => {
                                            let v125 = C::bigendian(ctx, v123);
                                            if let Some(v126) = v125 {
                                                let v42 = C::put_in_reg(ctx, v39.1);
                                                let v137 = &constructor_sink_sload16(ctx, v119);
                                                let v359 =
                                                    constructor_mul_mem_sext16(ctx, v61, v42, v137);
                                                let v360 = constructor_output_reg(ctx, v359);
                                                // Rule at src/isa/s390x/lower.isle line 379.
                                                return Some(v360);
                                            }
                                        }
                                        &Opcode::Sload32 => {
                                            let v125 = C::bigendian(ctx, v123);
                                            if let Some(v126) = v125 {
                                                let v42 = C::put_in_reg(ctx, v39.1);
                                                let v143 = &constructor_sink_sload32(ctx, v119);
                                                let v363 =
                                                    constructor_mul_mem_sext32(ctx, v61, v42, v143);
                                                let v364 = constructor_output_reg(ctx, v363);
                                                // Rule at src/isa/s390x/lower.isle line 383.
                                                return Some(v364);
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v66 = C::def_inst(ctx, v39.1);
                            if let Some(v67) = v66 {
                                let v68 = &C::inst_data(ctx, v67);
                                if let &InstructionData::Unary {
                                    opcode: ref v69,
                                    arg: v70,
                                } = v68
                                {
                                    if let &Opcode::Sextend = v69 {
                                        let v71 = C::value_type(ctx, v70);
                                        if v71 == I32 {
                                            let v62 = C::put_in_reg(ctx, v39.0);
                                            let v72 = C::put_in_reg(ctx, v70);
                                            let v337 =
                                                constructor_mul_reg_sext32(ctx, v61, v62, v72);
                                            let v338 = constructor_output_reg(ctx, v337);
                                            // Rule at src/isa/s390x/lower.isle line 349.
                                            return Some(v338);
                                        }
                                    }
                                }
                            }
                            let v84 = C::i16_from_value(ctx, v39.1);
                            if let Some(v85) = v84 {
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v341 = constructor_mul_simm16(ctx, v61, v62, v85);
                                let v342 = constructor_output_reg(ctx, v341);
                                // Rule at src/isa/s390x/lower.isle line 355.
                                return Some(v342);
                            }
                            let v92 = C::i32_from_value(ctx, v39.1);
                            if let Some(v93) = v92 {
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v345 = constructor_mul_simm32(ctx, v61, v62, v93);
                                let v346 = constructor_output_reg(ctx, v345);
                                // Rule at src/isa/s390x/lower.isle line 359.
                                return Some(v346);
                            }
                            let v103 = C::sinkable_inst(ctx, v39.1);
                            if let Some(v104) = v103 {
                                let v105 = &C::inst_data(ctx, v104);
                                if let &InstructionData::Load {
                                    opcode: ref v106,
                                    arg: v107,
                                    flags: v108,
                                    offset: v109,
                                } = v105
                                {
                                    match v106 {
                                        &Opcode::Load => {
                                            let v110 = C::bigendian(ctx, v108);
                                            if let Some(v111) = v110 {
                                                let v100 = C::value_type(ctx, v39.1);
                                                let v101 = C::ty_32_or_64(ctx, v100);
                                                if let Some(v102) = v101 {
                                                    let v62 = C::put_in_reg(ctx, v39.0);
                                                    let v112 = &constructor_sink_load(ctx, v104);
                                                    let v349 =
                                                        constructor_mul_mem(ctx, v61, v62, v112);
                                                    let v350 = constructor_output_reg(ctx, v349);
                                                    // Rule at src/isa/s390x/lower.isle line 365.
                                                    return Some(v350);
                                                }
                                                if v100 == I16 {
                                                    let v62 = C::put_in_reg(ctx, v39.0);
                                                    let v112 = &constructor_sink_load(ctx, v104);
                                                    let v353 = constructor_mul_mem_sext16(
                                                        ctx, v61, v62, v112,
                                                    );
                                                    let v354 = constructor_output_reg(ctx, v353);
                                                    // Rule at src/isa/s390x/lower.isle line 371.
                                                    return Some(v354);
                                                }
                                            }
                                        }
                                        &Opcode::Sload16 => {
                                            let v110 = C::bigendian(ctx, v108);
                                            if let Some(v111) = v110 {
                                                let v62 = C::put_in_reg(ctx, v39.0);
                                                let v134 = &constructor_sink_sload16(ctx, v104);
                                                let v357 =
                                                    constructor_mul_mem_sext16(ctx, v61, v62, v134);
                                                let v358 = constructor_output_reg(ctx, v357);
                                                // Rule at src/isa/s390x/lower.isle line 377.
                                                return Some(v358);
                                            }
                                        }
                                        &Opcode::Sload32 => {
                                            let v110 = C::bigendian(ctx, v108);
                                            if let Some(v111) = v110 {
                                                let v62 = C::put_in_reg(ctx, v39.0);
                                                let v140 = &constructor_sink_sload32(ctx, v104);
                                                let v361 =
                                                    constructor_mul_mem_sext32(ctx, v61, v62, v140);
                                                let v362 = constructor_output_reg(ctx, v361);
                                                // Rule at src/isa/s390x/lower.isle line 381.
                                                return Some(v362);
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                        }
                        let v35 = C::vr128_ty(ctx, v3);
                        if let Some(v36) = v35 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v365 = constructor_vec_mul_impl(ctx, v36, v62, v63);
                            let v366 = constructor_output_reg(ctx, v365);
                            // Rule at src/isa/s390x/lower.isle line 388.
                            return Some(v366);
                        }
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v335 = constructor_mul_reg(ctx, v61, v62, v63);
                            let v336 = constructor_output_reg(ctx, v335);
                            // Rule at src/isa/s390x/lower.isle line 345.
                            return Some(v336);
                        }
                    }
                }
                &Opcode::Umulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v374 = constructor_put_in_reg_zext64(ctx, v39.0);
                                let v375 = constructor_put_in_reg_zext64(ctx, v39.1);
                                let v377 = constructor_mul_reg(ctx, I64, v374, v375);
                                let v379 = constructor_lshr_imm(ctx, I64, v377, 0x20);
                                let v380 = constructor_output_reg(ctx, v379);
                                // Rule at src/isa/s390x/lower.isle line 429.
                                return Some(v380);
                            }
                            I64 => {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v63 = C::put_in_reg(ctx, v39.1);
                                let v381 = constructor_umul_wide(ctx, v62, v63);
                                let v382 = C::regpair_hi(ctx, v381);
                                let v383 = constructor_copy_reg(ctx, I64, v382);
                                let v384 = constructor_output_reg(ctx, v383);
                                // Rule at src/isa/s390x/lower.isle line 436.
                                return Some(v384);
                            }
                            I8X16 => {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v63 = C::put_in_reg(ctx, v39.1);
                                let v385 = constructor_vec_umulhi(ctx, I8X16, v62, v63);
                                let v386 = constructor_output_reg(ctx, v385);
                                // Rule at src/isa/s390x/lower.isle line 441.
                                return Some(v386);
                            }
                            I16X8 => {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v63 = C::put_in_reg(ctx, v39.1);
                                let v388 = constructor_vec_umulhi(ctx, I16X8, v62, v63);
                                let v389 = constructor_output_reg(ctx, v388);
                                // Rule at src/isa/s390x/lower.isle line 442.
                                return Some(v389);
                            }
                            I32X4 => {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v63 = C::put_in_reg(ctx, v39.1);
                                let v391 = constructor_vec_umulhi(ctx, I32X4, v62, v63);
                                let v392 = constructor_output_reg(ctx, v391);
                                // Rule at src/isa/s390x/lower.isle line 443.
                                return Some(v392);
                            }
                            I64X2 => {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v52 = C::zero_reg(ctx);
                                let v393 = constructor_vec_extract_lane(ctx, I64X2, v62, 0x0, v52);
                                let v394 = C::put_in_reg(ctx, v39.1);
                                let v395 = C::zero_reg(ctx);
                                let v396 =
                                    constructor_vec_extract_lane(ctx, I64X2, v394, 0x0, v395);
                                let v397 = constructor_umul_wide(ctx, v393, v396);
                                let v398 = C::regpair_hi(ctx, v397);
                                let v399 = constructor_copy_reg(ctx, I64, v398);
                                let v400 = C::put_in_reg(ctx, v39.0);
                                let v401 = C::zero_reg(ctx);
                                let v402 =
                                    constructor_vec_extract_lane(ctx, I64X2, v400, 0x1, v401);
                                let v403 = C::put_in_reg(ctx, v39.1);
                                let v404 = C::zero_reg(ctx);
                                let v405 =
                                    constructor_vec_extract_lane(ctx, I64X2, v403, 0x1, v404);
                                let v406 = constructor_umul_wide(ctx, v402, v405);
                                let v407 = C::regpair_hi(ctx, v406);
                                let v408 = constructor_copy_reg(ctx, I64, v407);
                                let v409 = constructor_mov_to_vec128(ctx, I64X2, v399, v408);
                                let v410 = constructor_output_reg(ctx, v409);
                                // Rule at src/isa/s390x/lower.isle line 447.
                                return Some(v410);
                            }
                            _ => {}
                        }
                        let v367 = C::ty_8_or_16(ctx, v3);
                        if let Some(v368) = v367 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v286 = constructor_put_in_reg_zext32(ctx, v39.0);
                            let v287 = constructor_put_in_reg_zext32(ctx, v39.1);
                            let v370 = constructor_mul_reg(ctx, I32, v286, v287);
                            let v371 = C::ty_bits(ctx, v368);
                            let v372 = constructor_lshr_imm(ctx, I32, v370, v371);
                            let v373 = constructor_output_reg(ctx, v372);
                            // Rule at src/isa/s390x/lower.isle line 422.
                            return Some(v373);
                        }
                    }
                }
                &Opcode::Smulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v414 = constructor_put_in_reg_sext64(ctx, v39.0);
                                let v415 = constructor_put_in_reg_sext64(ctx, v39.1);
                                let v416 = constructor_mul_reg(ctx, I64, v414, v415);
                                let v417 = constructor_ashr_imm(ctx, I64, v416, 0x20);
                                let v418 = constructor_output_reg(ctx, v417);
                                // Rule at src/isa/s390x/lower.isle line 467.
                                return Some(v418);
                            }
                            I64 => {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v63 = C::put_in_reg(ctx, v39.1);
                                let v419 = constructor_smul_wide(ctx, v62, v63);
                                let v420 = C::regpair_hi(ctx, v419);
                                let v421 = constructor_copy_reg(ctx, I64, v420);
                                let v422 = constructor_output_reg(ctx, v421);
                                // Rule at src/isa/s390x/lower.isle line 474.
                                return Some(v422);
                            }
                            I8X16 => {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v63 = C::put_in_reg(ctx, v39.1);
                                let v423 = constructor_vec_smulhi(ctx, I8X16, v62, v63);
                                let v424 = constructor_output_reg(ctx, v423);
                                // Rule at src/isa/s390x/lower.isle line 479.
                                return Some(v424);
                            }
                            I16X8 => {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v63 = C::put_in_reg(ctx, v39.1);
                                let v425 = constructor_vec_smulhi(ctx, I16X8, v62, v63);
                                let v426 = constructor_output_reg(ctx, v425);
                                // Rule at src/isa/s390x/lower.isle line 480.
                                return Some(v426);
                            }
                            I32X4 => {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v63 = C::put_in_reg(ctx, v39.1);
                                let v427 = constructor_vec_smulhi(ctx, I32X4, v62, v63);
                                let v428 = constructor_output_reg(ctx, v427);
                                // Rule at src/isa/s390x/lower.isle line 481.
                                return Some(v428);
                            }
                            I64X2 => {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v52 = C::zero_reg(ctx);
                                let v393 = constructor_vec_extract_lane(ctx, I64X2, v62, 0x0, v52);
                                let v394 = C::put_in_reg(ctx, v39.1);
                                let v395 = C::zero_reg(ctx);
                                let v396 =
                                    constructor_vec_extract_lane(ctx, I64X2, v394, 0x0, v395);
                                let v429 = constructor_smul_wide(ctx, v393, v396);
                                let v430 = C::regpair_hi(ctx, v429);
                                let v431 = constructor_copy_reg(ctx, I64, v430);
                                let v400 = C::put_in_reg(ctx, v39.0);
                                let v401 = C::zero_reg(ctx);
                                let v402 =
                                    constructor_vec_extract_lane(ctx, I64X2, v400, 0x1, v401);
                                let v403 = C::put_in_reg(ctx, v39.1);
                                let v404 = C::zero_reg(ctx);
                                let v405 =
                                    constructor_vec_extract_lane(ctx, I64X2, v403, 0x1, v404);
                                let v432 = constructor_smul_wide(ctx, v402, v405);
                                let v433 = C::regpair_hi(ctx, v432);
                                let v434 = constructor_copy_reg(ctx, I64, v433);
                                let v435 = constructor_mov_to_vec128(ctx, I64X2, v431, v434);
                                let v436 = constructor_output_reg(ctx, v435);
                                // Rule at src/isa/s390x/lower.isle line 485.
                                return Some(v436);
                            }
                            _ => {}
                        }
                        let v367 = C::ty_8_or_16(ctx, v3);
                        if let Some(v368) = v367 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v310 = constructor_put_in_reg_sext32(ctx, v39.0);
                            let v311 = constructor_put_in_reg_sext32(ctx, v39.1);
                            let v411 = constructor_mul_reg(ctx, I32, v310, v311);
                            let v371 = C::ty_bits(ctx, v368);
                            let v412 = constructor_ashr_imm(ctx, I32, v411, v371);
                            let v413 = constructor_output_reg(ctx, v412);
                            // Rule at src/isa/s390x/lower.isle line 460.
                            return Some(v413);
                        }
                    }
                }
                &Opcode::SqmulRoundSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v155 = constructor_vec_widen_type(ctx, v149);
                            let v156 = constructor_vec_widen_type(ctx, v149);
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v157 = C::put_in_reg(ctx, v39.0);
                            let v158 = constructor_vec_unpacks_high(ctx, v149, v157);
                            let v159 = C::put_in_reg(ctx, v39.1);
                            let v160 = constructor_vec_unpacks_high(ctx, v149, v159);
                            let v437 = constructor_sqmul_impl(ctx, v156, v158, v160);
                            let v162 = constructor_vec_widen_type(ctx, v149);
                            let v163 = C::put_in_reg(ctx, v39.0);
                            let v164 = constructor_vec_unpacks_low(ctx, v149, v163);
                            let v165 = C::put_in_reg(ctx, v39.1);
                            let v166 = constructor_vec_unpacks_low(ctx, v149, v165);
                            let v438 = constructor_sqmul_impl(ctx, v162, v164, v166);
                            let v439 = constructor_vec_pack_ssat(ctx, v155, v437, v438);
                            let v440 = constructor_output_reg(ctx, v439);
                            // Rule at src/isa/s390x/lower.isle line 498.
                            return Some(v440);
                        }
                    }
                }
                &Opcode::Udiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v441 = constructor_zero_divisor_check_needed(ctx, v39.1);
                            let v442 = constructor_ty_ext32(ctx, v61);
                            let v443 = constructor_imm(ctx, v442, 0x0);
                            let v444 = constructor_put_in_reg_zext32(ctx, v39.0);
                            let v445 = C::regpair(ctx, v443, v444);
                            let v446 = constructor_put_in_reg_zext32(ctx, v39.1);
                            let v447 = constructor_ty_ext32(ctx, v61);
                            let v448 =
                                constructor_maybe_trap_if_zero_divisor(ctx, v441, v447, v446);
                            let v449 = constructor_udivmod(ctx, v447, v445, v446);
                            let v450 = C::regpair_lo(ctx, v449);
                            let v451 = constructor_copy_reg(ctx, v61, v450);
                            let v452 = constructor_output_reg(ctx, v451);
                            // Rule at src/isa/s390x/lower.isle line 536.
                            return Some(v452);
                        }
                    }
                }
                &Opcode::Sdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v441 = constructor_zero_divisor_check_needed(ctx, v39.1);
                            let v456 = constructor_div_overflow_check_needed(ctx, v39.1);
                            let v457 = constructor_put_in_reg_sext64(ctx, v39.0);
                            let v458 = constructor_put_in_reg_sext32(ctx, v39.1);
                            let v459 = constructor_ty_ext32(ctx, v61);
                            let v460 =
                                constructor_maybe_trap_if_zero_divisor(ctx, v441, v459, v458);
                            let v461 = constructor_maybe_trap_if_sdiv_overflow(
                                ctx, v456, v459, v61, v457, v458,
                            );
                            let v462 = constructor_sdivmod(ctx, v459, v457, v458);
                            let v463 = C::regpair_lo(ctx, v462);
                            let v464 = constructor_copy_reg(ctx, v61, v463);
                            let v465 = constructor_output_reg(ctx, v464);
                            // Rule at src/isa/s390x/lower.isle line 610.
                            return Some(v465);
                        }
                    }
                }
                &Opcode::Urem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v441 = constructor_zero_divisor_check_needed(ctx, v39.1);
                            let v442 = constructor_ty_ext32(ctx, v61);
                            let v443 = constructor_imm(ctx, v442, 0x0);
                            let v444 = constructor_put_in_reg_zext32(ctx, v39.0);
                            let v445 = C::regpair(ctx, v443, v444);
                            let v446 = constructor_put_in_reg_zext32(ctx, v39.1);
                            let v447 = constructor_ty_ext32(ctx, v61);
                            let v448 =
                                constructor_maybe_trap_if_zero_divisor(ctx, v441, v447, v446);
                            let v449 = constructor_udivmod(ctx, v447, v445, v446);
                            let v453 = C::regpair_hi(ctx, v449);
                            let v454 = constructor_copy_reg(ctx, v61, v453);
                            let v455 = constructor_output_reg(ctx, v454);
                            // Rule at src/isa/s390x/lower.isle line 559.
                            return Some(v455);
                        }
                    }
                }
                &Opcode::Srem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v441 = constructor_zero_divisor_check_needed(ctx, v39.1);
                            let v456 = constructor_div_overflow_check_needed(ctx, v39.1);
                            let v457 = constructor_put_in_reg_sext64(ctx, v39.0);
                            let v458 = constructor_put_in_reg_sext32(ctx, v39.1);
                            let v459 = constructor_ty_ext32(ctx, v61);
                            let v460 =
                                constructor_maybe_trap_if_zero_divisor(ctx, v441, v459, v458);
                            let v466 =
                                constructor_maybe_avoid_srem_overflow(ctx, v456, v459, v457, v458);
                            let v467 = constructor_sdivmod(ctx, v459, v466, v458);
                            let v468 = C::regpair_hi(ctx, v467);
                            let v469 = constructor_copy_reg(ctx, v61, v468);
                            let v470 = constructor_output_reg(ctx, v469);
                            // Rule at src/isa/s390x/lower.isle line 632.
                            return Some(v470);
                        }
                    }
                }
                &Opcode::Band => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v35 = C::vr128_ty(ctx, v3);
                        if let Some(v36) = v35 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v75 = C::def_inst(ctx, v39.0);
                            if let Some(v76) = v75 {
                                let v77 = &C::inst_data(ctx, v76);
                                if let &InstructionData::Unary {
                                    opcode: ref v78,
                                    arg: v79,
                                } = v77
                                {
                                    if let &Opcode::Bnot = v78 {
                                        let v42 = C::put_in_reg(ctx, v39.1);
                                        let v81 = C::put_in_reg(ctx, v79);
                                        let v684 = constructor_vec_and_not(ctx, v36, v42, v81);
                                        let v685 = constructor_output_reg(ctx, v684);
                                        // Rule at src/isa/s390x/lower.isle line 1067.
                                        return Some(v685);
                                    }
                                }
                            }
                            let v66 = C::def_inst(ctx, v39.1);
                            if let Some(v67) = v66 {
                                let v68 = &C::inst_data(ctx, v67);
                                if let &InstructionData::Unary {
                                    opcode: ref v69,
                                    arg: v70,
                                } = v68
                                {
                                    if let &Opcode::Bnot = v69 {
                                        let v62 = C::put_in_reg(ctx, v39.0);
                                        let v72 = C::put_in_reg(ctx, v70);
                                        let v682 = constructor_vec_and_not(ctx, v36, v62, v72);
                                        let v683 = constructor_output_reg(ctx, v682);
                                        // Rule at src/isa/s390x/lower.isle line 1065.
                                        return Some(v683);
                                    }
                                }
                            }
                        }
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v633 = C::mie2_enabled(ctx, v3);
                            if let Some(v634) = v633 {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v75 = C::def_inst(ctx, v39.0);
                                if let Some(v76) = v75 {
                                    let v77 = &C::inst_data(ctx, v76);
                                    if let &InstructionData::Unary {
                                        opcode: ref v78,
                                        arg: v79,
                                    } = v77
                                    {
                                        if let &Opcode::Bnot = v78 {
                                            let v42 = C::put_in_reg(ctx, v39.1);
                                            let v81 = C::put_in_reg(ctx, v79);
                                            let v680 = constructor_and_not_reg(ctx, v61, v42, v81);
                                            let v681 = constructor_output_reg(ctx, v680);
                                            // Rule at src/isa/s390x/lower.isle line 1061.
                                            return Some(v681);
                                        }
                                    }
                                }
                                let v66 = C::def_inst(ctx, v39.1);
                                if let Some(v67) = v66 {
                                    let v68 = &C::inst_data(ctx, v67);
                                    if let &InstructionData::Unary {
                                        opcode: ref v69,
                                        arg: v70,
                                    } = v68
                                    {
                                        if let &Opcode::Bnot = v69 {
                                            let v62 = C::put_in_reg(ctx, v39.0);
                                            let v72 = C::put_in_reg(ctx, v70);
                                            let v678 = constructor_and_not_reg(ctx, v61, v62, v72);
                                            let v679 = constructor_output_reg(ctx, v678);
                                            // Rule at src/isa/s390x/lower.isle line 1059.
                                            return Some(v679);
                                        }
                                    }
                                }
                            }
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v660 = C::uimm16shifted_from_inverted_value(ctx, v39.0);
                            if let Some(v661) = v660 {
                                let v42 = C::put_in_reg(ctx, v39.1);
                                let v662 = constructor_and_uimm16shifted(ctx, v61, v42, v661);
                                let v663 = constructor_output_reg(ctx, v662);
                                // Rule at src/isa/s390x/lower.isle line 1037.
                                return Some(v663);
                            }
                            let v656 = C::uimm16shifted_from_inverted_value(ctx, v39.1);
                            if let Some(v657) = v656 {
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v658 = constructor_and_uimm16shifted(ctx, v61, v62, v657);
                                let v659 = constructor_output_reg(ctx, v658);
                                // Rule at src/isa/s390x/lower.isle line 1035.
                                return Some(v659);
                            }
                            let v668 = C::uimm32shifted_from_inverted_value(ctx, v39.0);
                            if let Some(v669) = v668 {
                                let v42 = C::put_in_reg(ctx, v39.1);
                                let v670 = constructor_and_uimm32shifted(ctx, v61, v42, v669);
                                let v671 = constructor_output_reg(ctx, v670);
                                // Rule at src/isa/s390x/lower.isle line 1041.
                                return Some(v671);
                            }
                            let v664 = C::uimm32shifted_from_inverted_value(ctx, v39.1);
                            if let Some(v665) = v664 {
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v666 = constructor_and_uimm32shifted(ctx, v61, v62, v665);
                                let v667 = constructor_output_reg(ctx, v666);
                                // Rule at src/isa/s390x/lower.isle line 1039.
                                return Some(v667);
                            }
                            let v115 = C::value_type(ctx, v39.0);
                            let v116 = C::ty_32_or_64(ctx, v115);
                            if let Some(v117) = v116 {
                                let v118 = C::sinkable_inst(ctx, v39.0);
                                if let Some(v119) = v118 {
                                    let v120 = &C::inst_data(ctx, v119);
                                    if let &InstructionData::Load {
                                        opcode: ref v121,
                                        arg: v122,
                                        flags: v123,
                                        offset: v124,
                                    } = v120
                                    {
                                        if let &Opcode::Load = v121 {
                                            let v125 = C::bigendian(ctx, v123);
                                            if let Some(v126) = v125 {
                                                let v42 = C::put_in_reg(ctx, v39.1);
                                                let v127 = &constructor_sink_load(ctx, v119);
                                                let v674 = constructor_and_mem(ctx, v61, v42, v127);
                                                let v675 = constructor_output_reg(ctx, v674);
                                                // Rule at src/isa/s390x/lower.isle line 1047.
                                                return Some(v675);
                                            }
                                        }
                                    }
                                }
                            }
                            let v100 = C::value_type(ctx, v39.1);
                            let v101 = C::ty_32_or_64(ctx, v100);
                            if let Some(v102) = v101 {
                                let v103 = C::sinkable_inst(ctx, v39.1);
                                if let Some(v104) = v103 {
                                    let v105 = &C::inst_data(ctx, v104);
                                    if let &InstructionData::Load {
                                        opcode: ref v106,
                                        arg: v107,
                                        flags: v108,
                                        offset: v109,
                                    } = v105
                                    {
                                        if let &Opcode::Load = v106 {
                                            let v110 = C::bigendian(ctx, v108);
                                            if let Some(v111) = v110 {
                                                let v62 = C::put_in_reg(ctx, v39.0);
                                                let v112 = &constructor_sink_load(ctx, v104);
                                                let v672 = constructor_and_mem(ctx, v61, v62, v112);
                                                let v673 = constructor_output_reg(ctx, v672);
                                                // Rule at src/isa/s390x/lower.isle line 1045.
                                                return Some(v673);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if let Some(v36) = v35 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v676 = constructor_vec_and(ctx, v36, v62, v63);
                            let v677 = constructor_output_reg(ctx, v676);
                            // Rule at src/isa/s390x/lower.isle line 1051.
                            return Some(v677);
                        }
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v654 = constructor_and_reg(ctx, v61, v62, v63);
                            let v655 = constructor_output_reg(ctx, v654);
                            // Rule at src/isa/s390x/lower.isle line 1031.
                            return Some(v655);
                        }
                    }
                }
                &Opcode::Bor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v35 = C::vr128_ty(ctx, v3);
                        if let Some(v36) = v35 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v75 = C::def_inst(ctx, v39.0);
                            if let Some(v76) = v75 {
                                let v77 = &C::inst_data(ctx, v76);
                                if let &InstructionData::Unary {
                                    opcode: ref v78,
                                    arg: v79,
                                } = v77
                                {
                                    if let &Opcode::Bnot = v78 {
                                        let v42 = C::put_in_reg(ctx, v39.1);
                                        let v81 = C::put_in_reg(ctx, v79);
                                        let v716 = constructor_vec_or_not(ctx, v36, v42, v81);
                                        let v717 = constructor_output_reg(ctx, v716);
                                        // Rule at src/isa/s390x/lower.isle line 1109.
                                        return Some(v717);
                                    }
                                }
                            }
                            let v66 = C::def_inst(ctx, v39.1);
                            if let Some(v67) = v66 {
                                let v68 = &C::inst_data(ctx, v67);
                                if let &InstructionData::Unary {
                                    opcode: ref v69,
                                    arg: v70,
                                } = v68
                                {
                                    if let &Opcode::Bnot = v69 {
                                        let v62 = C::put_in_reg(ctx, v39.0);
                                        let v72 = C::put_in_reg(ctx, v70);
                                        let v714 = constructor_vec_or_not(ctx, v36, v62, v72);
                                        let v715 = constructor_output_reg(ctx, v714);
                                        // Rule at src/isa/s390x/lower.isle line 1107.
                                        return Some(v715);
                                    }
                                }
                            }
                        }
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v633 = C::mie2_enabled(ctx, v3);
                            if let Some(v634) = v633 {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v75 = C::def_inst(ctx, v39.0);
                                if let Some(v76) = v75 {
                                    let v77 = &C::inst_data(ctx, v76);
                                    if let &InstructionData::Unary {
                                        opcode: ref v78,
                                        arg: v79,
                                    } = v77
                                    {
                                        if let &Opcode::Bnot = v78 {
                                            let v42 = C::put_in_reg(ctx, v39.1);
                                            let v81 = C::put_in_reg(ctx, v79);
                                            let v712 = constructor_or_not_reg(ctx, v61, v42, v81);
                                            let v713 = constructor_output_reg(ctx, v712);
                                            // Rule at src/isa/s390x/lower.isle line 1103.
                                            return Some(v713);
                                        }
                                    }
                                }
                                let v66 = C::def_inst(ctx, v39.1);
                                if let Some(v67) = v66 {
                                    let v68 = &C::inst_data(ctx, v67);
                                    if let &InstructionData::Unary {
                                        opcode: ref v69,
                                        arg: v70,
                                    } = v68
                                    {
                                        if let &Opcode::Bnot = v69 {
                                            let v62 = C::put_in_reg(ctx, v39.0);
                                            let v72 = C::put_in_reg(ctx, v70);
                                            let v710 = constructor_or_not_reg(ctx, v61, v62, v72);
                                            let v711 = constructor_output_reg(ctx, v710);
                                            // Rule at src/isa/s390x/lower.isle line 1101.
                                            return Some(v711);
                                        }
                                    }
                                }
                            }
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v692 = C::uimm16shifted_from_value(ctx, v39.0);
                            if let Some(v693) = v692 {
                                let v42 = C::put_in_reg(ctx, v39.1);
                                let v694 = constructor_or_uimm16shifted(ctx, v61, v42, v693);
                                let v695 = constructor_output_reg(ctx, v694);
                                // Rule at src/isa/s390x/lower.isle line 1079.
                                return Some(v695);
                            }
                            let v688 = C::uimm16shifted_from_value(ctx, v39.1);
                            if let Some(v689) = v688 {
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v690 = constructor_or_uimm16shifted(ctx, v61, v62, v689);
                                let v691 = constructor_output_reg(ctx, v690);
                                // Rule at src/isa/s390x/lower.isle line 1077.
                                return Some(v691);
                            }
                            let v700 = C::uimm32shifted_from_value(ctx, v39.0);
                            if let Some(v701) = v700 {
                                let v42 = C::put_in_reg(ctx, v39.1);
                                let v702 = constructor_or_uimm32shifted(ctx, v61, v42, v701);
                                let v703 = constructor_output_reg(ctx, v702);
                                // Rule at src/isa/s390x/lower.isle line 1083.
                                return Some(v703);
                            }
                            let v696 = C::uimm32shifted_from_value(ctx, v39.1);
                            if let Some(v697) = v696 {
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v698 = constructor_or_uimm32shifted(ctx, v61, v62, v697);
                                let v699 = constructor_output_reg(ctx, v698);
                                // Rule at src/isa/s390x/lower.isle line 1081.
                                return Some(v699);
                            }
                            let v115 = C::value_type(ctx, v39.0);
                            let v116 = C::ty_32_or_64(ctx, v115);
                            if let Some(v117) = v116 {
                                let v118 = C::sinkable_inst(ctx, v39.0);
                                if let Some(v119) = v118 {
                                    let v120 = &C::inst_data(ctx, v119);
                                    if let &InstructionData::Load {
                                        opcode: ref v121,
                                        arg: v122,
                                        flags: v123,
                                        offset: v124,
                                    } = v120
                                    {
                                        if let &Opcode::Load = v121 {
                                            let v125 = C::bigendian(ctx, v123);
                                            if let Some(v126) = v125 {
                                                let v42 = C::put_in_reg(ctx, v39.1);
                                                let v127 = &constructor_sink_load(ctx, v119);
                                                let v706 = constructor_or_mem(ctx, v61, v42, v127);
                                                let v707 = constructor_output_reg(ctx, v706);
                                                // Rule at src/isa/s390x/lower.isle line 1089.
                                                return Some(v707);
                                            }
                                        }
                                    }
                                }
                            }
                            let v100 = C::value_type(ctx, v39.1);
                            let v101 = C::ty_32_or_64(ctx, v100);
                            if let Some(v102) = v101 {
                                let v103 = C::sinkable_inst(ctx, v39.1);
                                if let Some(v104) = v103 {
                                    let v105 = &C::inst_data(ctx, v104);
                                    if let &InstructionData::Load {
                                        opcode: ref v106,
                                        arg: v107,
                                        flags: v108,
                                        offset: v109,
                                    } = v105
                                    {
                                        if let &Opcode::Load = v106 {
                                            let v110 = C::bigendian(ctx, v108);
                                            if let Some(v111) = v110 {
                                                let v62 = C::put_in_reg(ctx, v39.0);
                                                let v112 = &constructor_sink_load(ctx, v104);
                                                let v704 = constructor_or_mem(ctx, v61, v62, v112);
                                                let v705 = constructor_output_reg(ctx, v704);
                                                // Rule at src/isa/s390x/lower.isle line 1087.
                                                return Some(v705);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if let Some(v36) = v35 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v708 = constructor_vec_or(ctx, v36, v62, v63);
                            let v709 = constructor_output_reg(ctx, v708);
                            // Rule at src/isa/s390x/lower.isle line 1093.
                            return Some(v709);
                        }
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v686 = constructor_or_reg(ctx, v61, v62, v63);
                            let v687 = constructor_output_reg(ctx, v686);
                            // Rule at src/isa/s390x/lower.isle line 1073.
                            return Some(v687);
                        }
                    }
                }
                &Opcode::Bxor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v35 = C::vr128_ty(ctx, v3);
                        if let Some(v36) = v35 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v75 = C::def_inst(ctx, v39.0);
                            if let Some(v76) = v75 {
                                let v77 = &C::inst_data(ctx, v76);
                                if let &InstructionData::Unary {
                                    opcode: ref v78,
                                    arg: v79,
                                } = v77
                                {
                                    if let &Opcode::Bnot = v78 {
                                        let v42 = C::put_in_reg(ctx, v39.1);
                                        let v81 = C::put_in_reg(ctx, v79);
                                        let v736 = constructor_vec_not_xor(ctx, v36, v42, v81);
                                        let v737 = constructor_output_reg(ctx, v736);
                                        // Rule at src/isa/s390x/lower.isle line 1148.
                                        return Some(v737);
                                    }
                                }
                            }
                            let v66 = C::def_inst(ctx, v39.1);
                            if let Some(v67) = v66 {
                                let v68 = &C::inst_data(ctx, v67);
                                if let &InstructionData::Unary {
                                    opcode: ref v69,
                                    arg: v70,
                                } = v68
                                {
                                    if let &Opcode::Bnot = v69 {
                                        let v62 = C::put_in_reg(ctx, v39.0);
                                        let v72 = C::put_in_reg(ctx, v70);
                                        let v734 = constructor_vec_not_xor(ctx, v36, v62, v72);
                                        let v735 = constructor_output_reg(ctx, v734);
                                        // Rule at src/isa/s390x/lower.isle line 1146.
                                        return Some(v735);
                                    }
                                }
                            }
                        }
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v633 = C::mie2_enabled(ctx, v3);
                            if let Some(v634) = v633 {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v75 = C::def_inst(ctx, v39.0);
                                if let Some(v76) = v75 {
                                    let v77 = &C::inst_data(ctx, v76);
                                    if let &InstructionData::Unary {
                                        opcode: ref v78,
                                        arg: v79,
                                    } = v77
                                    {
                                        if let &Opcode::Bnot = v78 {
                                            let v42 = C::put_in_reg(ctx, v39.1);
                                            let v81 = C::put_in_reg(ctx, v79);
                                            let v732 = constructor_not_xor_reg(ctx, v61, v42, v81);
                                            let v733 = constructor_output_reg(ctx, v732);
                                            // Rule at src/isa/s390x/lower.isle line 1142.
                                            return Some(v733);
                                        }
                                    }
                                }
                                let v66 = C::def_inst(ctx, v39.1);
                                if let Some(v67) = v66 {
                                    let v68 = &C::inst_data(ctx, v67);
                                    if let &InstructionData::Unary {
                                        opcode: ref v69,
                                        arg: v70,
                                    } = v68
                                    {
                                        if let &Opcode::Bnot = v69 {
                                            let v62 = C::put_in_reg(ctx, v39.0);
                                            let v72 = C::put_in_reg(ctx, v70);
                                            let v730 = constructor_not_xor_reg(ctx, v61, v62, v72);
                                            let v731 = constructor_output_reg(ctx, v730);
                                            // Rule at src/isa/s390x/lower.isle line 1140.
                                            return Some(v731);
                                        }
                                    }
                                }
                            }
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v700 = C::uimm32shifted_from_value(ctx, v39.0);
                            if let Some(v701) = v700 {
                                let v42 = C::put_in_reg(ctx, v39.1);
                                let v722 = constructor_xor_uimm32shifted(ctx, v61, v42, v701);
                                let v723 = constructor_output_reg(ctx, v722);
                                // Rule at src/isa/s390x/lower.isle line 1122.
                                return Some(v723);
                            }
                            let v696 = C::uimm32shifted_from_value(ctx, v39.1);
                            if let Some(v697) = v696 {
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v720 = constructor_xor_uimm32shifted(ctx, v61, v62, v697);
                                let v721 = constructor_output_reg(ctx, v720);
                                // Rule at src/isa/s390x/lower.isle line 1120.
                                return Some(v721);
                            }
                            let v115 = C::value_type(ctx, v39.0);
                            let v116 = C::ty_32_or_64(ctx, v115);
                            if let Some(v117) = v116 {
                                let v118 = C::sinkable_inst(ctx, v39.0);
                                if let Some(v119) = v118 {
                                    let v120 = &C::inst_data(ctx, v119);
                                    if let &InstructionData::Load {
                                        opcode: ref v121,
                                        arg: v122,
                                        flags: v123,
                                        offset: v124,
                                    } = v120
                                    {
                                        if let &Opcode::Load = v121 {
                                            let v125 = C::bigendian(ctx, v123);
                                            if let Some(v126) = v125 {
                                                let v42 = C::put_in_reg(ctx, v39.1);
                                                let v127 = &constructor_sink_load(ctx, v119);
                                                let v726 = constructor_xor_mem(ctx, v61, v42, v127);
                                                let v727 = constructor_output_reg(ctx, v726);
                                                // Rule at src/isa/s390x/lower.isle line 1128.
                                                return Some(v727);
                                            }
                                        }
                                    }
                                }
                            }
                            let v100 = C::value_type(ctx, v39.1);
                            let v101 = C::ty_32_or_64(ctx, v100);
                            if let Some(v102) = v101 {
                                let v103 = C::sinkable_inst(ctx, v39.1);
                                if let Some(v104) = v103 {
                                    let v105 = &C::inst_data(ctx, v104);
                                    if let &InstructionData::Load {
                                        opcode: ref v106,
                                        arg: v107,
                                        flags: v108,
                                        offset: v109,
                                    } = v105
                                    {
                                        if let &Opcode::Load = v106 {
                                            let v110 = C::bigendian(ctx, v108);
                                            if let Some(v111) = v110 {
                                                let v62 = C::put_in_reg(ctx, v39.0);
                                                let v112 = &constructor_sink_load(ctx, v104);
                                                let v724 = constructor_xor_mem(ctx, v61, v62, v112);
                                                let v725 = constructor_output_reg(ctx, v724);
                                                // Rule at src/isa/s390x/lower.isle line 1126.
                                                return Some(v725);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if let Some(v36) = v35 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v728 = constructor_vec_xor(ctx, v36, v62, v63);
                            let v729 = constructor_output_reg(ctx, v728);
                            // Rule at src/isa/s390x/lower.isle line 1132.
                            return Some(v729);
                        }
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v718 = constructor_xor_reg(ctx, v61, v62, v63);
                            let v719 = constructor_output_reg(ctx, v718);
                            // Rule at src/isa/s390x/lower.isle line 1116.
                            return Some(v719);
                        }
                    }
                }
                &Opcode::Rotl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v543 = constructor_amt_vr(ctx, v39.1);
                            let v544 = constructor_vec_neg(ctx, I8X16, v543);
                            let v545 = constructor_vec_lshl_by_byte(ctx, v62, v543);
                            let v546 = constructor_vec_lshl_by_bit(ctx, v545, v543);
                            let v547 = constructor_vec_lshr_by_byte(ctx, v62, v544);
                            let v548 = constructor_vec_lshr_by_bit(ctx, v547, v544);
                            let v549 = constructor_vec_or(ctx, I128, v546, v548);
                            let v550 = constructor_output_reg(ctx, v549);
                            // Rule at src/isa/s390x/lower.isle line 843.
                            return Some(v550);
                        }
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v475 = C::i64_from_value(ctx, v39.1);
                            if let Some(v476) = v475 {
                                let v483 = C::mask_amt_imm(ctx, v149, v476);
                                let v43 = C::put_in_reg(ctx, v39.0);
                                let v541 = constructor_vec_rot_imm(ctx, v149, v43, v483);
                                let v542 = constructor_output_reg(ctx, v541);
                                // Rule at src/isa/s390x/lower.isle line 837.
                                return Some(v542);
                            }
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v480 = constructor_amt_reg(ctx, v39.1);
                            let v539 = constructor_vec_rot_reg(ctx, v149, v62, v480);
                            let v540 = constructor_output_reg(ctx, v539);
                            // Rule at src/isa/s390x/lower.isle line 833.
                            return Some(v540);
                        }
                        let v367 = C::ty_8_or_16(ctx, v3);
                        if let Some(v368) = v367 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v475 = C::i64_from_value(ctx, v39.1);
                            if let Some(v476) = v475 {
                                let v531 = C::i64_from_negated_value(ctx, v39.1);
                                if let Some(v532) = v531 {
                                    let v286 = constructor_put_in_reg_zext32(ctx, v39.0);
                                    let v522 = constructor_ty_ext32(ctx, v368);
                                    let v533 = C::mask_amt_imm(ctx, v368, v476);
                                    let v534 = C::mask_amt_imm(ctx, v368, v532);
                                    let v535 = constructor_lshl_imm(ctx, v522, v286, v533);
                                    let v536 = constructor_lshr_imm(ctx, v522, v286, v534);
                                    let v537 = constructor_or_reg(ctx, v368, v535, v536);
                                    let v538 = constructor_output_reg(ctx, v537);
                                    // Rule at src/isa/s390x/lower.isle line 823.
                                    return Some(v538);
                                }
                            }
                            let v286 = constructor_put_in_reg_zext32(ctx, v39.0);
                            let v522 = constructor_ty_ext32(ctx, v368);
                            let v523 = constructor_amt_reg(ctx, v39.1);
                            let v524 = constructor_neg_reg(ctx, I32, v523);
                            let v525 = constructor_mask_amt_reg(ctx, v368, v523);
                            let v526 = constructor_mask_amt_reg(ctx, v368, v524);
                            let v527 = constructor_lshl_reg(ctx, v522, v286, v525);
                            let v528 = constructor_lshr_reg(ctx, v522, v286, v526);
                            let v529 = constructor_or_reg(ctx, v368, v527, v528);
                            let v530 = constructor_output_reg(ctx, v529);
                            // Rule at src/isa/s390x/lower.isle line 811.
                            return Some(v530);
                        }
                        let v515 = C::ty_32_or_64(ctx, v3);
                        if let Some(v516) = v515 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v475 = C::i64_from_value(ctx, v39.1);
                            if let Some(v476) = v475 {
                                let v519 = C::mask_amt_imm(ctx, v516, v476);
                                let v43 = C::put_in_reg(ctx, v39.0);
                                let v520 = constructor_rot_imm(ctx, v516, v43, v519);
                                let v521 = constructor_output_reg(ctx, v520);
                                // Rule at src/isa/s390x/lower.isle line 805.
                                return Some(v521);
                            }
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v480 = constructor_amt_reg(ctx, v39.1);
                            let v517 = constructor_rot_reg(ctx, v516, v62, v480);
                            let v518 = constructor_output_reg(ctx, v517);
                            // Rule at src/isa/s390x/lower.isle line 801.
                            return Some(v518);
                        }
                    }
                }
                &Opcode::Rotr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v543 = constructor_amt_vr(ctx, v39.1);
                            let v544 = constructor_vec_neg(ctx, I8X16, v543);
                            let v570 = constructor_vec_lshl_by_byte(ctx, v62, v544);
                            let v571 = constructor_vec_lshl_by_bit(ctx, v570, v544);
                            let v572 = constructor_vec_lshr_by_byte(ctx, v62, v543);
                            let v573 = constructor_vec_lshr_by_bit(ctx, v572, v543);
                            let v574 = constructor_vec_or(ctx, I128, v571, v573);
                            let v575 = constructor_output_reg(ctx, v574);
                            // Rule at src/isa/s390x/lower.isle line 903.
                            return Some(v575);
                        }
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v531 = C::i64_from_negated_value(ctx, v39.1);
                            if let Some(v532) = v531 {
                                let v567 = C::mask_amt_imm(ctx, v149, v532);
                                let v43 = C::put_in_reg(ctx, v39.0);
                                let v568 = constructor_vec_rot_imm(ctx, v149, v43, v567);
                                let v569 = constructor_output_reg(ctx, v568);
                                // Rule at src/isa/s390x/lower.isle line 897.
                                return Some(v569);
                            }
                            let v471 = constructor_amt_reg(ctx, v39.1);
                            let v551 = constructor_neg_reg(ctx, I32, v471);
                            let v157 = C::put_in_reg(ctx, v39.0);
                            let v565 = constructor_vec_rot_reg(ctx, v149, v157, v551);
                            let v566 = constructor_output_reg(ctx, v565);
                            // Rule at src/isa/s390x/lower.isle line 891.
                            return Some(v566);
                        }
                        let v367 = C::ty_8_or_16(ctx, v3);
                        if let Some(v368) = v367 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v475 = C::i64_from_value(ctx, v39.1);
                            if let Some(v476) = v475 {
                                let v531 = C::i64_from_negated_value(ctx, v39.1);
                                if let Some(v532) = v531 {
                                    let v286 = constructor_put_in_reg_zext32(ctx, v39.0);
                                    let v522 = constructor_ty_ext32(ctx, v368);
                                    let v533 = C::mask_amt_imm(ctx, v368, v476);
                                    let v534 = C::mask_amt_imm(ctx, v368, v532);
                                    let v561 = constructor_lshl_imm(ctx, v522, v286, v534);
                                    let v562 = constructor_lshr_imm(ctx, v522, v286, v533);
                                    let v563 = constructor_or_reg(ctx, v368, v561, v562);
                                    let v564 = constructor_output_reg(ctx, v563);
                                    // Rule at src/isa/s390x/lower.isle line 880.
                                    return Some(v564);
                                }
                            }
                            let v286 = constructor_put_in_reg_zext32(ctx, v39.0);
                            let v522 = constructor_ty_ext32(ctx, v368);
                            let v523 = constructor_amt_reg(ctx, v39.1);
                            let v524 = constructor_neg_reg(ctx, I32, v523);
                            let v525 = constructor_mask_amt_reg(ctx, v368, v523);
                            let v526 = constructor_mask_amt_reg(ctx, v368, v524);
                            let v557 = constructor_lshl_reg(ctx, v522, v286, v526);
                            let v558 = constructor_lshr_reg(ctx, v522, v286, v525);
                            let v559 = constructor_or_reg(ctx, v368, v557, v558);
                            let v560 = constructor_output_reg(ctx, v559);
                            // Rule at src/isa/s390x/lower.isle line 868.
                            return Some(v560);
                        }
                        let v515 = C::ty_32_or_64(ctx, v3);
                        if let Some(v516) = v515 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v531 = C::i64_from_negated_value(ctx, v39.1);
                            if let Some(v532) = v531 {
                                let v554 = C::mask_amt_imm(ctx, v516, v532);
                                let v43 = C::put_in_reg(ctx, v39.0);
                                let v555 = constructor_rot_imm(ctx, v516, v43, v554);
                                let v556 = constructor_output_reg(ctx, v555);
                                // Rule at src/isa/s390x/lower.isle line 862.
                                return Some(v556);
                            }
                            let v471 = constructor_amt_reg(ctx, v39.1);
                            let v551 = constructor_neg_reg(ctx, I32, v471);
                            let v157 = C::put_in_reg(ctx, v39.0);
                            let v552 = constructor_rot_reg(ctx, v516, v157, v551);
                            let v553 = constructor_output_reg(ctx, v552);
                            // Rule at src/isa/s390x/lower.isle line 856.
                            return Some(v553);
                        }
                    }
                }
                &Opcode::Ishl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v486 = constructor_amt_vr(ctx, v39.1);
                            let v43 = C::put_in_reg(ctx, v39.0);
                            let v487 = constructor_vec_lshl_by_byte(ctx, v43, v486);
                            let v488 = constructor_vec_lshl_by_bit(ctx, v487, v486);
                            let v489 = constructor_output_reg(ctx, v488);
                            // Rule at src/isa/s390x/lower.isle line 731.
                            return Some(v489);
                        }
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v475 = C::i64_from_value(ctx, v39.1);
                            if let Some(v476) = v475 {
                                let v483 = C::mask_amt_imm(ctx, v149, v476);
                                let v43 = C::put_in_reg(ctx, v39.0);
                                let v484 = constructor_vec_lshl_imm(ctx, v149, v43, v483);
                                let v485 = constructor_output_reg(ctx, v484);
                                // Rule at src/isa/s390x/lower.isle line 726.
                                return Some(v485);
                            }
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v480 = constructor_amt_reg(ctx, v39.1);
                            let v481 = constructor_vec_lshl_reg(ctx, v149, v62, v480);
                            let v482 = constructor_output_reg(ctx, v481);
                            // Rule at src/isa/s390x/lower.isle line 722.
                            return Some(v482);
                        }
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v475 = C::i64_from_value(ctx, v39.1);
                            if let Some(v476) = v475 {
                                let v477 = C::mask_amt_imm(ctx, v61, v476);
                                let v43 = C::put_in_reg(ctx, v39.0);
                                let v478 = constructor_lshl_imm(ctx, v61, v43, v477);
                                let v479 = constructor_output_reg(ctx, v478);
                                // Rule at src/isa/s390x/lower.isle line 717.
                                return Some(v479);
                            }
                            let v471 = constructor_amt_reg(ctx, v39.1);
                            let v472 = constructor_mask_amt_reg(ctx, v61, v471);
                            let v157 = C::put_in_reg(ctx, v39.0);
                            let v473 = constructor_lshl_reg(ctx, v61, v157, v472);
                            let v474 = constructor_output_reg(ctx, v473);
                            // Rule at src/isa/s390x/lower.isle line 712.
                            return Some(v474);
                        }
                    }
                }
                &Opcode::Ushr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v486 = constructor_amt_vr(ctx, v39.1);
                            let v43 = C::put_in_reg(ctx, v39.0);
                            let v501 = constructor_vec_lshr_by_byte(ctx, v43, v486);
                            let v502 = constructor_vec_lshr_by_bit(ctx, v501, v486);
                            let v503 = constructor_output_reg(ctx, v502);
                            // Rule at src/isa/s390x/lower.isle line 762.
                            return Some(v503);
                        }
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v475 = C::i64_from_value(ctx, v39.1);
                            if let Some(v476) = v475 {
                                let v483 = C::mask_amt_imm(ctx, v149, v476);
                                let v43 = C::put_in_reg(ctx, v39.0);
                                let v499 = constructor_vec_lshr_imm(ctx, v149, v43, v483);
                                let v500 = constructor_output_reg(ctx, v499);
                                // Rule at src/isa/s390x/lower.isle line 757.
                                return Some(v500);
                            }
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v480 = constructor_amt_reg(ctx, v39.1);
                            let v497 = constructor_vec_lshr_reg(ctx, v149, v62, v480);
                            let v498 = constructor_output_reg(ctx, v497);
                            // Rule at src/isa/s390x/lower.isle line 753.
                            return Some(v498);
                        }
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v475 = C::i64_from_value(ctx, v39.1);
                            if let Some(v476) = v475 {
                                let v286 = constructor_put_in_reg_zext32(ctx, v39.0);
                                let v494 = C::mask_amt_imm(ctx, v61, v476);
                                let v288 = constructor_ty_ext32(ctx, v61);
                                let v495 = constructor_lshr_imm(ctx, v288, v286, v494);
                                let v496 = constructor_output_reg(ctx, v495);
                                // Rule at src/isa/s390x/lower.isle line 747.
                                return Some(v496);
                            }
                            let v286 = constructor_put_in_reg_zext32(ctx, v39.0);
                            let v480 = constructor_amt_reg(ctx, v39.1);
                            let v490 = constructor_mask_amt_reg(ctx, v61, v480);
                            let v491 = constructor_ty_ext32(ctx, v61);
                            let v492 = constructor_lshr_reg(ctx, v491, v286, v490);
                            let v493 = constructor_output_reg(ctx, v492);
                            // Rule at src/isa/s390x/lower.isle line 740.
                            return Some(v493);
                        }
                    }
                }
                &Opcode::Sshr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v486 = constructor_amt_vr(ctx, v39.1);
                            let v43 = C::put_in_reg(ctx, v39.0);
                            let v512 = constructor_vec_ashr_by_byte(ctx, v43, v486);
                            let v513 = constructor_vec_ashr_by_bit(ctx, v512, v486);
                            let v514 = constructor_output_reg(ctx, v513);
                            // Rule at src/isa/s390x/lower.isle line 793.
                            return Some(v514);
                        }
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v475 = C::i64_from_value(ctx, v39.1);
                            if let Some(v476) = v475 {
                                let v483 = C::mask_amt_imm(ctx, v149, v476);
                                let v43 = C::put_in_reg(ctx, v39.0);
                                let v510 = constructor_vec_ashr_imm(ctx, v149, v43, v483);
                                let v511 = constructor_output_reg(ctx, v510);
                                // Rule at src/isa/s390x/lower.isle line 788.
                                return Some(v511);
                            }
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v480 = constructor_amt_reg(ctx, v39.1);
                            let v508 = constructor_vec_ashr_reg(ctx, v149, v62, v480);
                            let v509 = constructor_output_reg(ctx, v508);
                            // Rule at src/isa/s390x/lower.isle line 784.
                            return Some(v509);
                        }
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v475 = C::i64_from_value(ctx, v39.1);
                            if let Some(v476) = v475 {
                                let v310 = constructor_put_in_reg_sext32(ctx, v39.0);
                                let v494 = C::mask_amt_imm(ctx, v61, v476);
                                let v288 = constructor_ty_ext32(ctx, v61);
                                let v506 = constructor_ashr_imm(ctx, v288, v310, v494);
                                let v507 = constructor_output_reg(ctx, v506);
                                // Rule at src/isa/s390x/lower.isle line 778.
                                return Some(v507);
                            }
                            let v310 = constructor_put_in_reg_sext32(ctx, v39.0);
                            let v480 = constructor_amt_reg(ctx, v39.1);
                            let v490 = constructor_mask_amt_reg(ctx, v61, v480);
                            let v491 = constructor_ty_ext32(ctx, v61);
                            let v504 = constructor_ashr_reg(ctx, v491, v310, v490);
                            let v505 = constructor_output_reg(ctx, v504);
                            // Rule at src/isa/s390x/lower.isle line 771.
                            return Some(v505);
                        }
                    }
                }
                &Opcode::Fadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v39 = C::unpack_value_array_2(ctx, v38);
                        let v62 = C::put_in_reg(ctx, v39.0);
                        let v63 = C::put_in_reg(ctx, v39.1);
                        let v3 = C::value_type(ctx, v2);
                        let v868 = constructor_fadd_reg(ctx, v3, v62, v63);
                        let v869 = constructor_output_reg(ctx, v868);
                        // Rule at src/isa/s390x/lower.isle line 1395.
                        return Some(v869);
                    }
                }
                &Opcode::Fsub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v39 = C::unpack_value_array_2(ctx, v38);
                        let v62 = C::put_in_reg(ctx, v39.0);
                        let v63 = C::put_in_reg(ctx, v39.1);
                        let v3 = C::value_type(ctx, v2);
                        let v870 = constructor_fsub_reg(ctx, v3, v62, v63);
                        let v871 = constructor_output_reg(ctx, v870);
                        // Rule at src/isa/s390x/lower.isle line 1402.
                        return Some(v871);
                    }
                }
                &Opcode::Fmul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v39 = C::unpack_value_array_2(ctx, v38);
                        let v62 = C::put_in_reg(ctx, v39.0);
                        let v63 = C::put_in_reg(ctx, v39.1);
                        let v3 = C::value_type(ctx, v2);
                        let v872 = constructor_fmul_reg(ctx, v3, v62, v63);
                        let v873 = constructor_output_reg(ctx, v872);
                        // Rule at src/isa/s390x/lower.isle line 1409.
                        return Some(v873);
                    }
                }
                &Opcode::Fdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v39 = C::unpack_value_array_2(ctx, v38);
                        let v62 = C::put_in_reg(ctx, v39.0);
                        let v63 = C::put_in_reg(ctx, v39.1);
                        let v3 = C::value_type(ctx, v2);
                        let v874 = constructor_fdiv_reg(ctx, v3, v62, v63);
                        let v875 = constructor_output_reg(ctx, v874);
                        // Rule at src/isa/s390x/lower.isle line 1416.
                        return Some(v875);
                    }
                }
                &Opcode::Fcopysign => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v63 = C::put_in_reg(ctx, v39.1);
                                let v885 = constructor_imm(ctx, F32, 0x7FFFFFFF);
                                let v886 = constructor_vec_select(ctx, F32, v62, v63, v885);
                                let v887 = constructor_output_reg(ctx, v886);
                                // Rule at src/isa/s390x/lower.isle line 1451.
                                return Some(v887);
                            }
                            F64 => {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v63 = C::put_in_reg(ctx, v39.1);
                                let v889 = constructor_imm(ctx, F64, 0x7FFFFFFFFFFFFFFF);
                                let v890 = constructor_vec_select(ctx, F64, v62, v63, v889);
                                let v891 = constructor_output_reg(ctx, v890);
                                // Rule at src/isa/s390x/lower.isle line 1453.
                                return Some(v891);
                            }
                            F32X4 => {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v63 = C::put_in_reg(ctx, v39.1);
                                let v894 = constructor_vec_imm_bit_mask(ctx, F32X4, 0x1, 0x1F);
                                let v895 = constructor_vec_select(ctx, F32X4, v62, v63, v894);
                                let v896 = constructor_output_reg(ctx, v895);
                                // Rule at src/isa/s390x/lower.isle line 1455.
                                return Some(v896);
                            }
                            F64X2 => {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v63 = C::put_in_reg(ctx, v39.1);
                                let v898 = constructor_vec_imm_bit_mask(ctx, F64X2, 0x1, 0x3F);
                                let v899 = constructor_vec_select(ctx, F64X2, v62, v63, v898);
                                let v900 = constructor_output_reg(ctx, v899);
                                // Rule at src/isa/s390x/lower.isle line 1457.
                                return Some(v900);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fmin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v39 = C::unpack_value_array_2(ctx, v38);
                        let v62 = C::put_in_reg(ctx, v39.0);
                        let v63 = C::put_in_reg(ctx, v39.1);
                        let v3 = C::value_type(ctx, v2);
                        let v876 = constructor_fmin_reg(ctx, v3, v62, v63);
                        let v877 = constructor_output_reg(ctx, v876);
                        // Rule at src/isa/s390x/lower.isle line 1423.
                        return Some(v877);
                    }
                }
                &Opcode::FminPseudo => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v39 = C::unpack_value_array_2(ctx, v38);
                        let v62 = C::put_in_reg(ctx, v39.0);
                        let v63 = C::put_in_reg(ctx, v39.1);
                        let v3 = C::value_type(ctx, v2);
                        let v880 = constructor_fmin_pseudo_reg(ctx, v3, v62, v63);
                        let v881 = constructor_output_reg(ctx, v880);
                        // Rule at src/isa/s390x/lower.isle line 1437.
                        return Some(v881);
                    }
                }
                &Opcode::Fmax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v39 = C::unpack_value_array_2(ctx, v38);
                        let v62 = C::put_in_reg(ctx, v39.0);
                        let v63 = C::put_in_reg(ctx, v39.1);
                        let v3 = C::value_type(ctx, v2);
                        let v878 = constructor_fmax_reg(ctx, v3, v62, v63);
                        let v879 = constructor_output_reg(ctx, v878);
                        // Rule at src/isa/s390x/lower.isle line 1430.
                        return Some(v879);
                    }
                }
                &Opcode::FmaxPseudo => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v39 = C::unpack_value_array_2(ctx, v38);
                        let v62 = C::put_in_reg(ctx, v39.0);
                        let v63 = C::put_in_reg(ctx, v39.1);
                        let v3 = C::value_type(ctx, v2);
                        let v882 = constructor_fmax_pseudo_reg(ctx, v3, v62, v63);
                        let v883 = constructor_output_reg(ctx, v882);
                        // Rule at src/isa/s390x/lower.isle line 1444.
                        return Some(v883);
                    }
                }
                &Opcode::Snarrow => {
                    let v39 = C::unpack_value_array_2(ctx, v38);
                    let v115 = C::value_type(ctx, v39.0);
                    let v612 = C::ty_vec128(ctx, v115);
                    if let Some(v613) = v612 {
                        let v62 = C::put_in_reg(ctx, v39.0);
                        let v63 = C::put_in_reg(ctx, v39.1);
                        let v614 = constructor_vec_pack_ssat_lane_order(ctx, v613, v62, v63);
                        let v615 = constructor_output_reg(ctx, v614);
                        // Rule at src/isa/s390x/lower.isle line 962.
                        return Some(v615);
                    }
                }
                &Opcode::Unarrow => {
                    let v39 = C::unpack_value_array_2(ctx, v38);
                    let v115 = C::value_type(ctx, v39.0);
                    let v612 = C::ty_vec128(ctx, v115);
                    if let Some(v613) = v612 {
                        let v618 = constructor_vec_imm(ctx, v613, 0x0);
                        let v43 = C::put_in_reg(ctx, v39.0);
                        let v619 = constructor_vec_smax(ctx, v613, v43, v618);
                        let v394 = C::put_in_reg(ctx, v39.1);
                        let v620 = constructor_vec_smax(ctx, v613, v394, v618);
                        let v621 = constructor_vec_pack_usat_lane_order(ctx, v613, v619, v620);
                        let v622 = constructor_output_reg(ctx, v621);
                        // Rule at src/isa/s390x/lower.isle line 974.
                        return Some(v622);
                    }
                }
                &Opcode::Uunarrow => {
                    let v39 = C::unpack_value_array_2(ctx, v38);
                    let v115 = C::value_type(ctx, v39.0);
                    let v612 = C::ty_vec128(ctx, v115);
                    if let Some(v613) = v612 {
                        let v62 = C::put_in_reg(ctx, v39.0);
                        let v63 = C::put_in_reg(ctx, v39.1);
                        let v616 = constructor_vec_pack_usat_lane_order(ctx, v613, v62, v63);
                        let v617 = constructor_output_reg(ctx, v616);
                        // Rule at src/isa/s390x/lower.isle line 968.
                        return Some(v617);
                    }
                }
                &Opcode::IaddPairwise => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v39 = C::unpack_value_array_2(ctx, v38);
                        let v66 = C::def_inst(ctx, v39.1);
                        if let Some(v67) = v66 {
                            let v68 = &C::inst_data(ctx, v67);
                            if let &InstructionData::Binary {
                                opcode: ref v202,
                                args: ref v203,
                            } = v68
                            {
                                if let &Opcode::Imul = v202 {
                                    let v75 = C::def_inst(ctx, v39.0);
                                    if let Some(v76) = v75 {
                                        let v77 = &C::inst_data(ctx, v76);
                                        if let &InstructionData::Binary {
                                            opcode: ref v186,
                                            args: ref v187,
                                        } = v77
                                        {
                                            if let &Opcode::Imul = v186 {
                                                let v188 = C::unpack_value_array_2(ctx, v187);
                                                let v191 = C::def_inst(ctx, v188.0);
                                                if let Some(v192) = v191 {
                                                    let v193 = &C::inst_data(ctx, v192);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v194,
                                                        arg: v195,
                                                    } = v193
                                                    {
                                                        if let &Opcode::SwidenLow = v194 {
                                                            let v197 = C::def_inst(ctx, v188.1);
                                                            if let Some(v198) = v197 {
                                                                let v199 = &C::inst_data(ctx, v198);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v200,
                                                                    arg: v201,
                                                                } = v199
                                                                {
                                                                    if let &Opcode::SwidenLow = v200
                                                                    {
                                                                        let v204 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v203,
                                                                            );
                                                                        let v207 = C::def_inst(
                                                                            ctx, v204.0,
                                                                        );
                                                                        if let Some(v208) = v207 {
                                                                            let v209 =
                                                                                &C::inst_data(
                                                                                    ctx, v208,
                                                                                );
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v210,
                                                                                arg: v211,
                                                                            } = v209 {
                                                                                if let &Opcode::SwidenHigh = v210 {
                                                                                    if v195 == v211 {
                                                                                        let v212 = C::def_inst(ctx, v204.1);
                                                                                        if let Some(v213) = v212 {
                                                                                            let v214 = &C::inst_data(ctx, v213);
                                                                                            if let &InstructionData::Unary {
                                                                                                opcode: ref v215,
                                                                                                arg: v216,
                                                                                            } = v214 {
                                                                                                if let &Opcode::SwidenHigh = v215 {
                                                                                                    if v201 == v216 {
                                                                                                        let v217 = C::put_in_reg(ctx, v195);
                                                                                                        let v218 = C::put_in_reg(ctx, v201);
                                                                                                        let v196 = C::value_type(ctx, v195);
                                                                                                        let v219 = constructor_vec_smul_even(ctx, v196, v217, v218);
                                                                                                        let v220 = C::put_in_reg(ctx, v195);
                                                                                                        let v221 = C::put_in_reg(ctx, v201);
                                                                                                        let v222 = constructor_vec_smul_odd(ctx, v196, v220, v221);
                                                                                                        let v3 = C::value_type(ctx, v2);
                                                                                                        let v223 = constructor_vec_add(ctx, v3, v219, v222);
                                                                                                        let v224 = constructor_output_reg(ctx, v223);
                                                                                                        // Rule at src/isa/s390x/lower.isle line 142.
                                                                                                        return Some(v224);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v170 = C::multi_lane(ctx, v3);
                        if let Some(v171) = v170 {
                            let v175 = C::u32_as_u64(ctx, v171.0);
                            let v176 = constructor_vec_imm_splat(ctx, I8X16, v175);
                            let v177 = constructor_vec_widen_type(ctx, v3);
                            let v157 = C::put_in_reg(ctx, v39.0);
                            let v151 = C::put_in_reg(ctx, v39.0);
                            let v178 = constructor_vec_lshr_by_byte(ctx, v151, v176);
                            let v179 = constructor_vec_add(ctx, v3, v157, v178);
                            let v180 = C::put_in_reg(ctx, v39.1);
                            let v181 = C::put_in_reg(ctx, v39.1);
                            let v182 = constructor_vec_lshr_by_byte(ctx, v181, v176);
                            let v183 = constructor_vec_add(ctx, v3, v180, v182);
                            let v184 = constructor_vec_pack_lane_order(ctx, v177, v179, v183);
                            let v185 = constructor_output_reg(ctx, v184);
                            // Rule at src/isa/s390x/lower.isle line 135.
                            return Some(v185);
                        }
                    }
                }
                &Opcode::Iconcat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v35 = C::vr128_ty(ctx, v3);
                        if let Some(v36) = v35 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v42 = C::put_in_reg(ctx, v39.1);
                            let v43 = C::put_in_reg(ctx, v39.0);
                            let v44 = constructor_mov_to_vec128(ctx, v36, v42, v43);
                            let v45 = constructor_output_reg(ctx, v44);
                            // Rule at src/isa/s390x/lower.isle line 51.
                            return Some(v45);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::BinaryImm8 {
            opcode: ref v1155,
            arg: v1156,
            imm: v1157,
        } => {
            if let &Opcode::Extractlane = v1155 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v1160 = C::ty_int_ref_scalar_64(ctx, v3);
                    if let Some(v1161) = v1160 {
                        let v1162 = C::put_in_reg(ctx, v1156);
                        let v1158 = C::value_type(ctx, v1156);
                        let v1159 = C::u8_from_uimm8(ctx, v1157);
                        let v1163 = C::be_lane_idx(ctx, v1158, v1159);
                        let v593 = C::zero_reg(ctx);
                        let v1164 = constructor_vec_extract_lane(ctx, v1158, v1162, v1163, v593);
                        let v1165 = constructor_output_reg(ctx, v1164);
                        // Rule at src/isa/s390x/lower.isle line 1933.
                        return Some(v1165);
                    }
                    let v1088 = C::ty_scalar_float(ctx, v3);
                    if let Some(v1089) = v1088 {
                        let v1162 = C::put_in_reg(ctx, v1156);
                        let v1158 = C::value_type(ctx, v1156);
                        let v1159 = C::u8_from_uimm8(ctx, v1157);
                        let v1163 = C::be_lane_idx(ctx, v1158, v1159);
                        let v1166 = constructor_vec_replicate_lane(ctx, v1158, v1162, v1163);
                        let v1167 = constructor_output_reg(ctx, v1166);
                        // Rule at src/isa/s390x/lower.isle line 1939.
                        return Some(v1167);
                    }
                }
            }
        }
        &InstructionData::Call {
            opcode: ref v2013,
            args: v2014,
            func_ref: v2015,
        } => {
            if let &Opcode::Call = v2013 {
                let v2017 = C::func_ref_data(ctx, v2015);
                let v2021 = C::reloc_distance_near(ctx, v2017.2);
                if let Some(v2022) = v2021 {
                    let v2023 = C::abi_sig(ctx, v2017.0);
                    let v2024 = C::abi_accumulate_outgoing_args_size(ctx, v2023);
                    let v2025 = C::abi_num_args(ctx, v2023);
                    let v2026 = C::range(ctx, 0x0, v2025);
                    let v2016 = C::value_list_slice(ctx, v2014);
                    let v2027 = &constructor_lower_call_args(ctx, v2023, v2026, v2016);
                    let v2028 = &C::defs_init(ctx, v2023);
                    let v2030 =
                        &constructor_abi_call(ctx, v2023, v2017.1, v2027, v2028, &Opcode::Call);
                    let v2031 = constructor_side_effect(ctx, v2030);
                    let v2032 = C::abi_first_ret(ctx, v2017.0, v2023);
                    let v2033 = C::abi_num_rets(ctx, v2023);
                    let v2035 = &C::output_builder_new(ctx);
                    let v2034 = C::range(ctx, v2032, v2033);
                    let v2036 = constructor_lower_call_rets(ctx, v2023, v2028, v2034, v2035);
                    // Rule at src/isa/s390x/lower.isle line 3948.
                    return Some(v2036);
                }
                let v2023 = C::abi_sig(ctx, v2017.0);
                let v2024 = C::abi_accumulate_outgoing_args_size(ctx, v2023);
                let v2025 = C::abi_num_args(ctx, v2023);
                let v2026 = C::range(ctx, 0x0, v2025);
                let v2016 = C::value_list_slice(ctx, v2014);
                let v2027 = &constructor_lower_call_args(ctx, v2023, v2026, v2016);
                let v2028 = &C::defs_init(ctx, v2023);
                let v2037 = SymbolReloc::Absolute {
                    name: v2017.1,
                    offset: 0x0,
                };
                let v2038 = constructor_load_symbol_reloc(ctx, &v2037);
                let v2039 =
                    &constructor_abi_call_ind(ctx, v2023, v2038, v2027, v2028, &Opcode::Call);
                let v2040 = constructor_side_effect(ctx, v2039);
                let v2041 = C::abi_first_ret(ctx, v2017.0, v2023);
                let v2042 = C::abi_num_rets(ctx, v2023);
                let v2044 = &C::output_builder_new(ctx);
                let v2043 = C::range(ctx, v2041, v2042);
                let v2045 = constructor_lower_call_rets(ctx, v2023, v2028, v2043, v2044);
                // Rule at src/isa/s390x/lower.isle line 3958.
                return Some(v2045);
            }
        }
        &InstructionData::CallIndirect {
            opcode: ref v2046,
            args: v2047,
            sig_ref: v2048,
        } => {
            if let &Opcode::CallIndirect = v2046 {
                let v2049 = C::value_list_slice(ctx, v2047);
                let v2050 = C::value_slice_unwrap(ctx, v2049);
                if let Some(v2051) = v2050 {
                    let v2054 = C::abi_sig(ctx, v2048);
                    let v2055 = C::put_in_reg(ctx, v2051.0);
                    let v2056 = C::abi_accumulate_outgoing_args_size(ctx, v2054);
                    let v2057 = C::abi_num_args(ctx, v2054);
                    let v2058 = C::range(ctx, 0x0, v2057);
                    let v2059 = &constructor_lower_call_args(ctx, v2054, v2058, v2051.1);
                    let v2060 = &C::defs_init(ctx, v2054);
                    let v2062 = &constructor_abi_call_ind(
                        ctx,
                        v2054,
                        v2055,
                        v2059,
                        v2060,
                        &Opcode::CallIndirect,
                    );
                    let v2063 = constructor_side_effect(ctx, v2062);
                    let v2064 = C::abi_first_ret(ctx, v2048, v2054);
                    let v2065 = C::abi_num_rets(ctx, v2054);
                    let v2044 = &C::output_builder_new(ctx);
                    let v2066 = C::range(ctx, v2064, v2065);
                    let v2067 = constructor_lower_call_rets(ctx, v2054, v2060, v2066, v2044);
                    // Rule at src/isa/s390x/lower.isle line 3969.
                    return Some(v2067);
                }
            }
        }
        &InstructionData::CondTrap {
            opcode: ref v1909,
            arg: v1910,
            code: ref v1911,
        } => {
            match v1909 {
                &Opcode::Trapz => {
                    let v1912 = &constructor_value_nonzero(ctx, v1910);
                    let v1913 = &constructor_invert_bool(ctx, v1912);
                    let v1914 = &constructor_trap_if_bool(ctx, v1913, v1911);
                    let v1915 = constructor_side_effect(ctx, v1914);
                    // Rule at src/isa/s390x/lower.isle line 3849.
                    return Some(v1915);
                }
                &Opcode::Trapnz => {
                    let v1912 = &constructor_value_nonzero(ctx, v1910);
                    let v1916 = &constructor_trap_if_bool(ctx, v1912, v1911);
                    let v1917 = constructor_side_effect(ctx, v1916);
                    // Rule at src/isa/s390x/lower.isle line 3855.
                    return Some(v1917);
                }
                &Opcode::ResumableTrapnz => {
                    let v1912 = &constructor_value_nonzero(ctx, v1910);
                    let v1916 = &constructor_trap_if_bool(ctx, v1912, v1911);
                    let v1917 = constructor_side_effect(ctx, v1916);
                    // Rule at src/isa/s390x/lower.isle line 3861.
                    return Some(v1917);
                }
                _ => {}
            }
        }
        &InstructionData::FloatCompare {
            opcode: ref v1785,
            args: ref v1786,
            cond: ref v1787,
        } => {
            if let &Opcode::Fcmp = v1785 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    match v1787 {
                        &FloatCC::Equal => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1788 = C::unpack_value_array_2(ctx, v1786);
                                let v1794 = C::put_in_reg(ctx, v1788.0);
                                let v1795 = C::put_in_reg(ctx, v1788.1);
                                let v1796 = constructor_vec_fcmpeq(ctx, v149, v1794, v1795);
                                let v1797 = constructor_output_reg(ctx, v1796);
                                // Rule at src/isa/s390x/lower.isle line 3501.
                                return Some(v1797);
                            }
                        }
                        &FloatCC::GreaterThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1788 = C::unpack_value_array_2(ctx, v1786);
                                let v1794 = C::put_in_reg(ctx, v1788.0);
                                let v1795 = C::put_in_reg(ctx, v1788.1);
                                let v1800 = constructor_vec_fcmph(ctx, v149, v1794, v1795);
                                let v1801 = constructor_output_reg(ctx, v1800);
                                // Rule at src/isa/s390x/lower.isle line 3505.
                                return Some(v1801);
                            }
                        }
                        &FloatCC::GreaterThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1788 = C::unpack_value_array_2(ctx, v1786);
                                let v1794 = C::put_in_reg(ctx, v1788.0);
                                let v1795 = C::put_in_reg(ctx, v1788.1);
                                let v1804 = constructor_vec_fcmphe(ctx, v149, v1794, v1795);
                                let v1805 = constructor_output_reg(ctx, v1804);
                                // Rule at src/isa/s390x/lower.isle line 3509.
                                return Some(v1805);
                            }
                        }
                        &FloatCC::LessThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1788 = C::unpack_value_array_2(ctx, v1786);
                                let v1808 = C::put_in_reg(ctx, v1788.1);
                                let v1809 = C::put_in_reg(ctx, v1788.0);
                                let v1810 = constructor_vec_fcmph(ctx, v149, v1808, v1809);
                                let v1811 = constructor_output_reg(ctx, v1810);
                                // Rule at src/isa/s390x/lower.isle line 3513.
                                return Some(v1811);
                            }
                        }
                        &FloatCC::LessThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1788 = C::unpack_value_array_2(ctx, v1786);
                                let v1808 = C::put_in_reg(ctx, v1788.1);
                                let v1809 = C::put_in_reg(ctx, v1788.0);
                                let v1814 = constructor_vec_fcmphe(ctx, v149, v1808, v1809);
                                let v1815 = constructor_output_reg(ctx, v1814);
                                // Rule at src/isa/s390x/lower.isle line 3517.
                                return Some(v1815);
                            }
                        }
                        &FloatCC::NotEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1788 = C::unpack_value_array_2(ctx, v1786);
                                let v1794 = C::put_in_reg(ctx, v1788.0);
                                let v1795 = C::put_in_reg(ctx, v1788.1);
                                let v1796 = constructor_vec_fcmpeq(ctx, v149, v1794, v1795);
                                let v1798 = constructor_vec_not(ctx, v149, v1796);
                                let v1799 = constructor_output_reg(ctx, v1798);
                                // Rule at src/isa/s390x/lower.isle line 3503.
                                return Some(v1799);
                            }
                        }
                        &FloatCC::Ordered => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1788 = C::unpack_value_array_2(ctx, v1786);
                                let v1794 = C::put_in_reg(ctx, v1788.0);
                                let v1795 = C::put_in_reg(ctx, v1788.1);
                                let v1804 = constructor_vec_fcmphe(ctx, v149, v1794, v1795);
                                let v1818 = C::put_in_reg(ctx, v1788.1);
                                let v1819 = C::put_in_reg(ctx, v1788.0);
                                let v1820 = constructor_vec_fcmphe(ctx, v149, v1818, v1819);
                                let v1821 = constructor_vec_or(ctx, v149, v1804, v1820);
                                let v1822 = constructor_output_reg(ctx, v1821);
                                // Rule at src/isa/s390x/lower.isle line 3521.
                                return Some(v1822);
                            }
                        }
                        &FloatCC::OrderedNotEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1788 = C::unpack_value_array_2(ctx, v1786);
                                let v1794 = C::put_in_reg(ctx, v1788.0);
                                let v1795 = C::put_in_reg(ctx, v1788.1);
                                let v1800 = constructor_vec_fcmph(ctx, v149, v1794, v1795);
                                let v1818 = C::put_in_reg(ctx, v1788.1);
                                let v1819 = C::put_in_reg(ctx, v1788.0);
                                let v1825 = constructor_vec_fcmph(ctx, v149, v1818, v1819);
                                let v1826 = constructor_vec_or(ctx, v149, v1800, v1825);
                                let v1827 = constructor_output_reg(ctx, v1826);
                                // Rule at src/isa/s390x/lower.isle line 3525.
                                return Some(v1827);
                            }
                        }
                        &FloatCC::Unordered => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1788 = C::unpack_value_array_2(ctx, v1786);
                                let v1794 = C::put_in_reg(ctx, v1788.0);
                                let v1795 = C::put_in_reg(ctx, v1788.1);
                                let v1804 = constructor_vec_fcmphe(ctx, v149, v1794, v1795);
                                let v1818 = C::put_in_reg(ctx, v1788.1);
                                let v1819 = C::put_in_reg(ctx, v1788.0);
                                let v1820 = constructor_vec_fcmphe(ctx, v149, v1818, v1819);
                                let v1823 = constructor_vec_not_or(ctx, v149, v1804, v1820);
                                let v1824 = constructor_output_reg(ctx, v1823);
                                // Rule at src/isa/s390x/lower.isle line 3523.
                                return Some(v1824);
                            }
                        }
                        &FloatCC::UnorderedOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1788 = C::unpack_value_array_2(ctx, v1786);
                                let v1794 = C::put_in_reg(ctx, v1788.0);
                                let v1795 = C::put_in_reg(ctx, v1788.1);
                                let v1800 = constructor_vec_fcmph(ctx, v149, v1794, v1795);
                                let v1818 = C::put_in_reg(ctx, v1788.1);
                                let v1819 = C::put_in_reg(ctx, v1788.0);
                                let v1825 = constructor_vec_fcmph(ctx, v149, v1818, v1819);
                                let v1828 = constructor_vec_not_or(ctx, v149, v1800, v1825);
                                let v1829 = constructor_output_reg(ctx, v1828);
                                // Rule at src/isa/s390x/lower.isle line 3527.
                                return Some(v1829);
                            }
                        }
                        &FloatCC::UnorderedOrGreaterThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1788 = C::unpack_value_array_2(ctx, v1786);
                                let v1808 = C::put_in_reg(ctx, v1788.1);
                                let v1809 = C::put_in_reg(ctx, v1788.0);
                                let v1814 = constructor_vec_fcmphe(ctx, v149, v1808, v1809);
                                let v1816 = constructor_vec_not(ctx, v149, v1814);
                                let v1817 = constructor_output_reg(ctx, v1816);
                                // Rule at src/isa/s390x/lower.isle line 3519.
                                return Some(v1817);
                            }
                        }
                        &FloatCC::UnorderedOrGreaterThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1788 = C::unpack_value_array_2(ctx, v1786);
                                let v1808 = C::put_in_reg(ctx, v1788.1);
                                let v1809 = C::put_in_reg(ctx, v1788.0);
                                let v1810 = constructor_vec_fcmph(ctx, v149, v1808, v1809);
                                let v1812 = constructor_vec_not(ctx, v149, v1810);
                                let v1813 = constructor_output_reg(ctx, v1812);
                                // Rule at src/isa/s390x/lower.isle line 3515.
                                return Some(v1813);
                            }
                        }
                        &FloatCC::UnorderedOrLessThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1788 = C::unpack_value_array_2(ctx, v1786);
                                let v1794 = C::put_in_reg(ctx, v1788.0);
                                let v1795 = C::put_in_reg(ctx, v1788.1);
                                let v1804 = constructor_vec_fcmphe(ctx, v149, v1794, v1795);
                                let v1806 = constructor_vec_not(ctx, v149, v1804);
                                let v1807 = constructor_output_reg(ctx, v1806);
                                // Rule at src/isa/s390x/lower.isle line 3511.
                                return Some(v1807);
                            }
                        }
                        &FloatCC::UnorderedOrLessThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1788 = C::unpack_value_array_2(ctx, v1786);
                                let v1794 = C::put_in_reg(ctx, v1788.0);
                                let v1795 = C::put_in_reg(ctx, v1788.1);
                                let v1800 = constructor_vec_fcmph(ctx, v149, v1794, v1795);
                                let v1802 = constructor_vec_not(ctx, v149, v1800);
                                let v1803 = constructor_output_reg(ctx, v1802);
                                // Rule at src/isa/s390x/lower.isle line 3507.
                                return Some(v1803);
                            }
                        }
                        _ => {}
                    }
                    let v3 = C::value_type(ctx, v2);
                    let v60 = C::fits_in_64(ctx, v3);
                    if let Some(v61) = v60 {
                        let v1788 = C::unpack_value_array_2(ctx, v1786);
                        let v1791 = &constructor_fcmp_val(ctx, v1787, v1788.0, v1788.1);
                        let v1792 = constructor_lower_bool(ctx, v61, v1791);
                        let v1793 = constructor_output_reg(ctx, v1792);
                        // Rule at src/isa/s390x/lower.isle line 3489.
                        return Some(v1793);
                    }
                }
            }
        }
        &InstructionData::FuncAddr {
            opcode: ref v1466,
            func_ref: v1467,
        } => {
            if let &Opcode::FuncAddr = v1466 {
                let v1468 = C::func_ref_data(ctx, v1467);
                let v1472 = C::reloc_distance_near(ctx, v1468.2);
                if let Some(v1473) = v1472 {
                    let v1475 = C::memflags_trusted(ctx);
                    let v1476 = &C::memarg_symbol(ctx, v1468.1, 0x0, v1475);
                    let v1477 = constructor_load_addr(ctx, v1476);
                    let v1478 = constructor_output_reg(ctx, v1477);
                    // Rule at src/isa/s390x/lower.isle line 2295.
                    return Some(v1478);
                }
                let v1480 = SymbolReloc::Absolute {
                    name: v1468.1,
                    offset: 0x0,
                };
                let v1481 = constructor_load_symbol_reloc(ctx, &v1480);
                let v1482 = constructor_output_reg(ctx, v1481);
                // Rule at src/isa/s390x/lower.isle line 2299.
                return Some(v1482);
            }
        }
        &InstructionData::IntAddTrap {
            opcode: ref v1920,
            args: ref v1921,
            code: ref v1922,
        } => {
            if let &Opcode::UaddOverflowTrap = v1920 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v60 = C::fits_in_64(ctx, v3);
                    if let Some(v61) = v60 {
                        let v1923 = C::unpack_value_array_2(ctx, v1921);
                        let v1943 = C::def_inst(ctx, v1923.0);
                        if let Some(v1944) = v1943 {
                            let v1945 = &C::inst_data(ctx, v1944);
                            if let &InstructionData::Unary {
                                opcode: ref v1946,
                                arg: v1947,
                            } = v1945
                            {
                                if let &Opcode::Uextend = v1946 {
                                    let v1948 = C::value_type(ctx, v1947);
                                    if v1948 == I32 {
                                        let v1949 = C::put_in_reg(ctx, v1923.1);
                                        let v1950 = C::put_in_reg(ctx, v1947);
                                        let v1951 =
                                            &constructor_add_logical_reg_zext32_with_flags_paired(
                                                ctx, v61, v1949, v1950,
                                            );
                                        let v1929 = &C::mask_as_cond(ctx, 0x3);
                                        let v1930 = &constructor_trap_if_impl(ctx, v1929, v1922);
                                        let v1952 = constructor_with_flags(ctx, v1951, v1930);
                                        let v1953 = C::output(ctx, v1952);
                                        // Rule at src/isa/s390x/lower.isle line 3897.
                                        return Some(v1953);
                                    }
                                }
                            }
                        }
                        let v1961 = C::u32_from_value(ctx, v1923.0);
                        if let Some(v1962) = v1961 {
                            let v1949 = C::put_in_reg(ctx, v1923.1);
                            let v1963 = &constructor_add_logical_zimm32_with_flags_paired(
                                ctx, v61, v1949, v1962,
                            );
                            let v1957 = &C::mask_as_cond(ctx, 0x3);
                            let v1958 = &constructor_trap_if_impl(ctx, v1957, v1922);
                            let v1964 = constructor_with_flags(ctx, v1963, v1958);
                            let v1965 = C::output(ctx, v1964);
                            // Rule at src/isa/s390x/lower.isle line 3909.
                            return Some(v1965);
                        }
                        let v1985 = C::sinkable_inst(ctx, v1923.0);
                        if let Some(v1986) = v1985 {
                            let v1987 = &C::inst_data(ctx, v1986);
                            if let &InstructionData::Load {
                                opcode: ref v1988,
                                arg: v1989,
                                flags: v1990,
                                offset: v1991,
                            } = v1987
                            {
                                match v1988 {
                                    &Opcode::Load => {
                                        let v1982 = C::value_type(ctx, v1923.0);
                                        let v1983 = C::ty_32_or_64(ctx, v1982);
                                        if let Some(v1984) = v1983 {
                                            let v1992 = C::bigendian(ctx, v1990);
                                            if let Some(v1993) = v1992 {
                                                let v1949 = C::put_in_reg(ctx, v1923.1);
                                                let v1994 = &constructor_sink_load(ctx, v1986);
                                                let v1995 =
                                                    &constructor_add_logical_mem_with_flags_paired(
                                                        ctx, v61, v1949, v1994,
                                                    );
                                                let v1929 = &C::mask_as_cond(ctx, 0x3);
                                                let v1930 =
                                                    &constructor_trap_if_impl(ctx, v1929, v1922);
                                                let v1996 =
                                                    constructor_with_flags(ctx, v1995, v1930);
                                                let v1997 = C::output(ctx, v1996);
                                                // Rule at src/isa/s390x/lower.isle line 3921.
                                                return Some(v1997);
                                            }
                                        }
                                    }
                                    &Opcode::Uload32 => {
                                        let v1992 = C::bigendian(ctx, v1990);
                                        if let Some(v1993) = v1992 {
                                            let v1949 = C::put_in_reg(ctx, v1923.1);
                                            let v2002 = &constructor_sink_uload32(ctx, v1986);
                                            let v2003 = &constructor_add_logical_mem_zext32_with_flags_paired(ctx, v61, v1949, v2002);
                                            let v1929 = &C::mask_as_cond(ctx, 0x3);
                                            let v1930 =
                                                &constructor_trap_if_impl(ctx, v1929, v1922);
                                            let v2004 = constructor_with_flags(ctx, v2003, v1930);
                                            let v2005 = C::output(ctx, v2004);
                                            // Rule at src/isa/s390x/lower.isle line 3933.
                                            return Some(v2005);
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v1933 = C::def_inst(ctx, v1923.1);
                        if let Some(v1934) = v1933 {
                            let v1935 = &C::inst_data(ctx, v1934);
                            if let &InstructionData::Unary {
                                opcode: ref v1936,
                                arg: v1937,
                            } = v1935
                            {
                                if let &Opcode::Uextend = v1936 {
                                    let v1938 = C::value_type(ctx, v1937);
                                    if v1938 == I32 {
                                        let v1926 = C::put_in_reg(ctx, v1923.0);
                                        let v1939 = C::put_in_reg(ctx, v1937);
                                        let v1940 =
                                            &constructor_add_logical_reg_zext32_with_flags_paired(
                                                ctx, v61, v1926, v1939,
                                            );
                                        let v1929 = &C::mask_as_cond(ctx, 0x3);
                                        let v1930 = &constructor_trap_if_impl(ctx, v1929, v1922);
                                        let v1941 = constructor_with_flags(ctx, v1940, v1930);
                                        let v1942 = C::output(ctx, v1941);
                                        // Rule at src/isa/s390x/lower.isle line 3892.
                                        return Some(v1942);
                                    }
                                }
                            }
                        }
                        let v1954 = C::u32_from_value(ctx, v1923.1);
                        if let Some(v1955) = v1954 {
                            let v1926 = C::put_in_reg(ctx, v1923.0);
                            let v1956 = &constructor_add_logical_zimm32_with_flags_paired(
                                ctx, v61, v1926, v1955,
                            );
                            let v1957 = &C::mask_as_cond(ctx, 0x3);
                            let v1958 = &constructor_trap_if_impl(ctx, v1957, v1922);
                            let v1959 = constructor_with_flags(ctx, v1956, v1958);
                            let v1960 = C::output(ctx, v1959);
                            // Rule at src/isa/s390x/lower.isle line 3904.
                            return Some(v1960);
                        }
                        let v1969 = C::sinkable_inst(ctx, v1923.1);
                        if let Some(v1970) = v1969 {
                            let v1971 = &C::inst_data(ctx, v1970);
                            if let &InstructionData::Load {
                                opcode: ref v1972,
                                arg: v1973,
                                flags: v1974,
                                offset: v1975,
                            } = v1971
                            {
                                match v1972 {
                                    &Opcode::Load => {
                                        let v1966 = C::value_type(ctx, v1923.1);
                                        let v1967 = C::ty_32_or_64(ctx, v1966);
                                        if let Some(v1968) = v1967 {
                                            let v1976 = C::bigendian(ctx, v1974);
                                            if let Some(v1977) = v1976 {
                                                let v1926 = C::put_in_reg(ctx, v1923.0);
                                                let v1978 = &constructor_sink_load(ctx, v1970);
                                                let v1979 =
                                                    &constructor_add_logical_mem_with_flags_paired(
                                                        ctx, v61, v1926, v1978,
                                                    );
                                                let v1929 = &C::mask_as_cond(ctx, 0x3);
                                                let v1930 =
                                                    &constructor_trap_if_impl(ctx, v1929, v1922);
                                                let v1980 =
                                                    constructor_with_flags(ctx, v1979, v1930);
                                                let v1981 = C::output(ctx, v1980);
                                                // Rule at src/isa/s390x/lower.isle line 3916.
                                                return Some(v1981);
                                            }
                                        }
                                    }
                                    &Opcode::Uload32 => {
                                        let v1976 = C::bigendian(ctx, v1974);
                                        if let Some(v1977) = v1976 {
                                            let v1926 = C::put_in_reg(ctx, v1923.0);
                                            let v1998 = &constructor_sink_uload32(ctx, v1970);
                                            let v1999 = &constructor_add_logical_mem_zext32_with_flags_paired(ctx, v61, v1926, v1998);
                                            let v1929 = &C::mask_as_cond(ctx, 0x3);
                                            let v1930 =
                                                &constructor_trap_if_impl(ctx, v1929, v1922);
                                            let v2000 = constructor_with_flags(ctx, v1999, v1930);
                                            let v2001 = C::output(ctx, v2000);
                                            // Rule at src/isa/s390x/lower.isle line 3928.
                                            return Some(v2001);
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v1926 = C::put_in_reg(ctx, v1923.0);
                        let v1927 = C::put_in_reg(ctx, v1923.1);
                        let v1928 =
                            &constructor_add_logical_reg_with_flags_paired(ctx, v61, v1926, v1927);
                        let v1929 = &C::mask_as_cond(ctx, 0x3);
                        let v1930 = &constructor_trap_if_impl(ctx, v1929, v1922);
                        let v1931 = constructor_with_flags(ctx, v1928, v1930);
                        let v1932 = C::output(ctx, v1931);
                        // Rule at src/isa/s390x/lower.isle line 3886.
                        return Some(v1932);
                    }
                }
            }
        }
        &InstructionData::IntCompare {
            opcode: ref v1751,
            args: ref v1752,
            cond: ref v1753,
        } => {
            if let &Opcode::Icmp = v1751 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    match v1753 {
                        &IntCC::Equal => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1754 = C::unpack_value_array_2(ctx, v1752);
                                let v1761 = C::put_in_reg(ctx, v1754.0);
                                let v1762 = C::put_in_reg(ctx, v1754.1);
                                let v1763 = constructor_vec_cmpeq(ctx, v149, v1761, v1762);
                                let v1764 = constructor_output_reg(ctx, v1763);
                                // Rule at src/isa/s390x/lower.isle line 3463.
                                return Some(v1764);
                            }
                        }
                        &IntCC::NotEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1754 = C::unpack_value_array_2(ctx, v1752);
                                let v1761 = C::put_in_reg(ctx, v1754.0);
                                let v1762 = C::put_in_reg(ctx, v1754.1);
                                let v1763 = constructor_vec_cmpeq(ctx, v149, v1761, v1762);
                                let v1765 = constructor_vec_not(ctx, v149, v1763);
                                let v1766 = constructor_output_reg(ctx, v1765);
                                // Rule at src/isa/s390x/lower.isle line 3465.
                                return Some(v1766);
                            }
                        }
                        &IntCC::SignedGreaterThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1754 = C::unpack_value_array_2(ctx, v1752);
                                let v1761 = C::put_in_reg(ctx, v1754.0);
                                let v1762 = C::put_in_reg(ctx, v1754.1);
                                let v1767 = constructor_vec_cmph(ctx, v149, v1761, v1762);
                                let v1768 = constructor_output_reg(ctx, v1767);
                                // Rule at src/isa/s390x/lower.isle line 3467.
                                return Some(v1768);
                            }
                        }
                        &IntCC::SignedGreaterThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1754 = C::unpack_value_array_2(ctx, v1752);
                                let v1771 = C::put_in_reg(ctx, v1754.1);
                                let v1772 = C::put_in_reg(ctx, v1754.0);
                                let v1773 = constructor_vec_cmph(ctx, v149, v1771, v1772);
                                let v1775 = constructor_vec_not(ctx, v149, v1773);
                                let v1776 = constructor_output_reg(ctx, v1775);
                                // Rule at src/isa/s390x/lower.isle line 3473.
                                return Some(v1776);
                            }
                        }
                        &IntCC::SignedLessThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1754 = C::unpack_value_array_2(ctx, v1752);
                                let v1771 = C::put_in_reg(ctx, v1754.1);
                                let v1772 = C::put_in_reg(ctx, v1754.0);
                                let v1773 = constructor_vec_cmph(ctx, v149, v1771, v1772);
                                let v1774 = constructor_output_reg(ctx, v1773);
                                // Rule at src/isa/s390x/lower.isle line 3471.
                                return Some(v1774);
                            }
                        }
                        &IntCC::SignedLessThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1754 = C::unpack_value_array_2(ctx, v1752);
                                let v1761 = C::put_in_reg(ctx, v1754.0);
                                let v1762 = C::put_in_reg(ctx, v1754.1);
                                let v1767 = constructor_vec_cmph(ctx, v149, v1761, v1762);
                                let v1769 = constructor_vec_not(ctx, v149, v1767);
                                let v1770 = constructor_output_reg(ctx, v1769);
                                // Rule at src/isa/s390x/lower.isle line 3469.
                                return Some(v1770);
                            }
                        }
                        &IntCC::UnsignedGreaterThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1754 = C::unpack_value_array_2(ctx, v1752);
                                let v1761 = C::put_in_reg(ctx, v1754.0);
                                let v1762 = C::put_in_reg(ctx, v1754.1);
                                let v1777 = constructor_vec_cmphl(ctx, v149, v1761, v1762);
                                let v1778 = constructor_output_reg(ctx, v1777);
                                // Rule at src/isa/s390x/lower.isle line 3475.
                                return Some(v1778);
                            }
                        }
                        &IntCC::UnsignedGreaterThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1754 = C::unpack_value_array_2(ctx, v1752);
                                let v1771 = C::put_in_reg(ctx, v1754.1);
                                let v1772 = C::put_in_reg(ctx, v1754.0);
                                let v1781 = constructor_vec_cmphl(ctx, v149, v1771, v1772);
                                let v1783 = constructor_vec_not(ctx, v149, v1781);
                                let v1784 = constructor_output_reg(ctx, v1783);
                                // Rule at src/isa/s390x/lower.isle line 3481.
                                return Some(v1784);
                            }
                        }
                        &IntCC::UnsignedLessThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1754 = C::unpack_value_array_2(ctx, v1752);
                                let v1771 = C::put_in_reg(ctx, v1754.1);
                                let v1772 = C::put_in_reg(ctx, v1754.0);
                                let v1781 = constructor_vec_cmphl(ctx, v149, v1771, v1772);
                                let v1782 = constructor_output_reg(ctx, v1781);
                                // Rule at src/isa/s390x/lower.isle line 3479.
                                return Some(v1782);
                            }
                        }
                        &IntCC::UnsignedLessThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1754 = C::unpack_value_array_2(ctx, v1752);
                                let v1761 = C::put_in_reg(ctx, v1754.0);
                                let v1762 = C::put_in_reg(ctx, v1754.1);
                                let v1777 = constructor_vec_cmphl(ctx, v149, v1761, v1762);
                                let v1779 = constructor_vec_not(ctx, v149, v1777);
                                let v1780 = constructor_output_reg(ctx, v1779);
                                // Rule at src/isa/s390x/lower.isle line 3477.
                                return Some(v1780);
                            }
                        }
                        _ => {}
                    }
                    let v3 = C::value_type(ctx, v2);
                    let v60 = C::fits_in_64(ctx, v3);
                    if let Some(v61) = v60 {
                        let v1754 = C::unpack_value_array_2(ctx, v1752);
                        let v1758 = &constructor_icmp_val(ctx, true, v1753, v1754.0, v1754.1);
                        let v1759 = constructor_lower_bool(ctx, v61, v1758);
                        let v1760 = constructor_output_reg(ctx, v1759);
                        // Rule at src/isa/s390x/lower.isle line 3341.
                        return Some(v1760);
                    }
                }
            }
        }
        &InstructionData::Load {
            opcode: ref v1510,
            arg: v1511,
            flags: v1512,
            offset: v1513,
        } => {
            match v1510 {
                &Opcode::Load => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v35 = C::vr128_ty(ctx, v3);
                        if let Some(v36) = v35 {
                            let v1447 = &C::lane_order(ctx);
                            match v1447 {
                                &LaneOrder::LittleEndian => {
                                    let v1518 = C::bigendian(ctx, v1512);
                                    if let Some(v1519) = v1518 {
                                        let v1547 = constructor_vec_load_elt_rev(
                                            ctx, v36, v1512, v1511, v1513,
                                        );
                                        let v1548 = constructor_output_reg(ctx, v1547);
                                        // Rule at src/isa/s390x/lower.isle line 2407.
                                        return Some(v1548);
                                    }
                                    let v1523 = C::littleendian(ctx, v1512);
                                    if let Some(v1524) = v1523 {
                                        let v1549 = constructor_vec_load_full_rev(
                                            ctx, v36, v1512, v1511, v1513,
                                        );
                                        let v1550 = constructor_output_reg(ctx, v1549);
                                        // Rule at src/isa/s390x/lower.isle line 2412.
                                        return Some(v1550);
                                    }
                                }
                                &LaneOrder::BigEndian => {
                                    let v1518 = C::bigendian(ctx, v1512);
                                    if let Some(v1519) = v1518 {
                                        let v1515 =
                                            &constructor_lower_address(ctx, v1512, v1511, v1513);
                                        let v1543 = constructor_vec_load(ctx, v36, v1515);
                                        let v1544 = constructor_output_reg(ctx, v1543);
                                        // Rule at src/isa/s390x/lower.isle line 2397.
                                        return Some(v1544);
                                    }
                                    let v1523 = C::littleendian(ctx, v1512);
                                    if let Some(v1524) = v1523 {
                                        let v1545 = constructor_vec_load_byte_rev(
                                            ctx, v36, v1512, v1511, v1513,
                                        );
                                        let v1546 = constructor_output_reg(ctx, v1545);
                                        // Rule at src/isa/s390x/lower.isle line 2402.
                                        return Some(v1546);
                                    }
                                }
                                _ => {}
                            }
                        }
                        match v3 {
                            I8 => {
                                let v1515 = &constructor_lower_address(ctx, v1512, v1511, v1513);
                                let v1516 = constructor_zext32_mem(ctx, I8, v1515);
                                let v1517 = constructor_output_reg(ctx, v1516);
                                // Rule at src/isa/s390x/lower.isle line 2345.
                                return Some(v1517);
                            }
                            I16 => {
                                let v1518 = C::bigendian(ctx, v1512);
                                if let Some(v1519) = v1518 {
                                    let v1515 =
                                        &constructor_lower_address(ctx, v1512, v1511, v1513);
                                    let v1521 = constructor_zext32_mem(ctx, I16, v1515);
                                    let v1522 = constructor_output_reg(ctx, v1521);
                                    // Rule at src/isa/s390x/lower.isle line 2349.
                                    return Some(v1522);
                                }
                                let v1523 = C::littleendian(ctx, v1512);
                                if let Some(v1524) = v1523 {
                                    let v1515 =
                                        &constructor_lower_address(ctx, v1512, v1511, v1513);
                                    let v1525 = constructor_loadrev16(ctx, v1515);
                                    let v1526 = constructor_output_reg(ctx, v1525);
                                    // Rule at src/isa/s390x/lower.isle line 2353.
                                    return Some(v1526);
                                }
                            }
                            I32 => {
                                let v1518 = C::bigendian(ctx, v1512);
                                if let Some(v1519) = v1518 {
                                    let v1515 =
                                        &constructor_lower_address(ctx, v1512, v1511, v1513);
                                    let v1527 = constructor_load32(ctx, v1515);
                                    let v1528 = constructor_output_reg(ctx, v1527);
                                    // Rule at src/isa/s390x/lower.isle line 2357.
                                    return Some(v1528);
                                }
                                let v1523 = C::littleendian(ctx, v1512);
                                if let Some(v1524) = v1523 {
                                    let v1515 =
                                        &constructor_lower_address(ctx, v1512, v1511, v1513);
                                    let v1529 = constructor_loadrev32(ctx, v1515);
                                    let v1530 = constructor_output_reg(ctx, v1529);
                                    // Rule at src/isa/s390x/lower.isle line 2361.
                                    return Some(v1530);
                                }
                            }
                            I64 => {
                                let v1518 = C::bigendian(ctx, v1512);
                                if let Some(v1519) = v1518 {
                                    let v1515 =
                                        &constructor_lower_address(ctx, v1512, v1511, v1513);
                                    let v1531 = constructor_load64(ctx, v1515);
                                    let v1532 = constructor_output_reg(ctx, v1531);
                                    // Rule at src/isa/s390x/lower.isle line 2365.
                                    return Some(v1532);
                                }
                                let v1523 = C::littleendian(ctx, v1512);
                                if let Some(v1524) = v1523 {
                                    let v1515 =
                                        &constructor_lower_address(ctx, v1512, v1511, v1513);
                                    let v1533 = constructor_loadrev64(ctx, v1515);
                                    let v1534 = constructor_output_reg(ctx, v1533);
                                    // Rule at src/isa/s390x/lower.isle line 2369.
                                    return Some(v1534);
                                }
                            }
                            R64 => {
                                let v1518 = C::bigendian(ctx, v1512);
                                if let Some(v1519) = v1518 {
                                    let v1515 =
                                        &constructor_lower_address(ctx, v1512, v1511, v1513);
                                    let v1531 = constructor_load64(ctx, v1515);
                                    let v1532 = constructor_output_reg(ctx, v1531);
                                    // Rule at src/isa/s390x/lower.isle line 2373.
                                    return Some(v1532);
                                }
                                let v1523 = C::littleendian(ctx, v1512);
                                if let Some(v1524) = v1523 {
                                    let v1515 =
                                        &constructor_lower_address(ctx, v1512, v1511, v1513);
                                    let v1533 = constructor_loadrev64(ctx, v1515);
                                    let v1534 = constructor_output_reg(ctx, v1533);
                                    // Rule at src/isa/s390x/lower.isle line 2377.
                                    return Some(v1534);
                                }
                            }
                            F32 => {
                                let v1518 = C::bigendian(ctx, v1512);
                                if let Some(v1519) = v1518 {
                                    let v1515 =
                                        &constructor_lower_address(ctx, v1512, v1511, v1513);
                                    let v1535 =
                                        constructor_vec_load_lane_undef(ctx, F32X4, v1515, 0x0);
                                    let v1536 = constructor_output_reg(ctx, v1535);
                                    // Rule at src/isa/s390x/lower.isle line 2381.
                                    return Some(v1536);
                                }
                                let v1523 = C::littleendian(ctx, v1512);
                                if let Some(v1524) = v1523 {
                                    let v1515 =
                                        &constructor_lower_address(ctx, v1512, v1511, v1513);
                                    let v1537 = constructor_vec_load_lane_little_undef(
                                        ctx, F32X4, v1515, 0x0,
                                    );
                                    let v1538 = constructor_output_reg(ctx, v1537);
                                    // Rule at src/isa/s390x/lower.isle line 2385.
                                    return Some(v1538);
                                }
                            }
                            F64 => {
                                let v1518 = C::bigendian(ctx, v1512);
                                if let Some(v1519) = v1518 {
                                    let v1515 =
                                        &constructor_lower_address(ctx, v1512, v1511, v1513);
                                    let v1539 =
                                        constructor_vec_load_lane_undef(ctx, F64X2, v1515, 0x0);
                                    let v1540 = constructor_output_reg(ctx, v1539);
                                    // Rule at src/isa/s390x/lower.isle line 2389.
                                    return Some(v1540);
                                }
                                let v1523 = C::littleendian(ctx, v1512);
                                if let Some(v1524) = v1523 {
                                    let v1515 =
                                        &constructor_lower_address(ctx, v1512, v1511, v1513);
                                    let v1541 = constructor_vec_load_lane_little_undef(
                                        ctx, F64X2, v1515, 0x0,
                                    );
                                    let v1542 = constructor_output_reg(ctx, v1541);
                                    // Rule at src/isa/s390x/lower.isle line 2393.
                                    return Some(v1542);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Uload8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v587 = C::gpr64_ty(ctx, v3);
                        if let Some(v588) = v587 {
                            let v1515 = &constructor_lower_address(ctx, v1512, v1511, v1513);
                            let v1551 = constructor_zext64_mem(ctx, I8, v1515);
                            let v1552 = constructor_output_reg(ctx, v1551);
                            // Rule at src/isa/s390x/lower.isle line 2509.
                            return Some(v1552);
                        }
                        let v583 = C::gpr32_ty(ctx, v3);
                        if let Some(v584) = v583 {
                            let v1515 = &constructor_lower_address(ctx, v1512, v1511, v1513);
                            let v1516 = constructor_zext32_mem(ctx, I8, v1515);
                            let v1517 = constructor_output_reg(ctx, v1516);
                            // Rule at src/isa/s390x/lower.isle line 2505.
                            return Some(v1517);
                        }
                    }
                }
                &Opcode::Sload8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v587 = C::gpr64_ty(ctx, v3);
                        if let Some(v588) = v587 {
                            let v1515 = &constructor_lower_address(ctx, v1512, v1511, v1513);
                            let v1555 = constructor_sext64_mem(ctx, I8, v1515);
                            let v1556 = constructor_output_reg(ctx, v1555);
                            // Rule at src/isa/s390x/lower.isle line 2520.
                            return Some(v1556);
                        }
                        let v583 = C::gpr32_ty(ctx, v3);
                        if let Some(v584) = v583 {
                            let v1515 = &constructor_lower_address(ctx, v1512, v1511, v1513);
                            let v1553 = constructor_sext32_mem(ctx, I8, v1515);
                            let v1554 = constructor_output_reg(ctx, v1553);
                            // Rule at src/isa/s390x/lower.isle line 2516.
                            return Some(v1554);
                        }
                    }
                }
                &Opcode::Uload16 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1518 = C::bigendian(ctx, v1512);
                        if let Some(v1519) = v1518 {
                            let v3 = C::value_type(ctx, v2);
                            let v587 = C::gpr64_ty(ctx, v3);
                            if let Some(v588) = v587 {
                                let v1515 = &constructor_lower_address(ctx, v1512, v1511, v1513);
                                let v1559 = constructor_zext64_mem(ctx, I16, v1515);
                                let v1560 = constructor_output_reg(ctx, v1559);
                                // Rule at src/isa/s390x/lower.isle line 2538.
                                return Some(v1560);
                            }
                            let v583 = C::gpr32_ty(ctx, v3);
                            if let Some(v584) = v583 {
                                let v1515 = &constructor_lower_address(ctx, v1512, v1511, v1513);
                                let v1521 = constructor_zext32_mem(ctx, I16, v1515);
                                let v1522 = constructor_output_reg(ctx, v1521);
                                // Rule at src/isa/s390x/lower.isle line 2527.
                                return Some(v1522);
                            }
                        }
                        let v1523 = C::littleendian(ctx, v1512);
                        if let Some(v1524) = v1523 {
                            let v3 = C::value_type(ctx, v2);
                            let v587 = C::gpr64_ty(ctx, v3);
                            if let Some(v588) = v587 {
                                let v1515 = &constructor_lower_address(ctx, v1512, v1511, v1513);
                                let v1525 = constructor_loadrev16(ctx, v1515);
                                let v1561 = constructor_zext64_reg(ctx, I16, v1525);
                                let v1562 = constructor_output_reg(ctx, v1561);
                                // Rule at src/isa/s390x/lower.isle line 2543.
                                return Some(v1562);
                            }
                            let v583 = C::gpr32_ty(ctx, v3);
                            if let Some(v584) = v583 {
                                let v1515 = &constructor_lower_address(ctx, v1512, v1511, v1513);
                                let v1525 = constructor_loadrev16(ctx, v1515);
                                let v1557 = constructor_zext32_reg(ctx, I16, v1525);
                                let v1558 = constructor_output_reg(ctx, v1557);
                                // Rule at src/isa/s390x/lower.isle line 2532.
                                return Some(v1558);
                            }
                        }
                    }
                }
                &Opcode::Sload16 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1518 = C::bigendian(ctx, v1512);
                        if let Some(v1519) = v1518 {
                            let v3 = C::value_type(ctx, v2);
                            let v587 = C::gpr64_ty(ctx, v3);
                            if let Some(v588) = v587 {
                                let v1515 = &constructor_lower_address(ctx, v1512, v1511, v1513);
                                let v1567 = constructor_sext64_mem(ctx, I16, v1515);
                                let v1568 = constructor_output_reg(ctx, v1567);
                                // Rule at src/isa/s390x/lower.isle line 2563.
                                return Some(v1568);
                            }
                            let v583 = C::gpr32_ty(ctx, v3);
                            if let Some(v584) = v583 {
                                let v1515 = &constructor_lower_address(ctx, v1512, v1511, v1513);
                                let v1563 = constructor_sext32_mem(ctx, I16, v1515);
                                let v1564 = constructor_output_reg(ctx, v1563);
                                // Rule at src/isa/s390x/lower.isle line 2552.
                                return Some(v1564);
                            }
                        }
                        let v1523 = C::littleendian(ctx, v1512);
                        if let Some(v1524) = v1523 {
                            let v3 = C::value_type(ctx, v2);
                            let v587 = C::gpr64_ty(ctx, v3);
                            if let Some(v588) = v587 {
                                let v1515 = &constructor_lower_address(ctx, v1512, v1511, v1513);
                                let v1525 = constructor_loadrev16(ctx, v1515);
                                let v1569 = constructor_sext64_reg(ctx, I16, v1525);
                                let v1570 = constructor_output_reg(ctx, v1569);
                                // Rule at src/isa/s390x/lower.isle line 2568.
                                return Some(v1570);
                            }
                            let v583 = C::gpr32_ty(ctx, v3);
                            if let Some(v584) = v583 {
                                let v1515 = &constructor_lower_address(ctx, v1512, v1511, v1513);
                                let v1525 = constructor_loadrev16(ctx, v1515);
                                let v1565 = constructor_sext32_reg(ctx, I16, v1525);
                                let v1566 = constructor_output_reg(ctx, v1565);
                                // Rule at src/isa/s390x/lower.isle line 2557.
                                return Some(v1566);
                            }
                        }
                    }
                }
                &Opcode::Uload32 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v587 = C::gpr64_ty(ctx, v3);
                        if let Some(v588) = v587 {
                            let v1518 = C::bigendian(ctx, v1512);
                            if let Some(v1519) = v1518 {
                                let v1515 = &constructor_lower_address(ctx, v1512, v1511, v1513);
                                let v1571 = constructor_zext64_mem(ctx, I32, v1515);
                                let v1572 = constructor_output_reg(ctx, v1571);
                                // Rule at src/isa/s390x/lower.isle line 2577.
                                return Some(v1572);
                            }
                            let v1523 = C::littleendian(ctx, v1512);
                            if let Some(v1524) = v1523 {
                                let v1515 = &constructor_lower_address(ctx, v1512, v1511, v1513);
                                let v1529 = constructor_loadrev32(ctx, v1515);
                                let v1573 = constructor_zext64_reg(ctx, I32, v1529);
                                let v1574 = constructor_output_reg(ctx, v1573);
                                // Rule at src/isa/s390x/lower.isle line 2582.
                                return Some(v1574);
                            }
                        }
                    }
                }
                &Opcode::Sload32 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v587 = C::gpr64_ty(ctx, v3);
                        if let Some(v588) = v587 {
                            let v1518 = C::bigendian(ctx, v1512);
                            if let Some(v1519) = v1518 {
                                let v1515 = &constructor_lower_address(ctx, v1512, v1511, v1513);
                                let v1575 = constructor_sext64_mem(ctx, I32, v1515);
                                let v1576 = constructor_output_reg(ctx, v1575);
                                // Rule at src/isa/s390x/lower.isle line 2591.
                                return Some(v1576);
                            }
                            let v1523 = C::littleendian(ctx, v1512);
                            if let Some(v1524) = v1523 {
                                let v1515 = &constructor_lower_address(ctx, v1512, v1511, v1513);
                                let v1529 = constructor_loadrev32(ctx, v1515);
                                let v1577 = constructor_sext64_reg(ctx, I32, v1529);
                                let v1578 = constructor_output_reg(ctx, v1577);
                                // Rule at src/isa/s390x/lower.isle line 2596.
                                return Some(v1578);
                            }
                        }
                    }
                }
                &Opcode::Uload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I16X8 {
                            let v1579 = constructor_load_v64(ctx, I8X16, v1512, v1511, v1513);
                            let v1580 = constructor_vec_unpacku_high(ctx, I8X16, v1579);
                            let v1581 = constructor_output_reg(ctx, v1580);
                            // Rule at src/isa/s390x/lower.isle line 2605.
                            return Some(v1581);
                        }
                    }
                }
                &Opcode::Sload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I16X8 {
                            let v1579 = constructor_load_v64(ctx, I8X16, v1512, v1511, v1513);
                            let v1582 = constructor_vec_unpacks_high(ctx, I8X16, v1579);
                            let v1583 = constructor_output_reg(ctx, v1582);
                            // Rule at src/isa/s390x/lower.isle line 2609.
                            return Some(v1583);
                        }
                    }
                }
                &Opcode::Uload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v1584 = constructor_load_v64(ctx, I16X8, v1512, v1511, v1513);
                            let v1585 = constructor_vec_unpacku_high(ctx, I16X8, v1584);
                            let v1586 = constructor_output_reg(ctx, v1585);
                            // Rule at src/isa/s390x/lower.isle line 2613.
                            return Some(v1586);
                        }
                    }
                }
                &Opcode::Sload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v1584 = constructor_load_v64(ctx, I16X8, v1512, v1511, v1513);
                            let v1587 = constructor_vec_unpacks_high(ctx, I16X8, v1584);
                            let v1588 = constructor_output_reg(ctx, v1587);
                            // Rule at src/isa/s390x/lower.isle line 2617.
                            return Some(v1588);
                        }
                    }
                }
                &Opcode::Uload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64X2 {
                            let v1589 = constructor_load_v64(ctx, I32X4, v1512, v1511, v1513);
                            let v1590 = constructor_vec_unpacku_high(ctx, I32X4, v1589);
                            let v1591 = constructor_output_reg(ctx, v1590);
                            // Rule at src/isa/s390x/lower.isle line 2621.
                            return Some(v1591);
                        }
                    }
                }
                &Opcode::Sload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64X2 {
                            let v1589 = constructor_load_v64(ctx, I32X4, v1512, v1511, v1513);
                            let v1592 = constructor_vec_unpacks_high(ctx, I32X4, v1589);
                            let v1593 = constructor_output_reg(ctx, v1592);
                            // Rule at src/isa/s390x/lower.isle line 2625.
                            return Some(v1593);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::LoadNoOffset {
            opcode: ref v1070,
            arg: v1071,
            flags: v1072,
        } => {
            match v1070 {
                &Opcode::Bitcast => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v170 = C::multi_lane(ctx, v3);
                        if let Some(v171) = v170 {
                            let v1073 = C::value_type(ctx, v1071);
                            let v1092 = C::multi_lane(ctx, v1073);
                            if let Some(v1093) = v1092 {
                                if v171.0 == v1093.0 {
                                    if v171.1 == v1093.1 {
                                        let v1085 = constructor_output_value(ctx, v1071);
                                        // Rule at src/isa/s390x/lower.isle line 1797.
                                        return Some(v1085);
                                    }
                                }
                            }
                        }
                        let v35 = C::vr128_ty(ctx, v3);
                        if let Some(v36) = v35 {
                            let v1073 = C::value_type(ctx, v1071);
                            let v1096 = C::vr128_ty(ctx, v1073);
                            if let Some(v1097) = v1096 {
                                let v1074 = C::put_in_reg(ctx, v1071);
                                let v1098 = &constructor_lane_order_from_memflags(ctx, v1072);
                                let v1099 = constructor_abi_vec_elt_rev(ctx, v1098, v1097, v1074);
                                let v1100 = constructor_abi_vec_elt_rev(ctx, v1098, v36, v1099);
                                let v1101 = constructor_output_reg(ctx, v1100);
                                // Rule at src/isa/s390x/lower.isle line 1807.
                                return Some(v1101);
                            }
                        }
                        let v1088 = C::ty_scalar_float(ctx, v3);
                        if let Some(v1089) = v1088 {
                            let v1073 = C::value_type(ctx, v1071);
                            let v1090 = C::ty_scalar_float(ctx, v1073);
                            if let Some(v1091) = v1090 {
                                let v1085 = constructor_output_value(ctx, v1071);
                                // Rule at src/isa/s390x/lower.isle line 1793.
                                return Some(v1085);
                            }
                        }
                        let v587 = C::gpr64_ty(ctx, v3);
                        if let Some(v588) = v587 {
                            let v1073 = C::value_type(ctx, v1071);
                            let v1086 = C::gpr64_ty(ctx, v1073);
                            if let Some(v1087) = v1086 {
                                let v1085 = constructor_output_value(ctx, v1071);
                                // Rule at src/isa/s390x/lower.isle line 1789.
                                return Some(v1085);
                            }
                        }
                        let v583 = C::gpr32_ty(ctx, v3);
                        if let Some(v584) = v583 {
                            let v1073 = C::value_type(ctx, v1071);
                            let v1083 = C::gpr32_ty(ctx, v1073);
                            if let Some(v1084) = v1083 {
                                let v1085 = constructor_output_value(ctx, v1071);
                                // Rule at src/isa/s390x/lower.isle line 1787.
                                return Some(v1085);
                            }
                        }
                        match v3 {
                            I32 => {
                                let v1073 = C::value_type(ctx, v1071);
                                if v1073 == F32 {
                                    let v1074 = C::put_in_reg(ctx, v1071);
                                    let v52 = C::zero_reg(ctx);
                                    let v1081 =
                                        constructor_vec_extract_lane(ctx, F32X4, v1074, 0x0, v52);
                                    let v1082 = constructor_output_reg(ctx, v1081);
                                    // Rule at src/isa/s390x/lower.isle line 1783.
                                    return Some(v1082);
                                }
                            }
                            I64 => {
                                let v1073 = C::value_type(ctx, v1071);
                                if v1073 == F64 {
                                    let v1074 = C::put_in_reg(ctx, v1071);
                                    let v52 = C::zero_reg(ctx);
                                    let v1077 =
                                        constructor_vec_extract_lane(ctx, F64X2, v1074, 0x0, v52);
                                    let v1078 = constructor_output_reg(ctx, v1077);
                                    // Rule at src/isa/s390x/lower.isle line 1775.
                                    return Some(v1078);
                                }
                            }
                            F32 => {
                                let v1073 = C::value_type(ctx, v1071);
                                if v1073 == I32 {
                                    let v1074 = C::put_in_reg(ctx, v1071);
                                    let v52 = C::zero_reg(ctx);
                                    let v1079 = constructor_vec_insert_lane_undef(
                                        ctx, F32X4, v1074, 0x0, v52,
                                    );
                                    let v1080 = constructor_output_reg(ctx, v1079);
                                    // Rule at src/isa/s390x/lower.isle line 1779.
                                    return Some(v1080);
                                }
                            }
                            F64 => {
                                let v1073 = C::value_type(ctx, v1071);
                                if v1073 == I64 {
                                    let v1074 = C::put_in_reg(ctx, v1071);
                                    let v52 = C::zero_reg(ctx);
                                    let v1075 = constructor_vec_insert_lane_undef(
                                        ctx, F64X2, v1074, 0x0, v52,
                                    );
                                    let v1076 = constructor_output_reg(ctx, v1075);
                                    // Rule at src/isa/s390x/lower.isle line 1771.
                                    return Some(v1076);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::AtomicLoad => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v1714 = C::zero_offset(ctx);
                                let v1715 = &constructor_lower_address(ctx, v1072, v1071, v1714);
                                let v1716 = constructor_zext32_mem(ctx, I8, v1715);
                                let v1717 = constructor_output_reg(ctx, v1716);
                                // Rule at src/isa/s390x/lower.isle line 3252.
                                return Some(v1717);
                            }
                            I16 => {
                                let v1718 = C::bigendian(ctx, v1072);
                                if let Some(v1719) = v1718 {
                                    let v1714 = C::zero_offset(ctx);
                                    let v1715 =
                                        &constructor_lower_address(ctx, v1072, v1071, v1714);
                                    let v1720 = constructor_zext32_mem(ctx, I16, v1715);
                                    let v1721 = constructor_output_reg(ctx, v1720);
                                    // Rule at src/isa/s390x/lower.isle line 3256.
                                    return Some(v1721);
                                }
                                let v1722 = C::littleendian(ctx, v1072);
                                if let Some(v1723) = v1722 {
                                    let v1714 = C::zero_offset(ctx);
                                    let v1715 =
                                        &constructor_lower_address(ctx, v1072, v1071, v1714);
                                    let v1724 = constructor_loadrev16(ctx, v1715);
                                    let v1725 = constructor_output_reg(ctx, v1724);
                                    // Rule at src/isa/s390x/lower.isle line 3260.
                                    return Some(v1725);
                                }
                            }
                            I32 => {
                                let v1718 = C::bigendian(ctx, v1072);
                                if let Some(v1719) = v1718 {
                                    let v1714 = C::zero_offset(ctx);
                                    let v1715 =
                                        &constructor_lower_address(ctx, v1072, v1071, v1714);
                                    let v1726 = constructor_load32(ctx, v1715);
                                    let v1727 = constructor_output_reg(ctx, v1726);
                                    // Rule at src/isa/s390x/lower.isle line 3264.
                                    return Some(v1727);
                                }
                                let v1722 = C::littleendian(ctx, v1072);
                                if let Some(v1723) = v1722 {
                                    let v1714 = C::zero_offset(ctx);
                                    let v1715 =
                                        &constructor_lower_address(ctx, v1072, v1071, v1714);
                                    let v1728 = constructor_loadrev32(ctx, v1715);
                                    let v1729 = constructor_output_reg(ctx, v1728);
                                    // Rule at src/isa/s390x/lower.isle line 3268.
                                    return Some(v1729);
                                }
                            }
                            I64 => {
                                let v1718 = C::bigendian(ctx, v1072);
                                if let Some(v1719) = v1718 {
                                    let v1714 = C::zero_offset(ctx);
                                    let v1715 =
                                        &constructor_lower_address(ctx, v1072, v1071, v1714);
                                    let v1730 = constructor_load64(ctx, v1715);
                                    let v1731 = constructor_output_reg(ctx, v1730);
                                    // Rule at src/isa/s390x/lower.isle line 3272.
                                    return Some(v1731);
                                }
                                let v1722 = C::littleendian(ctx, v1072);
                                if let Some(v1723) = v1722 {
                                    let v1714 = C::zero_offset(ctx);
                                    let v1715 =
                                        &constructor_lower_address(ctx, v1072, v1071, v1714);
                                    let v1732 = constructor_loadrev64(ctx, v1715);
                                    let v1733 = constructor_output_reg(ctx, v1732);
                                    // Rule at src/isa/s390x/lower.isle line 3276.
                                    return Some(v1733);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::MultiAry {
            opcode: ref v2006,
            args: v2007,
        } => {
            if let &Opcode::Return = v2006 {
                let v2008 = C::value_list_slice(ctx, v2007);
                let v2010 = C::value_slice_len(ctx, v2008);
                let v2011 = C::range(ctx, 0x0, v2010);
                let v2012 = constructor_lower_return(ctx, v2011, v2008);
                // Rule at src/isa/s390x/lower.isle line 3941.
                return Some(v2012);
            }
        }
        &InstructionData::NullAry { opcode: ref v29 } => {
            match v29 {
                &Opcode::Debugtrap => {
                    let v1918 = &constructor_debugtrap_impl(ctx);
                    let v1919 = constructor_side_effect(ctx, v1918);
                    // Rule at src/isa/s390x/lower.isle line 3867.
                    return Some(v1919);
                }
                &Opcode::GetFramePointer => {
                    let v2070 = &C::memarg_stack_off(ctx, 0x0, 0x0);
                    let v2071 = constructor_load64(ctx, v2070);
                    let v2072 = constructor_output_reg(ctx, v2071);
                    // Rule at src/isa/s390x/lower.isle line 4027.
                    return Some(v2072);
                }
                &Opcode::GetStackPointer => {
                    let v2068 = constructor_sp(ctx);
                    let v2069 = constructor_output_reg(ctx, v2068);
                    // Rule at src/isa/s390x/lower.isle line 4024.
                    return Some(v2069);
                }
                &Opcode::GetReturnAddress => {
                    let v2074 = &C::memarg_initial_sp_offset(ctx, 0x70);
                    let v2075 = constructor_load64(ctx, v2074);
                    let v2076 = constructor_output_reg(ctx, v2075);
                    // Rule at src/isa/s390x/lower.isle line 4030.
                    return Some(v2076);
                }
                &Opcode::Null => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v31 = constructor_imm(ctx, v3, 0x0);
                        let v32 = constructor_output_reg(ctx, v31);
                        // Rule at src/isa/s390x/lower.isle line 39.
                        return Some(v32);
                    }
                }
                &Opcode::Nop => {
                    let v33 = C::invalid_reg(ctx);
                    let v34 = constructor_output_reg(ctx, v33);
                    // Rule at src/isa/s390x/lower.isle line 45.
                    return Some(v34);
                }
                &Opcode::Fence => {
                    let v1749 = &constructor_fence_impl(ctx);
                    let v1750 = constructor_side_effect(ctx, v1749);
                    // Rule at src/isa/s390x/lower.isle line 3308.
                    return Some(v1750);
                }
                _ => {}
            }
        }
        &InstructionData::Shuffle {
            opcode: ref v1250,
            args: ref v1251,
            imm: v1252,
        } => {
            if let &Opcode::Shuffle = v1250 {
                let v1256 = C::u128_from_immediate(ctx, v1252);
                if let Some(v1257) = v1256 {
                    let v1258 = C::shuffle_mask_from_u128(ctx, v1257);
                    match v1258.1 {
                        0xF0F => {
                            let v1273 = C::u64_pair_split(ctx, v1258.0);
                            let v1276 = C::u32_pair_split(ctx, v1273.0);
                            let v1288 = C::u16_pair_split(ctx, v1276.1);
                            let v1291 = C::u8_pair_split(ctx, v1288.0);
                            match v1291.0 {
                                0x0 => {
                                    if v1291.1 == 0x1 {
                                        let v1294 = C::u8_pair_split(ctx, v1288.1);
                                        if v1294.0 == 0x2 {
                                            if v1294.1 == 0x3 {
                                                let v1297 = C::u32_pair_split(ctx, v1273.1);
                                                let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                if v1312.0 == 0x4 {
                                                    if v1312.1 == 0x5 {
                                                        let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                        if v1315.0 == 0x6 {
                                                            if v1315.1 == 0x7 {
                                                                let v1253 = C::unpack_value_array_2(
                                                                    ctx, v1251,
                                                                );
                                                                let v1268 =
                                                                    C::put_in_reg(ctx, v1253.0);
                                                                let v1407 =
                                                                    constructor_vec_unpacku_high(
                                                                        ctx, I32X4, v1268,
                                                                    );
                                                                let v1408 = constructor_output_reg(
                                                                    ctx, v1407,
                                                                );
                                                                // Rule at src/isa/s390x/lower.isle line 2204.
                                                                return Some(v1408);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x8 => {
                                    if v1291.1 == 0x9 {
                                        let v1294 = C::u8_pair_split(ctx, v1288.1);
                                        if v1294.0 == 0xA {
                                            if v1294.1 == 0xB {
                                                let v1297 = C::u32_pair_split(ctx, v1273.1);
                                                let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                if v1312.0 == 0xC {
                                                    if v1312.1 == 0xD {
                                                        let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                        if v1315.0 == 0xE {
                                                            if v1315.1 == 0xF {
                                                                let v1253 = C::unpack_value_array_2(
                                                                    ctx, v1251,
                                                                );
                                                                let v1268 =
                                                                    C::put_in_reg(ctx, v1253.0);
                                                                let v1419 =
                                                                    constructor_vec_unpacku_low(
                                                                        ctx, I32X4, v1268,
                                                                    );
                                                                let v1420 = constructor_output_reg(
                                                                    ctx, v1419,
                                                                );
                                                                // Rule at src/isa/s390x/lower.isle line 2218.
                                                                return Some(v1420);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x10 => {
                                    if v1291.1 == 0x11 {
                                        let v1294 = C::u8_pair_split(ctx, v1288.1);
                                        if v1294.0 == 0x12 {
                                            if v1294.1 == 0x13 {
                                                let v1297 = C::u32_pair_split(ctx, v1273.1);
                                                let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                if v1312.0 == 0x14 {
                                                    if v1312.1 == 0x15 {
                                                        let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                        if v1315.0 == 0x16 {
                                                            if v1315.1 == 0x17 {
                                                                let v1253 = C::unpack_value_array_2(
                                                                    ctx, v1251,
                                                                );
                                                                let v1326 =
                                                                    C::put_in_reg(ctx, v1253.1);
                                                                let v1413 =
                                                                    constructor_vec_unpacku_high(
                                                                        ctx, I32X4, v1326,
                                                                    );
                                                                let v1414 = constructor_output_reg(
                                                                    ctx, v1413,
                                                                );
                                                                // Rule at src/isa/s390x/lower.isle line 2210.
                                                                return Some(v1414);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x18 => {
                                    if v1291.1 == 0x19 {
                                        let v1294 = C::u8_pair_split(ctx, v1288.1);
                                        if v1294.0 == 0x1A {
                                            if v1294.1 == 0x1B {
                                                let v1297 = C::u32_pair_split(ctx, v1273.1);
                                                let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                if v1312.0 == 0x1C {
                                                    if v1312.1 == 0x1D {
                                                        let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                        if v1315.0 == 0x1E {
                                                            if v1315.1 == 0x1F {
                                                                let v1253 = C::unpack_value_array_2(
                                                                    ctx, v1251,
                                                                );
                                                                let v1326 =
                                                                    C::put_in_reg(ctx, v1253.1);
                                                                let v1425 =
                                                                    constructor_vec_unpacku_low(
                                                                        ctx, I32X4, v1326,
                                                                    );
                                                                let v1426 = constructor_output_reg(
                                                                    ctx, v1425,
                                                                );
                                                                // Rule at src/isa/s390x/lower.isle line 2224.
                                                                return Some(v1426);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        0x3333 => {
                            let v1273 = C::u64_pair_split(ctx, v1258.0);
                            let v1276 = C::u32_pair_split(ctx, v1273.0);
                            let v1279 = C::u16_pair_split(ctx, v1276.0);
                            let v1285 = C::u8_pair_split(ctx, v1279.1);
                            match v1285.0 {
                                0x0 => {
                                    if v1285.1 == 0x1 {
                                        let v1288 = C::u16_pair_split(ctx, v1276.1);
                                        let v1294 = C::u8_pair_split(ctx, v1288.1);
                                        if v1294.0 == 0x2 {
                                            if v1294.1 == 0x3 {
                                                let v1297 = C::u32_pair_split(ctx, v1273.1);
                                                let v1300 = C::u16_pair_split(ctx, v1297.0);
                                                let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                if v1306.0 == 0x4 {
                                                    if v1306.1 == 0x5 {
                                                        let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                        let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                        if v1315.0 == 0x6 {
                                                            if v1315.1 == 0x7 {
                                                                let v1253 = C::unpack_value_array_2(
                                                                    ctx, v1251,
                                                                );
                                                                let v1268 =
                                                                    C::put_in_reg(ctx, v1253.0);
                                                                let v1409 =
                                                                    constructor_vec_unpacku_high(
                                                                        ctx, I16X8, v1268,
                                                                    );
                                                                let v1410 = constructor_output_reg(
                                                                    ctx, v1409,
                                                                );
                                                                // Rule at src/isa/s390x/lower.isle line 2206.
                                                                return Some(v1410);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x8 => {
                                    if v1285.1 == 0x9 {
                                        let v1288 = C::u16_pair_split(ctx, v1276.1);
                                        let v1294 = C::u8_pair_split(ctx, v1288.1);
                                        if v1294.0 == 0xA {
                                            if v1294.1 == 0xB {
                                                let v1297 = C::u32_pair_split(ctx, v1273.1);
                                                let v1300 = C::u16_pair_split(ctx, v1297.0);
                                                let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                if v1306.0 == 0xC {
                                                    if v1306.1 == 0xD {
                                                        let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                        let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                        if v1315.0 == 0xE {
                                                            if v1315.1 == 0xF {
                                                                let v1253 = C::unpack_value_array_2(
                                                                    ctx, v1251,
                                                                );
                                                                let v1268 =
                                                                    C::put_in_reg(ctx, v1253.0);
                                                                let v1421 =
                                                                    constructor_vec_unpacku_low(
                                                                        ctx, I16X8, v1268,
                                                                    );
                                                                let v1422 = constructor_output_reg(
                                                                    ctx, v1421,
                                                                );
                                                                // Rule at src/isa/s390x/lower.isle line 2220.
                                                                return Some(v1422);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x10 => {
                                    if v1285.1 == 0x11 {
                                        let v1288 = C::u16_pair_split(ctx, v1276.1);
                                        let v1294 = C::u8_pair_split(ctx, v1288.1);
                                        if v1294.0 == 0x12 {
                                            if v1294.1 == 0x13 {
                                                let v1297 = C::u32_pair_split(ctx, v1273.1);
                                                let v1300 = C::u16_pair_split(ctx, v1297.0);
                                                let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                if v1306.0 == 0x14 {
                                                    if v1306.1 == 0x15 {
                                                        let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                        let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                        if v1315.0 == 0x16 {
                                                            if v1315.1 == 0x17 {
                                                                let v1253 = C::unpack_value_array_2(
                                                                    ctx, v1251,
                                                                );
                                                                let v1326 =
                                                                    C::put_in_reg(ctx, v1253.1);
                                                                let v1415 =
                                                                    constructor_vec_unpacku_high(
                                                                        ctx, I16X8, v1326,
                                                                    );
                                                                let v1416 = constructor_output_reg(
                                                                    ctx, v1415,
                                                                );
                                                                // Rule at src/isa/s390x/lower.isle line 2212.
                                                                return Some(v1416);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x18 => {
                                    if v1285.1 == 0x19 {
                                        let v1288 = C::u16_pair_split(ctx, v1276.1);
                                        let v1294 = C::u8_pair_split(ctx, v1288.1);
                                        if v1294.0 == 0x1A {
                                            if v1294.1 == 0x1B {
                                                let v1297 = C::u32_pair_split(ctx, v1273.1);
                                                let v1300 = C::u16_pair_split(ctx, v1297.0);
                                                let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                if v1306.0 == 0x1C {
                                                    if v1306.1 == 0x1D {
                                                        let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                        let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                        if v1315.0 == 0x1E {
                                                            if v1315.1 == 0x1F {
                                                                let v1253 = C::unpack_value_array_2(
                                                                    ctx, v1251,
                                                                );
                                                                let v1326 =
                                                                    C::put_in_reg(ctx, v1253.1);
                                                                let v1427 =
                                                                    constructor_vec_unpacku_low(
                                                                        ctx, I16X8, v1326,
                                                                    );
                                                                let v1428 = constructor_output_reg(
                                                                    ctx, v1427,
                                                                );
                                                                // Rule at src/isa/s390x/lower.isle line 2226.
                                                                return Some(v1428);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        0x5555 => {
                            let v1273 = C::u64_pair_split(ctx, v1258.0);
                            let v1276 = C::u32_pair_split(ctx, v1273.0);
                            let v1279 = C::u16_pair_split(ctx, v1276.0);
                            let v1282 = C::u8_pair_split(ctx, v1279.0);
                            match v1282.1 {
                                0x0 => {
                                    let v1285 = C::u8_pair_split(ctx, v1279.1);
                                    if v1285.1 == 0x1 {
                                        let v1288 = C::u16_pair_split(ctx, v1276.1);
                                        let v1291 = C::u8_pair_split(ctx, v1288.0);
                                        if v1291.1 == 0x2 {
                                            let v1294 = C::u8_pair_split(ctx, v1288.1);
                                            if v1294.1 == 0x3 {
                                                let v1297 = C::u32_pair_split(ctx, v1273.1);
                                                let v1300 = C::u16_pair_split(ctx, v1297.0);
                                                let v1303 = C::u8_pair_split(ctx, v1300.0);
                                                if v1303.1 == 0x4 {
                                                    let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                    if v1306.1 == 0x5 {
                                                        let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                        let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                        if v1312.1 == 0x6 {
                                                            let v1315 =
                                                                C::u8_pair_split(ctx, v1309.1);
                                                            if v1315.1 == 0x7 {
                                                                let v1253 = C::unpack_value_array_2(
                                                                    ctx, v1251,
                                                                );
                                                                let v1268 =
                                                                    C::put_in_reg(ctx, v1253.0);
                                                                let v1411 =
                                                                    constructor_vec_unpacku_high(
                                                                        ctx, I8X16, v1268,
                                                                    );
                                                                let v1412 = constructor_output_reg(
                                                                    ctx, v1411,
                                                                );
                                                                // Rule at src/isa/s390x/lower.isle line 2208.
                                                                return Some(v1412);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x8 => {
                                    let v1285 = C::u8_pair_split(ctx, v1279.1);
                                    if v1285.1 == 0x9 {
                                        let v1288 = C::u16_pair_split(ctx, v1276.1);
                                        let v1291 = C::u8_pair_split(ctx, v1288.0);
                                        if v1291.1 == 0xA {
                                            let v1294 = C::u8_pair_split(ctx, v1288.1);
                                            if v1294.1 == 0xB {
                                                let v1297 = C::u32_pair_split(ctx, v1273.1);
                                                let v1300 = C::u16_pair_split(ctx, v1297.0);
                                                let v1303 = C::u8_pair_split(ctx, v1300.0);
                                                if v1303.1 == 0xC {
                                                    let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                    if v1306.1 == 0xD {
                                                        let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                        let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                        if v1312.1 == 0xE {
                                                            let v1315 =
                                                                C::u8_pair_split(ctx, v1309.1);
                                                            if v1315.1 == 0xF {
                                                                let v1253 = C::unpack_value_array_2(
                                                                    ctx, v1251,
                                                                );
                                                                let v1268 =
                                                                    C::put_in_reg(ctx, v1253.0);
                                                                let v1423 =
                                                                    constructor_vec_unpacku_low(
                                                                        ctx, I8X16, v1268,
                                                                    );
                                                                let v1424 = constructor_output_reg(
                                                                    ctx, v1423,
                                                                );
                                                                // Rule at src/isa/s390x/lower.isle line 2222.
                                                                return Some(v1424);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x10 => {
                                    let v1285 = C::u8_pair_split(ctx, v1279.1);
                                    if v1285.1 == 0x11 {
                                        let v1288 = C::u16_pair_split(ctx, v1276.1);
                                        let v1291 = C::u8_pair_split(ctx, v1288.0);
                                        if v1291.1 == 0x12 {
                                            let v1294 = C::u8_pair_split(ctx, v1288.1);
                                            if v1294.1 == 0x13 {
                                                let v1297 = C::u32_pair_split(ctx, v1273.1);
                                                let v1300 = C::u16_pair_split(ctx, v1297.0);
                                                let v1303 = C::u8_pair_split(ctx, v1300.0);
                                                if v1303.1 == 0x14 {
                                                    let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                    if v1306.1 == 0x15 {
                                                        let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                        let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                        if v1312.1 == 0x16 {
                                                            let v1315 =
                                                                C::u8_pair_split(ctx, v1309.1);
                                                            if v1315.1 == 0x17 {
                                                                let v1253 = C::unpack_value_array_2(
                                                                    ctx, v1251,
                                                                );
                                                                let v1326 =
                                                                    C::put_in_reg(ctx, v1253.1);
                                                                let v1417 =
                                                                    constructor_vec_unpacku_high(
                                                                        ctx, I8X16, v1326,
                                                                    );
                                                                let v1418 = constructor_output_reg(
                                                                    ctx, v1417,
                                                                );
                                                                // Rule at src/isa/s390x/lower.isle line 2214.
                                                                return Some(v1418);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x18 => {
                                    let v1285 = C::u8_pair_split(ctx, v1279.1);
                                    if v1285.1 == 0x19 {
                                        let v1288 = C::u16_pair_split(ctx, v1276.1);
                                        let v1291 = C::u8_pair_split(ctx, v1288.0);
                                        if v1291.1 == 0x1A {
                                            let v1294 = C::u8_pair_split(ctx, v1288.1);
                                            if v1294.1 == 0x1B {
                                                let v1297 = C::u32_pair_split(ctx, v1273.1);
                                                let v1300 = C::u16_pair_split(ctx, v1297.0);
                                                let v1303 = C::u8_pair_split(ctx, v1300.0);
                                                if v1303.1 == 0x1C {
                                                    let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                    if v1306.1 == 0x1D {
                                                        let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                        let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                        if v1312.1 == 0x1E {
                                                            let v1315 =
                                                                C::u8_pair_split(ctx, v1309.1);
                                                            if v1315.1 == 0x1F {
                                                                let v1253 = C::unpack_value_array_2(
                                                                    ctx, v1251,
                                                                );
                                                                let v1326 =
                                                                    C::put_in_reg(ctx, v1253.1);
                                                                let v1429 =
                                                                    constructor_vec_unpacku_low(
                                                                        ctx, I8X16, v1326,
                                                                    );
                                                                let v1430 = constructor_output_reg(
                                                                    ctx, v1429,
                                                                );
                                                                // Rule at src/isa/s390x/lower.isle line 2228.
                                                                return Some(v1430);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        0xFFFF => {
                            let v1273 = C::u64_pair_split(ctx, v1258.0);
                            let v1276 = C::u32_pair_split(ctx, v1273.0);
                            let v1279 = C::u16_pair_split(ctx, v1276.0);
                            let v1282 = C::u8_pair_split(ctx, v1279.0);
                            match v1282.0 {
                                0x0 => {
                                    match v1282.1 {
                                        0x0 => {
                                            let v1285 = C::u8_pair_split(ctx, v1279.1);
                                            if v1285.0 == 0x1 {
                                                if v1285.1 == 0x1 {
                                                    let v1288 = C::u16_pair_split(ctx, v1276.1);
                                                    let v1291 = C::u8_pair_split(ctx, v1288.0);
                                                    if v1291.0 == 0x2 {
                                                        if v1291.1 == 0x2 {
                                                            let v1294 =
                                                                C::u8_pair_split(ctx, v1288.1);
                                                            if v1294.0 == 0x3 {
                                                                if v1294.1 == 0x3 {
                                                                    let v1297 = C::u32_pair_split(
                                                                        ctx, v1273.1,
                                                                    );
                                                                    let v1300 = C::u16_pair_split(
                                                                        ctx, v1297.0,
                                                                    );
                                                                    let v1303 = C::u8_pair_split(
                                                                        ctx, v1300.0,
                                                                    );
                                                                    if v1303.0 == 0x4 {
                                                                        if v1303.1 == 0x4 {
                                                                            let v1306 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1300.1,
                                                                                );
                                                                            if v1306.0 == 0x5 {
                                                                                if v1306.1 == 0x5 {
                                                                                    let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                    let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                    if v1312.0
                                                                                        == 0x6
                                                                                    {
                                                                                        if v1312.1
                                                                                            == 0x6
                                                                                        {
                                                                                            let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                            if v1315.0 == 0x7 {
                                                                                                if v1315.1 == 0x7 {
                                                                                                    let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                    let v1268 = C::put_in_reg(ctx, v1253.0);
                                                                                                    let v1262 = C::put_in_reg(ctx, v1253.0);
                                                                                                    let v1341 = constructor_vec_merge_high(ctx, I8X16, v1268, v1262);
                                                                                                    let v1342 = constructor_output_reg(ctx, v1341);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2132.
                                                                                                    return Some(v1342);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x1 => {
                                            let v1285 = C::u8_pair_split(ctx, v1279.1);
                                            match v1285.0 {
                                                0x0 => {
                                                    if v1285.1 == 0x1 {
                                                        let v1288 = C::u16_pair_split(ctx, v1276.1);
                                                        let v1291 = C::u8_pair_split(ctx, v1288.0);
                                                        if v1291.0 == 0x2 {
                                                            if v1291.1 == 0x3 {
                                                                let v1294 =
                                                                    C::u8_pair_split(ctx, v1288.1);
                                                                if v1294.0 == 0x2 {
                                                                    if v1294.1 == 0x3 {
                                                                        let v1297 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1273.1,
                                                                            );
                                                                        let v1300 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1297.0,
                                                                            );
                                                                        let v1303 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1300.0,
                                                                            );
                                                                        if v1303.0 == 0x4 {
                                                                            if v1303.1 == 0x5 {
                                                                                let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                                                if v1306.0 == 0x4 {
                                                                                    if v1306.1
                                                                                        == 0x5
                                                                                    {
                                                                                        let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                        let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                        if v1312.0
                                                                                            == 0x6
                                                                                        {
                                                                                            if v1312.1 == 0x7 {
                                                                                                let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                                if v1315.0 == 0x6 {
                                                                                                    if v1315.1 == 0x7 {
                                                                                                        let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                        let v1268 = C::put_in_reg(ctx, v1253.0);
                                                                                                        let v1262 = C::put_in_reg(ctx, v1253.0);
                                                                                                        let v1339 = constructor_vec_merge_high(ctx, I16X8, v1268, v1262);
                                                                                                        let v1340 = constructor_output_reg(ctx, v1339);
                                                                                                        // Rule at src/isa/s390x/lower.isle line 2130.
                                                                                                        return Some(v1340);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                0x2 => {
                                                    if v1285.1 == 0x3 {
                                                        let v1288 = C::u16_pair_split(ctx, v1276.1);
                                                        let v1291 = C::u8_pair_split(ctx, v1288.0);
                                                        match v1291.0 {
                                                            0x0 => {
                                                                if v1291.1 == 0x1 {
                                                                    let v1294 = C::u8_pair_split(
                                                                        ctx, v1288.1,
                                                                    );
                                                                    if v1294.0 == 0x2 {
                                                                        if v1294.1 == 0x3 {
                                                                            let v1297 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1273.1,
                                                                                );
                                                                            let v1300 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1297.0,
                                                                                );
                                                                            let v1303 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1300.0,
                                                                                );
                                                                            if v1303.0 == 0x4 {
                                                                                if v1303.1 == 0x5 {
                                                                                    let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                                                    if v1306.0
                                                                                        == 0x6
                                                                                    {
                                                                                        if v1306.1
                                                                                            == 0x7
                                                                                        {
                                                                                            let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                            let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                            if v1312.0 == 0x4 {
                                                                                                if v1312.1 == 0x5 {
                                                                                                    let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                                    if v1315.0 == 0x6 {
                                                                                                        if v1315.1 == 0x7 {
                                                                                                            let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                            let v1268 = C::put_in_reg(ctx, v1253.0);
                                                                                                            let v1262 = C::put_in_reg(ctx, v1253.0);
                                                                                                            let v1337 = constructor_vec_merge_high(ctx, I32X4, v1268, v1262);
                                                                                                            let v1338 = constructor_output_reg(ctx, v1337);
                                                                                                            // Rule at src/isa/s390x/lower.isle line 2128.
                                                                                                            return Some(v1338);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x4 => {
                                                                if v1291.1 == 0x5 {
                                                                    let v1294 = C::u8_pair_split(
                                                                        ctx, v1288.1,
                                                                    );
                                                                    if v1294.0 == 0x6 {
                                                                        if v1294.1 == 0x7 {
                                                                            let v1297 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1273.1,
                                                                                );
                                                                            let v1300 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1297.0,
                                                                                );
                                                                            let v1303 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1300.0,
                                                                                );
                                                                            match v1303.0 {
                                                                                0x0 => {
                                                                                    if v1303.1
                                                                                        == 0x1
                                                                                    {
                                                                                        let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                                                        if v1306.0
                                                                                            == 0x2
                                                                                        {
                                                                                            if v1306.1 == 0x3 {
                                                                                                let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                                let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                                if v1312.0 == 0x4 {
                                                                                                    if v1312.1 == 0x5 {
                                                                                                        let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                                        if v1315.0 == 0x6 {
                                                                                                            if v1315.1 == 0x7 {
                                                                                                                let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                                let v1268 = C::put_in_reg(ctx, v1253.0);
                                                                                                                let v1262 = C::put_in_reg(ctx, v1253.0);
                                                                                                                let v1335 = constructor_vec_merge_high(ctx, I64X2, v1268, v1262);
                                                                                                                let v1336 = constructor_output_reg(ctx, v1335);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2126.
                                                                                                                return Some(v1336);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x8 => {
                                                                                    if v1303.1
                                                                                        == 0x9
                                                                                    {
                                                                                        let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                                                        if v1306.0
                                                                                            == 0xA
                                                                                        {
                                                                                            if v1306.1 == 0xB {
                                                                                                let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                                let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                                if v1312.0 == 0xC {
                                                                                                    if v1312.1 == 0xD {
                                                                                                        let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                                        if v1315.0 == 0xE {
                                                                                                            if v1315.1 == 0xF {
                                                                                                                let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                                let v1268 = C::put_in_reg(ctx, v1253.0);
                                                                                                                let v1262 = C::put_in_reg(ctx, v1253.0);
                                                                                                                let v1439 = constructor_vec_permute_dw_imm(ctx, I8X16, v1268, 0x0, v1262, 0x1);
                                                                                                                let v1440 = constructor_output_reg(ctx, v1439);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2240.
                                                                                                                return Some(v1440);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x10 => {
                                                                                    if v1303.1
                                                                                        == 0x11
                                                                                    {
                                                                                        let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                                                        if v1306.0
                                                                                            == 0x12
                                                                                        {
                                                                                            if v1306.1 == 0x13 {
                                                                                                let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                                let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                                if v1312.0 == 0x14 {
                                                                                                    if v1312.1 == 0x15 {
                                                                                                        let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                                        if v1315.0 == 0x16 {
                                                                                                            if v1315.1 == 0x17 {
                                                                                                                let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                                let v1268 = C::put_in_reg(ctx, v1253.0);
                                                                                                                let v1269 = C::put_in_reg(ctx, v1253.1);
                                                                                                                let v1318 = constructor_vec_merge_high(ctx, I64X2, v1268, v1269);
                                                                                                                let v1319 = constructor_output_reg(ctx, v1318);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2110.
                                                                                                                return Some(v1319);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x18 => {
                                                                                    if v1303.1
                                                                                        == 0x19
                                                                                    {
                                                                                        let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                                                        if v1306.0
                                                                                            == 0x1A
                                                                                        {
                                                                                            if v1306.1 == 0x1B {
                                                                                                let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                                let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                                if v1312.0 == 0x1C {
                                                                                                    if v1312.1 == 0x1D {
                                                                                                        let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                                        if v1315.0 == 0x1E {
                                                                                                            if v1315.1 == 0x1F {
                                                                                                                let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                                let v1268 = C::put_in_reg(ctx, v1253.0);
                                                                                                                let v1269 = C::put_in_reg(ctx, v1253.1);
                                                                                                                let v1431 = constructor_vec_permute_dw_imm(ctx, I8X16, v1268, 0x0, v1269, 0x1);
                                                                                                                let v1432 = constructor_output_reg(ctx, v1431);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2232.
                                                                                                                return Some(v1432);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x10 => {
                                                                if v1291.1 == 0x11 {
                                                                    let v1294 = C::u8_pair_split(
                                                                        ctx, v1288.1,
                                                                    );
                                                                    if v1294.0 == 0x12 {
                                                                        if v1294.1 == 0x13 {
                                                                            let v1297 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1273.1,
                                                                                );
                                                                            let v1300 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1297.0,
                                                                                );
                                                                            let v1303 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1300.0,
                                                                                );
                                                                            if v1303.0 == 0x4 {
                                                                                if v1303.1 == 0x5 {
                                                                                    let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                                                    if v1306.0
                                                                                        == 0x6
                                                                                    {
                                                                                        if v1306.1
                                                                                            == 0x7
                                                                                        {
                                                                                            let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                            let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                            if v1312.0 == 0x14 {
                                                                                                if v1312.1 == 0x15 {
                                                                                                    let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                                    if v1315.0 == 0x16 {
                                                                                                        if v1315.1 == 0x17 {
                                                                                                            let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                            let v1268 = C::put_in_reg(ctx, v1253.0);
                                                                                                            let v1269 = C::put_in_reg(ctx, v1253.1);
                                                                                                            let v1320 = constructor_vec_merge_high(ctx, I32X4, v1268, v1269);
                                                                                                            let v1321 = constructor_output_reg(ctx, v1320);
                                                                                                            // Rule at src/isa/s390x/lower.isle line 2112.
                                                                                                            return Some(v1321);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                0x10 => {
                                                    if v1285.1 == 0x11 {
                                                        let v1288 = C::u16_pair_split(ctx, v1276.1);
                                                        let v1291 = C::u8_pair_split(ctx, v1288.0);
                                                        if v1291.0 == 0x2 {
                                                            if v1291.1 == 0x3 {
                                                                let v1294 =
                                                                    C::u8_pair_split(ctx, v1288.1);
                                                                if v1294.0 == 0x12 {
                                                                    if v1294.1 == 0x13 {
                                                                        let v1297 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1273.1,
                                                                            );
                                                                        let v1300 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1297.0,
                                                                            );
                                                                        let v1303 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1300.0,
                                                                            );
                                                                        if v1303.0 == 0x4 {
                                                                            if v1303.1 == 0x5 {
                                                                                let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                                                if v1306.0 == 0x14 {
                                                                                    if v1306.1
                                                                                        == 0x15
                                                                                    {
                                                                                        let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                        let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                        if v1312.0
                                                                                            == 0x6
                                                                                        {
                                                                                            if v1312.1 == 0x7 {
                                                                                                let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                                if v1315.0 == 0x16 {
                                                                                                    if v1315.1 == 0x17 {
                                                                                                        let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                        let v1268 = C::put_in_reg(ctx, v1253.0);
                                                                                                        let v1269 = C::put_in_reg(ctx, v1253.1);
                                                                                                        let v1322 = constructor_vec_merge_high(ctx, I16X8, v1268, v1269);
                                                                                                        let v1323 = constructor_output_reg(ctx, v1322);
                                                                                                        // Rule at src/isa/s390x/lower.isle line 2114.
                                                                                                        return Some(v1323);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        0x10 => {
                                            let v1285 = C::u8_pair_split(ctx, v1279.1);
                                            if v1285.0 == 0x1 {
                                                if v1285.1 == 0x11 {
                                                    let v1288 = C::u16_pair_split(ctx, v1276.1);
                                                    let v1291 = C::u8_pair_split(ctx, v1288.0);
                                                    if v1291.0 == 0x2 {
                                                        if v1291.1 == 0x12 {
                                                            let v1294 =
                                                                C::u8_pair_split(ctx, v1288.1);
                                                            if v1294.0 == 0x3 {
                                                                if v1294.1 == 0x13 {
                                                                    let v1297 = C::u32_pair_split(
                                                                        ctx, v1273.1,
                                                                    );
                                                                    let v1300 = C::u16_pair_split(
                                                                        ctx, v1297.0,
                                                                    );
                                                                    let v1303 = C::u8_pair_split(
                                                                        ctx, v1300.0,
                                                                    );
                                                                    if v1303.0 == 0x4 {
                                                                        if v1303.1 == 0x14 {
                                                                            let v1306 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1300.1,
                                                                                );
                                                                            if v1306.0 == 0x5 {
                                                                                if v1306.1 == 0x15 {
                                                                                    let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                    let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                    if v1312.0
                                                                                        == 0x6
                                                                                    {
                                                                                        if v1312.1
                                                                                            == 0x16
                                                                                        {
                                                                                            let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                            if v1315.0 == 0x7 {
                                                                                                if v1315.1 == 0x17 {
                                                                                                    let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                    let v1268 = C::put_in_reg(ctx, v1253.0);
                                                                                                    let v1269 = C::put_in_reg(ctx, v1253.1);
                                                                                                    let v1324 = constructor_vec_merge_high(ctx, I8X16, v1268, v1269);
                                                                                                    let v1325 = constructor_output_reg(ctx, v1324);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2116.
                                                                                                    return Some(v1325);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                0x1 => {
                                    if v1282.1 == 0x3 {
                                        let v1285 = C::u8_pair_split(ctx, v1279.1);
                                        if v1285.0 == 0x5 {
                                            if v1285.1 == 0x7 {
                                                let v1288 = C::u16_pair_split(ctx, v1276.1);
                                                let v1291 = C::u8_pair_split(ctx, v1288.0);
                                                if v1291.0 == 0x9 {
                                                    if v1291.1 == 0xB {
                                                        let v1294 = C::u8_pair_split(ctx, v1288.1);
                                                        if v1294.0 == 0xD {
                                                            if v1294.1 == 0xF {
                                                                let v1297 =
                                                                    C::u32_pair_split(ctx, v1273.1);
                                                                let v1300 =
                                                                    C::u16_pair_split(ctx, v1297.0);
                                                                let v1303 =
                                                                    C::u8_pair_split(ctx, v1300.0);
                                                                match v1303.0 {
                                                                    0x1 => {
                                                                        if v1303.1 == 0x3 {
                                                                            let v1306 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1300.1,
                                                                                );
                                                                            if v1306.0 == 0x5 {
                                                                                if v1306.1 == 0x7 {
                                                                                    let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                    let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                    if v1312.0
                                                                                        == 0x9
                                                                                    {
                                                                                        if v1312.1
                                                                                            == 0xB
                                                                                        {
                                                                                            let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                            if v1315.0 == 0xD {
                                                                                                if v1315.1 == 0xF {
                                                                                                    let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                    let v1268 = C::put_in_reg(ctx, v1253.0);
                                                                                                    let v1262 = C::put_in_reg(ctx, v1253.0);
                                                                                                    let v1399 = constructor_vec_pack(ctx, I16X8, v1268, v1262);
                                                                                                    let v1400 = constructor_output_reg(ctx, v1399);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2194.
                                                                                                    return Some(v1400);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    0x11 => {
                                                                        if v1303.1 == 0x13 {
                                                                            let v1306 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1300.1,
                                                                                );
                                                                            if v1306.0 == 0x15 {
                                                                                if v1306.1 == 0x17 {
                                                                                    let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                    let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                    if v1312.0
                                                                                        == 0x19
                                                                                    {
                                                                                        if v1312.1
                                                                                            == 0x1B
                                                                                        {
                                                                                            let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                            if v1315.0 == 0x1D {
                                                                                                if v1315.1 == 0x1F {
                                                                                                    let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                    let v1268 = C::put_in_reg(ctx, v1253.0);
                                                                                                    let v1269 = C::put_in_reg(ctx, v1253.1);
                                                                                                    let v1387 = constructor_vec_pack(ctx, I16X8, v1268, v1269);
                                                                                                    let v1388 = constructor_output_reg(ctx, v1387);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2182.
                                                                                                    return Some(v1388);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x2 => {
                                    if v1282.1 == 0x3 {
                                        let v1285 = C::u8_pair_split(ctx, v1279.1);
                                        if v1285.0 == 0x6 {
                                            if v1285.1 == 0x7 {
                                                let v1288 = C::u16_pair_split(ctx, v1276.1);
                                                let v1291 = C::u8_pair_split(ctx, v1288.0);
                                                if v1291.0 == 0xA {
                                                    if v1291.1 == 0xB {
                                                        let v1294 = C::u8_pair_split(ctx, v1288.1);
                                                        if v1294.0 == 0xE {
                                                            if v1294.1 == 0xF {
                                                                let v1297 =
                                                                    C::u32_pair_split(ctx, v1273.1);
                                                                let v1300 =
                                                                    C::u16_pair_split(ctx, v1297.0);
                                                                let v1303 =
                                                                    C::u8_pair_split(ctx, v1300.0);
                                                                match v1303.0 {
                                                                    0x2 => {
                                                                        if v1303.1 == 0x3 {
                                                                            let v1306 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1300.1,
                                                                                );
                                                                            if v1306.0 == 0x6 {
                                                                                if v1306.1 == 0x7 {
                                                                                    let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                    let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                    if v1312.0
                                                                                        == 0xA
                                                                                    {
                                                                                        if v1312.1
                                                                                            == 0xB
                                                                                        {
                                                                                            let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                            if v1315.0 == 0xE {
                                                                                                if v1315.1 == 0xF {
                                                                                                    let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                    let v1268 = C::put_in_reg(ctx, v1253.0);
                                                                                                    let v1262 = C::put_in_reg(ctx, v1253.0);
                                                                                                    let v1397 = constructor_vec_pack(ctx, I32X4, v1268, v1262);
                                                                                                    let v1398 = constructor_output_reg(ctx, v1397);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2192.
                                                                                                    return Some(v1398);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    0x12 => {
                                                                        if v1303.1 == 0x13 {
                                                                            let v1306 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1300.1,
                                                                                );
                                                                            if v1306.0 == 0x16 {
                                                                                if v1306.1 == 0x17 {
                                                                                    let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                    let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                    if v1312.0
                                                                                        == 0x1A
                                                                                    {
                                                                                        if v1312.1
                                                                                            == 0x1B
                                                                                        {
                                                                                            let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                            if v1315.0 == 0x1E {
                                                                                                if v1315.1 == 0x1F {
                                                                                                    let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                    let v1268 = C::put_in_reg(ctx, v1253.0);
                                                                                                    let v1269 = C::put_in_reg(ctx, v1253.1);
                                                                                                    let v1385 = constructor_vec_pack(ctx, I32X4, v1268, v1269);
                                                                                                    let v1386 = constructor_output_reg(ctx, v1385);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2180.
                                                                                                    return Some(v1386);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x4 => {
                                    if v1282.1 == 0x5 {
                                        let v1285 = C::u8_pair_split(ctx, v1279.1);
                                        if v1285.0 == 0x6 {
                                            if v1285.1 == 0x7 {
                                                let v1288 = C::u16_pair_split(ctx, v1276.1);
                                                let v1291 = C::u8_pair_split(ctx, v1288.0);
                                                if v1291.0 == 0xC {
                                                    if v1291.1 == 0xD {
                                                        let v1294 = C::u8_pair_split(ctx, v1288.1);
                                                        if v1294.0 == 0xE {
                                                            if v1294.1 == 0xF {
                                                                let v1297 =
                                                                    C::u32_pair_split(ctx, v1273.1);
                                                                let v1300 =
                                                                    C::u16_pair_split(ctx, v1297.0);
                                                                let v1303 =
                                                                    C::u8_pair_split(ctx, v1300.0);
                                                                match v1303.0 {
                                                                    0x4 => {
                                                                        if v1303.1 == 0x5 {
                                                                            let v1306 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1300.1,
                                                                                );
                                                                            if v1306.0 == 0x6 {
                                                                                if v1306.1 == 0x7 {
                                                                                    let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                    let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                    if v1312.0
                                                                                        == 0xC
                                                                                    {
                                                                                        if v1312.1
                                                                                            == 0xD
                                                                                        {
                                                                                            let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                            if v1315.0 == 0xE {
                                                                                                if v1315.1 == 0xF {
                                                                                                    let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                    let v1268 = C::put_in_reg(ctx, v1253.0);
                                                                                                    let v1262 = C::put_in_reg(ctx, v1253.0);
                                                                                                    let v1395 = constructor_vec_pack(ctx, I64X2, v1268, v1262);
                                                                                                    let v1396 = constructor_output_reg(ctx, v1395);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2190.
                                                                                                    return Some(v1396);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    0x14 => {
                                                                        if v1303.1 == 0x15 {
                                                                            let v1306 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1300.1,
                                                                                );
                                                                            if v1306.0 == 0x16 {
                                                                                if v1306.1 == 0x17 {
                                                                                    let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                    let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                    if v1312.0
                                                                                        == 0x1C
                                                                                    {
                                                                                        if v1312.1
                                                                                            == 0x1D
                                                                                        {
                                                                                            let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                            if v1315.0 == 0x1E {
                                                                                                if v1315.1 == 0x1F {
                                                                                                    let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                    let v1268 = C::put_in_reg(ctx, v1253.0);
                                                                                                    let v1269 = C::put_in_reg(ctx, v1253.1);
                                                                                                    let v1383 = constructor_vec_pack(ctx, I64X2, v1268, v1269);
                                                                                                    let v1384 = constructor_output_reg(ctx, v1383);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2178.
                                                                                                    return Some(v1384);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x8 => {
                                    match v1282.1 {
                                        0x8 => {
                                            let v1285 = C::u8_pair_split(ctx, v1279.1);
                                            if v1285.0 == 0x9 {
                                                if v1285.1 == 0x9 {
                                                    let v1288 = C::u16_pair_split(ctx, v1276.1);
                                                    let v1291 = C::u8_pair_split(ctx, v1288.0);
                                                    if v1291.0 == 0xA {
                                                        if v1291.1 == 0xA {
                                                            let v1294 =
                                                                C::u8_pair_split(ctx, v1288.1);
                                                            if v1294.0 == 0xB {
                                                                if v1294.1 == 0xB {
                                                                    let v1297 = C::u32_pair_split(
                                                                        ctx, v1273.1,
                                                                    );
                                                                    let v1300 = C::u16_pair_split(
                                                                        ctx, v1297.0,
                                                                    );
                                                                    let v1303 = C::u8_pair_split(
                                                                        ctx, v1300.0,
                                                                    );
                                                                    if v1303.0 == 0xC {
                                                                        if v1303.1 == 0xC {
                                                                            let v1306 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1300.1,
                                                                                );
                                                                            if v1306.0 == 0xD {
                                                                                if v1306.1 == 0xD {
                                                                                    let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                    let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                    if v1312.0
                                                                                        == 0xE
                                                                                    {
                                                                                        if v1312.1
                                                                                            == 0xE
                                                                                        {
                                                                                            let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                            if v1315.0 == 0xF {
                                                                                                if v1315.1 == 0xF {
                                                                                                    let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                    let v1268 = C::put_in_reg(ctx, v1253.0);
                                                                                                    let v1262 = C::put_in_reg(ctx, v1253.0);
                                                                                                    let v1373 = constructor_vec_merge_low(ctx, I8X16, v1268, v1262);
                                                                                                    let v1374 = constructor_output_reg(ctx, v1373);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2166.
                                                                                                    return Some(v1374);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x9 => {
                                            let v1285 = C::u8_pair_split(ctx, v1279.1);
                                            match v1285.0 {
                                                0x8 => {
                                                    if v1285.1 == 0x9 {
                                                        let v1288 = C::u16_pair_split(ctx, v1276.1);
                                                        let v1291 = C::u8_pair_split(ctx, v1288.0);
                                                        if v1291.0 == 0xA {
                                                            if v1291.1 == 0xB {
                                                                let v1294 =
                                                                    C::u8_pair_split(ctx, v1288.1);
                                                                if v1294.0 == 0xA {
                                                                    if v1294.1 == 0xB {
                                                                        let v1297 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1273.1,
                                                                            );
                                                                        let v1300 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1297.0,
                                                                            );
                                                                        let v1303 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1300.0,
                                                                            );
                                                                        if v1303.0 == 0xC {
                                                                            if v1303.1 == 0xD {
                                                                                let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                                                if v1306.0 == 0xC {
                                                                                    if v1306.1
                                                                                        == 0xD
                                                                                    {
                                                                                        let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                        let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                        if v1312.0
                                                                                            == 0xE
                                                                                        {
                                                                                            if v1312.1 == 0xF {
                                                                                                let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                                if v1315.0 == 0xE {
                                                                                                    if v1315.1 == 0xF {
                                                                                                        let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                        let v1268 = C::put_in_reg(ctx, v1253.0);
                                                                                                        let v1262 = C::put_in_reg(ctx, v1253.0);
                                                                                                        let v1371 = constructor_vec_merge_low(ctx, I16X8, v1268, v1262);
                                                                                                        let v1372 = constructor_output_reg(ctx, v1371);
                                                                                                        // Rule at src/isa/s390x/lower.isle line 2164.
                                                                                                        return Some(v1372);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                0xA => {
                                                    if v1285.1 == 0xB {
                                                        let v1288 = C::u16_pair_split(ctx, v1276.1);
                                                        let v1291 = C::u8_pair_split(ctx, v1288.0);
                                                        match v1291.0 {
                                                            0x8 => {
                                                                if v1291.1 == 0x9 {
                                                                    let v1294 = C::u8_pair_split(
                                                                        ctx, v1288.1,
                                                                    );
                                                                    if v1294.0 == 0xA {
                                                                        if v1294.1 == 0xB {
                                                                            let v1297 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1273.1,
                                                                                );
                                                                            let v1300 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1297.0,
                                                                                );
                                                                            let v1303 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1300.0,
                                                                                );
                                                                            if v1303.0 == 0xC {
                                                                                if v1303.1 == 0xD {
                                                                                    let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                                                    if v1306.0
                                                                                        == 0xE
                                                                                    {
                                                                                        if v1306.1
                                                                                            == 0xF
                                                                                        {
                                                                                            let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                            let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                            if v1312.0 == 0xC {
                                                                                                if v1312.1 == 0xD {
                                                                                                    let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                                    if v1315.0 == 0xE {
                                                                                                        if v1315.1 == 0xF {
                                                                                                            let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                            let v1268 = C::put_in_reg(ctx, v1253.0);
                                                                                                            let v1262 = C::put_in_reg(ctx, v1253.0);
                                                                                                            let v1369 = constructor_vec_merge_low(ctx, I32X4, v1268, v1262);
                                                                                                            let v1370 = constructor_output_reg(ctx, v1369);
                                                                                                            // Rule at src/isa/s390x/lower.isle line 2162.
                                                                                                            return Some(v1370);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0xC => {
                                                                if v1291.1 == 0xD {
                                                                    let v1294 = C::u8_pair_split(
                                                                        ctx, v1288.1,
                                                                    );
                                                                    if v1294.0 == 0xE {
                                                                        if v1294.1 == 0xF {
                                                                            let v1297 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1273.1,
                                                                                );
                                                                            let v1300 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1297.0,
                                                                                );
                                                                            let v1303 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1300.0,
                                                                                );
                                                                            match v1303.0 {
                                                                                0x0 => {
                                                                                    if v1303.1
                                                                                        == 0x1
                                                                                    {
                                                                                        let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                                                        if v1306.0
                                                                                            == 0x2
                                                                                        {
                                                                                            if v1306.1 == 0x3 {
                                                                                                let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                                let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                                if v1312.0 == 0x4 {
                                                                                                    if v1312.1 == 0x5 {
                                                                                                        let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                                        if v1315.0 == 0x6 {
                                                                                                            if v1315.1 == 0x7 {
                                                                                                                let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                                let v1268 = C::put_in_reg(ctx, v1253.0);
                                                                                                                let v1262 = C::put_in_reg(ctx, v1253.0);
                                                                                                                let v1441 = constructor_vec_permute_dw_imm(ctx, I8X16, v1268, 0x1, v1262, 0x0);
                                                                                                                let v1442 = constructor_output_reg(ctx, v1441);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2242.
                                                                                                                return Some(v1442);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x8 => {
                                                                                    if v1303.1
                                                                                        == 0x9
                                                                                    {
                                                                                        let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                                                        if v1306.0
                                                                                            == 0xA
                                                                                        {
                                                                                            if v1306.1 == 0xB {
                                                                                                let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                                let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                                if v1312.0 == 0xC {
                                                                                                    if v1312.1 == 0xD {
                                                                                                        let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                                        if v1315.0 == 0xE {
                                                                                                            if v1315.1 == 0xF {
                                                                                                                let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                                let v1268 = C::put_in_reg(ctx, v1253.0);
                                                                                                                let v1262 = C::put_in_reg(ctx, v1253.0);
                                                                                                                let v1367 = constructor_vec_merge_low(ctx, I64X2, v1268, v1262);
                                                                                                                let v1368 = constructor_output_reg(ctx, v1367);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2160.
                                                                                                                return Some(v1368);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x10 => {
                                                                                    if v1303.1
                                                                                        == 0x11
                                                                                    {
                                                                                        let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                                                        if v1306.0
                                                                                            == 0x12
                                                                                        {
                                                                                            if v1306.1 == 0x13 {
                                                                                                let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                                let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                                if v1312.0 == 0x14 {
                                                                                                    if v1312.1 == 0x15 {
                                                                                                        let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                                        if v1315.0 == 0x16 {
                                                                                                            if v1315.1 == 0x17 {
                                                                                                                let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                                let v1268 = C::put_in_reg(ctx, v1253.0);
                                                                                                                let v1269 = C::put_in_reg(ctx, v1253.1);
                                                                                                                let v1433 = constructor_vec_permute_dw_imm(ctx, I8X16, v1268, 0x1, v1269, 0x0);
                                                                                                                let v1434 = constructor_output_reg(ctx, v1433);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2234.
                                                                                                                return Some(v1434);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x18 => {
                                                                                    if v1303.1
                                                                                        == 0x19
                                                                                    {
                                                                                        let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                                                        if v1306.0
                                                                                            == 0x1A
                                                                                        {
                                                                                            if v1306.1 == 0x1B {
                                                                                                let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                                let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                                if v1312.0 == 0x1C {
                                                                                                    if v1312.1 == 0x1D {
                                                                                                        let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                                        if v1315.0 == 0x1E {
                                                                                                            if v1315.1 == 0x1F {
                                                                                                                let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                                let v1268 = C::put_in_reg(ctx, v1253.0);
                                                                                                                let v1269 = C::put_in_reg(ctx, v1253.1);
                                                                                                                let v1351 = constructor_vec_merge_low(ctx, I64X2, v1268, v1269);
                                                                                                                let v1352 = constructor_output_reg(ctx, v1351);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2144.
                                                                                                                return Some(v1352);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x18 => {
                                                                if v1291.1 == 0x19 {
                                                                    let v1294 = C::u8_pair_split(
                                                                        ctx, v1288.1,
                                                                    );
                                                                    if v1294.0 == 0x1A {
                                                                        if v1294.1 == 0x1B {
                                                                            let v1297 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1273.1,
                                                                                );
                                                                            let v1300 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1297.0,
                                                                                );
                                                                            let v1303 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1300.0,
                                                                                );
                                                                            if v1303.0 == 0xC {
                                                                                if v1303.1 == 0xD {
                                                                                    let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                                                    if v1306.0
                                                                                        == 0xE
                                                                                    {
                                                                                        if v1306.1
                                                                                            == 0xF
                                                                                        {
                                                                                            let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                            let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                            if v1312.0 == 0x1C {
                                                                                                if v1312.1 == 0x1D {
                                                                                                    let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                                    if v1315.0 == 0x1E {
                                                                                                        if v1315.1 == 0x1F {
                                                                                                            let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                            let v1268 = C::put_in_reg(ctx, v1253.0);
                                                                                                            let v1269 = C::put_in_reg(ctx, v1253.1);
                                                                                                            let v1353 = constructor_vec_merge_low(ctx, I32X4, v1268, v1269);
                                                                                                            let v1354 = constructor_output_reg(ctx, v1353);
                                                                                                            // Rule at src/isa/s390x/lower.isle line 2146.
                                                                                                            return Some(v1354);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                0x18 => {
                                                    if v1285.1 == 0x19 {
                                                        let v1288 = C::u16_pair_split(ctx, v1276.1);
                                                        let v1291 = C::u8_pair_split(ctx, v1288.0);
                                                        if v1291.0 == 0xA {
                                                            if v1291.1 == 0xB {
                                                                let v1294 =
                                                                    C::u8_pair_split(ctx, v1288.1);
                                                                if v1294.0 == 0x1A {
                                                                    if v1294.1 == 0x1B {
                                                                        let v1297 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1273.1,
                                                                            );
                                                                        let v1300 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1297.0,
                                                                            );
                                                                        let v1303 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1300.0,
                                                                            );
                                                                        if v1303.0 == 0xC {
                                                                            if v1303.1 == 0xD {
                                                                                let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                                                if v1306.0 == 0x1C {
                                                                                    if v1306.1
                                                                                        == 0x1D
                                                                                    {
                                                                                        let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                        let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                        if v1312.0
                                                                                            == 0xE
                                                                                        {
                                                                                            if v1312.1 == 0xF {
                                                                                                let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                                if v1315.0 == 0x1E {
                                                                                                    if v1315.1 == 0x1F {
                                                                                                        let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                        let v1268 = C::put_in_reg(ctx, v1253.0);
                                                                                                        let v1269 = C::put_in_reg(ctx, v1253.1);
                                                                                                        let v1355 = constructor_vec_merge_low(ctx, I16X8, v1268, v1269);
                                                                                                        let v1356 = constructor_output_reg(ctx, v1355);
                                                                                                        // Rule at src/isa/s390x/lower.isle line 2148.
                                                                                                        return Some(v1356);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        0x18 => {
                                            let v1285 = C::u8_pair_split(ctx, v1279.1);
                                            if v1285.0 == 0x9 {
                                                if v1285.1 == 0x19 {
                                                    let v1288 = C::u16_pair_split(ctx, v1276.1);
                                                    let v1291 = C::u8_pair_split(ctx, v1288.0);
                                                    if v1291.0 == 0xA {
                                                        if v1291.1 == 0x1A {
                                                            let v1294 =
                                                                C::u8_pair_split(ctx, v1288.1);
                                                            if v1294.0 == 0xB {
                                                                if v1294.1 == 0x1B {
                                                                    let v1297 = C::u32_pair_split(
                                                                        ctx, v1273.1,
                                                                    );
                                                                    let v1300 = C::u16_pair_split(
                                                                        ctx, v1297.0,
                                                                    );
                                                                    let v1303 = C::u8_pair_split(
                                                                        ctx, v1300.0,
                                                                    );
                                                                    if v1303.0 == 0xC {
                                                                        if v1303.1 == 0x1C {
                                                                            let v1306 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1300.1,
                                                                                );
                                                                            if v1306.0 == 0xD {
                                                                                if v1306.1 == 0x1D {
                                                                                    let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                    let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                    if v1312.0
                                                                                        == 0xE
                                                                                    {
                                                                                        if v1312.1
                                                                                            == 0x1E
                                                                                        {
                                                                                            let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                            if v1315.0 == 0xF {
                                                                                                if v1315.1 == 0x1F {
                                                                                                    let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                    let v1268 = C::put_in_reg(ctx, v1253.0);
                                                                                                    let v1269 = C::put_in_reg(ctx, v1253.1);
                                                                                                    let v1357 = constructor_vec_merge_low(ctx, I8X16, v1268, v1269);
                                                                                                    let v1358 = constructor_output_reg(ctx, v1357);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2150.
                                                                                                    return Some(v1358);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                0x10 => {
                                    match v1282.1 {
                                        0x0 => {
                                            let v1285 = C::u8_pair_split(ctx, v1279.1);
                                            if v1285.0 == 0x11 {
                                                if v1285.1 == 0x1 {
                                                    let v1288 = C::u16_pair_split(ctx, v1276.1);
                                                    let v1291 = C::u8_pair_split(ctx, v1288.0);
                                                    if v1291.0 == 0x12 {
                                                        if v1291.1 == 0x2 {
                                                            let v1294 =
                                                                C::u8_pair_split(ctx, v1288.1);
                                                            if v1294.0 == 0x13 {
                                                                if v1294.1 == 0x3 {
                                                                    let v1297 = C::u32_pair_split(
                                                                        ctx, v1273.1,
                                                                    );
                                                                    let v1300 = C::u16_pair_split(
                                                                        ctx, v1297.0,
                                                                    );
                                                                    let v1303 = C::u8_pair_split(
                                                                        ctx, v1300.0,
                                                                    );
                                                                    if v1303.0 == 0x14 {
                                                                        if v1303.1 == 0x4 {
                                                                            let v1306 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1300.1,
                                                                                );
                                                                            if v1306.0 == 0x15 {
                                                                                if v1306.1 == 0x5 {
                                                                                    let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                    let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                    if v1312.0
                                                                                        == 0x16
                                                                                    {
                                                                                        if v1312.1
                                                                                            == 0x6
                                                                                        {
                                                                                            let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                            if v1315.0 == 0x17 {
                                                                                                if v1315.1 == 0x7 {
                                                                                                    let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                    let v1326 = C::put_in_reg(ctx, v1253.1);
                                                                                                    let v1262 = C::put_in_reg(ctx, v1253.0);
                                                                                                    let v1333 = constructor_vec_merge_high(ctx, I8X16, v1326, v1262);
                                                                                                    let v1334 = constructor_output_reg(ctx, v1333);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2124.
                                                                                                    return Some(v1334);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x10 => {
                                            let v1285 = C::u8_pair_split(ctx, v1279.1);
                                            if v1285.0 == 0x11 {
                                                if v1285.1 == 0x11 {
                                                    let v1288 = C::u16_pair_split(ctx, v1276.1);
                                                    let v1291 = C::u8_pair_split(ctx, v1288.0);
                                                    if v1291.0 == 0x12 {
                                                        if v1291.1 == 0x12 {
                                                            let v1294 =
                                                                C::u8_pair_split(ctx, v1288.1);
                                                            if v1294.0 == 0x13 {
                                                                if v1294.1 == 0x13 {
                                                                    let v1297 = C::u32_pair_split(
                                                                        ctx, v1273.1,
                                                                    );
                                                                    let v1300 = C::u16_pair_split(
                                                                        ctx, v1297.0,
                                                                    );
                                                                    let v1303 = C::u8_pair_split(
                                                                        ctx, v1300.0,
                                                                    );
                                                                    if v1303.0 == 0x14 {
                                                                        if v1303.1 == 0x14 {
                                                                            let v1306 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1300.1,
                                                                                );
                                                                            if v1306.0 == 0x15 {
                                                                                if v1306.1 == 0x15 {
                                                                                    let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                    let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                    if v1312.0
                                                                                        == 0x16
                                                                                    {
                                                                                        if v1312.1
                                                                                            == 0x16
                                                                                        {
                                                                                            let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                            if v1315.0 == 0x17 {
                                                                                                if v1315.1 == 0x17 {
                                                                                                    let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                    let v1326 = C::put_in_reg(ctx, v1253.1);
                                                                                                    let v1269 = C::put_in_reg(ctx, v1253.1);
                                                                                                    let v1349 = constructor_vec_merge_high(ctx, I8X16, v1326, v1269);
                                                                                                    let v1350 = constructor_output_reg(ctx, v1349);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2140.
                                                                                                    return Some(v1350);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x11 => {
                                            let v1285 = C::u8_pair_split(ctx, v1279.1);
                                            match v1285.0 {
                                                0x0 => {
                                                    if v1285.1 == 0x1 {
                                                        let v1288 = C::u16_pair_split(ctx, v1276.1);
                                                        let v1291 = C::u8_pair_split(ctx, v1288.0);
                                                        if v1291.0 == 0x12 {
                                                            if v1291.1 == 0x13 {
                                                                let v1294 =
                                                                    C::u8_pair_split(ctx, v1288.1);
                                                                if v1294.0 == 0x2 {
                                                                    if v1294.1 == 0x3 {
                                                                        let v1297 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1273.1,
                                                                            );
                                                                        let v1300 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1297.0,
                                                                            );
                                                                        let v1303 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1300.0,
                                                                            );
                                                                        if v1303.0 == 0x14 {
                                                                            if v1303.1 == 0x15 {
                                                                                let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                                                if v1306.0 == 0x4 {
                                                                                    if v1306.1
                                                                                        == 0x5
                                                                                    {
                                                                                        let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                        let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                        if v1312.0
                                                                                            == 0x16
                                                                                        {
                                                                                            if v1312.1 == 0x17 {
                                                                                                let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                                if v1315.0 == 0x6 {
                                                                                                    if v1315.1 == 0x7 {
                                                                                                        let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                        let v1326 = C::put_in_reg(ctx, v1253.1);
                                                                                                        let v1262 = C::put_in_reg(ctx, v1253.0);
                                                                                                        let v1331 = constructor_vec_merge_high(ctx, I16X8, v1326, v1262);
                                                                                                        let v1332 = constructor_output_reg(ctx, v1331);
                                                                                                        // Rule at src/isa/s390x/lower.isle line 2122.
                                                                                                        return Some(v1332);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                0x10 => {
                                                    if v1285.1 == 0x11 {
                                                        let v1288 = C::u16_pair_split(ctx, v1276.1);
                                                        let v1291 = C::u8_pair_split(ctx, v1288.0);
                                                        if v1291.0 == 0x12 {
                                                            if v1291.1 == 0x13 {
                                                                let v1294 =
                                                                    C::u8_pair_split(ctx, v1288.1);
                                                                if v1294.0 == 0x12 {
                                                                    if v1294.1 == 0x13 {
                                                                        let v1297 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1273.1,
                                                                            );
                                                                        let v1300 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1297.0,
                                                                            );
                                                                        let v1303 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1300.0,
                                                                            );
                                                                        if v1303.0 == 0x14 {
                                                                            if v1303.1 == 0x15 {
                                                                                let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                                                if v1306.0 == 0x14 {
                                                                                    if v1306.1
                                                                                        == 0x15
                                                                                    {
                                                                                        let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                        let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                        if v1312.0
                                                                                            == 0x16
                                                                                        {
                                                                                            if v1312.1 == 0x17 {
                                                                                                let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                                if v1315.0 == 0x16 {
                                                                                                    if v1315.1 == 0x17 {
                                                                                                        let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                        let v1326 = C::put_in_reg(ctx, v1253.1);
                                                                                                        let v1269 = C::put_in_reg(ctx, v1253.1);
                                                                                                        let v1347 = constructor_vec_merge_high(ctx, I16X8, v1326, v1269);
                                                                                                        let v1348 = constructor_output_reg(ctx, v1347);
                                                                                                        // Rule at src/isa/s390x/lower.isle line 2138.
                                                                                                        return Some(v1348);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                0x12 => {
                                                    if v1285.1 == 0x13 {
                                                        let v1288 = C::u16_pair_split(ctx, v1276.1);
                                                        let v1291 = C::u8_pair_split(ctx, v1288.0);
                                                        match v1291.0 {
                                                            0x0 => {
                                                                if v1291.1 == 0x1 {
                                                                    let v1294 = C::u8_pair_split(
                                                                        ctx, v1288.1,
                                                                    );
                                                                    if v1294.0 == 0x2 {
                                                                        if v1294.1 == 0x3 {
                                                                            let v1297 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1273.1,
                                                                                );
                                                                            let v1300 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1297.0,
                                                                                );
                                                                            let v1303 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1300.0,
                                                                                );
                                                                            if v1303.0 == 0x14 {
                                                                                if v1303.1 == 0x15 {
                                                                                    let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                                                    if v1306.0
                                                                                        == 0x16
                                                                                    {
                                                                                        if v1306.1
                                                                                            == 0x17
                                                                                        {
                                                                                            let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                            let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                            if v1312.0 == 0x4 {
                                                                                                if v1312.1 == 0x5 {
                                                                                                    let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                                    if v1315.0 == 0x6 {
                                                                                                        if v1315.1 == 0x7 {
                                                                                                            let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                            let v1326 = C::put_in_reg(ctx, v1253.1);
                                                                                                            let v1262 = C::put_in_reg(ctx, v1253.0);
                                                                                                            let v1329 = constructor_vec_merge_high(ctx, I32X4, v1326, v1262);
                                                                                                            let v1330 = constructor_output_reg(ctx, v1329);
                                                                                                            // Rule at src/isa/s390x/lower.isle line 2120.
                                                                                                            return Some(v1330);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x10 => {
                                                                if v1291.1 == 0x11 {
                                                                    let v1294 = C::u8_pair_split(
                                                                        ctx, v1288.1,
                                                                    );
                                                                    if v1294.0 == 0x12 {
                                                                        if v1294.1 == 0x13 {
                                                                            let v1297 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1273.1,
                                                                                );
                                                                            let v1300 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1297.0,
                                                                                );
                                                                            let v1303 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1300.0,
                                                                                );
                                                                            if v1303.0 == 0x14 {
                                                                                if v1303.1 == 0x15 {
                                                                                    let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                                                    if v1306.0
                                                                                        == 0x16
                                                                                    {
                                                                                        if v1306.1
                                                                                            == 0x17
                                                                                        {
                                                                                            let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                            let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                            if v1312.0 == 0x14 {
                                                                                                if v1312.1 == 0x15 {
                                                                                                    let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                                    if v1315.0 == 0x16 {
                                                                                                        if v1315.1 == 0x17 {
                                                                                                            let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                            let v1326 = C::put_in_reg(ctx, v1253.1);
                                                                                                            let v1269 = C::put_in_reg(ctx, v1253.1);
                                                                                                            let v1345 = constructor_vec_merge_high(ctx, I32X4, v1326, v1269);
                                                                                                            let v1346 = constructor_output_reg(ctx, v1345);
                                                                                                            // Rule at src/isa/s390x/lower.isle line 2136.
                                                                                                            return Some(v1346);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x14 => {
                                                                if v1291.1 == 0x15 {
                                                                    let v1294 = C::u8_pair_split(
                                                                        ctx, v1288.1,
                                                                    );
                                                                    if v1294.0 == 0x16 {
                                                                        if v1294.1 == 0x17 {
                                                                            let v1297 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1273.1,
                                                                                );
                                                                            let v1300 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1297.0,
                                                                                );
                                                                            let v1303 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1300.0,
                                                                                );
                                                                            match v1303.0 {
                                                                                0x0 => {
                                                                                    if v1303.1
                                                                                        == 0x1
                                                                                    {
                                                                                        let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                                                        if v1306.0
                                                                                            == 0x2
                                                                                        {
                                                                                            if v1306.1 == 0x3 {
                                                                                                let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                                let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                                if v1312.0 == 0x4 {
                                                                                                    if v1312.1 == 0x5 {
                                                                                                        let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                                        if v1315.0 == 0x6 {
                                                                                                            if v1315.1 == 0x7 {
                                                                                                                let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                                let v1326 = C::put_in_reg(ctx, v1253.1);
                                                                                                                let v1262 = C::put_in_reg(ctx, v1253.0);
                                                                                                                let v1327 = constructor_vec_merge_high(ctx, I64X2, v1326, v1262);
                                                                                                                let v1328 = constructor_output_reg(ctx, v1327);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2118.
                                                                                                                return Some(v1328);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x8 => {
                                                                                    if v1303.1
                                                                                        == 0x9
                                                                                    {
                                                                                        let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                                                        if v1306.0
                                                                                            == 0xA
                                                                                        {
                                                                                            if v1306.1 == 0xB {
                                                                                                let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                                let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                                if v1312.0 == 0xC {
                                                                                                    if v1312.1 == 0xD {
                                                                                                        let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                                        if v1315.0 == 0xE {
                                                                                                            if v1315.1 == 0xF {
                                                                                                                let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                                let v1326 = C::put_in_reg(ctx, v1253.1);
                                                                                                                let v1262 = C::put_in_reg(ctx, v1253.0);
                                                                                                                let v1435 = constructor_vec_permute_dw_imm(ctx, I8X16, v1326, 0x0, v1262, 0x1);
                                                                                                                let v1436 = constructor_output_reg(ctx, v1435);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2236.
                                                                                                                return Some(v1436);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x10 => {
                                                                                    if v1303.1
                                                                                        == 0x11
                                                                                    {
                                                                                        let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                                                        if v1306.0
                                                                                            == 0x12
                                                                                        {
                                                                                            if v1306.1 == 0x13 {
                                                                                                let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                                let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                                if v1312.0 == 0x14 {
                                                                                                    if v1312.1 == 0x15 {
                                                                                                        let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                                        if v1315.0 == 0x16 {
                                                                                                            if v1315.1 == 0x17 {
                                                                                                                let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                                let v1326 = C::put_in_reg(ctx, v1253.1);
                                                                                                                let v1269 = C::put_in_reg(ctx, v1253.1);
                                                                                                                let v1343 = constructor_vec_merge_high(ctx, I64X2, v1326, v1269);
                                                                                                                let v1344 = constructor_output_reg(ctx, v1343);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2134.
                                                                                                                return Some(v1344);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x18 => {
                                                                                    if v1303.1
                                                                                        == 0x19
                                                                                    {
                                                                                        let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                                                        if v1306.0
                                                                                            == 0x1A
                                                                                        {
                                                                                            if v1306.1 == 0x1B {
                                                                                                let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                                let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                                if v1312.0 == 0x1C {
                                                                                                    if v1312.1 == 0x1D {
                                                                                                        let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                                        if v1315.0 == 0x1E {
                                                                                                            if v1315.1 == 0x1F {
                                                                                                                let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                                let v1326 = C::put_in_reg(ctx, v1253.1);
                                                                                                                let v1269 = C::put_in_reg(ctx, v1253.1);
                                                                                                                let v1443 = constructor_vec_permute_dw_imm(ctx, I8X16, v1326, 0x0, v1269, 0x1);
                                                                                                                let v1444 = constructor_output_reg(ctx, v1443);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2244.
                                                                                                                return Some(v1444);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                0x11 => {
                                    if v1282.1 == 0x13 {
                                        let v1285 = C::u8_pair_split(ctx, v1279.1);
                                        if v1285.0 == 0x15 {
                                            if v1285.1 == 0x17 {
                                                let v1288 = C::u16_pair_split(ctx, v1276.1);
                                                let v1291 = C::u8_pair_split(ctx, v1288.0);
                                                if v1291.0 == 0x19 {
                                                    if v1291.1 == 0x1B {
                                                        let v1294 = C::u8_pair_split(ctx, v1288.1);
                                                        if v1294.0 == 0x1D {
                                                            if v1294.1 == 0x1F {
                                                                let v1297 =
                                                                    C::u32_pair_split(ctx, v1273.1);
                                                                let v1300 =
                                                                    C::u16_pair_split(ctx, v1297.0);
                                                                let v1303 =
                                                                    C::u8_pair_split(ctx, v1300.0);
                                                                match v1303.0 {
                                                                    0x1 => {
                                                                        if v1303.1 == 0x3 {
                                                                            let v1306 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1300.1,
                                                                                );
                                                                            if v1306.0 == 0x5 {
                                                                                if v1306.1 == 0x7 {
                                                                                    let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                    let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                    if v1312.0
                                                                                        == 0x9
                                                                                    {
                                                                                        if v1312.1
                                                                                            == 0xB
                                                                                        {
                                                                                            let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                            if v1315.0 == 0xD {
                                                                                                if v1315.1 == 0xF {
                                                                                                    let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                    let v1326 = C::put_in_reg(ctx, v1253.1);
                                                                                                    let v1262 = C::put_in_reg(ctx, v1253.0);
                                                                                                    let v1393 = constructor_vec_pack(ctx, I16X8, v1326, v1262);
                                                                                                    let v1394 = constructor_output_reg(ctx, v1393);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2188.
                                                                                                    return Some(v1394);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    0x11 => {
                                                                        if v1303.1 == 0x13 {
                                                                            let v1306 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1300.1,
                                                                                );
                                                                            if v1306.0 == 0x15 {
                                                                                if v1306.1 == 0x17 {
                                                                                    let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                    let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                    if v1312.0
                                                                                        == 0x19
                                                                                    {
                                                                                        if v1312.1
                                                                                            == 0x1B
                                                                                        {
                                                                                            let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                            if v1315.0 == 0x1D {
                                                                                                if v1315.1 == 0x1F {
                                                                                                    let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                    let v1326 = C::put_in_reg(ctx, v1253.1);
                                                                                                    let v1269 = C::put_in_reg(ctx, v1253.1);
                                                                                                    let v1405 = constructor_vec_pack(ctx, I16X8, v1326, v1269);
                                                                                                    let v1406 = constructor_output_reg(ctx, v1405);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2200.
                                                                                                    return Some(v1406);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x12 => {
                                    if v1282.1 == 0x13 {
                                        let v1285 = C::u8_pair_split(ctx, v1279.1);
                                        if v1285.0 == 0x16 {
                                            if v1285.1 == 0x17 {
                                                let v1288 = C::u16_pair_split(ctx, v1276.1);
                                                let v1291 = C::u8_pair_split(ctx, v1288.0);
                                                if v1291.0 == 0x1A {
                                                    if v1291.1 == 0x1B {
                                                        let v1294 = C::u8_pair_split(ctx, v1288.1);
                                                        if v1294.0 == 0x1E {
                                                            if v1294.1 == 0x1F {
                                                                let v1297 =
                                                                    C::u32_pair_split(ctx, v1273.1);
                                                                let v1300 =
                                                                    C::u16_pair_split(ctx, v1297.0);
                                                                let v1303 =
                                                                    C::u8_pair_split(ctx, v1300.0);
                                                                match v1303.0 {
                                                                    0x2 => {
                                                                        if v1303.1 == 0x3 {
                                                                            let v1306 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1300.1,
                                                                                );
                                                                            if v1306.0 == 0x6 {
                                                                                if v1306.1 == 0x7 {
                                                                                    let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                    let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                    if v1312.0
                                                                                        == 0xA
                                                                                    {
                                                                                        if v1312.1
                                                                                            == 0xB
                                                                                        {
                                                                                            let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                            if v1315.0 == 0xE {
                                                                                                if v1315.1 == 0xF {
                                                                                                    let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                    let v1326 = C::put_in_reg(ctx, v1253.1);
                                                                                                    let v1262 = C::put_in_reg(ctx, v1253.0);
                                                                                                    let v1391 = constructor_vec_pack(ctx, I32X4, v1326, v1262);
                                                                                                    let v1392 = constructor_output_reg(ctx, v1391);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2186.
                                                                                                    return Some(v1392);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    0x12 => {
                                                                        if v1303.1 == 0x13 {
                                                                            let v1306 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1300.1,
                                                                                );
                                                                            if v1306.0 == 0x16 {
                                                                                if v1306.1 == 0x17 {
                                                                                    let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                    let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                    if v1312.0
                                                                                        == 0x1A
                                                                                    {
                                                                                        if v1312.1
                                                                                            == 0x1B
                                                                                        {
                                                                                            let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                            if v1315.0 == 0x1E {
                                                                                                if v1315.1 == 0x1F {
                                                                                                    let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                    let v1326 = C::put_in_reg(ctx, v1253.1);
                                                                                                    let v1269 = C::put_in_reg(ctx, v1253.1);
                                                                                                    let v1403 = constructor_vec_pack(ctx, I32X4, v1326, v1269);
                                                                                                    let v1404 = constructor_output_reg(ctx, v1403);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2198.
                                                                                                    return Some(v1404);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x14 => {
                                    if v1282.1 == 0x15 {
                                        let v1285 = C::u8_pair_split(ctx, v1279.1);
                                        if v1285.0 == 0x16 {
                                            if v1285.1 == 0x17 {
                                                let v1288 = C::u16_pair_split(ctx, v1276.1);
                                                let v1291 = C::u8_pair_split(ctx, v1288.0);
                                                if v1291.0 == 0x1C {
                                                    if v1291.1 == 0x1D {
                                                        let v1294 = C::u8_pair_split(ctx, v1288.1);
                                                        if v1294.0 == 0x1E {
                                                            if v1294.1 == 0x1F {
                                                                let v1297 =
                                                                    C::u32_pair_split(ctx, v1273.1);
                                                                let v1300 =
                                                                    C::u16_pair_split(ctx, v1297.0);
                                                                let v1303 =
                                                                    C::u8_pair_split(ctx, v1300.0);
                                                                match v1303.0 {
                                                                    0x4 => {
                                                                        if v1303.1 == 0x5 {
                                                                            let v1306 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1300.1,
                                                                                );
                                                                            if v1306.0 == 0x6 {
                                                                                if v1306.1 == 0x7 {
                                                                                    let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                    let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                    if v1312.0
                                                                                        == 0xC
                                                                                    {
                                                                                        if v1312.1
                                                                                            == 0xD
                                                                                        {
                                                                                            let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                            if v1315.0 == 0xE {
                                                                                                if v1315.1 == 0xF {
                                                                                                    let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                    let v1326 = C::put_in_reg(ctx, v1253.1);
                                                                                                    let v1262 = C::put_in_reg(ctx, v1253.0);
                                                                                                    let v1389 = constructor_vec_pack(ctx, I64X2, v1326, v1262);
                                                                                                    let v1390 = constructor_output_reg(ctx, v1389);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2184.
                                                                                                    return Some(v1390);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    0x14 => {
                                                                        if v1303.1 == 0x15 {
                                                                            let v1306 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1300.1,
                                                                                );
                                                                            if v1306.0 == 0x16 {
                                                                                if v1306.1 == 0x17 {
                                                                                    let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                    let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                    if v1312.0
                                                                                        == 0x1C
                                                                                    {
                                                                                        if v1312.1
                                                                                            == 0x1D
                                                                                        {
                                                                                            let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                            if v1315.0 == 0x1E {
                                                                                                if v1315.1 == 0x1F {
                                                                                                    let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                    let v1326 = C::put_in_reg(ctx, v1253.1);
                                                                                                    let v1269 = C::put_in_reg(ctx, v1253.1);
                                                                                                    let v1401 = constructor_vec_pack(ctx, I64X2, v1326, v1269);
                                                                                                    let v1402 = constructor_output_reg(ctx, v1401);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2196.
                                                                                                    return Some(v1402);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x18 => {
                                    match v1282.1 {
                                        0x8 => {
                                            let v1285 = C::u8_pair_split(ctx, v1279.1);
                                            if v1285.0 == 0x19 {
                                                if v1285.1 == 0x9 {
                                                    let v1288 = C::u16_pair_split(ctx, v1276.1);
                                                    let v1291 = C::u8_pair_split(ctx, v1288.0);
                                                    if v1291.0 == 0x1A {
                                                        if v1291.1 == 0xA {
                                                            let v1294 =
                                                                C::u8_pair_split(ctx, v1288.1);
                                                            if v1294.0 == 0x1B {
                                                                if v1294.1 == 0xB {
                                                                    let v1297 = C::u32_pair_split(
                                                                        ctx, v1273.1,
                                                                    );
                                                                    let v1300 = C::u16_pair_split(
                                                                        ctx, v1297.0,
                                                                    );
                                                                    let v1303 = C::u8_pair_split(
                                                                        ctx, v1300.0,
                                                                    );
                                                                    if v1303.0 == 0x1C {
                                                                        if v1303.1 == 0xC {
                                                                            let v1306 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1300.1,
                                                                                );
                                                                            if v1306.0 == 0x1D {
                                                                                if v1306.1 == 0xD {
                                                                                    let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                    let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                    if v1312.0
                                                                                        == 0x1E
                                                                                    {
                                                                                        if v1312.1
                                                                                            == 0xE
                                                                                        {
                                                                                            let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                            if v1315.0 == 0x1F {
                                                                                                if v1315.1 == 0xF {
                                                                                                    let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                    let v1326 = C::put_in_reg(ctx, v1253.1);
                                                                                                    let v1262 = C::put_in_reg(ctx, v1253.0);
                                                                                                    let v1365 = constructor_vec_merge_low(ctx, I8X16, v1326, v1262);
                                                                                                    let v1366 = constructor_output_reg(ctx, v1365);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2158.
                                                                                                    return Some(v1366);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x18 => {
                                            let v1285 = C::u8_pair_split(ctx, v1279.1);
                                            if v1285.0 == 0x19 {
                                                if v1285.1 == 0x19 {
                                                    let v1288 = C::u16_pair_split(ctx, v1276.1);
                                                    let v1291 = C::u8_pair_split(ctx, v1288.0);
                                                    if v1291.0 == 0x1A {
                                                        if v1291.1 == 0x1A {
                                                            let v1294 =
                                                                C::u8_pair_split(ctx, v1288.1);
                                                            if v1294.0 == 0x1B {
                                                                if v1294.1 == 0x1B {
                                                                    let v1297 = C::u32_pair_split(
                                                                        ctx, v1273.1,
                                                                    );
                                                                    let v1300 = C::u16_pair_split(
                                                                        ctx, v1297.0,
                                                                    );
                                                                    let v1303 = C::u8_pair_split(
                                                                        ctx, v1300.0,
                                                                    );
                                                                    if v1303.0 == 0x1C {
                                                                        if v1303.1 == 0x1C {
                                                                            let v1306 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1300.1,
                                                                                );
                                                                            if v1306.0 == 0x1D {
                                                                                if v1306.1 == 0x1D {
                                                                                    let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                    let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                    if v1312.0
                                                                                        == 0x1E
                                                                                    {
                                                                                        if v1312.1
                                                                                            == 0x1E
                                                                                        {
                                                                                            let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                            if v1315.0 == 0x1F {
                                                                                                if v1315.1 == 0x1F {
                                                                                                    let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                    let v1326 = C::put_in_reg(ctx, v1253.1);
                                                                                                    let v1269 = C::put_in_reg(ctx, v1253.1);
                                                                                                    let v1381 = constructor_vec_merge_low(ctx, I8X16, v1326, v1269);
                                                                                                    let v1382 = constructor_output_reg(ctx, v1381);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2174.
                                                                                                    return Some(v1382);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x19 => {
                                            let v1285 = C::u8_pair_split(ctx, v1279.1);
                                            match v1285.0 {
                                                0x8 => {
                                                    if v1285.1 == 0x9 {
                                                        let v1288 = C::u16_pair_split(ctx, v1276.1);
                                                        let v1291 = C::u8_pair_split(ctx, v1288.0);
                                                        if v1291.0 == 0x1A {
                                                            if v1291.1 == 0x1B {
                                                                let v1294 =
                                                                    C::u8_pair_split(ctx, v1288.1);
                                                                if v1294.0 == 0xA {
                                                                    if v1294.1 == 0xB {
                                                                        let v1297 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1273.1,
                                                                            );
                                                                        let v1300 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1297.0,
                                                                            );
                                                                        let v1303 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1300.0,
                                                                            );
                                                                        if v1303.0 == 0x1C {
                                                                            if v1303.1 == 0x1D {
                                                                                let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                                                if v1306.0 == 0xC {
                                                                                    if v1306.1
                                                                                        == 0xD
                                                                                    {
                                                                                        let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                        let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                        if v1312.0
                                                                                            == 0x1E
                                                                                        {
                                                                                            if v1312.1 == 0x1F {
                                                                                                let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                                if v1315.0 == 0xE {
                                                                                                    if v1315.1 == 0xF {
                                                                                                        let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                        let v1326 = C::put_in_reg(ctx, v1253.1);
                                                                                                        let v1262 = C::put_in_reg(ctx, v1253.0);
                                                                                                        let v1363 = constructor_vec_merge_low(ctx, I16X8, v1326, v1262);
                                                                                                        let v1364 = constructor_output_reg(ctx, v1363);
                                                                                                        // Rule at src/isa/s390x/lower.isle line 2156.
                                                                                                        return Some(v1364);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                0x18 => {
                                                    if v1285.1 == 0x19 {
                                                        let v1288 = C::u16_pair_split(ctx, v1276.1);
                                                        let v1291 = C::u8_pair_split(ctx, v1288.0);
                                                        if v1291.0 == 0x1A {
                                                            if v1291.1 == 0x1B {
                                                                let v1294 =
                                                                    C::u8_pair_split(ctx, v1288.1);
                                                                if v1294.0 == 0x1A {
                                                                    if v1294.1 == 0x1B {
                                                                        let v1297 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1273.1,
                                                                            );
                                                                        let v1300 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1297.0,
                                                                            );
                                                                        let v1303 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1300.0,
                                                                            );
                                                                        if v1303.0 == 0x1C {
                                                                            if v1303.1 == 0x1D {
                                                                                let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                                                if v1306.0 == 0x1C {
                                                                                    if v1306.1
                                                                                        == 0x1D
                                                                                    {
                                                                                        let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                        let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                        if v1312.0
                                                                                            == 0x1E
                                                                                        {
                                                                                            if v1312.1 == 0x1F {
                                                                                                let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                                if v1315.0 == 0x1E {
                                                                                                    if v1315.1 == 0x1F {
                                                                                                        let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                        let v1326 = C::put_in_reg(ctx, v1253.1);
                                                                                                        let v1269 = C::put_in_reg(ctx, v1253.1);
                                                                                                        let v1379 = constructor_vec_merge_low(ctx, I16X8, v1326, v1269);
                                                                                                        let v1380 = constructor_output_reg(ctx, v1379);
                                                                                                        // Rule at src/isa/s390x/lower.isle line 2172.
                                                                                                        return Some(v1380);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                0x1A => {
                                                    if v1285.1 == 0x1B {
                                                        let v1288 = C::u16_pair_split(ctx, v1276.1);
                                                        let v1291 = C::u8_pair_split(ctx, v1288.0);
                                                        match v1291.0 {
                                                            0x8 => {
                                                                if v1291.1 == 0x9 {
                                                                    let v1294 = C::u8_pair_split(
                                                                        ctx, v1288.1,
                                                                    );
                                                                    if v1294.0 == 0xA {
                                                                        if v1294.1 == 0xB {
                                                                            let v1297 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1273.1,
                                                                                );
                                                                            let v1300 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1297.0,
                                                                                );
                                                                            let v1303 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1300.0,
                                                                                );
                                                                            if v1303.0 == 0x1C {
                                                                                if v1303.1 == 0x1D {
                                                                                    let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                                                    if v1306.0
                                                                                        == 0x1E
                                                                                    {
                                                                                        if v1306.1
                                                                                            == 0x1F
                                                                                        {
                                                                                            let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                            let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                            if v1312.0 == 0xC {
                                                                                                if v1312.1 == 0xD {
                                                                                                    let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                                    if v1315.0 == 0xE {
                                                                                                        if v1315.1 == 0xF {
                                                                                                            let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                            let v1326 = C::put_in_reg(ctx, v1253.1);
                                                                                                            let v1262 = C::put_in_reg(ctx, v1253.0);
                                                                                                            let v1361 = constructor_vec_merge_low(ctx, I32X4, v1326, v1262);
                                                                                                            let v1362 = constructor_output_reg(ctx, v1361);
                                                                                                            // Rule at src/isa/s390x/lower.isle line 2154.
                                                                                                            return Some(v1362);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x18 => {
                                                                if v1291.1 == 0x19 {
                                                                    let v1294 = C::u8_pair_split(
                                                                        ctx, v1288.1,
                                                                    );
                                                                    if v1294.0 == 0x1A {
                                                                        if v1294.1 == 0x1B {
                                                                            let v1297 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1273.1,
                                                                                );
                                                                            let v1300 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1297.0,
                                                                                );
                                                                            let v1303 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1300.0,
                                                                                );
                                                                            if v1303.0 == 0x1C {
                                                                                if v1303.1 == 0x1D {
                                                                                    let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                                                    if v1306.0
                                                                                        == 0x1E
                                                                                    {
                                                                                        if v1306.1
                                                                                            == 0x1F
                                                                                        {
                                                                                            let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                            let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                            if v1312.0 == 0x1C {
                                                                                                if v1312.1 == 0x1D {
                                                                                                    let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                                    if v1315.0 == 0x1E {
                                                                                                        if v1315.1 == 0x1F {
                                                                                                            let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                            let v1326 = C::put_in_reg(ctx, v1253.1);
                                                                                                            let v1269 = C::put_in_reg(ctx, v1253.1);
                                                                                                            let v1377 = constructor_vec_merge_low(ctx, I32X4, v1326, v1269);
                                                                                                            let v1378 = constructor_output_reg(ctx, v1377);
                                                                                                            // Rule at src/isa/s390x/lower.isle line 2170.
                                                                                                            return Some(v1378);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x1C => {
                                                                if v1291.1 == 0x1D {
                                                                    let v1294 = C::u8_pair_split(
                                                                        ctx, v1288.1,
                                                                    );
                                                                    if v1294.0 == 0x1E {
                                                                        if v1294.1 == 0x1F {
                                                                            let v1297 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1273.1,
                                                                                );
                                                                            let v1300 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1297.0,
                                                                                );
                                                                            let v1303 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1300.0,
                                                                                );
                                                                            match v1303.0 {
                                                                                0x0 => {
                                                                                    if v1303.1
                                                                                        == 0x1
                                                                                    {
                                                                                        let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                                                        if v1306.0
                                                                                            == 0x2
                                                                                        {
                                                                                            if v1306.1 == 0x3 {
                                                                                                let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                                let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                                if v1312.0 == 0x4 {
                                                                                                    if v1312.1 == 0x5 {
                                                                                                        let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                                        if v1315.0 == 0x6 {
                                                                                                            if v1315.1 == 0x7 {
                                                                                                                let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                                let v1326 = C::put_in_reg(ctx, v1253.1);
                                                                                                                let v1262 = C::put_in_reg(ctx, v1253.0);
                                                                                                                let v1437 = constructor_vec_permute_dw_imm(ctx, I8X16, v1326, 0x1, v1262, 0x0);
                                                                                                                let v1438 = constructor_output_reg(ctx, v1437);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2238.
                                                                                                                return Some(v1438);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x8 => {
                                                                                    if v1303.1
                                                                                        == 0x9
                                                                                    {
                                                                                        let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                                                        if v1306.0
                                                                                            == 0xA
                                                                                        {
                                                                                            if v1306.1 == 0xB {
                                                                                                let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                                let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                                if v1312.0 == 0xC {
                                                                                                    if v1312.1 == 0xD {
                                                                                                        let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                                        if v1315.0 == 0xE {
                                                                                                            if v1315.1 == 0xF {
                                                                                                                let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                                let v1326 = C::put_in_reg(ctx, v1253.1);
                                                                                                                let v1262 = C::put_in_reg(ctx, v1253.0);
                                                                                                                let v1359 = constructor_vec_merge_low(ctx, I64X2, v1326, v1262);
                                                                                                                let v1360 = constructor_output_reg(ctx, v1359);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2152.
                                                                                                                return Some(v1360);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x10 => {
                                                                                    if v1303.1
                                                                                        == 0x11
                                                                                    {
                                                                                        let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                                                        if v1306.0
                                                                                            == 0x12
                                                                                        {
                                                                                            if v1306.1 == 0x13 {
                                                                                                let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                                let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                                if v1312.0 == 0x14 {
                                                                                                    if v1312.1 == 0x15 {
                                                                                                        let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                                        if v1315.0 == 0x16 {
                                                                                                            if v1315.1 == 0x17 {
                                                                                                                let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                                let v1326 = C::put_in_reg(ctx, v1253.1);
                                                                                                                let v1269 = C::put_in_reg(ctx, v1253.1);
                                                                                                                let v1445 = constructor_vec_permute_dw_imm(ctx, I8X16, v1326, 0x1, v1269, 0x0);
                                                                                                                let v1446 = constructor_output_reg(ctx, v1445);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2246.
                                                                                                                return Some(v1446);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x18 => {
                                                                                    if v1303.1
                                                                                        == 0x19
                                                                                    {
                                                                                        let v1306 = C::u8_pair_split(ctx, v1300.1);
                                                                                        if v1306.0
                                                                                            == 0x1A
                                                                                        {
                                                                                            if v1306.1 == 0x1B {
                                                                                                let v1309 = C::u16_pair_split(ctx, v1297.1);
                                                                                                let v1312 = C::u8_pair_split(ctx, v1309.0);
                                                                                                if v1312.0 == 0x1C {
                                                                                                    if v1312.1 == 0x1D {
                                                                                                        let v1315 = C::u8_pair_split(ctx, v1309.1);
                                                                                                        if v1315.0 == 0x1E {
                                                                                                            if v1315.1 == 0x1F {
                                                                                                                let v1253 = C::unpack_value_array_2(ctx, v1251);
                                                                                                                let v1326 = C::put_in_reg(ctx, v1253.1);
                                                                                                                let v1269 = C::put_in_reg(ctx, v1253.1);
                                                                                                                let v1375 = constructor_vec_merge_low(ctx, I64X2, v1326, v1269);
                                                                                                                let v1376 = constructor_output_reg(ctx, v1375);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2168.
                                                                                                                return Some(v1376);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                _ => {}
                            }
                            let v1253 = C::unpack_value_array_2(ctx, v1251);
                            let v1268 = C::put_in_reg(ctx, v1253.0);
                            let v1269 = C::put_in_reg(ctx, v1253.1);
                            let v1270 = constructor_vec_imm(ctx, I8X16, v1258.0);
                            let v1271 = constructor_vec_permute(ctx, I8X16, v1268, v1269, v1270);
                            let v1272 = constructor_output_reg(ctx, v1271);
                            // Rule at src/isa/s390x/lower.isle line 2106.
                            return Some(v1272);
                        }
                        _ => {}
                    }
                    let v1261 = constructor_vec_imm_byte_mask(ctx, I8X16, v1258.1);
                    let v1253 = C::unpack_value_array_2(ctx, v1251);
                    let v1262 = C::put_in_reg(ctx, v1253.0);
                    let v1263 = C::put_in_reg(ctx, v1253.1);
                    let v1264 = constructor_vec_imm(ctx, I8X16, v1258.0);
                    let v1265 = constructor_vec_permute(ctx, I8X16, v1262, v1263, v1264);
                    let v1266 = constructor_vec_and(ctx, I8X16, v1261, v1265);
                    let v1267 = constructor_output_reg(ctx, v1266);
                    // Rule at src/isa/s390x/lower.isle line 2101.
                    return Some(v1267);
                }
            }
        }
        &InstructionData::StackLoad {
            opcode: ref v1461,
            stack_slot: v1462,
            offset: v1463,
        } => {
            if let &Opcode::StackAddr = v1461 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v1464 = constructor_stack_addr_impl(ctx, v3, v1462, v1463);
                    let v1465 = constructor_output_reg(ctx, v1464);
                    // Rule at src/isa/s390x/lower.isle line 2288.
                    return Some(v1465);
                }
            }
        }
        &InstructionData::Store {
            opcode: ref v1168,
            args: ref v1169,
            flags: v1170,
            offset: v1171,
        } => {
            match v1168 {
                &Opcode::Store => {
                    let v1172 = C::unpack_value_array_2(ctx, v1169);
                    let v1175 = C::def_inst(ctx, v1172.0);
                    if let Some(v1176) = v1175 {
                        let v1177 = &C::inst_data(ctx, v1176);
                        if let &InstructionData::BinaryImm8 {
                            opcode: ref v1178,
                            arg: v1179,
                            imm: v1180,
                        } = v1177
                        {
                            if let &Opcode::Extractlane = v1178 {
                                let v1183 = C::bigendian(ctx, v1170);
                                if let Some(v1184) = v1183 {
                                    let v1185 = C::put_in_reg(ctx, v1179);
                                    let v1186 =
                                        &constructor_lower_address(ctx, v1170, v1172.1, v1171);
                                    let v1181 = C::value_type(ctx, v1179);
                                    let v1182 = C::u8_from_uimm8(ctx, v1180);
                                    let v1187 = C::be_lane_idx(ctx, v1181, v1182);
                                    let v1188 = &constructor_vec_store_lane(
                                        ctx, v1181, v1185, v1186, v1187,
                                    );
                                    let v1189 = constructor_side_effect(ctx, v1188);
                                    // Rule at src/isa/s390x/lower.isle line 1944.
                                    return Some(v1189);
                                }
                                let v1190 = C::littleendian(ctx, v1170);
                                if let Some(v1191) = v1190 {
                                    let v1185 = C::put_in_reg(ctx, v1179);
                                    let v1186 =
                                        &constructor_lower_address(ctx, v1170, v1172.1, v1171);
                                    let v1181 = C::value_type(ctx, v1179);
                                    let v1182 = C::u8_from_uimm8(ctx, v1180);
                                    let v1187 = C::be_lane_idx(ctx, v1181, v1182);
                                    let v1192 = &constructor_vec_store_lane_little(
                                        ctx, v1181, v1185, v1186, v1187,
                                    );
                                    let v1193 = constructor_side_effect(ctx, v1192);
                                    // Rule at src/isa/s390x/lower.isle line 1951.
                                    return Some(v1193);
                                }
                            }
                        }
                    }
                    let v1447 = &C::lane_order(ctx);
                    match v1447 {
                        &LaneOrder::LittleEndian => {
                            let v1594 = C::value_type(ctx, v1172.0);
                            let v1612 = C::vr128_ty(ctx, v1594);
                            if let Some(v1613) = v1612 {
                                let v1183 = C::bigendian(ctx, v1170);
                                if let Some(v1184) = v1183 {
                                    let v1603 = C::put_in_reg(ctx, v1172.0);
                                    let v1618 = &constructor_vec_store_elt_rev(
                                        ctx, v1613, v1603, v1170, v1172.1, v1171,
                                    );
                                    let v1619 = constructor_side_effect(ctx, v1618);
                                    // Rule at src/isa/s390x/lower.isle line 2739.
                                    return Some(v1619);
                                }
                                let v1190 = C::littleendian(ctx, v1170);
                                if let Some(v1191) = v1190 {
                                    let v1603 = C::put_in_reg(ctx, v1172.0);
                                    let v1620 = &constructor_vec_store_full_rev(
                                        ctx, v1613, v1603, v1170, v1172.1, v1171,
                                    );
                                    let v1621 = constructor_side_effect(ctx, v1620);
                                    // Rule at src/isa/s390x/lower.isle line 2745.
                                    return Some(v1621);
                                }
                            }
                        }
                        &LaneOrder::BigEndian => {
                            let v1594 = C::value_type(ctx, v1172.0);
                            let v1612 = C::vr128_ty(ctx, v1594);
                            if let Some(v1613) = v1612 {
                                let v1183 = C::bigendian(ctx, v1170);
                                if let Some(v1184) = v1183 {
                                    let v1603 = C::put_in_reg(ctx, v1172.0);
                                    let v1186 =
                                        &constructor_lower_address(ctx, v1170, v1172.1, v1171);
                                    let v1614 = &constructor_vec_store(ctx, v1603, v1186);
                                    let v1615 = constructor_side_effect(ctx, v1614);
                                    // Rule at src/isa/s390x/lower.isle line 2727.
                                    return Some(v1615);
                                }
                                let v1190 = C::littleendian(ctx, v1170);
                                if let Some(v1191) = v1190 {
                                    let v1603 = C::put_in_reg(ctx, v1172.0);
                                    let v1616 = &constructor_vec_store_byte_rev(
                                        ctx, v1613, v1603, v1170, v1172.1, v1171,
                                    );
                                    let v1617 = constructor_side_effect(ctx, v1616);
                                    // Rule at src/isa/s390x/lower.isle line 2733.
                                    return Some(v1617);
                                }
                            }
                        }
                        _ => {}
                    }
                    let v1594 = C::value_type(ctx, v1172.0);
                    match v1594 {
                        I8 => {
                            let v1595 =
                                &constructor_istore8_impl(ctx, v1170, v1172.0, v1172.1, v1171);
                            let v1596 = constructor_side_effect(ctx, v1595);
                            // Rule at src/isa/s390x/lower.isle line 2683.
                            return Some(v1596);
                        }
                        I16 => {
                            let v1597 =
                                &constructor_istore16_impl(ctx, v1170, v1172.0, v1172.1, v1171);
                            let v1598 = constructor_side_effect(ctx, v1597);
                            // Rule at src/isa/s390x/lower.isle line 2687.
                            return Some(v1598);
                        }
                        I32 => {
                            let v1599 =
                                &constructor_istore32_impl(ctx, v1170, v1172.0, v1172.1, v1171);
                            let v1600 = constructor_side_effect(ctx, v1599);
                            // Rule at src/isa/s390x/lower.isle line 2691.
                            return Some(v1600);
                        }
                        I64 => {
                            let v1601 =
                                &constructor_istore64_impl(ctx, v1170, v1172.0, v1172.1, v1171);
                            let v1602 = constructor_side_effect(ctx, v1601);
                            // Rule at src/isa/s390x/lower.isle line 2695.
                            return Some(v1602);
                        }
                        R64 => {
                            let v1601 =
                                &constructor_istore64_impl(ctx, v1170, v1172.0, v1172.1, v1171);
                            let v1602 = constructor_side_effect(ctx, v1601);
                            // Rule at src/isa/s390x/lower.isle line 2699.
                            return Some(v1602);
                        }
                        F32 => {
                            let v1190 = C::littleendian(ctx, v1170);
                            if let Some(v1191) = v1190 {
                                let v1603 = C::put_in_reg(ctx, v1172.0);
                                let v1186 = &constructor_lower_address(ctx, v1170, v1172.1, v1171);
                                let v1606 = &constructor_vec_store_lane_little(
                                    ctx, F32X4, v1603, v1186, 0x0,
                                );
                                let v1607 = constructor_side_effect(ctx, v1606);
                                // Rule at src/isa/s390x/lower.isle line 2709.
                                return Some(v1607);
                            }
                            let v1183 = C::bigendian(ctx, v1170);
                            if let Some(v1184) = v1183 {
                                let v1603 = C::put_in_reg(ctx, v1172.0);
                                let v1186 = &constructor_lower_address(ctx, v1170, v1172.1, v1171);
                                let v1604 =
                                    &constructor_vec_store_lane(ctx, F32X4, v1603, v1186, 0x0);
                                let v1605 = constructor_side_effect(ctx, v1604);
                                // Rule at src/isa/s390x/lower.isle line 2703.
                                return Some(v1605);
                            }
                        }
                        F64 => {
                            let v1190 = C::littleendian(ctx, v1170);
                            if let Some(v1191) = v1190 {
                                let v1603 = C::put_in_reg(ctx, v1172.0);
                                let v1186 = &constructor_lower_address(ctx, v1170, v1172.1, v1171);
                                let v1610 = &constructor_vec_store_lane_little(
                                    ctx, F64X2, v1603, v1186, 0x0,
                                );
                                let v1611 = constructor_side_effect(ctx, v1610);
                                // Rule at src/isa/s390x/lower.isle line 2721.
                                return Some(v1611);
                            }
                            let v1183 = C::bigendian(ctx, v1170);
                            if let Some(v1184) = v1183 {
                                let v1603 = C::put_in_reg(ctx, v1172.0);
                                let v1186 = &constructor_lower_address(ctx, v1170, v1172.1, v1171);
                                let v1608 =
                                    &constructor_vec_store_lane(ctx, F64X2, v1603, v1186, 0x0);
                                let v1609 = constructor_side_effect(ctx, v1608);
                                // Rule at src/isa/s390x/lower.isle line 2715.
                                return Some(v1609);
                            }
                        }
                        _ => {}
                    }
                }
                &Opcode::Istore8 => {
                    let v1172 = C::unpack_value_array_2(ctx, v1169);
                    let v1595 = &constructor_istore8_impl(ctx, v1170, v1172.0, v1172.1, v1171);
                    let v1596 = constructor_side_effect(ctx, v1595);
                    // Rule at src/isa/s390x/lower.isle line 2839.
                    return Some(v1596);
                }
                &Opcode::Istore16 => {
                    let v1172 = C::unpack_value_array_2(ctx, v1169);
                    let v1597 = &constructor_istore16_impl(ctx, v1170, v1172.0, v1172.1, v1171);
                    let v1598 = constructor_side_effect(ctx, v1597);
                    // Rule at src/isa/s390x/lower.isle line 2857.
                    return Some(v1598);
                }
                &Opcode::Istore32 => {
                    let v1172 = C::unpack_value_array_2(ctx, v1169);
                    let v1599 = &constructor_istore32_impl(ctx, v1170, v1172.0, v1172.1, v1171);
                    let v1600 = constructor_side_effect(ctx, v1599);
                    // Rule at src/isa/s390x/lower.isle line 2883.
                    return Some(v1600);
                }
                _ => {}
            }
        }
        &InstructionData::StoreNoOffset {
            opcode: ref v1734,
            args: ref v1735,
            flags: v1736,
        } => {
            if let &Opcode::AtomicStore = v1734 {
                let v1737 = C::unpack_value_array_2(ctx, v1735);
                let v1740 = C::value_type(ctx, v1737.0);
                match v1740 {
                    I8 => {
                        let v1714 = C::zero_offset(ctx);
                        let v1741 = &constructor_istore8_impl(ctx, v1736, v1737.0, v1737.1, v1714);
                        let v1742 = constructor_atomic_store_impl(ctx, v1741);
                        // Rule at src/isa/s390x/lower.isle line 3289.
                        return Some(v1742);
                    }
                    I16 => {
                        let v1714 = C::zero_offset(ctx);
                        let v1743 = &constructor_istore16_impl(ctx, v1736, v1737.0, v1737.1, v1714);
                        let v1744 = constructor_atomic_store_impl(ctx, v1743);
                        // Rule at src/isa/s390x/lower.isle line 3293.
                        return Some(v1744);
                    }
                    I32 => {
                        let v1714 = C::zero_offset(ctx);
                        let v1745 = &constructor_istore32_impl(ctx, v1736, v1737.0, v1737.1, v1714);
                        let v1746 = constructor_atomic_store_impl(ctx, v1745);
                        // Rule at src/isa/s390x/lower.isle line 3297.
                        return Some(v1746);
                    }
                    I64 => {
                        let v1714 = C::zero_offset(ctx);
                        let v1747 = &constructor_istore64_impl(ctx, v1736, v1737.0, v1737.1, v1714);
                        let v1748 = constructor_atomic_store_impl(ctx, v1747);
                        // Rule at src/isa/s390x/lower.isle line 3301.
                        return Some(v1748);
                    }
                    _ => {}
                }
            }
        }
        &InstructionData::Ternary {
            opcode: ref v738,
            args: ref v739,
        } => {
            match v738 {
                &Opcode::Select => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v740 = C::unpack_value_array_3(ctx, v739);
                        let v1902 = &constructor_value_nonzero(ctx, v740.0);
                        let v745 = C::put_in_reg(ctx, v740.1);
                        let v901 = C::put_in_reg(ctx, v740.2);
                        let v3 = C::value_type(ctx, v2);
                        let v1903 = constructor_select_bool_reg(ctx, v3, v1902, v745, v901);
                        let v1904 = constructor_output_reg(ctx, v1903);
                        // Rule at src/isa/s390x/lower.isle line 3768.
                        return Some(v1904);
                    }
                }
                &Opcode::SelectSpectreGuard => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v740 = C::unpack_value_array_3(ctx, v739);
                        let v1902 = &constructor_value_nonzero(ctx, v740.0);
                        let v745 = C::put_in_reg(ctx, v740.1);
                        let v901 = C::put_in_reg(ctx, v740.2);
                        let v3 = C::value_type(ctx, v2);
                        let v1903 = constructor_select_bool_reg(ctx, v3, v1902, v745, v901);
                        let v1904 = constructor_output_reg(ctx, v1903);
                        // Rule at src/isa/s390x/lower.isle line 3778.
                        return Some(v1904);
                    }
                }
                &Opcode::Bitselect => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v633 = C::mie2_enabled(ctx, v3);
                            if let Some(v634) = v633 {
                                let v740 = C::unpack_value_array_3(ctx, v739);
                                let v744 = C::put_in_reg(ctx, v740.0);
                                let v745 = C::put_in_reg(ctx, v740.1);
                                let v746 = constructor_and_reg(ctx, v61, v745, v744);
                                let v747 = C::put_in_reg(ctx, v740.2);
                                let v748 = constructor_and_not_reg(ctx, v61, v747, v744);
                                let v749 = constructor_or_reg(ctx, v61, v748, v746);
                                let v750 = constructor_output_reg(ctx, v749);
                                // Rule at src/isa/s390x/lower.isle line 1155.
                                return Some(v750);
                            }
                            let v637 = C::mie2_disabled(ctx, v3);
                            if let Some(v638) = v637 {
                                let v740 = C::unpack_value_array_3(ctx, v739);
                                let v744 = C::put_in_reg(ctx, v740.0);
                                let v745 = C::put_in_reg(ctx, v740.1);
                                let v746 = constructor_and_reg(ctx, v61, v745, v744);
                                let v747 = C::put_in_reg(ctx, v740.2);
                                let v751 = constructor_not_reg(ctx, v61, v744);
                                let v752 = constructor_and_reg(ctx, v61, v747, v751);
                                let v753 = constructor_or_reg(ctx, v61, v752, v746);
                                let v754 = constructor_output_reg(ctx, v753);
                                // Rule at src/isa/s390x/lower.isle line 1162.
                                return Some(v754);
                            }
                        }
                        let v35 = C::vr128_ty(ctx, v3);
                        if let Some(v36) = v35 {
                            let v740 = C::unpack_value_array_3(ctx, v739);
                            let v755 = C::put_in_reg(ctx, v740.1);
                            let v756 = C::put_in_reg(ctx, v740.2);
                            let v757 = C::put_in_reg(ctx, v740.0);
                            let v758 = constructor_vec_select(ctx, v36, v755, v756, v757);
                            let v759 = constructor_output_reg(ctx, v758);
                            // Rule at src/isa/s390x/lower.isle line 1169.
                            return Some(v759);
                        }
                    }
                }
                &Opcode::Vselect => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v740 = C::unpack_value_array_3(ctx, v739);
                            let v755 = C::put_in_reg(ctx, v740.1);
                            let v756 = C::put_in_reg(ctx, v740.2);
                            let v757 = C::put_in_reg(ctx, v740.0);
                            let v760 = constructor_vec_select(ctx, v149, v755, v756, v757);
                            let v761 = constructor_output_reg(ctx, v760);
                            // Rule at src/isa/s390x/lower.isle line 1176.
                            return Some(v761);
                        }
                    }
                }
                &Opcode::Fma => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v740 = C::unpack_value_array_3(ctx, v739);
                        let v744 = C::put_in_reg(ctx, v740.0);
                        let v745 = C::put_in_reg(ctx, v740.1);
                        let v901 = C::put_in_reg(ctx, v740.2);
                        let v3 = C::value_type(ctx, v2);
                        let v902 = constructor_fma_reg(ctx, v3, v744, v745, v901);
                        let v903 = constructor_output_reg(ctx, v902);
                        // Rule at src/isa/s390x/lower.isle line 1464.
                        return Some(v903);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::TernaryImm8 {
            opcode: ref v1102,
            args: ref v1103,
            imm: v1104,
        } => {
            if let &Opcode::Insertlane = v1102 {
                let v1105 = C::unpack_value_array_2(ctx, v1103);
                let v1139 = C::sinkable_inst(ctx, v1105.1);
                if let Some(v1140) = v1139 {
                    let v1141 = &C::inst_data(ctx, v1140);
                    if let &InstructionData::Load {
                        opcode: ref v1142,
                        arg: v1143,
                        flags: v1144,
                        offset: v1145,
                    } = v1141
                    {
                        if let &Opcode::Load = v1142 {
                            let v1151 = C::littleendian(ctx, v1144);
                            if let Some(v1152) = v1151 {
                                let v1113 = C::put_in_reg(ctx, v1105.0);
                                let v1148 = &constructor_sink_load(ctx, v1140);
                                let v1108 = C::value_type(ctx, v1105.0);
                                let v1110 = C::u8_from_uimm8(ctx, v1104);
                                let v1115 = C::be_lane_idx(ctx, v1108, v1110);
                                let v1153 = constructor_vec_load_lane_little(
                                    ctx, v1108, v1113, v1148, v1115,
                                );
                                let v1154 = constructor_output_reg(ctx, v1153);
                                // Rule at src/isa/s390x/lower.isle line 1846.
                                return Some(v1154);
                            }
                            let v1146 = C::bigendian(ctx, v1144);
                            if let Some(v1147) = v1146 {
                                let v1113 = C::put_in_reg(ctx, v1105.0);
                                let v1148 = &constructor_sink_load(ctx, v1140);
                                let v1108 = C::value_type(ctx, v1105.0);
                                let v1110 = C::u8_from_uimm8(ctx, v1104);
                                let v1115 = C::be_lane_idx(ctx, v1108, v1110);
                                let v1149 =
                                    constructor_vec_load_lane(ctx, v1108, v1113, v1148, v1115);
                                let v1150 = constructor_output_reg(ctx, v1149);
                                // Rule at src/isa/s390x/lower.isle line 1841.
                                return Some(v1150);
                            }
                        }
                    }
                }
                let v1135 = C::i16_from_value(ctx, v1105.1);
                if let Some(v1136) = v1135 {
                    let v1113 = C::put_in_reg(ctx, v1105.0);
                    let v1108 = C::value_type(ctx, v1105.0);
                    let v1110 = C::u8_from_uimm8(ctx, v1104);
                    let v1120 = C::be_lane_idx(ctx, v1108, v1110);
                    let v1137 = constructor_vec_insert_lane_imm(ctx, v1108, v1113, v1136, v1120);
                    let v1138 = constructor_output_reg(ctx, v1137);
                    // Rule at src/isa/s390x/lower.isle line 1836.
                    return Some(v1138);
                }
                let v1124 = C::def_inst(ctx, v1105.1);
                if let Some(v1125) = v1124 {
                    let v1126 = &C::inst_data(ctx, v1125);
                    if let &InstructionData::BinaryImm8 {
                        opcode: ref v1127,
                        arg: v1128,
                        imm: v1129,
                    } = v1126
                    {
                        if let &Opcode::Extractlane = v1127 {
                            let v1113 = C::put_in_reg(ctx, v1105.0);
                            let v1108 = C::value_type(ctx, v1105.0);
                            let v1110 = C::u8_from_uimm8(ctx, v1104);
                            let v1120 = C::be_lane_idx(ctx, v1108, v1110);
                            let v1131 = C::put_in_reg(ctx, v1128);
                            let v1130 = C::u8_from_uimm8(ctx, v1129);
                            let v1132 = C::be_lane_idx(ctx, v1108, v1130);
                            let v1133 = constructor_vec_move_lane_and_insert(
                                ctx, v1108, v1113, v1120, v1131, v1132,
                            );
                            let v1134 = constructor_output_reg(ctx, v1133);
                            // Rule at src/isa/s390x/lower.isle line 1829.
                            return Some(v1134);
                        }
                    }
                }
                let v1109 = C::value_type(ctx, v1105.1);
                let v1111 = C::ty_int_ref_scalar_64(ctx, v1109);
                if let Some(v1112) = v1111 {
                    let v1113 = C::put_in_reg(ctx, v1105.0);
                    let v1114 = C::put_in_reg(ctx, v1105.1);
                    let v1108 = C::value_type(ctx, v1105.0);
                    let v1110 = C::u8_from_uimm8(ctx, v1104);
                    let v1115 = C::be_lane_idx(ctx, v1108, v1110);
                    let v55 = C::zero_reg(ctx);
                    let v1116 = constructor_vec_insert_lane(ctx, v1108, v1113, v1114, v1115, v55);
                    let v1117 = constructor_output_reg(ctx, v1116);
                    // Rule at src/isa/s390x/lower.isle line 1816.
                    return Some(v1117);
                }
                let v1118 = C::ty_scalar_float(ctx, v1109);
                if let Some(v1119) = v1118 {
                    let v1113 = C::put_in_reg(ctx, v1105.0);
                    let v1108 = C::value_type(ctx, v1105.0);
                    let v1110 = C::u8_from_uimm8(ctx, v1104);
                    let v1120 = C::be_lane_idx(ctx, v1108, v1110);
                    let v1121 = C::put_in_reg(ctx, v1105.1);
                    let v1122 =
                        constructor_vec_move_lane_and_insert(ctx, v1108, v1113, v1120, v1121, 0x0);
                    let v1123 = constructor_output_reg(ctx, v1122);
                    // Rule at src/isa/s390x/lower.isle line 1823.
                    return Some(v1123);
                }
            }
        }
        &InstructionData::Trap {
            opcode: ref v1905,
            code: ref v1906,
        } => {
            match v1905 {
                &Opcode::Trap => {
                    let v1907 = &constructor_trap_impl(ctx, v1906);
                    let v1908 = constructor_side_effect(ctx, v1907);
                    // Rule at src/isa/s390x/lower.isle line 3837.
                    return Some(v1908);
                }
                &Opcode::ResumableTrap => {
                    let v1907 = &constructor_trap_impl(ctx, v1906);
                    let v1908 = constructor_side_effect(ctx, v1907);
                    // Rule at src/isa/s390x/lower.isle line 3843.
                    return Some(v1908);
                }
                _ => {}
            }
        }
        &InstructionData::Unary {
            opcode: ref v46,
            arg: v47,
        } => {
            match v46 {
                &Opcode::Splat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1215 = C::sinkable_inst(ctx, v47);
                        if let Some(v1216) = v1215 {
                            let v1217 = &C::inst_data(ctx, v1216);
                            if let &InstructionData::Load {
                                opcode: ref v1218,
                                arg: v1219,
                                flags: v1220,
                                offset: v1221,
                            } = v1217
                            {
                                if let &Opcode::Load = v1218 {
                                    let v1227 = C::littleendian(ctx, v1220);
                                    if let Some(v1228) = v1227 {
                                        let v1224 = &constructor_sink_load(ctx, v1216);
                                        let v3 = C::value_type(ctx, v2);
                                        let v1229 =
                                            constructor_vec_load_replicate_little(ctx, v3, v1224);
                                        let v1230 = constructor_output_reg(ctx, v1229);
                                        // Rule at src/isa/s390x/lower.isle line 2013.
                                        return Some(v1230);
                                    }
                                    let v1222 = C::bigendian(ctx, v1220);
                                    if let Some(v1223) = v1222 {
                                        let v1224 = &constructor_sink_load(ctx, v1216);
                                        let v3 = C::value_type(ctx, v2);
                                        let v1225 = constructor_vec_load_replicate(ctx, v3, v1224);
                                        let v1226 = constructor_output_reg(ctx, v1225);
                                        // Rule at src/isa/s390x/lower.isle line 2009.
                                        return Some(v1226);
                                    }
                                }
                            }
                        }
                        let v1211 = C::i16_from_value(ctx, v47);
                        if let Some(v1212) = v1211 {
                            let v3 = C::value_type(ctx, v2);
                            let v1213 = constructor_vec_imm_replicate(ctx, v3, v1212);
                            let v1214 = constructor_output_reg(ctx, v1213);
                            // Rule at src/isa/s390x/lower.isle line 2005.
                            return Some(v1214);
                        }
                        let v259 = C::def_inst(ctx, v47);
                        if let Some(v260) = v259 {
                            let v261 = &C::inst_data(ctx, v260);
                            if let &InstructionData::BinaryImm8 {
                                opcode: ref v1203,
                                arg: v1204,
                                imm: v1205,
                            } = v261
                            {
                                if let &Opcode::Extractlane = v1203 {
                                    let v1207 = C::put_in_reg(ctx, v1204);
                                    let v3 = C::value_type(ctx, v2);
                                    let v1206 = C::u8_from_uimm8(ctx, v1205);
                                    let v1208 = C::be_lane_idx(ctx, v3, v1206);
                                    let v1209 =
                                        constructor_vec_replicate_lane(ctx, v3, v1207, v1208);
                                    let v1210 = constructor_output_reg(ctx, v1209);
                                    // Rule at src/isa/s390x/lower.isle line 2001.
                                    return Some(v1210);
                                }
                            }
                        }
                        let v48 = C::value_type(ctx, v47);
                        let v1194 = C::ty_int_ref_scalar_64(ctx, v48);
                        if let Some(v1195) = v1194 {
                            let v49 = C::put_in_reg(ctx, v47);
                            let v52 = C::zero_reg(ctx);
                            let v3 = C::value_type(ctx, v2);
                            let v1196 = constructor_vec_insert_lane_undef(ctx, v3, v49, 0x0, v52);
                            let v1197 = constructor_vec_replicate_lane(ctx, v3, v1196, 0x0);
                            let v1198 = constructor_output_reg(ctx, v1197);
                            // Rule at src/isa/s390x/lower.isle line 1991.
                            return Some(v1198);
                        }
                        let v1199 = C::ty_scalar_float(ctx, v48);
                        if let Some(v1200) = v1199 {
                            let v49 = C::put_in_reg(ctx, v47);
                            let v3 = C::value_type(ctx, v2);
                            let v1201 = constructor_vec_replicate_lane(ctx, v3, v49, 0x0);
                            let v1202 = constructor_output_reg(ctx, v1201);
                            // Rule at src/isa/s390x/lower.isle line 1996.
                            return Some(v1202);
                        }
                    }
                }
                &Opcode::VanyTrue => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v1833 = &constructor_vany_true_val(ctx, v47);
                            let v1834 = constructor_lower_bool(ctx, v61, v1833);
                            let v1835 = constructor_output_reg(ctx, v1834);
                            // Rule at src/isa/s390x/lower.isle line 3613.
                            return Some(v1835);
                        }
                    }
                }
                &Opcode::VallTrue => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v1830 = &constructor_vall_true_val(ctx, v47);
                            let v1831 = constructor_lower_bool(ctx, v61, v1830);
                            let v1832 = constructor_output_reg(ctx, v1831);
                            // Rule at src/isa/s390x/lower.isle line 3535.
                            return Some(v1832);
                        }
                    }
                }
                &Opcode::VhighBits => {
                    let v1447 = &C::lane_order(ctx);
                    match v1447 {
                        &LaneOrder::LittleEndian => {
                            let v48 = C::value_type(ctx, v47);
                            let v1836 = C::multi_lane(ctx, v48);
                            if let Some(v1837) = v1836 {
                                match v1837.0 {
                                    0x8 => {
                                        if v1837.1 == 0x10 {
                                            let v1850 = constructor_imm8x16(
                                                ctx, 0x0, 0x8, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38,
                                                0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78,
                                            );
                                            let v1851 = constructor_vec_imm(ctx, I8X16, v1850);
                                            let v1852 = C::put_in_reg(ctx, v47);
                                            let v1853 =
                                                constructor_vec_bitpermute(ctx, v1852, v1851);
                                            let v395 = C::zero_reg(ctx);
                                            let v1854 = constructor_vec_extract_lane(
                                                ctx, I64X2, v1853, 0x0, v395,
                                            );
                                            let v1855 = constructor_output_reg(ctx, v1854);
                                            // Rule at src/isa/s390x/lower.isle line 3689.
                                            return Some(v1855);
                                        }
                                    }
                                    0x10 => {
                                        if v1837.1 == 0x8 {
                                            let v1862 = constructor_imm8x16(
                                                ctx, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
                                                0x80, 0x0, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60,
                                                0x70,
                                            );
                                            let v1863 = constructor_vec_imm(ctx, I8X16, v1862);
                                            let v1852 = C::put_in_reg(ctx, v47);
                                            let v1864 =
                                                constructor_vec_bitpermute(ctx, v1852, v1863);
                                            let v395 = C::zero_reg(ctx);
                                            let v1865 = constructor_vec_extract_lane(
                                                ctx, I64X2, v1864, 0x0, v395,
                                            );
                                            let v1866 = constructor_output_reg(ctx, v1865);
                                            // Rule at src/isa/s390x/lower.isle line 3700.
                                            return Some(v1866);
                                        }
                                    }
                                    0x20 => {
                                        if v1837.1 == 0x4 {
                                            let v1872 = constructor_imm8x16(
                                                ctx, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
                                                0x80, 0x80, 0x80, 0x80, 0x80, 0x0, 0x20, 0x40,
                                                0x60,
                                            );
                                            let v1873 = constructor_vec_imm(ctx, I8X16, v1872);
                                            let v1852 = C::put_in_reg(ctx, v47);
                                            let v1874 =
                                                constructor_vec_bitpermute(ctx, v1852, v1873);
                                            let v395 = C::zero_reg(ctx);
                                            let v1875 = constructor_vec_extract_lane(
                                                ctx, I64X2, v1874, 0x0, v395,
                                            );
                                            let v1876 = constructor_output_reg(ctx, v1875);
                                            // Rule at src/isa/s390x/lower.isle line 3711.
                                            return Some(v1876);
                                        }
                                    }
                                    0x40 => {
                                        if v1837.1 == 0x2 {
                                            let v1882 = constructor_imm8x16(
                                                ctx, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
                                                0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x0,
                                                0x40,
                                            );
                                            let v1883 = constructor_vec_imm(ctx, I8X16, v1882);
                                            let v1852 = C::put_in_reg(ctx, v47);
                                            let v1884 =
                                                constructor_vec_bitpermute(ctx, v1852, v1883);
                                            let v395 = C::zero_reg(ctx);
                                            let v1885 = constructor_vec_extract_lane(
                                                ctx, I64X2, v1884, 0x0, v395,
                                            );
                                            let v1886 = constructor_output_reg(ctx, v1885);
                                            // Rule at src/isa/s390x/lower.isle line 3722.
                                            return Some(v1886);
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        &LaneOrder::BigEndian => {
                            let v48 = C::value_type(ctx, v47);
                            let v1836 = C::multi_lane(ctx, v48);
                            if let Some(v1837) = v1836 {
                                match v1837.0 {
                                    0x8 => {
                                        if v1837.1 == 0x10 {
                                            let v1856 = constructor_imm8x16(
                                                ctx, 0x78, 0x70, 0x68, 0x60, 0x58, 0x50, 0x48,
                                                0x40, 0x38, 0x30, 0x28, 0x20, 0x18, 0x10, 0x8, 0x0,
                                            );
                                            let v1857 = constructor_vec_imm(ctx, I8X16, v1856);
                                            let v1852 = C::put_in_reg(ctx, v47);
                                            let v1858 =
                                                constructor_vec_bitpermute(ctx, v1852, v1857);
                                            let v395 = C::zero_reg(ctx);
                                            let v1859 = constructor_vec_extract_lane(
                                                ctx, I64X2, v1858, 0x0, v395,
                                            );
                                            let v1860 = constructor_output_reg(ctx, v1859);
                                            // Rule at src/isa/s390x/lower.isle line 3694.
                                            return Some(v1860);
                                        }
                                    }
                                    0x10 => {
                                        if v1837.1 == 0x8 {
                                            let v1867 = constructor_imm8x16(
                                                ctx, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
                                                0x80, 0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10,
                                                0x0,
                                            );
                                            let v1868 = constructor_vec_imm(ctx, I8X16, v1867);
                                            let v1852 = C::put_in_reg(ctx, v47);
                                            let v1869 =
                                                constructor_vec_bitpermute(ctx, v1852, v1868);
                                            let v395 = C::zero_reg(ctx);
                                            let v1870 = constructor_vec_extract_lane(
                                                ctx, I64X2, v1869, 0x0, v395,
                                            );
                                            let v1871 = constructor_output_reg(ctx, v1870);
                                            // Rule at src/isa/s390x/lower.isle line 3705.
                                            return Some(v1871);
                                        }
                                    }
                                    0x20 => {
                                        if v1837.1 == 0x4 {
                                            let v1877 = constructor_imm8x16(
                                                ctx, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
                                                0x80, 0x80, 0x80, 0x80, 0x80, 0x60, 0x40, 0x20,
                                                0x0,
                                            );
                                            let v1878 = constructor_vec_imm(ctx, I8X16, v1877);
                                            let v1852 = C::put_in_reg(ctx, v47);
                                            let v1879 =
                                                constructor_vec_bitpermute(ctx, v1852, v1878);
                                            let v395 = C::zero_reg(ctx);
                                            let v1880 = constructor_vec_extract_lane(
                                                ctx, I64X2, v1879, 0x0, v395,
                                            );
                                            let v1881 = constructor_output_reg(ctx, v1880);
                                            // Rule at src/isa/s390x/lower.isle line 3716.
                                            return Some(v1881);
                                        }
                                    }
                                    0x40 => {
                                        if v1837.1 == 0x2 {
                                            let v1887 = constructor_imm8x16(
                                                ctx, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
                                                0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x40,
                                                0x0,
                                            );
                                            let v1888 = constructor_vec_imm(ctx, I8X16, v1887);
                                            let v1852 = C::put_in_reg(ctx, v47);
                                            let v1889 =
                                                constructor_vec_bitpermute(ctx, v1852, v1888);
                                            let v395 = C::zero_reg(ctx);
                                            let v1890 = constructor_vec_extract_lane(
                                                ctx, I64X2, v1889, 0x0, v395,
                                            );
                                            let v1891 = constructor_output_reg(ctx, v1890);
                                            // Rule at src/isa/s390x/lower.isle line 3727.
                                            return Some(v1891);
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        _ => {}
                    }
                }
                &Opcode::Ineg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v259 = C::def_inst(ctx, v47);
                            if let Some(v260) = v259 {
                                let v261 = &C::inst_data(ctx, v260);
                                if let &InstructionData::Unary {
                                    opcode: ref v262,
                                    arg: v263,
                                } = v261
                                {
                                    if let &Opcode::Sextend = v262 {
                                        let v264 = C::value_type(ctx, v263);
                                        if v264 == I32 {
                                            let v265 = C::put_in_reg(ctx, v263);
                                            let v281 = constructor_neg_reg_sext32(ctx, v61, v265);
                                            let v282 = constructor_output_reg(ctx, v281);
                                            // Rule at src/isa/s390x/lower.isle line 235.
                                            return Some(v282);
                                        }
                                    }
                                }
                            }
                            let v49 = C::put_in_reg(ctx, v47);
                            let v279 = constructor_neg_reg(ctx, v61, v49);
                            let v280 = constructor_output_reg(ctx, v279);
                            // Rule at src/isa/s390x/lower.isle line 231.
                            return Some(v280);
                        }
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v49 = C::put_in_reg(ctx, v47);
                            let v283 = constructor_vec_neg(ctx, v149, v49);
                            let v284 = constructor_output_reg(ctx, v283);
                            // Rule at src/isa/s390x/lower.isle line 239.
                            return Some(v284);
                        }
                        if v3 == I128 {
                            let v272 = constructor_vec_imm(ctx, I128, 0x0);
                            let v273 = C::put_in_reg(ctx, v47);
                            let v274 = constructor_vec_sub(ctx, I128, v272, v273);
                            let v285 = constructor_output_reg(ctx, v274);
                            // Rule at src/isa/s390x/lower.isle line 243.
                            return Some(v285);
                        }
                    }
                }
                &Opcode::Iabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v259 = C::def_inst(ctx, v47);
                            if let Some(v260) = v259 {
                                let v261 = &C::inst_data(ctx, v260);
                                if let &InstructionData::Unary {
                                    opcode: ref v262,
                                    arg: v263,
                                } = v261
                                {
                                    if let &Opcode::Sextend = v262 {
                                        let v264 = C::value_type(ctx, v263);
                                        if v264 == I32 {
                                            let v265 = C::put_in_reg(ctx, v263);
                                            let v266 = constructor_abs_reg_sext32(ctx, v61, v265);
                                            let v267 = constructor_output_reg(ctx, v266);
                                            // Rule at src/isa/s390x/lower.isle line 211.
                                            return Some(v267);
                                        }
                                    }
                                }
                            }
                            let v255 = constructor_ty_ext32(ctx, v61);
                            let v256 = constructor_put_in_reg_sext32(ctx, v47);
                            let v257 = constructor_abs_reg(ctx, v255, v256);
                            let v258 = constructor_output_reg(ctx, v257);
                            // Rule at src/isa/s390x/lower.isle line 207.
                            return Some(v258);
                        }
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v49 = C::put_in_reg(ctx, v47);
                            let v268 = constructor_vec_abs(ctx, v149, v49);
                            let v269 = constructor_output_reg(ctx, v268);
                            // Rule at src/isa/s390x/lower.isle line 215.
                            return Some(v269);
                        }
                        if v3 == I128 {
                            let v272 = constructor_vec_imm(ctx, I128, 0x0);
                            let v273 = C::put_in_reg(ctx, v47);
                            let v274 = constructor_vec_sub(ctx, I128, v272, v273);
                            let v275 = constructor_vec_replicate_lane(ctx, I64X2, v273, 0x0);
                            let v276 = constructor_vec_cmph(ctx, I64X2, v272, v275);
                            let v277 = constructor_vec_select(ctx, I128, v274, v273, v276);
                            let v278 = constructor_output_reg(ctx, v277);
                            // Rule at src/isa/s390x/lower.isle line 219.
                            return Some(v278);
                        }
                    }
                }
                &Opcode::Bnot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v259 = C::def_inst(ctx, v47);
                        if let Some(v260) = v259 {
                            let v261 = &C::inst_data(ctx, v260);
                            if let &InstructionData::Binary {
                                opcode: ref v643,
                                args: ref v644,
                            } = v261
                            {
                                if let &Opcode::Bxor = v643 {
                                    let v3 = C::value_type(ctx, v2);
                                    let v35 = C::vr128_ty(ctx, v3);
                                    if let Some(v36) = v35 {
                                        let v645 = C::unpack_value_array_2(ctx, v644);
                                        let v648 = C::put_in_reg(ctx, v645.0);
                                        let v649 = C::put_in_reg(ctx, v645.1);
                                        let v652 = constructor_vec_not_xor(ctx, v36, v648, v649);
                                        let v653 = constructor_output_reg(ctx, v652);
                                        // Rule at src/isa/s390x/lower.isle line 1024.
                                        return Some(v653);
                                    }
                                    let v60 = C::fits_in_64(ctx, v3);
                                    if let Some(v61) = v60 {
                                        let v633 = C::mie2_enabled(ctx, v3);
                                        if let Some(v634) = v633 {
                                            let v645 = C::unpack_value_array_2(ctx, v644);
                                            let v648 = C::put_in_reg(ctx, v645.0);
                                            let v649 = C::put_in_reg(ctx, v645.1);
                                            let v650 =
                                                constructor_not_xor_reg(ctx, v61, v648, v649);
                                            let v651 = constructor_output_reg(ctx, v650);
                                            // Rule at src/isa/s390x/lower.isle line 1020.
                                            return Some(v651);
                                        }
                                    }
                                }
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v633 = C::mie2_enabled(ctx, v3);
                            if let Some(v634) = v633 {
                                let v49 = C::put_in_reg(ctx, v47);
                                let v635 = constructor_not_or_reg(ctx, v61, v49, v49);
                                let v636 = constructor_output_reg(ctx, v635);
                                // Rule at src/isa/s390x/lower.isle line 1006.
                                return Some(v636);
                            }
                            let v637 = C::mie2_disabled(ctx, v3);
                            if let Some(v638) = v637 {
                                let v49 = C::put_in_reg(ctx, v47);
                                let v639 = constructor_not_reg(ctx, v61, v49);
                                let v640 = constructor_output_reg(ctx, v639);
                                // Rule at src/isa/s390x/lower.isle line 1011.
                                return Some(v640);
                            }
                        }
                        let v35 = C::vr128_ty(ctx, v3);
                        if let Some(v36) = v35 {
                            let v49 = C::put_in_reg(ctx, v47);
                            let v641 = constructor_vec_not(ctx, v36, v49);
                            let v642 = constructor_output_reg(ctx, v641);
                            // Rule at src/isa/s390x/lower.isle line 1015.
                            return Some(v642);
                        }
                    }
                }
                &Opcode::Bitrev => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v49 = C::put_in_reg(ctx, v47);
                        let v3 = C::value_type(ctx, v2);
                        let v770 = constructor_bitrev_bits(ctx, 0x1, 0xAAAAAAAAAAAAAAAA, v3, v49);
                        let v771 = constructor_bitrev_bits(ctx, 0x2, 0xCCCCCCCCCCCCCCCC, v3, v770);
                        let v772 = constructor_bitrev_bits(ctx, 0x4, 0xF0F0F0F0F0F0F0F0, v3, v771);
                        let v773 = constructor_bitrev_bytes(ctx, v3, v772);
                        let v774 = constructor_output_reg(ctx, v773);
                        // Rule at src/isa/s390x/lower.isle line 1188.
                        return Some(v774);
                    }
                }
                &Opcode::Clz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v589 = constructor_put_in_reg_zext64(ctx, v47);
                            let v778 = constructor_clz_reg(ctx, 0x40, v589);
                            let v779 = constructor_clz_offset(ctx, v61, v778);
                            let v780 = constructor_output_reg(ctx, v779);
                            // Rule at src/isa/s390x/lower.isle line 1239.
                            return Some(v780);
                        }
                        if v3 == I128 {
                            let v49 = C::put_in_reg(ctx, v47);
                            let v781 = constructor_vec_clz(ctx, I64X2, v49);
                            let v782 = constructor_vec_imm(ctx, I64X2, 0x0);
                            let v783 =
                                constructor_vec_permute_dw_imm(ctx, I64X2, v782, 0x0, v781, 0x0);
                            let v784 =
                                constructor_vec_permute_dw_imm(ctx, I64X2, v782, 0x0, v781, 0x1);
                            let v785 = constructor_vec_add(ctx, I64X2, v783, v784);
                            let v787 = constructor_vec_imm_splat(ctx, I64X2, 0x40);
                            let v788 = constructor_vec_cmpeq(ctx, I64X2, v783, v787);
                            let v789 = constructor_vec_select(ctx, I128, v785, v783, v788);
                            let v790 = constructor_output_reg(ctx, v789);
                            // Rule at src/isa/s390x/lower.isle line 1247.
                            return Some(v790);
                        }
                    }
                }
                &Opcode::Cls => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v606 = constructor_put_in_reg_sext64(ctx, v47);
                            let v609 = constructor_ashr_imm(ctx, I64, v606, 0x3F);
                            let v791 = constructor_xor_reg(ctx, I64, v606, v609);
                            let v792 = constructor_clz_reg(ctx, 0x40, v791);
                            let v793 = constructor_cls_offset(ctx, v61, v792);
                            let v794 = constructor_output_reg(ctx, v793);
                            // Rule at src/isa/s390x/lower.isle line 1273.
                            return Some(v794);
                        }
                        if v3 == I128 {
                            let v49 = C::put_in_reg(ctx, v47);
                            let v796 = constructor_vec_imm_splat(ctx, I8X16, 0xFF);
                            let v797 = constructor_vec_ashr_by_byte(ctx, v49, v796);
                            let v798 = constructor_vec_ashr_by_bit(ctx, v797, v796);
                            let v799 = constructor_vec_xor(ctx, I128, v49, v798);
                            let v800 = constructor_vec_clz(ctx, I64X2, v799);
                            let v801 = constructor_vec_imm(ctx, I64X2, 0x0);
                            let v802 =
                                constructor_vec_permute_dw_imm(ctx, I64X2, v801, 0x0, v800, 0x0);
                            let v803 =
                                constructor_vec_permute_dw_imm(ctx, I64X2, v801, 0x0, v800, 0x1);
                            let v804 = constructor_vec_add(ctx, I64X2, v802, v803);
                            let v805 = constructor_vec_imm_splat(ctx, I64X2, 0x40);
                            let v806 = constructor_vec_cmpeq(ctx, I64X2, v802, v805);
                            let v807 = constructor_vec_select(ctx, I128, v804, v802, v806);
                            let v808 = constructor_vec_add(ctx, I128, v807, v796);
                            let v809 = constructor_output_reg(ctx, v808);
                            // Rule at src/isa/s390x/lower.isle line 1281.
                            return Some(v809);
                        }
                    }
                }
                &Opcode::Ctz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v583 = C::gpr32_ty(ctx, v3);
                        if let Some(v584) = v583 {
                            let v49 = C::put_in_reg(ctx, v47);
                            let v810 = constructor_ctz_guardbit(ctx, v584);
                            let v811 = constructor_or_uimm16shifted(ctx, I64, v49, v810);
                            let v812 = constructor_neg_reg(ctx, I64, v811);
                            let v813 = constructor_and_reg(ctx, I64, v811, v812);
                            let v814 = constructor_clz_reg(ctx, 0x40, v813);
                            let v816 = constructor_imm(ctx, v584, 0x3F);
                            let v817 = constructor_sub_reg(ctx, v584, v816, v814);
                            let v818 = constructor_output_reg(ctx, v817);
                            // Rule at src/isa/s390x/lower.isle line 1310.
                            return Some(v818);
                        }
                        let v587 = C::gpr64_ty(ctx, v3);
                        if let Some(v588) = v587 {
                            let v49 = C::put_in_reg(ctx, v47);
                            let v819 = constructor_neg_reg(ctx, I64, v49);
                            let v820 = constructor_and_reg(ctx, I64, v49, v819);
                            let v822 = constructor_clz_reg(ctx, -0x1, v820);
                            let v823 = constructor_imm(ctx, I64, 0x3F);
                            let v824 = constructor_sub_reg(ctx, I64, v823, v822);
                            let v825 = constructor_output_reg(ctx, v824);
                            // Rule at src/isa/s390x/lower.isle line 1325.
                            return Some(v825);
                        }
                        if v3 == I128 {
                            let v49 = C::put_in_reg(ctx, v47);
                            let v826 = constructor_vec_ctz(ctx, I64X2, v49);
                            let v782 = constructor_vec_imm(ctx, I64X2, 0x0);
                            let v827 =
                                constructor_vec_permute_dw_imm(ctx, I64X2, v782, 0x0, v826, 0x0);
                            let v828 =
                                constructor_vec_permute_dw_imm(ctx, I64X2, v782, 0x0, v826, 0x1);
                            let v829 = constructor_vec_add(ctx, I64X2, v827, v828);
                            let v787 = constructor_vec_imm_splat(ctx, I64X2, 0x40);
                            let v830 = constructor_vec_cmpeq(ctx, I64X2, v828, v787);
                            let v831 = constructor_vec_select(ctx, I128, v829, v828, v830);
                            let v832 = constructor_output_reg(ctx, v831);
                            // Rule at src/isa/s390x/lower.isle line 1332.
                            return Some(v832);
                        }
                    }
                }
                &Opcode::Bswap => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v49 = C::put_in_reg(ctx, v47);
                        let v3 = C::value_type(ctx, v2);
                        let v775 = constructor_bitrev_bytes(ctx, v3, v49);
                        let v776 = constructor_output_reg(ctx, v775);
                        // Rule at src/isa/s390x/lower.isle line 1223.
                        return Some(v776);
                    }
                }
                &Opcode::Popcnt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v49 = C::put_in_reg(ctx, v47);
                            let v861 = constructor_vec_popcnt(ctx, v149, v49);
                            let v862 = constructor_output_reg(ctx, v861);
                            // Rule at src/isa/s390x/lower.isle line 1380.
                            return Some(v862);
                        }
                        match v3 {
                            I8 => {
                                let v49 = C::put_in_reg(ctx, v47);
                                let v833 = constructor_popcnt_byte(ctx, v49);
                                let v834 = constructor_output_reg(ctx, v833);
                                // Rule at src/isa/s390x/lower.isle line 1345.
                                return Some(v834);
                            }
                            I16 => {
                                let v637 = C::mie2_disabled(ctx, v3);
                                if let Some(v638) = v637 {
                                    let v49 = C::put_in_reg(ctx, v47);
                                    let v833 = constructor_popcnt_byte(ctx, v49);
                                    let v838 = constructor_lshr_imm(ctx, I32, v833, 0x8);
                                    let v839 = constructor_add_reg(ctx, I32, v833, v838);
                                    let v841 = C::uimm16shifted(ctx, 0xFF, 0x0);
                                    let v842 = constructor_and_uimm16shifted(ctx, I32, v839, v841);
                                    let v843 = constructor_output_reg(ctx, v842);
                                    // Rule at src/isa/s390x/lower.isle line 1361.
                                    return Some(v843);
                                }
                            }
                            I32 => {
                                let v637 = C::mie2_disabled(ctx, v3);
                                if let Some(v638) = v637 {
                                    let v49 = C::put_in_reg(ctx, v47);
                                    let v833 = constructor_popcnt_byte(ctx, v49);
                                    let v845 = constructor_lshl_imm(ctx, I32, v833, 0x10);
                                    let v846 = constructor_add_reg(ctx, I32, v833, v845);
                                    let v847 = constructor_lshl_imm(ctx, I32, v846, 0x8);
                                    let v848 = constructor_add_reg(ctx, I32, v846, v847);
                                    let v850 = constructor_lshr_imm(ctx, I32, v848, 0x18);
                                    let v851 = constructor_output_reg(ctx, v850);
                                    // Rule at src/isa/s390x/lower.isle line 1366.
                                    return Some(v851);
                                }
                            }
                            I64 => {
                                let v637 = C::mie2_disabled(ctx, v3);
                                if let Some(v638) = v637 {
                                    let v49 = C::put_in_reg(ctx, v47);
                                    let v833 = constructor_popcnt_byte(ctx, v49);
                                    let v852 = constructor_lshl_imm(ctx, I64, v833, 0x20);
                                    let v853 = constructor_add_reg(ctx, I64, v833, v852);
                                    let v854 = constructor_lshl_imm(ctx, I64, v853, 0x10);
                                    let v855 = constructor_add_reg(ctx, I64, v853, v854);
                                    let v856 = constructor_lshl_imm(ctx, I64, v855, 0x8);
                                    let v857 = constructor_add_reg(ctx, I64, v855, v856);
                                    let v859 = constructor_lshr_imm(ctx, I64, v857, 0x38);
                                    let v860 = constructor_output_reg(ctx, v859);
                                    // Rule at src/isa/s390x/lower.isle line 1372.
                                    return Some(v860);
                                }
                            }
                            I128 => {
                                let v49 = C::put_in_reg(ctx, v47);
                                let v863 = constructor_vec_popcnt(ctx, I64X2, v49);
                                let v782 = constructor_vec_imm(ctx, I64X2, 0x0);
                                let v864 = constructor_vec_permute_dw_imm(
                                    ctx, I64X2, v782, 0x0, v863, 0x0,
                                );
                                let v865 = constructor_vec_permute_dw_imm(
                                    ctx, I64X2, v782, 0x0, v863, 0x1,
                                );
                                let v866 = constructor_vec_add(ctx, I64X2, v864, v865);
                                let v867 = constructor_output_reg(ctx, v866);
                                // Rule at src/isa/s390x/lower.isle line 1384.
                                return Some(v867);
                            }
                            _ => {}
                        }
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v633 = C::mie2_enabled(ctx, v3);
                            if let Some(v634) = v633 {
                                let v589 = constructor_put_in_reg_zext64(ctx, v47);
                                let v835 = constructor_popcnt_reg(ctx, v589);
                                let v836 = constructor_output_reg(ctx, v835);
                                // Rule at src/isa/s390x/lower.isle line 1350.
                                return Some(v836);
                            }
                        }
                    }
                }
                &Opcode::Sqrt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v49 = C::put_in_reg(ctx, v47);
                        let v3 = C::value_type(ctx, v2);
                        let v904 = constructor_sqrt_reg(ctx, v3, v49);
                        let v905 = constructor_output_reg(ctx, v904);
                        // Rule at src/isa/s390x/lower.isle line 1471.
                        return Some(v905);
                    }
                }
                &Opcode::Fneg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v49 = C::put_in_reg(ctx, v47);
                        let v3 = C::value_type(ctx, v2);
                        let v906 = constructor_fneg_reg(ctx, v3, v49);
                        let v907 = constructor_output_reg(ctx, v906);
                        // Rule at src/isa/s390x/lower.isle line 1478.
                        return Some(v907);
                    }
                }
                &Opcode::Fabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v49 = C::put_in_reg(ctx, v47);
                        let v3 = C::value_type(ctx, v2);
                        let v908 = constructor_fabs_reg(ctx, v3, v49);
                        let v909 = constructor_output_reg(ctx, v908);
                        // Rule at src/isa/s390x/lower.isle line 1485.
                        return Some(v909);
                    }
                }
                &Opcode::Ceil => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v49 = C::put_in_reg(ctx, v47);
                        let v3 = C::value_type(ctx, v2);
                        let v910 = constructor_ceil_reg(ctx, v3, v49);
                        let v911 = constructor_output_reg(ctx, v910);
                        // Rule at src/isa/s390x/lower.isle line 1492.
                        return Some(v911);
                    }
                }
                &Opcode::Floor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v49 = C::put_in_reg(ctx, v47);
                        let v3 = C::value_type(ctx, v2);
                        let v912 = constructor_floor_reg(ctx, v3, v49);
                        let v913 = constructor_output_reg(ctx, v912);
                        // Rule at src/isa/s390x/lower.isle line 1499.
                        return Some(v913);
                    }
                }
                &Opcode::Trunc => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v49 = C::put_in_reg(ctx, v47);
                        let v3 = C::value_type(ctx, v2);
                        let v914 = constructor_trunc_reg(ctx, v3, v49);
                        let v915 = constructor_output_reg(ctx, v914);
                        // Rule at src/isa/s390x/lower.isle line 1506.
                        return Some(v915);
                    }
                }
                &Opcode::Nearest => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v49 = C::put_in_reg(ctx, v47);
                        let v3 = C::value_type(ctx, v2);
                        let v916 = constructor_nearest_reg(ctx, v3, v49);
                        let v917 = constructor_output_reg(ctx, v916);
                        // Rule at src/isa/s390x/lower.isle line 1513.
                        return Some(v917);
                    }
                }
                &Opcode::IsNull => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I8 {
                            let v48 = C::value_type(ctx, v47);
                            if v48 == R64 {
                                let v49 = C::put_in_reg(ctx, v47);
                                let v1892 = &constructor_icmps_simm16(ctx, I64, v49, 0x0);
                                let v1894 = &C::intcc_as_cond(ctx, &IntCC::Equal);
                                let v1895 = &constructor_bool(ctx, v1892, v1894);
                                let v1896 = constructor_lower_bool(ctx, I8, v1895);
                                let v1897 = constructor_output_reg(ctx, v1896);
                                // Rule at src/isa/s390x/lower.isle line 3737.
                                return Some(v1897);
                            }
                        }
                    }
                }
                &Opcode::IsInvalid => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I8 {
                            let v48 = C::value_type(ctx, v47);
                            if v48 == R64 {
                                let v49 = C::put_in_reg(ctx, v47);
                                let v1898 = &constructor_icmps_simm16(ctx, I64, v49, -0x1);
                                let v1894 = &C::intcc_as_cond(ctx, &IntCC::Equal);
                                let v1899 = &constructor_bool(ctx, v1898, v1894);
                                let v1900 = constructor_lower_bool(ctx, I8, v1899);
                                let v1901 = constructor_output_reg(ctx, v1900);
                                // Rule at src/isa/s390x/lower.isle line 3743.
                                return Some(v1901);
                            }
                        }
                    }
                }
                &Opcode::ScalarToVector => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1215 = C::sinkable_inst(ctx, v47);
                        if let Some(v1216) = v1215 {
                            let v1217 = &C::inst_data(ctx, v1216);
                            if let &InstructionData::Load {
                                opcode: ref v1218,
                                arg: v1219,
                                flags: v1220,
                                offset: v1221,
                            } = v1217
                            {
                                if let &Opcode::Load = v1218 {
                                    let v1227 = C::littleendian(ctx, v1220);
                                    if let Some(v1228) = v1227 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v1231 = constructor_vec_imm(ctx, v3, 0x0);
                                        let v1245 = &constructor_sink_load(ctx, v1216);
                                        let v1232 = C::be_lane_idx(ctx, v3, 0x0);
                                        let v1248 = constructor_vec_load_lane_little(
                                            ctx, v3, v1231, v1245, v1232,
                                        );
                                        let v1249 = constructor_output_reg(ctx, v1248);
                                        // Rule at src/isa/s390x/lower.isle line 2074.
                                        return Some(v1249);
                                    }
                                    let v1222 = C::bigendian(ctx, v1220);
                                    if let Some(v1223) = v1222 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v1231 = constructor_vec_imm(ctx, v3, 0x0);
                                        let v1245 = &constructor_sink_load(ctx, v1216);
                                        let v1232 = C::be_lane_idx(ctx, v3, 0x0);
                                        let v1246 =
                                            constructor_vec_load_lane(ctx, v3, v1231, v1245, v1232);
                                        let v1247 = constructor_output_reg(ctx, v1246);
                                        // Rule at src/isa/s390x/lower.isle line 2070.
                                        return Some(v1247);
                                    }
                                }
                            }
                        }
                        let v1211 = C::i16_from_value(ctx, v47);
                        if let Some(v1212) = v1211 {
                            let v3 = C::value_type(ctx, v2);
                            let v1231 = constructor_vec_imm(ctx, v3, 0x0);
                            let v1242 = C::be_lane_idx(ctx, v3, 0x0);
                            let v1243 =
                                constructor_vec_insert_lane_imm(ctx, v3, v1231, v1212, v1242);
                            let v1244 = constructor_output_reg(ctx, v1243);
                            // Rule at src/isa/s390x/lower.isle line 2066.
                            return Some(v1244);
                        }
                        let v259 = C::def_inst(ctx, v47);
                        if let Some(v260) = v259 {
                            let v261 = &C::inst_data(ctx, v260);
                            if let &InstructionData::BinaryImm8 {
                                opcode: ref v1203,
                                arg: v1204,
                                imm: v1205,
                            } = v261
                            {
                                if let &Opcode::Extractlane = v1203 {
                                    let v3 = C::value_type(ctx, v2);
                                    let v1235 = C::be_lane_idx(ctx, v3, 0x0);
                                    let v1238 = C::put_in_reg(ctx, v1204);
                                    let v1206 = C::u8_from_uimm8(ctx, v1205);
                                    let v1239 = C::be_lane_idx(ctx, v3, v1206);
                                    let v1240 = constructor_vec_move_lane_and_zero(
                                        ctx, v3, v1235, v1238, v1239,
                                    );
                                    let v1241 = constructor_output_reg(ctx, v1240);
                                    // Rule at src/isa/s390x/lower.isle line 2061.
                                    return Some(v1241);
                                }
                            }
                        }
                        let v48 = C::value_type(ctx, v47);
                        let v1194 = C::ty_int_ref_scalar_64(ctx, v48);
                        if let Some(v1195) = v1194 {
                            let v3 = C::value_type(ctx, v2);
                            let v1231 = constructor_vec_imm(ctx, v3, 0x0);
                            let v273 = C::put_in_reg(ctx, v47);
                            let v1232 = C::be_lane_idx(ctx, v3, 0x0);
                            let v55 = C::zero_reg(ctx);
                            let v1233 =
                                constructor_vec_insert_lane(ctx, v3, v1231, v273, v1232, v55);
                            let v1234 = constructor_output_reg(ctx, v1233);
                            // Rule at src/isa/s390x/lower.isle line 2050.
                            return Some(v1234);
                        }
                        let v1199 = C::ty_scalar_float(ctx, v48);
                        if let Some(v1200) = v1199 {
                            let v3 = C::value_type(ctx, v2);
                            let v1235 = C::be_lane_idx(ctx, v3, 0x0);
                            let v273 = C::put_in_reg(ctx, v47);
                            let v1236 =
                                constructor_vec_move_lane_and_zero(ctx, v3, v1235, v273, 0x0);
                            let v1237 = constructor_output_reg(ctx, v1236);
                            // Rule at src/isa/s390x/lower.isle line 2056.
                            return Some(v1237);
                        }
                    }
                }
                &Opcode::Bmask => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v762 = &constructor_value_nonzero(ctx, v47);
                        let v3 = C::value_type(ctx, v2);
                        let v763 = constructor_lower_bool_to_mask(ctx, v3, v762);
                        let v764 = constructor_output_reg(ctx, v763);
                        // Rule at src/isa/s390x/lower.isle line 1182.
                        return Some(v764);
                    }
                }
                &Opcode::Ireduce => {
                    let v48 = C::value_type(ctx, v47);
                    let v576 = C::fits_in_64(ctx, v48);
                    if let Some(v577) = v576 {
                        let v578 = constructor_output_value(ctx, v47);
                        // Rule at src/isa/s390x/lower.isle line 915.
                        return Some(v578);
                    }
                    let v579 = C::vr128_ty(ctx, v48);
                    if let Some(v580) = v579 {
                        let v49 = C::put_in_reg(ctx, v47);
                        let v52 = C::zero_reg(ctx);
                        let v581 = constructor_vec_extract_lane(ctx, I64X2, v49, 0x1, v52);
                        let v582 = constructor_output_reg(ctx, v581);
                        // Rule at src/isa/s390x/lower.isle line 919.
                        return Some(v582);
                    }
                }
                &Opcode::SwidenLow => {
                    let v48 = C::value_type(ctx, v47);
                    let v623 = C::ty_vec128(ctx, v48);
                    if let Some(v624) = v623 {
                        let v49 = C::put_in_reg(ctx, v47);
                        let v625 = constructor_vec_unpacks_low_lane_order(ctx, v624, v49);
                        let v626 = constructor_output_reg(ctx, v625);
                        // Rule at src/isa/s390x/lower.isle line 981.
                        return Some(v626);
                    }
                }
                &Opcode::SwidenHigh => {
                    let v48 = C::value_type(ctx, v47);
                    let v623 = C::ty_vec128(ctx, v48);
                    if let Some(v624) = v623 {
                        let v49 = C::put_in_reg(ctx, v47);
                        let v627 = constructor_vec_unpacks_high_lane_order(ctx, v624, v49);
                        let v628 = constructor_output_reg(ctx, v627);
                        // Rule at src/isa/s390x/lower.isle line 987.
                        return Some(v628);
                    }
                }
                &Opcode::UwidenLow => {
                    let v48 = C::value_type(ctx, v47);
                    let v623 = C::ty_vec128(ctx, v48);
                    if let Some(v624) = v623 {
                        let v49 = C::put_in_reg(ctx, v47);
                        let v629 = constructor_vec_unpacku_low_lane_order(ctx, v624, v49);
                        let v630 = constructor_output_reg(ctx, v629);
                        // Rule at src/isa/s390x/lower.isle line 993.
                        return Some(v630);
                    }
                }
                &Opcode::UwidenHigh => {
                    let v48 = C::value_type(ctx, v47);
                    let v623 = C::ty_vec128(ctx, v48);
                    if let Some(v624) = v623 {
                        let v49 = C::put_in_reg(ctx, v47);
                        let v631 = constructor_vec_unpacku_high_lane_order(ctx, v624, v49);
                        let v632 = constructor_output_reg(ctx, v631);
                        // Rule at src/isa/s390x/lower.isle line 999.
                        return Some(v632);
                    }
                }
                &Opcode::Uextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v587 = C::gpr64_ty(ctx, v3);
                        if let Some(v588) = v587 {
                            let v589 = constructor_put_in_reg_zext64(ctx, v47);
                            let v590 = constructor_output_reg(ctx, v589);
                            // Rule at src/isa/s390x/lower.isle line 930.
                            return Some(v590);
                        }
                        let v583 = C::gpr32_ty(ctx, v3);
                        if let Some(v584) = v583 {
                            let v585 = constructor_put_in_reg_zext32(ctx, v47);
                            let v586 = constructor_output_reg(ctx, v585);
                            // Rule at src/isa/s390x/lower.isle line 926.
                            return Some(v586);
                        }
                        let v35 = C::vr128_ty(ctx, v3);
                        if let Some(v36) = v35 {
                            let v48 = C::value_type(ctx, v47);
                            match v48 {
                                I8 => {
                                    let v591 = constructor_vec_imm(ctx, v36, 0x0);
                                    let v273 = C::put_in_reg(ctx, v47);
                                    let v593 = C::zero_reg(ctx);
                                    let v594 = constructor_vec_insert_lane(
                                        ctx, I8X16, v591, v273, 0xF, v593,
                                    );
                                    let v595 = constructor_output_reg(ctx, v594);
                                    // Rule at src/isa/s390x/lower.isle line 934.
                                    return Some(v595);
                                }
                                I16 => {
                                    let v591 = constructor_vec_imm(ctx, v36, 0x0);
                                    let v273 = C::put_in_reg(ctx, v47);
                                    let v593 = C::zero_reg(ctx);
                                    let v597 = constructor_vec_insert_lane(
                                        ctx, I16X8, v591, v273, 0x7, v593,
                                    );
                                    let v598 = constructor_output_reg(ctx, v597);
                                    // Rule at src/isa/s390x/lower.isle line 936.
                                    return Some(v598);
                                }
                                I32 => {
                                    let v591 = constructor_vec_imm(ctx, v36, 0x0);
                                    let v273 = C::put_in_reg(ctx, v47);
                                    let v593 = C::zero_reg(ctx);
                                    let v600 = constructor_vec_insert_lane(
                                        ctx, I32X4, v591, v273, 0x3, v593,
                                    );
                                    let v601 = constructor_output_reg(ctx, v600);
                                    // Rule at src/isa/s390x/lower.isle line 938.
                                    return Some(v601);
                                }
                                I64 => {
                                    let v591 = constructor_vec_imm(ctx, v36, 0x0);
                                    let v273 = C::put_in_reg(ctx, v47);
                                    let v593 = C::zero_reg(ctx);
                                    let v602 = constructor_vec_insert_lane(
                                        ctx, I64X2, v591, v273, 0x1, v593,
                                    );
                                    let v603 = constructor_output_reg(ctx, v602);
                                    // Rule at src/isa/s390x/lower.isle line 940.
                                    return Some(v603);
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::Sextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v587 = C::gpr64_ty(ctx, v3);
                        if let Some(v588) = v587 {
                            let v606 = constructor_put_in_reg_sext64(ctx, v47);
                            let v607 = constructor_output_reg(ctx, v606);
                            // Rule at src/isa/s390x/lower.isle line 951.
                            return Some(v607);
                        }
                        let v583 = C::gpr32_ty(ctx, v3);
                        if let Some(v584) = v583 {
                            let v604 = constructor_put_in_reg_sext32(ctx, v47);
                            let v605 = constructor_output_reg(ctx, v604);
                            // Rule at src/isa/s390x/lower.isle line 947.
                            return Some(v605);
                        }
                        let v35 = C::vr128_ty(ctx, v3);
                        if let Some(v36) = v35 {
                            let v606 = constructor_put_in_reg_sext64(ctx, v47);
                            let v609 = constructor_ashr_imm(ctx, I64, v606, 0x3F);
                            let v610 = constructor_mov_to_vec128(ctx, v36, v609, v606);
                            let v611 = constructor_output_reg(ctx, v610);
                            // Rule at src/isa/s390x/lower.isle line 955.
                            return Some(v611);
                        }
                    }
                }
                &Opcode::Fpromote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v49 = C::put_in_reg(ctx, v47);
                            let v48 = C::value_type(ctx, v47);
                            let v918 = constructor_fpromote_reg(ctx, v61, v48, v49);
                            let v919 = constructor_output_reg(ctx, v918);
                            // Rule at src/isa/s390x/lower.isle line 1520.
                            return Some(v919);
                        }
                    }
                }
                &Opcode::Fdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v49 = C::put_in_reg(ctx, v47);
                            let v48 = C::value_type(ctx, v47);
                            let v924 =
                                constructor_fdemote_reg(ctx, v61, v48, &FpuRoundMode::Current, v49);
                            let v925 = constructor_output_reg(ctx, v924);
                            // Rule at src/isa/s390x/lower.isle line 1534.
                            return Some(v925);
                        }
                    }
                }
                &Opcode::Fvdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F32X4 {
                            let v48 = C::value_type(ctx, v47);
                            if v48 == F64X2 {
                                let v49 = C::put_in_reg(ctx, v47);
                                let v926 = constructor_fdemote_reg(
                                    ctx,
                                    F32X4,
                                    F64X2,
                                    &FpuRoundMode::Current,
                                    v49,
                                );
                                let v927 = constructor_vec_lshr_imm(ctx, I64X2, v926, 0x20);
                                let v928 = constructor_vec_imm(ctx, I64X2, 0x0);
                                let v929 = constructor_vec_pack_lane_order(ctx, I64X2, v927, v928);
                                let v930 = constructor_output_reg(ctx, v929);
                                // Rule at src/isa/s390x/lower.isle line 1541.
                                return Some(v930);
                            }
                        }
                    }
                }
                &Opcode::FvpromoteLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F64X2 {
                            let v48 = C::value_type(ctx, v47);
                            if v48 == F32X4 {
                                let v49 = C::put_in_reg(ctx, v47);
                                let v273 = C::put_in_reg(ctx, v47);
                                let v920 =
                                    constructor_vec_merge_low_lane_order(ctx, I32X4, v49, v273);
                                let v921 = constructor_fpromote_reg(ctx, F64X2, F32X4, v920);
                                let v922 = constructor_output_reg(ctx, v921);
                                // Rule at src/isa/s390x/lower.isle line 1527.
                                return Some(v922);
                            }
                        }
                    }
                }
                &Opcode::FcvtToUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v49 = C::put_in_reg(ctx, v47);
                            let v48 = C::value_type(ctx, v47);
                            let v994 = &constructor_fcmp_reg(ctx, v48, v49, v49);
                            let v996 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                            let v997 = &C::trap_code_bad_conversion_to_integer(ctx);
                            let v998 = constructor_trap_if(ctx, v994, v996, v997);
                            let v999 = constructor_fcvt_to_uint_ub(ctx, v48, v61);
                            let v1000 = &constructor_fcmp_reg(ctx, v48, v49, v999);
                            let v1002 = &C::floatcc_as_cond(ctx, &FloatCC::GreaterThanOrEqual);
                            let v1003 = &C::trap_code_integer_overflow(ctx);
                            let v1004 = constructor_trap_if(ctx, v1000, v1002, v1003);
                            let v1005 = constructor_fcvt_to_uint_lb(ctx, v48);
                            let v1006 = &constructor_fcmp_reg(ctx, v48, v49, v1005);
                            let v1008 = &C::floatcc_as_cond(ctx, &FloatCC::LessThanOrEqual);
                            let v1009 = constructor_trap_if(ctx, v1006, v1008, v1003);
                            let v1010 = constructor_fcvt_flt_ty(ctx, v61, v48);
                            let v1011 = constructor_fpromote_reg(ctx, v1010, v48, v49);
                            let v1013 = constructor_fcvt_to_uint_reg(
                                ctx,
                                v1010,
                                &FpuRoundMode::ToZero,
                                v1011,
                            );
                            let v1014 = constructor_output_reg(ctx, v1013);
                            // Rule at src/isa/s390x/lower.isle line 1641.
                            return Some(v1014);
                        }
                    }
                }
                &Opcode::FcvtToSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v49 = C::put_in_reg(ctx, v47);
                            let v48 = C::value_type(ctx, v47);
                            let v994 = &constructor_fcmp_reg(ctx, v48, v49, v49);
                            let v996 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                            let v997 = &C::trap_code_bad_conversion_to_integer(ctx);
                            let v998 = constructor_trap_if(ctx, v994, v996, v997);
                            let v1015 = constructor_fcvt_to_sint_ub(ctx, v48, v61);
                            let v1016 = &constructor_fcmp_reg(ctx, v48, v49, v1015);
                            let v1002 = &C::floatcc_as_cond(ctx, &FloatCC::GreaterThanOrEqual);
                            let v1003 = &C::trap_code_integer_overflow(ctx);
                            let v1017 = constructor_trap_if(ctx, v1016, v1002, v1003);
                            let v1018 = constructor_fcvt_to_sint_lb(ctx, v48, v61);
                            let v1019 = &constructor_fcmp_reg(ctx, v48, v49, v1018);
                            let v1008 = &C::floatcc_as_cond(ctx, &FloatCC::LessThanOrEqual);
                            let v1020 = constructor_trap_if(ctx, v1019, v1008, v1003);
                            let v1010 = constructor_fcvt_flt_ty(ctx, v61, v48);
                            let v1011 = constructor_fpromote_reg(ctx, v1010, v48, v49);
                            let v1021 = constructor_fcvt_to_sint_reg(
                                ctx,
                                v1010,
                                &FpuRoundMode::ToZero,
                                v1011,
                            );
                            let v1022 = constructor_output_reg(ctx, v1021);
                            // Rule at src/isa/s390x/lower.isle line 1665.
                            return Some(v1022);
                        }
                    }
                }
                &Opcode::FcvtToUintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32X4 => {
                                let v48 = C::value_type(ctx, v47);
                                if v48 == F32X4 {
                                    let v944 = C::vxrs_ext2_enabled(ctx, v3);
                                    if let Some(v945) = v944 {
                                        let v49 = C::put_in_reg(ctx, v47);
                                        let v1029 = constructor_fcvt_to_uint_reg(
                                            ctx,
                                            F32X4,
                                            &FpuRoundMode::ToZero,
                                            v49,
                                        );
                                        let v1030 = constructor_output_reg(ctx, v1029);
                                        // Rule at src/isa/s390x/lower.isle line 1701.
                                        return Some(v1030);
                                    }
                                    let v948 = C::vxrs_ext2_disabled(ctx, v3);
                                    if let Some(v949) = v948 {
                                        let v49 = C::put_in_reg(ctx, v47);
                                        let v273 = C::put_in_reg(ctx, v47);
                                        let v1031 =
                                            constructor_vec_merge_high(ctx, I32X4, v49, v273);
                                        let v1032 =
                                            constructor_fpromote_reg(ctx, F64X2, F32X4, v1031);
                                        let v1033 = constructor_fcvt_to_uint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ToZero,
                                            v1032,
                                        );
                                        let v1034 = C::put_in_reg(ctx, v47);
                                        let v1035 = C::put_in_reg(ctx, v47);
                                        let v1036 =
                                            constructor_vec_merge_low(ctx, I32X4, v1034, v1035);
                                        let v1037 =
                                            constructor_fpromote_reg(ctx, F64X2, F32X4, v1036);
                                        let v1038 = constructor_fcvt_to_uint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ToZero,
                                            v1037,
                                        );
                                        let v1039 =
                                            constructor_vec_pack_usat(ctx, I64X2, v1033, v1038);
                                        let v1040 = constructor_output_reg(ctx, v1039);
                                        // Rule at src/isa/s390x/lower.isle line 1706.
                                        return Some(v1040);
                                    }
                                }
                            }
                            I64X2 => {
                                let v48 = C::value_type(ctx, v47);
                                if v48 == F64X2 {
                                    let v49 = C::put_in_reg(ctx, v47);
                                    let v1041 = constructor_fcvt_to_uint_reg(
                                        ctx,
                                        F64X2,
                                        &FpuRoundMode::ToZero,
                                        v49,
                                    );
                                    let v1042 = constructor_output_reg(ctx, v1041);
                                    // Rule at src/isa/s390x/lower.isle line 1715.
                                    return Some(v1042);
                                }
                            }
                            _ => {}
                        }
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v49 = C::put_in_reg(ctx, v47);
                            let v48 = C::value_type(ctx, v47);
                            let v1023 = constructor_fcvt_flt_ty(ctx, v61, v48);
                            let v1024 = constructor_fcvt_int_ty(ctx, v61, v48);
                            let v1025 = constructor_fpromote_reg(ctx, v1023, v48, v49);
                            let v1026 = constructor_fcvt_to_uint_reg(
                                ctx,
                                v1023,
                                &FpuRoundMode::ToZero,
                                v1025,
                            );
                            let v1027 = constructor_uint_sat_reg(ctx, v61, v1024, v1026);
                            let v1028 = constructor_output_reg(ctx, v1027);
                            // Rule at src/isa/s390x/lower.isle line 1689.
                            return Some(v1028);
                        }
                    }
                }
                &Opcode::FcvtToSintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32X4 => {
                                let v48 = C::value_type(ctx, v47);
                                if v48 == F32X4 {
                                    let v944 = C::vxrs_ext2_enabled(ctx, v3);
                                    if let Some(v945) = v944 {
                                        let v49 = C::put_in_reg(ctx, v47);
                                        let v1051 = constructor_fcvt_to_sint_reg(
                                            ctx,
                                            F32X4,
                                            &FpuRoundMode::ToZero,
                                            v49,
                                        );
                                        let v1052 = constructor_vec_imm(ctx, I32X4, 0x0);
                                        let v1053 = C::put_in_reg(ctx, v47);
                                        let v953 = C::put_in_reg(ctx, v47);
                                        let v1054 = constructor_vec_fcmpeq(ctx, F32X4, v1053, v953);
                                        let v1055 =
                                            constructor_vec_select(ctx, I32X4, v1051, v1052, v1054);
                                        let v1056 = constructor_output_reg(ctx, v1055);
                                        // Rule at src/isa/s390x/lower.isle line 1741.
                                        return Some(v1056);
                                    }
                                    let v948 = C::vxrs_ext2_disabled(ctx, v3);
                                    if let Some(v949) = v948 {
                                        let v49 = C::put_in_reg(ctx, v47);
                                        let v273 = C::put_in_reg(ctx, v47);
                                        let v1031 =
                                            constructor_vec_merge_high(ctx, I32X4, v49, v273);
                                        let v1032 =
                                            constructor_fpromote_reg(ctx, F64X2, F32X4, v1031);
                                        let v1057 = constructor_fcvt_to_sint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ToZero,
                                            v1032,
                                        );
                                        let v1034 = C::put_in_reg(ctx, v47);
                                        let v1035 = C::put_in_reg(ctx, v47);
                                        let v1036 =
                                            constructor_vec_merge_low(ctx, I32X4, v1034, v1035);
                                        let v1037 =
                                            constructor_fpromote_reg(ctx, F64X2, F32X4, v1036);
                                        let v1058 = constructor_fcvt_to_sint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ToZero,
                                            v1037,
                                        );
                                        let v1059 =
                                            constructor_vec_pack_ssat(ctx, I64X2, v1057, v1058);
                                        let v1060 = constructor_vec_imm(ctx, I32X4, 0x0);
                                        let v1061 = C::put_in_reg(ctx, v47);
                                        let v1062 = C::put_in_reg(ctx, v47);
                                        let v1063 =
                                            constructor_vec_fcmpeq(ctx, F32X4, v1061, v1062);
                                        let v1064 =
                                            constructor_vec_select(ctx, I32X4, v1059, v1060, v1063);
                                        let v1065 = constructor_output_reg(ctx, v1064);
                                        // Rule at src/isa/s390x/lower.isle line 1749.
                                        return Some(v1065);
                                    }
                                }
                            }
                            I64X2 => {
                                let v48 = C::value_type(ctx, v47);
                                if v48 == F64X2 {
                                    let v49 = C::put_in_reg(ctx, v47);
                                    let v1066 = constructor_fcvt_to_sint_reg(
                                        ctx,
                                        F64X2,
                                        &FpuRoundMode::ToZero,
                                        v49,
                                    );
                                    let v782 = constructor_vec_imm(ctx, I64X2, 0x0);
                                    let v1053 = C::put_in_reg(ctx, v47);
                                    let v953 = C::put_in_reg(ctx, v47);
                                    let v1067 = constructor_vec_fcmpeq(ctx, F64X2, v1053, v953);
                                    let v1068 =
                                        constructor_vec_select(ctx, I64X2, v1066, v782, v1067);
                                    let v1069 = constructor_output_reg(ctx, v1068);
                                    // Rule at src/isa/s390x/lower.isle line 1761.
                                    return Some(v1069);
                                }
                            }
                            _ => {}
                        }
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v49 = C::put_in_reg(ctx, v47);
                            let v48 = C::value_type(ctx, v47);
                            let v1023 = constructor_fcvt_flt_ty(ctx, v61, v48);
                            let v1024 = constructor_fcvt_int_ty(ctx, v61, v48);
                            let v1025 = constructor_fpromote_reg(ctx, v1023, v48, v49);
                            let v1043 = constructor_fcvt_to_sint_reg(
                                ctx,
                                v1023,
                                &FpuRoundMode::ToZero,
                                v1025,
                            );
                            let v1044 = &constructor_fcmp_reg(ctx, v48, v49, v49);
                            let v1045 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                            let v1047 = &constructor_cmov_imm(ctx, v1024, v1045, 0x0, v1043);
                            let v1048 = constructor_with_flags_reg(ctx, v1044, v1047);
                            let v1049 = constructor_sint_sat_reg(ctx, v61, v1024, v1048);
                            let v1050 = constructor_output_reg(ctx, v1049);
                            // Rule at src/isa/s390x/lower.isle line 1722.
                            return Some(v1050);
                        }
                    }
                }
                &Opcode::FcvtFromUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v48 = C::value_type(ctx, v47);
                                let v931 = C::vxrs_ext2_enabled(ctx, v48);
                                if let Some(v932) = v931 {
                                    let v933 = C::fits_in_32(ctx, v48);
                                    if let Some(v934) = v933 {
                                        let v585 = constructor_put_in_reg_zext32(ctx, v47);
                                        let v936 = constructor_fcvt_from_uint_reg(
                                            ctx,
                                            F32,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v585,
                                        );
                                        let v937 = constructor_output_reg(ctx, v936);
                                        // Rule at src/isa/s390x/lower.isle line 1550.
                                        return Some(v937);
                                    }
                                }
                                let v576 = C::fits_in_64(ctx, v48);
                                if let Some(v577) = v576 {
                                    let v589 = constructor_put_in_reg_zext64(ctx, v47);
                                    let v939 = constructor_fcvt_from_uint_reg(
                                        ctx,
                                        F64,
                                        &FpuRoundMode::ShorterPrecision,
                                        v589,
                                    );
                                    let v940 = constructor_fdemote_reg(
                                        ctx,
                                        F32,
                                        F64,
                                        &FpuRoundMode::ToNearestTiesToEven,
                                        v939,
                                    );
                                    let v941 = constructor_output_reg(ctx, v940);
                                    // Rule at src/isa/s390x/lower.isle line 1556.
                                    return Some(v941);
                                }
                            }
                            F64 => {
                                let v48 = C::value_type(ctx, v47);
                                let v576 = C::fits_in_64(ctx, v48);
                                if let Some(v577) = v576 {
                                    let v589 = constructor_put_in_reg_zext64(ctx, v47);
                                    let v942 = constructor_fcvt_from_uint_reg(
                                        ctx,
                                        F64,
                                        &FpuRoundMode::ToNearestTiesToEven,
                                        v589,
                                    );
                                    let v943 = constructor_output_reg(ctx, v942);
                                    // Rule at src/isa/s390x/lower.isle line 1562.
                                    return Some(v943);
                                }
                            }
                            F32X4 => {
                                let v48 = C::value_type(ctx, v47);
                                if v48 == I32X4 {
                                    let v944 = C::vxrs_ext2_enabled(ctx, v3);
                                    if let Some(v945) = v944 {
                                        let v49 = C::put_in_reg(ctx, v47);
                                        let v946 = constructor_fcvt_from_uint_reg(
                                            ctx,
                                            F32X4,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v49,
                                        );
                                        let v947 = constructor_output_reg(ctx, v946);
                                        // Rule at src/isa/s390x/lower.isle line 1567.
                                        return Some(v947);
                                    }
                                    let v948 = C::vxrs_ext2_disabled(ctx, v3);
                                    if let Some(v949) = v948 {
                                        let v49 = C::put_in_reg(ctx, v47);
                                        let v950 = constructor_vec_unpacku_high(ctx, I32X4, v49);
                                        let v951 = constructor_fcvt_from_uint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ShorterPrecision,
                                            v950,
                                        );
                                        let v952 = constructor_fdemote_reg(
                                            ctx,
                                            F32X4,
                                            F64X2,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v951,
                                        );
                                        let v953 = C::put_in_reg(ctx, v47);
                                        let v954 = constructor_vec_unpacku_low(ctx, I32X4, v953);
                                        let v955 = constructor_fcvt_from_uint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ShorterPrecision,
                                            v954,
                                        );
                                        let v956 = constructor_fdemote_reg(
                                            ctx,
                                            F32X4,
                                            F64X2,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v955,
                                        );
                                        let v966 = constructor_imm8x16(
                                            ctx, 0x0, 0x1, 0x2, 0x3, 0x8, 0x9, 0xA, 0xB, 0x10,
                                            0x11, 0x12, 0x13, 0x18, 0x19, 0x1A, 0x1B,
                                        );
                                        let v967 = constructor_vec_imm(ctx, I8X16, v966);
                                        let v968 =
                                            constructor_vec_permute(ctx, F32X4, v952, v956, v967);
                                        let v969 = constructor_output_reg(ctx, v968);
                                        // Rule at src/isa/s390x/lower.isle line 1572.
                                        return Some(v969);
                                    }
                                }
                            }
                            F64X2 => {
                                let v48 = C::value_type(ctx, v47);
                                if v48 == I64X2 {
                                    let v49 = C::put_in_reg(ctx, v47);
                                    let v970 = constructor_fcvt_from_uint_reg(
                                        ctx,
                                        F64X2,
                                        &FpuRoundMode::ToNearestTiesToEven,
                                        v49,
                                    );
                                    let v971 = constructor_output_reg(ctx, v970);
                                    // Rule at src/isa/s390x/lower.isle line 1584.
                                    return Some(v971);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::FcvtFromSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v48 = C::value_type(ctx, v47);
                                let v931 = C::vxrs_ext2_enabled(ctx, v48);
                                if let Some(v932) = v931 {
                                    let v933 = C::fits_in_32(ctx, v48);
                                    if let Some(v934) = v933 {
                                        let v604 = constructor_put_in_reg_sext32(ctx, v47);
                                        let v972 = constructor_fcvt_from_sint_reg(
                                            ctx,
                                            F32,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v604,
                                        );
                                        let v973 = constructor_output_reg(ctx, v972);
                                        // Rule at src/isa/s390x/lower.isle line 1591.
                                        return Some(v973);
                                    }
                                }
                                let v576 = C::fits_in_64(ctx, v48);
                                if let Some(v577) = v576 {
                                    let v606 = constructor_put_in_reg_sext64(ctx, v47);
                                    let v974 = constructor_fcvt_from_sint_reg(
                                        ctx,
                                        F64,
                                        &FpuRoundMode::ShorterPrecision,
                                        v606,
                                    );
                                    let v975 = constructor_fdemote_reg(
                                        ctx,
                                        F32,
                                        F64,
                                        &FpuRoundMode::ToNearestTiesToEven,
                                        v974,
                                    );
                                    let v976 = constructor_output_reg(ctx, v975);
                                    // Rule at src/isa/s390x/lower.isle line 1597.
                                    return Some(v976);
                                }
                            }
                            F64 => {
                                let v48 = C::value_type(ctx, v47);
                                let v576 = C::fits_in_64(ctx, v48);
                                if let Some(v577) = v576 {
                                    let v606 = constructor_put_in_reg_sext64(ctx, v47);
                                    let v977 = constructor_fcvt_from_sint_reg(
                                        ctx,
                                        F64,
                                        &FpuRoundMode::ToNearestTiesToEven,
                                        v606,
                                    );
                                    let v978 = constructor_output_reg(ctx, v977);
                                    // Rule at src/isa/s390x/lower.isle line 1603.
                                    return Some(v978);
                                }
                            }
                            F32X4 => {
                                let v48 = C::value_type(ctx, v47);
                                if v48 == I32X4 {
                                    let v944 = C::vxrs_ext2_enabled(ctx, v3);
                                    if let Some(v945) = v944 {
                                        let v49 = C::put_in_reg(ctx, v47);
                                        let v979 = constructor_fcvt_from_sint_reg(
                                            ctx,
                                            F32X4,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v49,
                                        );
                                        let v980 = constructor_output_reg(ctx, v979);
                                        // Rule at src/isa/s390x/lower.isle line 1608.
                                        return Some(v980);
                                    }
                                    let v948 = C::vxrs_ext2_disabled(ctx, v3);
                                    if let Some(v949) = v948 {
                                        let v49 = C::put_in_reg(ctx, v47);
                                        let v981 = constructor_vec_unpacks_high(ctx, I32X4, v49);
                                        let v982 = constructor_fcvt_from_sint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ShorterPrecision,
                                            v981,
                                        );
                                        let v983 = constructor_fdemote_reg(
                                            ctx,
                                            F32X4,
                                            F64X2,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v982,
                                        );
                                        let v953 = C::put_in_reg(ctx, v47);
                                        let v984 = constructor_vec_unpacks_low(ctx, I32X4, v953);
                                        let v985 = constructor_fcvt_from_sint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ShorterPrecision,
                                            v984,
                                        );
                                        let v986 = constructor_fdemote_reg(
                                            ctx,
                                            F32X4,
                                            F64X2,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v985,
                                        );
                                        let v966 = constructor_imm8x16(
                                            ctx, 0x0, 0x1, 0x2, 0x3, 0x8, 0x9, 0xA, 0xB, 0x10,
                                            0x11, 0x12, 0x13, 0x18, 0x19, 0x1A, 0x1B,
                                        );
                                        let v967 = constructor_vec_imm(ctx, I8X16, v966);
                                        let v987 =
                                            constructor_vec_permute(ctx, F32X4, v983, v986, v967);
                                        let v988 = constructor_output_reg(ctx, v987);
                                        // Rule at src/isa/s390x/lower.isle line 1613.
                                        return Some(v988);
                                    }
                                }
                            }
                            F64X2 => {
                                let v48 = C::value_type(ctx, v47);
                                if v48 == I64X2 {
                                    let v49 = C::put_in_reg(ctx, v47);
                                    let v989 = constructor_fcvt_from_sint_reg(
                                        ctx,
                                        F64X2,
                                        &FpuRoundMode::ToNearestTiesToEven,
                                        v49,
                                    );
                                    let v990 = constructor_output_reg(ctx, v989);
                                    // Rule at src/isa/s390x/lower.isle line 1625.
                                    return Some(v990);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::FcvtLowFromSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F64X2 {
                            let v48 = C::value_type(ctx, v47);
                            if v48 == I32X4 {
                                let v49 = C::put_in_reg(ctx, v47);
                                let v991 = constructor_vec_unpacks_low_lane_order(ctx, I32X4, v49);
                                let v992 = constructor_fcvt_from_sint_reg(
                                    ctx,
                                    F64X2,
                                    &FpuRoundMode::ToNearestTiesToEven,
                                    v991,
                                );
                                let v993 = constructor_output_reg(ctx, v992);
                                // Rule at src/isa/s390x/lower.isle line 1632.
                                return Some(v993);
                            }
                        }
                    }
                }
                &Opcode::Isplit => {
                    let v48 = C::value_type(ctx, v47);
                    if v48 == I128 {
                        let v49 = C::put_in_reg(ctx, v47);
                        let v52 = C::zero_reg(ctx);
                        let v53 = constructor_vec_extract_lane(ctx, I64X2, v49, 0x0, v52);
                        let v55 = C::zero_reg(ctx);
                        let v56 = constructor_vec_extract_lane(ctx, I64X2, v49, 0x1, v55);
                        let v57 = C::value_reg(ctx, v56);
                        let v58 = C::value_reg(ctx, v53);
                        let v59 = C::output_pair(ctx, v57, v58);
                        // Rule at src/isa/s390x/lower.isle line 57.
                        return Some(v59);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryConst {
            opcode: ref v22,
            constant_handle: v23,
        } => {
            if let &Opcode::Vconst = v22 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v24 = C::u128_from_constant(ctx, v23);
                    if let Some(v25) = v24 {
                        let v3 = C::value_type(ctx, v2);
                        let v26 = C::be_vec_const(ctx, v3, v25);
                        let v27 = constructor_vec_imm(ctx, v3, v26);
                        let v28 = constructor_output_reg(ctx, v27);
                        // Rule at src/isa/s390x/lower.isle line 33.
                        return Some(v28);
                    }
                }
            }
        }
        &InstructionData::UnaryGlobalValue {
            opcode: ref v1483,
            global_value: v1484,
        } => {
            match v1483 {
                &Opcode::SymbolValue => {
                    let v1485 = C::symbol_value_data(ctx, v1484);
                    if let Some(v1486) = v1485 {
                        let v1490 = C::reloc_distance_near(ctx, v1486.1);
                        if let Some(v1491) = v1490 {
                            let v1492 = constructor_memarg_symbol_offset(ctx, v1486.2);
                            if let Some(v1493) = v1492 {
                                let v1475 = C::memflags_trusted(ctx);
                                let v1494 = &C::memarg_symbol(ctx, v1486.0, v1493, v1475);
                                let v1495 = constructor_load_addr(ctx, v1494);
                                let v1496 = constructor_output_reg(ctx, v1495);
                                // Rule at src/isa/s390x/lower.isle line 2306.
                                return Some(v1496);
                            }
                        }
                        let v1497 = SymbolReloc::Absolute {
                            name: v1486.0,
                            offset: v1486.2,
                        };
                        let v1498 = constructor_load_symbol_reloc(ctx, &v1497);
                        let v1499 = constructor_output_reg(ctx, v1498);
                        // Rule at src/isa/s390x/lower.isle line 2312.
                        return Some(v1499);
                    }
                }
                &Opcode::TlsValue => {
                    let v1485 = C::symbol_value_data(ctx, v1484);
                    if let Some(v1486) = v1485 {
                        if v1486.2 == 0x0 {
                            let v1500 = C::tls_model_is_elf_gd(ctx);
                            if let Some(v1501) = v1500 {
                                let v1503 = &C::memarg_got(ctx);
                                let v1504 = constructor_load_addr(ctx, v1503);
                                let v1502 = SymbolReloc::TlsGd { name: v1486.0 };
                                let v1505 = constructor_load_symbol_reloc(ctx, &v1502);
                                let v1506 =
                                    constructor_lib_call_tls_get_offset(ctx, v1504, v1505, &v1502);
                                let v1507 = constructor_thread_pointer(ctx);
                                let v1508 = constructor_add_reg(ctx, I64, v1506, v1507);
                                let v1509 = constructor_output_reg(ctx, v1508);
                                // Rule at src/isa/s390x/lower.isle line 2319.
                                return Some(v1509);
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryIeee32 {
            opcode: ref v10,
            imm: v11,
        } => {
            if let &Opcode::F32const = v10 {
                let v12 = C::u64_from_ieee32(ctx, v11);
                let v14 = constructor_imm(ctx, F32, v12);
                let v15 = constructor_output_reg(ctx, v14);
                // Rule at src/isa/s390x/lower.isle line 21.
                return Some(v15);
            }
        }
        &InstructionData::UnaryIeee64 {
            opcode: ref v16,
            imm: v17,
        } => {
            if let &Opcode::F64const = v16 {
                let v18 = C::u64_from_ieee64(ctx, v17);
                let v20 = constructor_imm(ctx, F64, v18);
                let v21 = constructor_output_reg(ctx, v20);
                // Rule at src/isa/s390x/lower.isle line 27.
                return Some(v21);
            }
        }
        &InstructionData::UnaryImm {
            opcode: ref v5,
            imm: v6,
        } => {
            if let &Opcode::Iconst = v5 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v7 = C::u64_from_imm64(ctx, v6);
                    let v8 = constructor_imm(ctx, v3, v7);
                    let v9 = constructor_output_reg(ctx, v8);
                    // Rule at src/isa/s390x/lower.isle line 15.
                    return Some(v9);
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term lower_branch.
pub fn constructor_lower_branch<C: Context>(
    ctx: &mut C,
    arg0: Inst,
    arg1: &VecMachLabel,
) -> Option<Unit> {
    let v1 = &C::inst_data(ctx, arg0);
    match v1 {
        &InstructionData::BranchTable {
            opcode: ref v9,
            arg: v10,
            table: v11,
        } => {
            if let &Opcode::BrTable = v9 {
                let v12 = constructor_put_in_reg_zext64(ctx, v10);
                let v14 = C::vec_length_minus1(ctx, arg1);
                let v15 = &constructor_icmpu_uimm32(ctx, I64, v12, v14);
                let v17 = &C::intcc_as_cond(ctx, &IntCC::UnsignedGreaterThanOrEqual);
                let v18 = &constructor_bool(ctx, v15, v17);
                let v19 = C::vec_element(ctx, arg1, 0x0);
                let v20 = &constructor_oneway_cond_br_bool(ctx, v18, v19);
                let v21 = constructor_emit_side_effect(ctx, v20);
                let v23 = constructor_lshl_imm(ctx, I64, v12, 0x2);
                let v24 = &constructor_jt_sequence(ctx, v23, arg1);
                let v25 = constructor_emit_side_effect(ctx, v24);
                // Rule at src/isa/s390x/lower.isle line 3796.
                return Some(v25);
            }
        }
        &InstructionData::Brif {
            opcode: ref v26,
            arg: v27,
            blocks: ref v28,
        } => {
            if let &Opcode::Brif = v26 {
                let v32 = &constructor_value_nonzero(ctx, v27);
                let v33 = C::vec_element(ctx, arg1, 0x0);
                let v35 = C::vec_element(ctx, arg1, 0x1);
                let v36 = &constructor_cond_br_bool(ctx, v32, v33, v35);
                let v37 = constructor_emit_side_effect(ctx, v36);
                // Rule at src/isa/s390x/lower.isle line 3829.
                return Some(v37);
            }
        }
        &InstructionData::Jump {
            opcode: ref v2,
            destination: v3,
        } => {
            if let &Opcode::Jump = v2 {
                let v6 = C::vec_element(ctx, arg1, 0x0);
                let v7 = &constructor_jump_impl(ctx, v6);
                let v8 = constructor_emit_side_effect(ctx, v7);
                // Rule at src/isa/s390x/lower.isle line 3788.
                return Some(v8);
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term vec_mul_impl.
pub fn constructor_vec_mul_impl<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    match arg0 {
        I128 => {
            let v12 = C::zero_reg(ctx);
            let v13 = constructor_vec_extract_lane(ctx, I64X2, arg1, 0x0, v12);
            let v14 = C::zero_reg(ctx);
            let v24 = constructor_vec_extract_lane(ctx, I64X2, arg1, 0x1, v14);
            let v25 = C::zero_reg(ctx);
            let v26 = constructor_vec_extract_lane(ctx, I64X2, arg2, 0x0, v25);
            let v27 = C::zero_reg(ctx);
            let v28 = constructor_vec_extract_lane(ctx, I64X2, arg2, 0x1, v27);
            let v29 = constructor_umul_wide(ctx, v24, v28);
            let v30 = C::regpair_lo(ctx, v29);
            let v31 = constructor_copy_reg(ctx, I64, v30);
            let v32 = C::regpair_hi(ctx, v29);
            let v33 = constructor_copy_reg(ctx, I64, v32);
            let v34 = constructor_mul_reg(ctx, I64, v24, v26);
            let v35 = constructor_mul_reg(ctx, I64, v13, v28);
            let v36 = constructor_add_reg(ctx, I64, v34, v33);
            let v37 = constructor_add_reg(ctx, I64, v35, v36);
            let v38 = constructor_mov_to_vec128(ctx, I64X2, v37, v31);
            // Rule at src/isa/s390x/lower.isle line 405.
            return v38;
        }
        I8X16 => {
            let v4 = constructor_vec_mul(ctx, I8X16, arg1, arg2);
            // Rule at src/isa/s390x/lower.isle line 392.
            return v4;
        }
        I16X8 => {
            let v6 = constructor_vec_mul(ctx, I16X8, arg1, arg2);
            // Rule at src/isa/s390x/lower.isle line 393.
            return v6;
        }
        I32X4 => {
            let v8 = constructor_vec_mul(ctx, I32X4, arg1, arg2);
            // Rule at src/isa/s390x/lower.isle line 394.
            return v8;
        }
        I64X2 => {
            let v12 = C::zero_reg(ctx);
            let v13 = constructor_vec_extract_lane(ctx, I64X2, arg1, 0x0, v12);
            let v14 = C::zero_reg(ctx);
            let v15 = constructor_vec_extract_lane(ctx, I64X2, arg2, 0x0, v14);
            let v16 = constructor_mul_reg(ctx, I64, v13, v15);
            let v18 = C::zero_reg(ctx);
            let v19 = constructor_vec_extract_lane(ctx, I64X2, arg1, 0x1, v18);
            let v20 = C::zero_reg(ctx);
            let v21 = constructor_vec_extract_lane(ctx, I64X2, arg2, 0x1, v20);
            let v22 = constructor_mul_reg(ctx, I64, v19, v21);
            let v23 = constructor_mov_to_vec128(ctx, I64X2, v16, v22);
            // Rule at src/isa/s390x/lower.isle line 397.
            return v23;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_mul_impl", "src/isa/s390x/lower.isle line 387"
    )
}

// Generated as internal constructor for term sqmul_impl.
pub fn constructor_sqmul_impl<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    match arg0 {
        I32X4 => {
            let v4 = constructor_vec_mul_impl(ctx, I32X4, arg1, arg2);
            let v6 = constructor_vec_imm_bit_mask(ctx, I32X4, 0x11, 0x11);
            let v7 = constructor_vec_add(ctx, I32X4, v4, v6);
            let v9 = constructor_vec_ashr_imm(ctx, I32X4, v7, 0xF);
            // Rule at src/isa/s390x/lower.isle line 509.
            return v9;
        }
        I64X2 => {
            let v11 = constructor_vec_mul_impl(ctx, I64X2, arg1, arg2);
            let v13 = constructor_vec_imm_bit_mask(ctx, I64X2, 0x21, 0x21);
            let v14 = constructor_vec_add(ctx, I64X2, v11, v13);
            let v16 = constructor_vec_ashr_imm(ctx, I64X2, v14, 0x1F);
            // Rule at src/isa/s390x/lower.isle line 513.
            return v16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sqmul_impl", "src/isa/s390x/lower.isle line 508"
    )
}

// Generated as internal constructor for term zero_divisor_check_needed.
pub fn constructor_zero_divisor_check_needed<C: Context>(ctx: &mut C, arg0: Value) -> bool {
    let v1 = C::i64_from_value(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = constructor_i64_nonzero(ctx, v2);
        if let Some(v4) = v3 {
            // Rule at src/isa/s390x/lower.isle line 577.
            return false;
        }
    }
    let v6 = C::value_type(ctx, arg0);
    let v7 = C::allow_div_traps(ctx, v6);
    if let Some(v8) = v7 {
        // Rule at src/isa/s390x/lower.isle line 580.
        return false;
    }
    // Rule at src/isa/s390x/lower.isle line 581.
    return true;
}

// Generated as internal constructor for term maybe_trap_if_zero_divisor.
pub fn constructor_maybe_trap_if_zero_divisor<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Type,
    arg2: Reg,
) -> Reg {
    match arg0 {
        true => {
            let v6 = &C::intcc_as_cond(ctx, &IntCC::Equal);
            let v7 = &C::trap_code_division_by_zero(ctx);
            let v8 = constructor_icmps_simm16_and_trap(ctx, arg1, arg2, 0x0, v6, v7);
            // Rule at src/isa/s390x/lower.isle line 587.
            return v8;
        }
        false => {
            let v3 = C::invalid_reg(ctx);
            // Rule at src/isa/s390x/lower.isle line 586.
            return v3;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "maybe_trap_if_zero_divisor", "src/isa/s390x/lower.isle line 585"
    )
}

// Generated as internal constructor for term div_overflow_check_needed.
pub fn constructor_div_overflow_check_needed<C: Context>(ctx: &mut C, arg0: Value) -> bool {
    let v1 = C::i64_from_value(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = constructor_i64_not_neg1(ctx, v2);
        if let Some(v4) = v3 {
            // Rule at src/isa/s390x/lower.isle line 659.
            return false;
        }
    }
    // Rule at src/isa/s390x/lower.isle line 662.
    return true;
}

// Generated as internal constructor for term maybe_trap_if_sdiv_overflow.
pub fn constructor_maybe_trap_if_sdiv_overflow<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Type,
    arg2: Type,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    match arg0 {
        true => {
            let v6 = constructor_int_max(ctx, arg2);
            let v7 = constructor_imm(ctx, arg1, v6);
            let v8 = constructor_xor_reg(ctx, arg1, v7, arg3);
            let v9 = constructor_and_reg(ctx, arg1, v8, arg4);
            let v12 = &C::intcc_as_cond(ctx, &IntCC::Equal);
            let v13 = &C::trap_code_integer_overflow(ctx);
            let v14 = constructor_icmps_simm16_and_trap(ctx, arg1, v9, -0x1, v12, v13);
            // Rule at src/isa/s390x/lower.isle line 675.
            return v14;
        }
        false => {
            let v5 = C::invalid_reg(ctx);
            // Rule at src/isa/s390x/lower.isle line 674.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "maybe_trap_if_sdiv_overflow", "src/isa/s390x/lower.isle line 673"
    )
}

// Generated as internal constructor for term int_max.
pub fn constructor_int_max<C: Context>(ctx: &mut C, arg0: Type) -> u64 {
    match arg0 {
        I8 => {
            // Rule at src/isa/s390x/lower.isle line 682.
            return 0x7F;
        }
        I16 => {
            // Rule at src/isa/s390x/lower.isle line 683.
            return 0x7FFF;
        }
        I32 => {
            // Rule at src/isa/s390x/lower.isle line 684.
            return 0x7FFFFFFF;
        }
        I64 => {
            // Rule at src/isa/s390x/lower.isle line 685.
            return 0x7FFFFFFFFFFFFFFF;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "int_max", "src/isa/s390x/lower.isle line 681"
    )
}

// Generated as internal constructor for term maybe_avoid_srem_overflow.
pub fn constructor_maybe_avoid_srem_overflow<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    match arg0 {
        true => {
            match arg1 {
                I32 => {
                    // Rule at src/isa/s390x/lower.isle line 703.
                    return arg2;
                }
                I64 => {
                    let v6 = &constructor_icmps_simm16(ctx, I64, arg3, -0x1);
                    let v8 = &C::intcc_as_cond(ctx, &IntCC::Equal);
                    let v10 = &constructor_cmov_imm(ctx, I64, v8, 0x0, arg2);
                    let v11 = constructor_with_flags_reg(ctx, v6, v10);
                    // Rule at src/isa/s390x/lower.isle line 704.
                    return v11;
                }
                _ => {}
            }
        }
        false => {
            // Rule at src/isa/s390x/lower.isle line 702.
            return arg2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "maybe_avoid_srem_overflow", "src/isa/s390x/lower.isle line 701"
    )
}

// Generated as internal constructor for term bitrev_bits.
pub fn constructor_bitrev_bits<C: Context>(
    ctx: &mut C,
    arg0: u8,
    arg1: u64,
    arg2: Type,
    arg3: Reg,
) -> Reg {
    let v3 = C::fits_in_64(ctx, arg2);
    if let Some(v4) = v3 {
        let v6 = constructor_imm(ctx, v4, arg1);
        let v7 = constructor_ty_ext32(ctx, v4);
        let v8 = constructor_lshl_imm(ctx, v7, arg3, arg0);
        let v9 = constructor_ty_ext32(ctx, v4);
        let v10 = constructor_lshr_imm(ctx, v9, arg3, arg0);
        let v11 = constructor_and_reg(ctx, v4, v8, v6);
        let v12 = constructor_not_reg(ctx, v4, v6);
        let v13 = constructor_and_reg(ctx, v4, v10, v12);
        let v14 = constructor_or_reg(ctx, v4, v11, v13);
        // Rule at src/isa/s390x/lower.isle line 1195.
        return v14;
    }
    let v15 = C::vr128_ty(ctx, arg2);
    if let Some(v16) = v15 {
        let v18 = constructor_vec_imm_splat(ctx, I64X2, arg1);
        let v20 = C::u8_as_u64(ctx, arg0);
        let v21 = constructor_vec_imm_splat(ctx, I8X16, v20);
        let v22 = constructor_vec_lshl_by_bit(ctx, arg3, v21);
        let v23 = constructor_vec_lshr_by_bit(ctx, arg3, v21);
        let v24 = constructor_vec_select(ctx, v16, v22, v23, v18);
        // Rule at src/isa/s390x/lower.isle line 1203.
        return v24;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "bitrev_bits", "src/isa/s390x/lower.isle line 1194"
    )
}

// Generated as internal constructor for term bitrev_bytes.
pub fn constructor_bitrev_bytes<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    match arg0 {
        I8 => {
            // Rule at src/isa/s390x/lower.isle line 1211.
            return arg1;
        }
        I16 => {
            let v3 = constructor_bswap_reg(ctx, I32, arg1);
            let v5 = constructor_lshr_imm(ctx, I32, v3, 0x10);
            // Rule at src/isa/s390x/lower.isle line 1212.
            return v5;
        }
        I32 => {
            let v3 = constructor_bswap_reg(ctx, I32, arg1);
            // Rule at src/isa/s390x/lower.isle line 1213.
            return v3;
        }
        I64 => {
            let v7 = constructor_bswap_reg(ctx, I64, arg1);
            // Rule at src/isa/s390x/lower.isle line 1214.
            return v7;
        }
        I128 => {
            let v26 = constructor_imm8x16(
                ctx, 0xF, 0xE, 0xD, 0xC, 0xB, 0xA, 0x9, 0x8, 0x7, 0x6, 0x5, 0x4, 0x3, 0x2, 0x1, 0x0,
            );
            let v27 = constructor_vec_imm(ctx, I8X16, v26);
            let v28 = constructor_vec_permute(ctx, I128, arg1, arg1, v27);
            // Rule at src/isa/s390x/lower.isle line 1215.
            return v28;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "bitrev_bytes", "src/isa/s390x/lower.isle line 1210"
    )
}

// Generated as internal constructor for term clz_offset.
pub fn constructor_clz_offset<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    match arg0 {
        I8 => {
            let v4 = constructor_add_simm16(ctx, I8, arg1, -0x38);
            // Rule at src/isa/s390x/lower.isle line 1232.
            return v4;
        }
        I16 => {
            let v7 = constructor_add_simm16(ctx, I16, arg1, -0x30);
            // Rule at src/isa/s390x/lower.isle line 1233.
            return v7;
        }
        I32 => {
            let v10 = constructor_add_simm16(ctx, I32, arg1, -0x20);
            // Rule at src/isa/s390x/lower.isle line 1234.
            return v10;
        }
        I64 => {
            let v12 = constructor_copy_reg(ctx, I64, arg1);
            // Rule at src/isa/s390x/lower.isle line 1235.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "clz_offset", "src/isa/s390x/lower.isle line 1231"
    )
}

// Generated as internal constructor for term cls_offset.
pub fn constructor_cls_offset<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    match arg0 {
        I8 => {
            let v4 = constructor_add_simm16(ctx, I8, arg1, -0x39);
            // Rule at src/isa/s390x/lower.isle line 1263.
            return v4;
        }
        I16 => {
            let v7 = constructor_add_simm16(ctx, I16, arg1, -0x31);
            // Rule at src/isa/s390x/lower.isle line 1264.
            return v7;
        }
        I32 => {
            let v10 = constructor_add_simm16(ctx, I32, arg1, -0x21);
            // Rule at src/isa/s390x/lower.isle line 1265.
            return v10;
        }
        I64 => {
            let v13 = constructor_add_simm16(ctx, I64, arg1, -0x1);
            // Rule at src/isa/s390x/lower.isle line 1266.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cls_offset", "src/isa/s390x/lower.isle line 1262"
    )
}

// Generated as internal constructor for term ctz_guardbit.
pub fn constructor_ctz_guardbit<C: Context>(ctx: &mut C, arg0: Type) -> UImm16Shifted {
    match arg0 {
        I8 => {
            let v3 = C::uimm16shifted(ctx, 0x100, 0x0);
            // Rule at src/isa/s390x/lower.isle line 1317.
            return v3;
        }
        I16 => {
            let v6 = C::uimm16shifted(ctx, 0x1, 0x10);
            // Rule at src/isa/s390x/lower.isle line 1318.
            return v6;
        }
        I32 => {
            let v8 = C::uimm16shifted(ctx, 0x1, 0x20);
            // Rule at src/isa/s390x/lower.isle line 1319.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "ctz_guardbit", "src/isa/s390x/lower.isle line 1316"
    )
}

// Generated as internal constructor for term vec_move_lane_and_insert.
pub fn constructor_vec_move_lane_and_insert<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
    arg3: Reg,
    arg4: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        if v2.0 == 0x40 {
            match arg2 {
                0x0 => {
                    let v10 = constructor_vec_permute_dw_imm(ctx, arg0, arg3, arg4, arg1, 0x1);
                    // Rule at src/isa/s390x/lower.isle line 1855.
                    return v10;
                }
                0x1 => {
                    let v12 = constructor_vec_permute_dw_imm(ctx, arg0, arg1, 0x0, arg3, arg4);
                    // Rule at src/isa/s390x/lower.isle line 1857.
                    return v12;
                }
                _ => {}
            }
        }
    }
    if arg2 == arg4 {
        let v13 = C::lane_byte_mask(ctx, arg0, arg2);
        let v14 = constructor_vec_imm_byte_mask(ctx, arg0, v13);
        let v15 = constructor_vec_select(ctx, arg0, arg3, arg1, v14);
        // Rule at src/isa/s390x/lower.isle line 1861.
        return v15;
    }
    let v16 = constructor_vec_replicate_lane(ctx, arg0, arg3, arg4);
    let v17 = C::lane_byte_mask(ctx, arg0, arg2);
    let v18 = constructor_vec_imm_byte_mask(ctx, arg0, v17);
    let v19 = constructor_vec_select(ctx, arg0, v16, arg1, v18);
    // Rule at src/isa/s390x/lower.isle line 1866.
    return v19;
}

// Generated as internal constructor for term vec_load_lane_little.
pub fn constructor_vec_load_lane_little<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                let v8 = constructor_vec_load_lane(ctx, arg0, arg1, arg2, arg3);
                // Rule at src/isa/s390x/lower.isle line 1875.
                return v8;
            }
            0x10 => {
                let v9 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v10) = v9 {
                    let v11 = constructor_vec_load_lane_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src/isa/s390x/lower.isle line 1879.
                    return v11;
                }
                let v12 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v13) = v12 {
                    let v14 = constructor_loadrev16(ctx, arg2);
                    let v15 = C::zero_reg(ctx);
                    let v16 = constructor_vec_insert_lane(ctx, arg0, arg1, v14, arg3, v15);
                    // Rule at src/isa/s390x/lower.isle line 1890.
                    return v16;
                }
            }
            0x20 => {
                let v9 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v10) = v9 {
                    let v11 = constructor_vec_load_lane_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src/isa/s390x/lower.isle line 1882.
                    return v11;
                }
                let v12 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v13) = v12 {
                    let v17 = constructor_loadrev32(ctx, arg2);
                    let v15 = C::zero_reg(ctx);
                    let v18 = constructor_vec_insert_lane(ctx, arg0, arg1, v17, arg3, v15);
                    // Rule at src/isa/s390x/lower.isle line 1893.
                    return v18;
                }
            }
            0x40 => {
                let v9 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v10) = v9 {
                    let v11 = constructor_vec_load_lane_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src/isa/s390x/lower.isle line 1885.
                    return v11;
                }
                let v12 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v13) = v12 {
                    let v19 = constructor_loadrev64(ctx, arg2);
                    let v15 = C::zero_reg(ctx);
                    let v20 = constructor_vec_insert_lane(ctx, arg0, arg1, v19, arg3, v15);
                    // Rule at src/isa/s390x/lower.isle line 1896.
                    return v20;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_lane_little", "src/isa/s390x/lower.isle line 1872"
    )
}

// Generated as internal constructor for term vec_load_lane_little_undef.
pub fn constructor_vec_load_lane_little_undef<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
    arg2: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                let v7 = constructor_vec_load_lane_undef(ctx, arg0, arg1, arg2);
                // Rule at src/isa/s390x/lower.isle line 1904.
                return v7;
            }
            0x10 => {
                let v8 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v9) = v8 {
                    let v10 = constructor_vec_load_lane_rev_undef(ctx, arg0, arg1, arg2);
                    // Rule at src/isa/s390x/lower.isle line 1908.
                    return v10;
                }
                let v11 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v12) = v11 {
                    let v13 = constructor_loadrev16(ctx, arg1);
                    let v14 = C::zero_reg(ctx);
                    let v15 = constructor_vec_insert_lane_undef(ctx, arg0, v13, arg2, v14);
                    // Rule at src/isa/s390x/lower.isle line 1919.
                    return v15;
                }
            }
            0x20 => {
                let v8 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v9) = v8 {
                    let v10 = constructor_vec_load_lane_rev_undef(ctx, arg0, arg1, arg2);
                    // Rule at src/isa/s390x/lower.isle line 1911.
                    return v10;
                }
                let v11 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v12) = v11 {
                    let v16 = constructor_loadrev32(ctx, arg1);
                    let v14 = C::zero_reg(ctx);
                    let v17 = constructor_vec_insert_lane_undef(ctx, arg0, v16, arg2, v14);
                    // Rule at src/isa/s390x/lower.isle line 1922.
                    return v17;
                }
            }
            0x40 => {
                let v8 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v9) = v8 {
                    let v10 = constructor_vec_load_lane_rev_undef(ctx, arg0, arg1, arg2);
                    // Rule at src/isa/s390x/lower.isle line 1914.
                    return v10;
                }
                let v11 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v12) = v11 {
                    let v18 = constructor_loadrev64(ctx, arg1);
                    let v14 = C::zero_reg(ctx);
                    let v19 = constructor_vec_insert_lane_undef(ctx, arg0, v18, arg2, v14);
                    // Rule at src/isa/s390x/lower.isle line 1925.
                    return v19;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_lane_little_undef", "src/isa/s390x/lower.isle line 1901"
    )
}

// Generated as internal constructor for term vec_store_lane_little.
pub fn constructor_vec_store_lane_little<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> SideEffectNoResult {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                let v8 = &constructor_vec_store_lane(ctx, arg0, arg1, arg2, arg3);
                // Rule at src/isa/s390x/lower.isle line 1962.
                return v8.clone();
            }
            0x10 => {
                let v9 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v10) = v9 {
                    let v11 = &constructor_vec_store_lane_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src/isa/s390x/lower.isle line 1966.
                    return v11.clone();
                }
                let v12 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v13) = v12 {
                    let v14 = C::zero_reg(ctx);
                    let v15 = constructor_vec_extract_lane(ctx, arg0, arg1, arg3, v14);
                    let v16 = &constructor_storerev16(ctx, v15, arg2);
                    // Rule at src/isa/s390x/lower.isle line 1977.
                    return v16.clone();
                }
            }
            0x20 => {
                let v9 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v10) = v9 {
                    let v11 = &constructor_vec_store_lane_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src/isa/s390x/lower.isle line 1969.
                    return v11.clone();
                }
                let v12 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v13) = v12 {
                    let v14 = C::zero_reg(ctx);
                    let v15 = constructor_vec_extract_lane(ctx, arg0, arg1, arg3, v14);
                    let v17 = &constructor_storerev32(ctx, v15, arg2);
                    // Rule at src/isa/s390x/lower.isle line 1980.
                    return v17.clone();
                }
            }
            0x40 => {
                let v9 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v10) = v9 {
                    let v11 = &constructor_vec_store_lane_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src/isa/s390x/lower.isle line 1972.
                    return v11.clone();
                }
                let v12 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v13) = v12 {
                    let v14 = C::zero_reg(ctx);
                    let v15 = constructor_vec_extract_lane(ctx, arg0, arg1, arg3, v14);
                    let v18 = &constructor_storerev64(ctx, v15, arg2);
                    // Rule at src/isa/s390x/lower.isle line 1983.
                    return v18.clone();
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_store_lane_little", "src/isa/s390x/lower.isle line 1959"
    )
}

// Generated as internal constructor for term vec_load_replicate_little.
pub fn constructor_vec_load_replicate_little<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                let v6 = constructor_vec_load_replicate(ctx, arg0, arg1);
                // Rule at src/isa/s390x/lower.isle line 2021.
                return v6;
            }
            0x10 => {
                let v7 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v8) = v7 {
                    let v9 = constructor_vec_load_replicate_rev(ctx, arg0, arg1);
                    // Rule at src/isa/s390x/lower.isle line 2025.
                    return v9;
                }
                let v10 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v11) = v10 {
                    let v13 = constructor_vec_load_lane_little_undef(ctx, arg0, arg1, 0x0);
                    let v14 = constructor_vec_replicate_lane(ctx, arg0, v13, 0x0);
                    // Rule at src/isa/s390x/lower.isle line 2036.
                    return v14;
                }
            }
            0x20 => {
                let v7 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v8) = v7 {
                    let v9 = constructor_vec_load_replicate_rev(ctx, arg0, arg1);
                    // Rule at src/isa/s390x/lower.isle line 2028.
                    return v9;
                }
                let v10 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v11) = v10 {
                    let v13 = constructor_vec_load_lane_little_undef(ctx, arg0, arg1, 0x0);
                    let v14 = constructor_vec_replicate_lane(ctx, arg0, v13, 0x0);
                    // Rule at src/isa/s390x/lower.isle line 2039.
                    return v14;
                }
            }
            0x40 => {
                let v7 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v8) = v7 {
                    let v9 = constructor_vec_load_replicate_rev(ctx, arg0, arg1);
                    // Rule at src/isa/s390x/lower.isle line 2031.
                    return v9;
                }
                let v10 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v11) = v10 {
                    let v13 = constructor_vec_load_lane_little_undef(ctx, arg0, arg1, 0x0);
                    let v14 = constructor_vec_replicate_lane(ctx, arg0, v13, 0x0);
                    // Rule at src/isa/s390x/lower.isle line 2042.
                    return v14;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_replicate_little", "src/isa/s390x/lower.isle line 2018"
    )
}

// Generated as internal constructor for term vec_move_lane_and_zero.
pub fn constructor_vec_move_lane_and_zero<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u8,
    arg2: Reg,
    arg3: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        if v2.0 == 0x40 {
            match arg1 {
                0x0 => {
                    let v9 = constructor_vec_imm(ctx, arg0, 0x0);
                    let v11 = constructor_vec_permute_dw_imm(ctx, arg0, arg2, arg3, v9, 0x0);
                    // Rule at src/isa/s390x/lower.isle line 2082.
                    return v11;
                }
                0x1 => {
                    let v9 = constructor_vec_imm(ctx, arg0, 0x0);
                    let v12 = constructor_vec_permute_dw_imm(ctx, arg0, v9, 0x0, arg2, arg3);
                    // Rule at src/isa/s390x/lower.isle line 2084.
                    return v12;
                }
                _ => {}
            }
        }
    }
    if arg1 == arg3 {
        let v13 = C::lane_byte_mask(ctx, arg0, arg1);
        let v14 = constructor_vec_imm_byte_mask(ctx, arg0, v13);
        let v15 = constructor_vec_and(ctx, arg0, arg2, v14);
        // Rule at src/isa/s390x/lower.isle line 2088.
        return v15;
    }
    let v16 = constructor_vec_replicate_lane(ctx, arg0, arg2, arg3);
    let v17 = C::lane_byte_mask(ctx, arg0, arg1);
    let v18 = constructor_vec_imm_byte_mask(ctx, arg0, v17);
    let v19 = constructor_vec_and(ctx, arg0, v16, v18);
    // Rule at src/isa/s390x/lower.isle line 2093.
    return v19;
}

// Generated as internal constructor for term lib_call_tls_get_offset.
pub fn constructor_lib_call_tls_get_offset<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &SymbolReloc,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = &C::lib_call_info_tls_get_offset(ctx, v4, arg0, arg1, arg2);
    let v6 = C::lib_accumulate_outgoing_args_size(ctx, v5);
    let v7 = &constructor_lib_call(ctx, v5);
    let v8 = constructor_side_effect(ctx, v7);
    let v9 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/lower.isle line 2329.
    return v9;
}

// Generated as internal constructor for term thread_pointer.
pub fn constructor_thread_pointer<C: Context>(ctx: &mut C) -> Reg {
    let v2 = constructor_load_ar(ctx, 0x0);
    let v4 = constructor_lshl_imm(ctx, I64, v2, 0x20);
    let v6 = constructor_insert_ar(ctx, v4, 0x1);
    // Rule at src/isa/s390x/lower.isle line 2338.
    return v6;
}

// Generated as internal constructor for term vec_load_full_rev.
pub fn constructor_vec_load_full_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Reg {
    let v3 = C::vr128_ty(ctx, arg0);
    if let Some(v4) = v3 {
        let v1 = C::vxrs_ext2_enabled(ctx, arg0);
        if let Some(v2) = v1 {
            let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
            let v9 = constructor_vec_loadrev(ctx, v4, v8);
            // Rule at src/isa/s390x/lower.isle line 2421.
            return v9;
        }
        let v10 = C::vxrs_ext2_disabled(ctx, arg0);
        if let Some(v11) = v10 {
            let v13 = &constructor_lower_address_bias(ctx, arg1, arg2, arg3, 0x0);
            let v15 = &constructor_lower_address_bias(ctx, arg1, arg2, arg3, 0x8);
            let v16 = constructor_loadrev64(ctx, v13);
            let v17 = constructor_loadrev64(ctx, v15);
            let v18 = constructor_mov_to_vec128(ctx, v4, v17, v16);
            // Rule at src/isa/s390x/lower.isle line 2425.
            return v18;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_full_rev", "src/isa/s390x/lower.isle line 2418"
    )
}

// Generated as internal constructor for term vec_load_byte_rev.
pub fn constructor_vec_load_byte_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Reg {
    let v6 = C::multi_lane(ctx, arg0);
    if let Some(v7) = v6 {
        match v7.0 {
            0x8 => {
                if v7.1 == 0x10 {
                    let v10 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                    let v11 = constructor_vec_load(ctx, arg0, v10);
                    // Rule at src/isa/s390x/lower.isle line 2441.
                    return v11;
                }
            }
            0x10 => {
                if v7.1 == 0x8 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v10 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v16 = constructor_vec_load_byte16rev(ctx, arg0, v10);
                        // Rule at src/isa/s390x/lower.isle line 2451.
                        return v16;
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v19 = constructor_vec_load_full_rev(ctx, arg0, arg1, arg2, arg3);
                        let v20 = constructor_vec_elt_rev(ctx, arg0, v19);
                        // Rule at src/isa/s390x/lower.isle line 2462.
                        return v20;
                    }
                }
            }
            0x20 => {
                if v7.1 == 0x4 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v10 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v15 = constructor_vec_load_byte32rev(ctx, arg0, v10);
                        // Rule at src/isa/s390x/lower.isle line 2448.
                        return v15;
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v19 = constructor_vec_load_full_rev(ctx, arg0, arg1, arg2, arg3);
                        let v20 = constructor_vec_elt_rev(ctx, arg0, v19);
                        // Rule at src/isa/s390x/lower.isle line 2459.
                        return v20;
                    }
                }
            }
            0x40 => {
                if v7.1 == 0x2 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v10 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v14 = constructor_vec_load_byte64rev(ctx, arg0, v10);
                        // Rule at src/isa/s390x/lower.isle line 2445.
                        return v14;
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v19 = constructor_vec_load_full_rev(ctx, arg0, arg1, arg2, arg3);
                        let v20 = constructor_vec_elt_rev(ctx, arg0, v19);
                        // Rule at src/isa/s390x/lower.isle line 2456.
                        return v20;
                    }
                }
            }
            _ => {}
        }
    }
    if arg0 == I128 {
        let v5 = constructor_vec_load_full_rev(ctx, I128, arg1, arg2, arg3);
        // Rule at src/isa/s390x/lower.isle line 2437.
        return v5;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_byte_rev", "src/isa/s390x/lower.isle line 2434"
    )
}

// Generated as internal constructor for term vec_load_elt_rev.
pub fn constructor_vec_load_elt_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Reg {
    let v7 = C::multi_lane(ctx, arg0);
    if let Some(v8) = v7 {
        match v8.0 {
            0x8 => {
                if v8.1 == 0x10 {
                    let v11 = constructor_vec_load_full_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src/isa/s390x/lower.isle line 2476.
                    return v11;
                }
            }
            0x10 => {
                if v8.1 == 0x8 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v16 = constructor_vec_load_elt16rev(ctx, arg0, v5);
                        // Rule at src/isa/s390x/lower.isle line 2486.
                        return v16;
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v19 = constructor_vec_load(ctx, arg0, v5);
                        let v20 = constructor_vec_elt_rev(ctx, arg0, v19);
                        // Rule at src/isa/s390x/lower.isle line 2497.
                        return v20;
                    }
                }
            }
            0x20 => {
                if v8.1 == 0x4 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v15 = constructor_vec_load_elt32rev(ctx, arg0, v5);
                        // Rule at src/isa/s390x/lower.isle line 2483.
                        return v15;
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v19 = constructor_vec_load(ctx, arg0, v5);
                        let v20 = constructor_vec_elt_rev(ctx, arg0, v19);
                        // Rule at src/isa/s390x/lower.isle line 2494.
                        return v20;
                    }
                }
            }
            0x40 => {
                if v8.1 == 0x2 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v14 = constructor_vec_load_elt64rev(ctx, arg0, v5);
                        // Rule at src/isa/s390x/lower.isle line 2480.
                        return v14;
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v19 = constructor_vec_load(ctx, arg0, v5);
                        let v20 = constructor_vec_elt_rev(ctx, arg0, v19);
                        // Rule at src/isa/s390x/lower.isle line 2491.
                        return v20;
                    }
                }
            }
            _ => {}
        }
    }
    if arg0 == I128 {
        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
        let v6 = constructor_vec_load(ctx, I128, v5);
        // Rule at src/isa/s390x/lower.isle line 2472.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_elt_rev", "src/isa/s390x/lower.isle line 2468"
    )
}

// Generated as internal constructor for term load_v64.
pub fn constructor_load_v64<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Reg {
    let v6 = &C::lane_order(ctx);
    match v6 {
        &LaneOrder::LittleEndian => {
            let v14 = C::multi_lane(ctx, arg0);
            if let Some(v15) = v14 {
                match v15.0 {
                    0x8 => {
                        if v15.1 == 0x10 {
                            let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                            let v13 = constructor_vec_load_lane_little_undef(ctx, I64X2, v8, 0x0);
                            // Rule at src/isa/s390x/lower.isle line 2648.
                            return v13;
                        }
                    }
                    0x10 => {
                        let v2 = C::bigendian(ctx, arg1);
                        if let Some(v3) = v2 {
                            if v15.1 == 0x8 {
                                let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                                let v13 =
                                    constructor_vec_load_lane_little_undef(ctx, I64X2, v8, 0x0);
                                let v21 = constructor_vec_rot_imm(ctx, I16X8, v13, 0x8);
                                // Rule at src/isa/s390x/lower.isle line 2659.
                                return v21;
                            }
                        }
                    }
                    0x20 => {
                        let v2 = C::bigendian(ctx, arg1);
                        if let Some(v3) = v2 {
                            if v15.1 == 0x4 {
                                let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                                let v10 = constructor_vec_load_lane_undef(ctx, I64X2, v8, 0x0);
                                let v24 = constructor_vec_rot_imm(ctx, I64X2, v10, 0x20);
                                // Rule at src/isa/s390x/lower.isle line 2671.
                                return v24;
                            }
                        }
                    }
                    _ => {}
                }
            }
            let v11 = C::littleendian(ctx, arg1);
            if let Some(v12) = v11 {
                let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                let v13 = constructor_vec_load_lane_little_undef(ctx, I64X2, v8, 0x0);
                // Rule at src/isa/s390x/lower.isle line 2638.
                return v13;
            }
        }
        &LaneOrder::BigEndian => {
            let v14 = C::multi_lane(ctx, arg0);
            if let Some(v15) = v14 {
                match v15.0 {
                    0x8 => {
                        if v15.1 == 0x10 {
                            let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                            let v10 = constructor_vec_load_lane_undef(ctx, I64X2, v8, 0x0);
                            // Rule at src/isa/s390x/lower.isle line 2643.
                            return v10;
                        }
                    }
                    0x10 => {
                        let v11 = C::littleendian(ctx, arg1);
                        if let Some(v12) = v11 {
                            if v15.1 == 0x8 {
                                let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                                let v10 = constructor_vec_load_lane_undef(ctx, I64X2, v8, 0x0);
                                let v20 = constructor_vec_rot_imm(ctx, I16X8, v10, 0x8);
                                // Rule at src/isa/s390x/lower.isle line 2653.
                                return v20;
                            }
                        }
                    }
                    0x20 => {
                        let v11 = C::littleendian(ctx, arg1);
                        if let Some(v12) = v11 {
                            if v15.1 == 0x4 {
                                let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                                let v13 =
                                    constructor_vec_load_lane_little_undef(ctx, I64X2, v8, 0x0);
                                let v23 = constructor_vec_rot_imm(ctx, I64X2, v13, 0x20);
                                // Rule at src/isa/s390x/lower.isle line 2665.
                                return v23;
                            }
                        }
                    }
                    _ => {}
                }
            }
            let v2 = C::bigendian(ctx, arg1);
            if let Some(v3) = v2 {
                let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                let v10 = constructor_vec_load_lane_undef(ctx, I64X2, v8, 0x0);
                // Rule at src/isa/s390x/lower.isle line 2633.
                return v10;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "load_v64", "src/isa/s390x/lower.isle line 2630"
    )
}

// Generated as internal constructor for term vec_store_full_rev.
pub fn constructor_vec_store_full_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: MemFlags,
    arg3: Value,
    arg4: Offset32,
) -> SideEffectNoResult {
    let v1 = C::vxrs_ext2_enabled(ctx, arg0);
    if let Some(v2) = v1 {
        let v7 = &constructor_lower_address(ctx, arg2, arg3, arg4);
        let v8 = &constructor_vec_storerev(ctx, arg1, v7);
        // Rule at src/isa/s390x/lower.isle line 2755.
        return v8.clone();
    }
    let v9 = C::vxrs_ext2_disabled(ctx, arg0);
    if let Some(v10) = v9 {
        let v12 = &constructor_lower_address_bias(ctx, arg2, arg3, arg4, 0x0);
        let v14 = &constructor_lower_address_bias(ctx, arg2, arg3, arg4, 0x8);
        let v17 = C::zero_reg(ctx);
        let v18 = constructor_vec_extract_lane(ctx, I64X2, arg1, 0x1, v17);
        let v19 = C::zero_reg(ctx);
        let v20 = constructor_vec_extract_lane(ctx, I64X2, arg1, 0x0, v19);
        let v21 = &constructor_storerev64(ctx, v18, v12);
        let v22 = &constructor_storerev64(ctx, v20, v14);
        let v23 = &constructor_side_effect_concat(ctx, v21, v22);
        // Rule at src/isa/s390x/lower.isle line 2759.
        return v23.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_store_full_rev", "src/isa/s390x/lower.isle line 2752"
    )
}

// Generated as internal constructor for term vec_store_byte_rev.
pub fn constructor_vec_store_byte_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: MemFlags,
    arg3: Value,
    arg4: Offset32,
) -> SideEffectNoResult {
    let v7 = C::multi_lane(ctx, arg0);
    if let Some(v8) = v7 {
        match v8.0 {
            0x8 => {
                if v8.1 == 0x10 {
                    let v11 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                    let v12 = &constructor_vec_store(ctx, arg1, v11);
                    // Rule at src/isa/s390x/lower.isle line 2776.
                    return v12.clone();
                }
            }
            0x10 => {
                if v8.1 == 0x8 {
                    let v13 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v14) = v13 {
                        let v11 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v17 = &constructor_vec_store_byte16rev(ctx, arg1, v11);
                        // Rule at src/isa/s390x/lower.isle line 2786.
                        return v17.clone();
                    }
                    let v18 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v19) = v18 {
                        let v20 = constructor_vec_elt_rev(ctx, arg0, arg1);
                        let v21 = &constructor_vec_store_full_rev(ctx, arg0, v20, arg2, arg3, arg4);
                        // Rule at src/isa/s390x/lower.isle line 2797.
                        return v21.clone();
                    }
                }
            }
            0x20 => {
                if v8.1 == 0x4 {
                    let v13 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v14) = v13 {
                        let v11 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v16 = &constructor_vec_store_byte32rev(ctx, arg1, v11);
                        // Rule at src/isa/s390x/lower.isle line 2783.
                        return v16.clone();
                    }
                    let v18 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v19) = v18 {
                        let v20 = constructor_vec_elt_rev(ctx, arg0, arg1);
                        let v21 = &constructor_vec_store_full_rev(ctx, arg0, v20, arg2, arg3, arg4);
                        // Rule at src/isa/s390x/lower.isle line 2794.
                        return v21.clone();
                    }
                }
            }
            0x40 => {
                if v8.1 == 0x2 {
                    let v13 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v14) = v13 {
                        let v11 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v15 = &constructor_vec_store_byte64rev(ctx, arg1, v11);
                        // Rule at src/isa/s390x/lower.isle line 2780.
                        return v15.clone();
                    }
                    let v18 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v19) = v18 {
                        let v20 = constructor_vec_elt_rev(ctx, arg0, arg1);
                        let v21 = &constructor_vec_store_full_rev(ctx, arg0, v20, arg2, arg3, arg4);
                        // Rule at src/isa/s390x/lower.isle line 2791.
                        return v21.clone();
                    }
                }
            }
            _ => {}
        }
    }
    if arg0 == I128 {
        let v6 = &constructor_vec_store_full_rev(ctx, I128, arg1, arg2, arg3, arg4);
        // Rule at src/isa/s390x/lower.isle line 2772.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_store_byte_rev", "src/isa/s390x/lower.isle line 2769"
    )
}

// Generated as internal constructor for term vec_store_elt_rev.
pub fn constructor_vec_store_elt_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: MemFlags,
    arg3: Value,
    arg4: Offset32,
) -> SideEffectNoResult {
    let v7 = C::multi_lane(ctx, arg0);
    if let Some(v8) = v7 {
        match v8.0 {
            0x8 => {
                if v8.1 == 0x10 {
                    let v11 = &constructor_vec_store_full_rev(ctx, arg0, arg1, arg2, arg3, arg4);
                    // Rule at src/isa/s390x/lower.isle line 2810.
                    return v11.clone();
                }
            }
            0x10 => {
                if v8.1 == 0x8 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v5 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v16 = &constructor_vec_store_elt16rev(ctx, arg1, v5);
                        // Rule at src/isa/s390x/lower.isle line 2820.
                        return v16.clone();
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v19 = constructor_vec_elt_rev(ctx, arg0, arg1);
                        let v20 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v21 = &constructor_vec_store(ctx, v19, v20);
                        // Rule at src/isa/s390x/lower.isle line 2831.
                        return v21.clone();
                    }
                }
            }
            0x20 => {
                if v8.1 == 0x4 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v5 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v15 = &constructor_vec_store_elt32rev(ctx, arg1, v5);
                        // Rule at src/isa/s390x/lower.isle line 2817.
                        return v15.clone();
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v19 = constructor_vec_elt_rev(ctx, arg0, arg1);
                        let v20 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v21 = &constructor_vec_store(ctx, v19, v20);
                        // Rule at src/isa/s390x/lower.isle line 2828.
                        return v21.clone();
                    }
                }
            }
            0x40 => {
                if v8.1 == 0x2 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v5 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v14 = &constructor_vec_store_elt64rev(ctx, arg1, v5);
                        // Rule at src/isa/s390x/lower.isle line 2814.
                        return v14.clone();
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v19 = constructor_vec_elt_rev(ctx, arg0, arg1);
                        let v20 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v21 = &constructor_vec_store(ctx, v19, v20);
                        // Rule at src/isa/s390x/lower.isle line 2825.
                        return v21.clone();
                    }
                }
            }
            _ => {}
        }
    }
    if arg0 == I128 {
        let v5 = &constructor_lower_address(ctx, arg2, arg3, arg4);
        let v6 = &constructor_vec_store(ctx, arg1, v5);
        // Rule at src/isa/s390x/lower.isle line 2806.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_store_elt_rev", "src/isa/s390x/lower.isle line 2803"
    )
}

// Generated as internal constructor for term istore8_impl.
pub fn constructor_istore8_impl<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> SideEffectNoResult {
    let v7 = C::u8_from_value(ctx, arg1);
    if let Some(v8) = v7 {
        let v9 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v10 = &constructor_store8_imm(ctx, v8, v9);
        // Rule at src/isa/s390x/lower.isle line 2850.
        return v10.clone();
    }
    let v4 = C::put_in_reg(ctx, arg1);
    let v5 = &constructor_lower_address(ctx, arg0, arg2, arg3);
    let v6 = &constructor_store8(ctx, v4, v5);
    // Rule at src/isa/s390x/lower.isle line 2846.
    return v6.clone();
}

// Generated as internal constructor for term istore16_impl.
pub fn constructor_istore16_impl<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> SideEffectNoResult {
    let v1 = C::bigendian(ctx, arg0);
    if let Some(v2) = v1 {
        let v12 = C::i16_from_value(ctx, arg1);
        if let Some(v13) = v12 {
            let v14 = &constructor_lower_address(ctx, arg0, arg2, arg3);
            let v15 = &constructor_store16_imm(ctx, v13, v14);
            // Rule at src/isa/s390x/lower.isle line 2872.
            return v15.clone();
        }
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v8 = &constructor_store16(ctx, v6, v7);
        // Rule at src/isa/s390x/lower.isle line 2864.
        return v8.clone();
    }
    let v9 = C::littleendian(ctx, arg0);
    if let Some(v10) = v9 {
        let v16 = C::i16_from_swapped_value(ctx, arg1);
        if let Some(v17) = v16 {
            let v14 = &constructor_lower_address(ctx, arg0, arg2, arg3);
            let v18 = &constructor_store16_imm(ctx, v17, v14);
            // Rule at src/isa/s390x/lower.isle line 2876.
            return v18.clone();
        }
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v11 = &constructor_storerev16(ctx, v6, v7);
        // Rule at src/isa/s390x/lower.isle line 2868.
        return v11.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "istore16_impl", "src/isa/s390x/lower.isle line 2861"
    )
}

// Generated as internal constructor for term istore32_impl.
pub fn constructor_istore32_impl<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> SideEffectNoResult {
    let v1 = C::bigendian(ctx, arg0);
    if let Some(v2) = v1 {
        let v9 = C::i16_from_value(ctx, arg1);
        if let Some(v10) = v9 {
            let v11 = &constructor_lower_address(ctx, arg0, arg2, arg3);
            let v12 = &constructor_store32_simm16(ctx, v10, v11);
            // Rule at src/isa/s390x/lower.isle line 2894.
            return v12.clone();
        }
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v8 = &constructor_store32(ctx, v6, v7);
        // Rule at src/isa/s390x/lower.isle line 2890.
        return v8.clone();
    }
    let v13 = C::littleendian(ctx, arg0);
    if let Some(v14) = v13 {
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v15 = &constructor_storerev32(ctx, v6, v7);
        // Rule at src/isa/s390x/lower.isle line 2898.
        return v15.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "istore32_impl", "src/isa/s390x/lower.isle line 2887"
    )
}

// Generated as internal constructor for term istore64_impl.
pub fn constructor_istore64_impl<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> SideEffectNoResult {
    let v1 = C::bigendian(ctx, arg0);
    if let Some(v2) = v1 {
        let v9 = C::i16_from_value(ctx, arg1);
        if let Some(v10) = v9 {
            let v11 = &constructor_lower_address(ctx, arg0, arg2, arg3);
            let v12 = &constructor_store64_simm16(ctx, v10, v11);
            // Rule at src/isa/s390x/lower.isle line 2912.
            return v12.clone();
        }
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v8 = &constructor_store64(ctx, v6, v7);
        // Rule at src/isa/s390x/lower.isle line 2908.
        return v8.clone();
    }
    let v13 = C::littleendian(ctx, arg0);
    if let Some(v14) = v13 {
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v15 = &constructor_storerev64(ctx, v6, v7);
        // Rule at src/isa/s390x/lower.isle line 2916.
        return v15.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "istore64_impl", "src/isa/s390x/lower.isle line 2905"
    )
}

// Generated as internal constructor for term atomic_rmw_body.
pub fn constructor_atomic_rmw_body<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: &AtomicRmwOp,
    arg4: WritableReg,
    arg5: Reg,
    arg6: Reg,
) -> Reg {
    match arg3 {
        &AtomicRmwOp::Add => {
            let v38 = constructor_ty_ext32(ctx, arg1);
            let v39 = &constructor_aluop_add(ctx, v38);
            let v40 =
                constructor_atomic_rmw_body_addsub(ctx, arg0, arg1, arg2, v39, arg4, arg5, arg6);
            // Rule at src/isa/s390x/lower.isle line 3079.
            return v40;
        }
        &AtomicRmwOp::And => {
            let v27 = C::ty_8_or_16(ctx, arg1);
            if let Some(v28) = v27 {
                let v32 = constructor_atomic_rmw_body_rxsbg(
                    ctx,
                    arg0,
                    v28,
                    arg2,
                    &RxSBGOp::And,
                    arg4,
                    arg5,
                    arg6,
                );
                // Rule at src/isa/s390x/lower.isle line 3041.
                return v32;
            }
        }
        &AtomicRmwOp::Nand => {
            let v2 = C::ty_32_or_64(ctx, arg1);
            if let Some(v3) = v2 {
                let v14 = C::mie2_enabled(ctx, arg1);
                if let Some(v15) = v14 {
                    let v5 = C::bigendian(ctx, arg2);
                    if let Some(v6) = v5 {
                        let v16 = &constructor_aluop_not_and(ctx, v3);
                        let v17 = constructor_push_alu_reg(ctx, arg0, v16, arg4, arg5, arg6);
                        // Rule at src/isa/s390x/lower.isle line 3021.
                        return v17;
                    }
                    let v11 = C::littleendian(ctx, arg2);
                    if let Some(v12) = v11 {
                        let v16 = &constructor_aluop_not_and(ctx, v3);
                        let v18 = constructor_bswap_reg(ctx, v3, arg6);
                        let v19 = constructor_push_alu_reg(ctx, arg0, v16, arg4, arg5, v18);
                        // Rule at src/isa/s390x/lower.isle line 3024.
                        return v19;
                    }
                }
                let v20 = C::mie2_disabled(ctx, arg1);
                if let Some(v21) = v20 {
                    let v5 = C::bigendian(ctx, arg2);
                    if let Some(v6) = v5 {
                        let v22 = &constructor_aluop_and(ctx, v3);
                        let v23 = constructor_push_alu_reg(ctx, arg0, v22, arg4, arg5, arg6);
                        let v24 = constructor_push_not_reg(ctx, arg0, v3, arg4, v23);
                        // Rule at src/isa/s390x/lower.isle line 3027.
                        return v24;
                    }
                    let v11 = C::littleendian(ctx, arg2);
                    if let Some(v12) = v11 {
                        let v22 = &constructor_aluop_and(ctx, v3);
                        let v18 = constructor_bswap_reg(ctx, v3, arg6);
                        let v25 = constructor_push_alu_reg(ctx, arg0, v22, arg4, arg5, v18);
                        let v26 = constructor_push_not_reg(ctx, arg0, v3, arg4, v25);
                        // Rule at src/isa/s390x/lower.isle line 3031.
                        return v26;
                    }
                }
            }
            let v27 = C::ty_8_or_16(ctx, arg1);
            if let Some(v28) = v27 {
                let v32 = constructor_atomic_rmw_body_rxsbg(
                    ctx,
                    arg0,
                    v28,
                    arg2,
                    &RxSBGOp::And,
                    arg4,
                    arg5,
                    arg6,
                );
                let v37 = constructor_atomic_rmw_body_invert(ctx, arg0, v28, arg2, arg4, v32);
                // Rule at src/isa/s390x/lower.isle line 3047.
                return v37;
            }
        }
        &AtomicRmwOp::Or => {
            let v27 = C::ty_8_or_16(ctx, arg1);
            if let Some(v28) = v27 {
                let v34 = constructor_atomic_rmw_body_rxsbg(
                    ctx,
                    arg0,
                    v28,
                    arg2,
                    &RxSBGOp::Or,
                    arg4,
                    arg5,
                    arg6,
                );
                // Rule at src/isa/s390x/lower.isle line 3043.
                return v34;
            }
        }
        &AtomicRmwOp::Smax => {
            let v38 = constructor_ty_ext32(ctx, arg1);
            let v43 = &constructor_cmpop_cmps(ctx, v38);
            let v48 = &C::intcc_as_cond(ctx, &IntCC::SignedGreaterThan);
            let v49 = constructor_atomic_rmw_body_minmax(
                ctx, arg0, arg1, arg2, v43, v48, arg4, arg5, arg6,
            );
            // Rule at src/isa/s390x/lower.isle line 3120.
            return v49;
        }
        &AtomicRmwOp::Smin => {
            let v38 = constructor_ty_ext32(ctx, arg1);
            let v43 = &constructor_cmpop_cmps(ctx, v38);
            let v45 = &C::intcc_as_cond(ctx, &IntCC::SignedLessThan);
            let v46 = constructor_atomic_rmw_body_minmax(
                ctx, arg0, arg1, arg2, v43, v45, arg4, arg5, arg6,
            );
            // Rule at src/isa/s390x/lower.isle line 3117.
            return v46;
        }
        &AtomicRmwOp::Sub => {
            let v38 = constructor_ty_ext32(ctx, arg1);
            let v41 = &constructor_aluop_sub(ctx, v38);
            let v42 =
                constructor_atomic_rmw_body_addsub(ctx, arg0, arg1, arg2, v41, arg4, arg5, arg6);
            // Rule at src/isa/s390x/lower.isle line 3081.
            return v42;
        }
        &AtomicRmwOp::Umax => {
            let v38 = constructor_ty_ext32(ctx, arg1);
            let v50 = &constructor_cmpop_cmpu(ctx, v38);
            let v55 = &C::intcc_as_cond(ctx, &IntCC::UnsignedGreaterThan);
            let v56 = constructor_atomic_rmw_body_minmax(
                ctx, arg0, arg1, arg2, v50, v55, arg4, arg5, arg6,
            );
            // Rule at src/isa/s390x/lower.isle line 3126.
            return v56;
        }
        &AtomicRmwOp::Umin => {
            let v38 = constructor_ty_ext32(ctx, arg1);
            let v50 = &constructor_cmpop_cmpu(ctx, v38);
            let v52 = &C::intcc_as_cond(ctx, &IntCC::UnsignedLessThan);
            let v53 = constructor_atomic_rmw_body_minmax(
                ctx, arg0, arg1, arg2, v50, v52, arg4, arg5, arg6,
            );
            // Rule at src/isa/s390x/lower.isle line 3123.
            return v53;
        }
        &AtomicRmwOp::Xchg => {
            let v2 = C::ty_32_or_64(ctx, arg1);
            if let Some(v3) = v2 {
                let v5 = C::bigendian(ctx, arg2);
                if let Some(v6) = v5 {
                    // Rule at src/isa/s390x/lower.isle line 3010.
                    return arg6;
                }
                let v11 = C::littleendian(ctx, arg2);
                if let Some(v12) = v11 {
                    let v13 = constructor_bswap_reg(ctx, v3, arg6);
                    // Rule at src/isa/s390x/lower.isle line 3013.
                    return v13;
                }
            }
            let v27 = C::ty_8_or_16(ctx, arg1);
            if let Some(v28) = v27 {
                let v30 = constructor_atomic_rmw_body_rxsbg(
                    ctx,
                    arg0,
                    v28,
                    arg2,
                    &RxSBGOp::Insert,
                    arg4,
                    arg5,
                    arg6,
                );
                // Rule at src/isa/s390x/lower.isle line 3039.
                return v30;
            }
        }
        &AtomicRmwOp::Xor => {
            let v27 = C::ty_8_or_16(ctx, arg1);
            if let Some(v28) = v27 {
                let v36 = constructor_atomic_rmw_body_rxsbg(
                    ctx,
                    arg0,
                    v28,
                    arg2,
                    &RxSBGOp::Xor,
                    arg4,
                    arg5,
                    arg6,
                );
                // Rule at src/isa/s390x/lower.isle line 3045.
                return v36;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_body", "src/isa/s390x/lower.isle line 3005"
    )
}

// Generated as internal constructor for term atomic_rmw_body_rxsbg.
pub fn constructor_atomic_rmw_body_rxsbg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: &RxSBGOp,
    arg4: WritableReg,
    arg5: Reg,
    arg6: Reg,
) -> Reg {
    match arg1 {
        I8 => {
            let v10 = constructor_push_rxsbg(ctx, arg0, arg3, arg4, arg5, arg6, 0x20, 0x28, 0x18);
            // Rule at src/isa/s390x/lower.isle line 3055.
            return v10;
        }
        I16 => {
            let v11 = C::bigendian(ctx, arg2);
            if let Some(v12) = v11 {
                let v15 =
                    constructor_push_rxsbg(ctx, arg0, arg3, arg4, arg5, arg6, 0x20, 0x30, 0x10);
                // Rule at src/isa/s390x/lower.isle line 3059.
                return v15;
            }
            let v16 = C::littleendian(ctx, arg2);
            if let Some(v17) = v16 {
                let v19 = constructor_bswap_reg(ctx, I32, arg6);
                let v22 =
                    constructor_push_rxsbg(ctx, arg0, arg3, arg4, arg5, v19, 0x30, 0x40, -0x10);
                // Rule at src/isa/s390x/lower.isle line 3063.
                return v22;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_body_rxsbg", "src/isa/s390x/lower.isle line 3052"
    )
}

// Generated as internal constructor for term atomic_rmw_body_invert.
pub fn constructor_atomic_rmw_body_invert<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: WritableReg,
    arg4: Reg,
) -> Reg {
    match arg1 {
        I8 => {
            let v8 = C::uimm32shifted(ctx, 0xFF000000, 0x0);
            let v9 = constructor_push_xor_uimm32shifted(ctx, arg0, I32, arg3, arg4, v8);
            // Rule at src/isa/s390x/lower.isle line 3069.
            return v9;
        }
        I16 => {
            let v10 = C::bigendian(ctx, arg2);
            if let Some(v11) = v10 {
                let v13 = C::uimm32shifted(ctx, 0xFFFF0000, 0x0);
                let v14 = constructor_push_xor_uimm32shifted(ctx, arg0, I32, arg3, arg4, v13);
                // Rule at src/isa/s390x/lower.isle line 3072.
                return v14;
            }
            let v15 = C::littleendian(ctx, arg2);
            if let Some(v16) = v15 {
                let v18 = C::uimm32shifted(ctx, 0xFFFF, 0x0);
                let v19 = constructor_push_xor_uimm32shifted(ctx, arg0, I32, arg3, arg4, v18);
                // Rule at src/isa/s390x/lower.isle line 3075.
                return v19;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_body_invert", "src/isa/s390x/lower.isle line 3067"
    )
}

// Generated as internal constructor for term atomic_rmw_body_addsub.
pub fn constructor_atomic_rmw_body_addsub<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: &ALUOp,
    arg4: WritableReg,
    arg5: Reg,
    arg6: Reg,
) -> Reg {
    let v5 = C::bigendian(ctx, arg2);
    if let Some(v6) = v5 {
        if arg1 == I16 {
            let v22 = constructor_lshl_imm(ctx, I32, arg6, 0x10);
            let v23 = constructor_push_alu_reg(ctx, arg0, arg3, arg4, arg5, v22);
            // Rule at src/isa/s390x/lower.isle line 3102.
            return v23;
        }
        let v2 = C::ty_32_or_64(ctx, arg1);
        if let Some(v3) = v2 {
            let v11 = constructor_push_alu_reg(ctx, arg0, arg3, arg4, arg5, arg6);
            // Rule at src/isa/s390x/lower.isle line 3088.
            return v11;
        }
    }
    let v12 = C::littleendian(ctx, arg2);
    if let Some(v13) = v12 {
        let v2 = C::ty_32_or_64(ctx, arg1);
        if let Some(v3) = v2 {
            let v14 = constructor_push_bswap_reg(ctx, arg0, v3, arg4, arg5);
            let v15 = constructor_push_alu_reg(ctx, arg0, arg3, arg4, v14, arg6);
            let v16 = constructor_push_bswap_reg(ctx, arg0, v3, arg4, v15);
            // Rule at src/isa/s390x/lower.isle line 3092.
            return v16;
        }
        if arg1 == I16 {
            let v22 = constructor_lshl_imm(ctx, I32, arg6, 0x10);
            let v24 = constructor_push_bswap_reg(ctx, arg0, I32, arg4, arg5);
            let v25 = constructor_push_alu_reg(ctx, arg0, arg3, arg4, v24, v22);
            let v26 = constructor_push_bswap_reg(ctx, arg0, I32, arg4, v25);
            // Rule at src/isa/s390x/lower.isle line 3110.
            return v26;
        }
    }
    if arg1 == I8 {
        let v19 = constructor_lshl_imm(ctx, I32, arg6, 0x18);
        let v20 = constructor_push_alu_reg(ctx, arg0, arg3, arg4, arg5, v19);
        // Rule at src/isa/s390x/lower.isle line 3098.
        return v20;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_body_addsub", "src/isa/s390x/lower.isle line 3085"
    )
}

// Generated as internal constructor for term atomic_rmw_body_minmax.
pub fn constructor_atomic_rmw_body_minmax<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: &CmpOp,
    arg4: &Cond,
    arg5: WritableReg,
    arg6: Reg,
    arg7: Reg,
) -> Reg {
    let v5 = C::bigendian(ctx, arg2);
    if let Some(v6) = v5 {
        if arg1 == I16 {
            let v33 = constructor_lshl_imm(ctx, I32, arg7, 0x10);
            let v34 = &constructor_cmp_rr(ctx, arg3, v33, arg6);
            let v19 = &C::invert_cond(ctx, arg4);
            let v35 = constructor_push_break_if(ctx, arg0, v34, v19);
            let v37 = constructor_push_rxsbg(
                ctx,
                arg0,
                &RxSBGOp::Insert,
                arg5,
                arg6,
                v33,
                0x20,
                0x30,
                0x0,
            );
            // Rule at src/isa/s390x/lower.isle line 3161.
            return v37;
        }
        let v2 = C::ty_32_or_64(ctx, arg1);
        if let Some(v3) = v2 {
            let v12 = &constructor_cmp_rr(ctx, arg3, arg7, arg6);
            let v13 = &C::invert_cond(ctx, arg4);
            let v14 = constructor_push_break_if(ctx, arg0, v12, v13);
            // Rule at src/isa/s390x/lower.isle line 3136.
            return arg7;
        }
    }
    let v15 = C::littleendian(ctx, arg2);
    if let Some(v16) = v15 {
        let v2 = C::ty_32_or_64(ctx, arg1);
        if let Some(v3) = v2 {
            let v17 = constructor_push_bswap_reg(ctx, arg0, v3, arg5, arg6);
            let v18 = &constructor_cmp_rr(ctx, arg3, arg7, v17);
            let v19 = &C::invert_cond(ctx, arg4);
            let v20 = constructor_push_break_if(ctx, arg0, v18, v19);
            let v21 = constructor_push_bswap_reg(ctx, arg0, v3, arg5, arg7);
            // Rule at src/isa/s390x/lower.isle line 3143.
            return v21;
        }
        if arg1 == I16 {
            let v33 = constructor_lshl_imm(ctx, I32, arg7, 0x10);
            let v38 = constructor_push_bswap_reg(ctx, arg0, I32, arg5, arg6);
            let v39 = &constructor_cmp_rr(ctx, arg3, v33, v38);
            let v40 = &C::invert_cond(ctx, arg4);
            let v41 = constructor_push_break_if(ctx, arg0, v39, v40);
            let v42 = constructor_push_rxsbg(
                ctx,
                arg0,
                &RxSBGOp::Insert,
                arg5,
                v38,
                v33,
                0x20,
                0x30,
                0x0,
            );
            let v43 = constructor_push_bswap_reg(ctx, arg0, I32, arg5, v42);
            // Rule at src/isa/s390x/lower.isle line 3168.
            return v43;
        }
    }
    if arg1 == I8 {
        let v24 = constructor_lshl_imm(ctx, I32, arg7, 0x18);
        let v25 = &constructor_cmp_rr(ctx, arg3, v24, arg6);
        let v19 = &C::invert_cond(ctx, arg4);
        let v26 = constructor_push_break_if(ctx, arg0, v25, v19);
        let v31 = constructor_push_rxsbg(
            ctx,
            arg0,
            &RxSBGOp::Insert,
            arg5,
            arg6,
            v24,
            0x20,
            0x28,
            0x0,
        );
        // Rule at src/isa/s390x/lower.isle line 3155.
        return v31;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_body_minmax", "src/isa/s390x/lower.isle line 3131"
    )
}

// Generated as internal constructor for term atomic_cas_body.
pub fn constructor_atomic_cas_body<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: WritableReg,
    arg4: Reg,
    arg5: Reg,
    arg6: Reg,
) -> Reg {
    match arg1 {
        I8 => {
            let v11 = &constructor_rxsbg_test(ctx, &RxSBGOp::Xor, arg4, arg5, 0x20, 0x28, 0x18);
            let v13 = &C::intcc_as_cond(ctx, &IntCC::NotEqual);
            let v14 = constructor_push_break_if(ctx, arg0, v11, v13);
            let v16 = constructor_push_rxsbg(
                ctx,
                arg0,
                &RxSBGOp::Insert,
                arg3,
                arg4,
                arg6,
                0x20,
                0x28,
                0x18,
            );
            // Rule at src/isa/s390x/lower.isle line 3220.
            return v16;
        }
        I16 => {
            let v17 = C::bigendian(ctx, arg2);
            if let Some(v18) = v17 {
                let v21 = &constructor_rxsbg_test(ctx, &RxSBGOp::Xor, arg4, arg5, 0x20, 0x30, 0x10);
                let v13 = &C::intcc_as_cond(ctx, &IntCC::NotEqual);
                let v22 = constructor_push_break_if(ctx, arg0, v21, v13);
                let v23 = constructor_push_rxsbg(
                    ctx,
                    arg0,
                    &RxSBGOp::Insert,
                    arg3,
                    arg4,
                    arg6,
                    0x20,
                    0x30,
                    0x10,
                );
                // Rule at src/isa/s390x/lower.isle line 3227.
                return v23;
            }
            let v24 = C::littleendian(ctx, arg2);
            if let Some(v25) = v24 {
                let v27 = constructor_bswap_reg(ctx, I32, arg5);
                let v28 = constructor_bswap_reg(ctx, I32, arg6);
                let v31 = &constructor_rxsbg_test(ctx, &RxSBGOp::Xor, arg4, v27, 0x30, 0x40, -0x10);
                let v32 = &C::intcc_as_cond(ctx, &IntCC::NotEqual);
                let v33 = constructor_push_break_if(ctx, arg0, v31, v32);
                let v34 = constructor_push_rxsbg(
                    ctx,
                    arg0,
                    &RxSBGOp::Insert,
                    arg3,
                    arg4,
                    v28,
                    0x30,
                    0x40,
                    -0x10,
                );
                // Rule at src/isa/s390x/lower.isle line 3238.
                return v34;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_cas_body", "src/isa/s390x/lower.isle line 3213"
    )
}

// Generated as internal constructor for term atomic_store_impl.
pub fn constructor_atomic_store_impl<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
) -> InstOutput {
    let v1 = constructor_side_effect(ctx, arg0);
    let v2 = &constructor_fence_impl(ctx);
    let v3 = constructor_side_effect(ctx, v2);
    // Rule at src/isa/s390x/lower.isle line 3284.
    return v3;
}

// Generated as internal constructor for term icmp_val.
pub fn constructor_icmp_val<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: &IntCC,
    arg2: Value,
    arg3: Value,
) -> ProducesBool {
    match arg1 {
        &IntCC::Equal => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v19 = C::put_in_reg(ctx, arg2);
                let v20 = C::put_in_reg(ctx, arg3);
                let v21 = &constructor_vec_cmpeqs(ctx, I64X2, v19, v20);
                let v23 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                let v24 = &constructor_bool(ctx, v21, v23);
                // Rule at src/isa/s390x/lower.isle line 3430.
                return v24.clone();
            }
        }
        &IntCC::NotEqual => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v19 = C::put_in_reg(ctx, arg2);
                let v20 = C::put_in_reg(ctx, arg3);
                let v21 = &constructor_vec_cmpeqs(ctx, I64X2, v19, v20);
                let v26 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                let v27 = &constructor_bool(ctx, v21, v26);
                // Rule at src/isa/s390x/lower.isle line 3433.
                return v27.clone();
            }
        }
        &IntCC::SignedGreaterThan => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v19 = C::put_in_reg(ctx, arg2);
                let v20 = C::put_in_reg(ctx, arg3);
                let v28 = &constructor_vec_int128_scmphi(ctx, v19, v20);
                // Rule at src/isa/s390x/lower.isle line 3439.
                return v28.clone();
            }
        }
        &IntCC::SignedGreaterThanOrEqual => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v29 = C::put_in_reg(ctx, arg3);
                let v30 = C::put_in_reg(ctx, arg2);
                let v31 = &constructor_vec_int128_scmphi(ctx, v29, v30);
                let v32 = &constructor_invert_bool(ctx, v31);
                // Rule at src/isa/s390x/lower.isle line 3443.
                return v32.clone();
            }
        }
        &IntCC::SignedLessThan => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v29 = C::put_in_reg(ctx, arg3);
                let v30 = C::put_in_reg(ctx, arg2);
                let v31 = &constructor_vec_int128_scmphi(ctx, v29, v30);
                // Rule at src/isa/s390x/lower.isle line 3441.
                return v31.clone();
            }
        }
        &IntCC::SignedLessThanOrEqual => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v19 = C::put_in_reg(ctx, arg2);
                let v20 = C::put_in_reg(ctx, arg3);
                let v28 = &constructor_vec_int128_scmphi(ctx, v19, v20);
                let v33 = &constructor_invert_bool(ctx, v28);
                // Rule at src/isa/s390x/lower.isle line 3445.
                return v33.clone();
            }
        }
        &IntCC::UnsignedGreaterThan => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v19 = C::put_in_reg(ctx, arg2);
                let v20 = C::put_in_reg(ctx, arg3);
                let v34 = &constructor_vec_int128_ucmphi(ctx, v19, v20);
                // Rule at src/isa/s390x/lower.isle line 3450.
                return v34.clone();
            }
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v29 = C::put_in_reg(ctx, arg3);
                let v30 = C::put_in_reg(ctx, arg2);
                let v35 = &constructor_vec_int128_ucmphi(ctx, v29, v30);
                let v36 = &constructor_invert_bool(ctx, v35);
                // Rule at src/isa/s390x/lower.isle line 3454.
                return v36.clone();
            }
        }
        &IntCC::UnsignedLessThan => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v29 = C::put_in_reg(ctx, arg3);
                let v30 = C::put_in_reg(ctx, arg2);
                let v35 = &constructor_vec_int128_ucmphi(ctx, v29, v30);
                // Rule at src/isa/s390x/lower.isle line 3452.
                return v35.clone();
            }
        }
        &IntCC::UnsignedLessThanOrEqual => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v19 = C::put_in_reg(ctx, arg2);
                let v20 = C::put_in_reg(ctx, arg3);
                let v34 = &constructor_vec_int128_ucmphi(ctx, v19, v20);
                let v37 = &constructor_invert_bool(ctx, v34);
                // Rule at src/isa/s390x/lower.isle line 3456.
                return v37.clone();
            }
        }
        _ => {}
    }
    let v5 = C::value_type(ctx, arg2);
    let v6 = C::fits_in_64(ctx, v5);
    if let Some(v7) = v6 {
        let v2 = C::signed(ctx, arg1);
        if let Some(v3) = v2 {
            let v9 = &constructor_icmps_val(ctx, arg0, arg2, arg3);
            let v10 = &C::intcc_as_cond(ctx, arg1);
            let v11 = &constructor_bool(ctx, v9, v10);
            // Rule at src/isa/s390x/lower.isle line 3351.
            return v11.clone();
        }
        let v12 = C::unsigned(ctx, arg1);
        if let Some(v13) = v12 {
            let v14 = &constructor_icmpu_val(ctx, arg0, arg2, arg3);
            let v10 = &C::intcc_as_cond(ctx, arg1);
            let v15 = &constructor_bool(ctx, v14, v10);
            // Rule at src/isa/s390x/lower.isle line 3354.
            return v15.clone();
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "icmp_val", "src/isa/s390x/lower.isle line 3348"
    )
}

// Generated as internal constructor for term icmps_val.
pub fn constructor_icmps_val<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Value,
    arg2: Value,
) -> ProducesFlags {
    let v2 = C::value_type(ctx, arg1);
    let v3 = C::fits_in_64(ctx, v2);
    if let Some(v4) = v3 {
        if arg0 == true {
            let v28 = C::sinkable_inst(ctx, arg2);
            if let Some(v29) = v28 {
                let v30 = &C::inst_data(ctx, v29);
                if let &InstructionData::Load {
                    opcode: ref v31,
                    arg: v32,
                    flags: v33,
                    offset: v34,
                } = v30
                {
                    match v31 {
                        &Opcode::Load => {
                            let v35 = C::bigendian(ctx, v33);
                            if let Some(v36) = v35 {
                                let v25 = C::value_type(ctx, arg2);
                                if v25 == I16 {
                                    let v6 = constructor_ty_ext32(ctx, v4);
                                    let v7 = constructor_put_in_reg_sext32(ctx, arg1);
                                    let v39 = &constructor_sink_load(ctx, v29);
                                    let v40 = &constructor_icmps_mem_sext16(ctx, v6, v7, v39);
                                    // Rule at src/isa/s390x/lower.isle line 3380.
                                    return v40.clone();
                                }
                                let v26 = C::ty_32_or_64(ctx, v25);
                                if let Some(v27) = v26 {
                                    let v16 = C::put_in_reg(ctx, arg1);
                                    let v37 = &constructor_sink_load(ctx, v29);
                                    let v38 = &constructor_icmps_mem(ctx, v4, v16, v37);
                                    // Rule at src/isa/s390x/lower.isle line 3376.
                                    return v38.clone();
                                }
                            }
                        }
                        &Opcode::Sload16 => {
                            let v35 = C::bigendian(ctx, v33);
                            if let Some(v36) = v35 {
                                let v16 = C::put_in_reg(ctx, arg1);
                                let v41 = &constructor_sink_sload16(ctx, v29);
                                let v42 = &constructor_icmps_mem_sext16(ctx, v4, v16, v41);
                                // Rule at src/isa/s390x/lower.isle line 3384.
                                return v42.clone();
                            }
                        }
                        &Opcode::Sload32 => {
                            let v35 = C::bigendian(ctx, v33);
                            if let Some(v36) = v35 {
                                let v16 = C::put_in_reg(ctx, arg1);
                                let v43 = &constructor_sink_sload32(ctx, v29);
                                let v44 = &constructor_icmps_mem_sext32(ctx, v4, v16, v43);
                                // Rule at src/isa/s390x/lower.isle line 3386.
                                return v44.clone();
                            }
                        }
                        _ => {}
                    }
                }
            }
        }
        let v10 = C::def_inst(ctx, arg2);
        if let Some(v11) = v10 {
            let v12 = &C::inst_data(ctx, v11);
            if let &InstructionData::Unary {
                opcode: ref v13,
                arg: v14,
            } = v12
            {
                if let &Opcode::Sextend = v13 {
                    let v15 = C::value_type(ctx, v14);
                    if v15 == I32 {
                        let v16 = C::put_in_reg(ctx, arg1);
                        let v17 = C::put_in_reg(ctx, v14);
                        let v18 = &constructor_icmps_reg_sext32(ctx, v4, v16, v17);
                        // Rule at src/isa/s390x/lower.isle line 3366.
                        return v18.clone();
                    }
                }
            }
        }
        let v19 = C::i16_from_value(ctx, arg2);
        if let Some(v20) = v19 {
            let v6 = constructor_ty_ext32(ctx, v4);
            let v7 = constructor_put_in_reg_sext32(ctx, arg1);
            let v21 = &constructor_icmps_simm16(ctx, v6, v7, v20);
            // Rule at src/isa/s390x/lower.isle line 3370.
            return v21.clone();
        }
        let v22 = C::i32_from_value(ctx, arg2);
        if let Some(v23) = v22 {
            let v6 = constructor_ty_ext32(ctx, v4);
            let v7 = constructor_put_in_reg_sext32(ctx, arg1);
            let v24 = &constructor_icmps_simm32(ctx, v6, v7, v23);
            // Rule at src/isa/s390x/lower.isle line 3372.
            return v24.clone();
        }
        let v6 = constructor_ty_ext32(ctx, v4);
        let v7 = constructor_put_in_reg_sext32(ctx, arg1);
        let v8 = constructor_put_in_reg_sext32(ctx, arg2);
        let v9 = &constructor_icmps_reg(ctx, v6, v7, v8);
        // Rule at src/isa/s390x/lower.isle line 3362.
        return v9.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "icmps_val", "src/isa/s390x/lower.isle line 3359"
    )
}

// Generated as internal constructor for term icmpu_val.
pub fn constructor_icmpu_val<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Value,
    arg2: Value,
) -> ProducesFlags {
    let v2 = C::value_type(ctx, arg1);
    let v3 = C::fits_in_64(ctx, v2);
    if let Some(v4) = v3 {
        if arg0 == true {
            let v25 = C::sinkable_inst(ctx, arg2);
            if let Some(v26) = v25 {
                let v27 = &C::inst_data(ctx, v26);
                if let &InstructionData::Load {
                    opcode: ref v28,
                    arg: v29,
                    flags: v30,
                    offset: v31,
                } = v27
                {
                    match v28 {
                        &Opcode::Load => {
                            let v32 = C::bigendian(ctx, v30);
                            if let Some(v33) = v32 {
                                let v22 = C::value_type(ctx, arg2);
                                let v23 = C::ty_32_or_64(ctx, v22);
                                if let Some(v24) = v23 {
                                    let v16 = C::put_in_reg(ctx, arg1);
                                    let v34 = &constructor_sink_load(ctx, v26);
                                    let v35 = &constructor_icmpu_mem(ctx, v4, v16, v34);
                                    // Rule at src/isa/s390x/lower.isle line 3406.
                                    return v35.clone();
                                }
                                if v22 == I16 {
                                    let v36 = constructor_load_sym(ctx, v26);
                                    if let Some(v37) = v36 {
                                        let v6 = constructor_ty_ext32(ctx, v4);
                                        let v7 = constructor_put_in_reg_zext32(ctx, arg1);
                                        let v38 = &constructor_sink_load(ctx, v37);
                                        let v39 = &constructor_icmpu_mem_zext16(ctx, v6, v7, v38);
                                        // Rule at src/isa/s390x/lower.isle line 3412.
                                        return v39.clone();
                                    }
                                }
                            }
                        }
                        &Opcode::Uload16 => {
                            let v32 = C::bigendian(ctx, v30);
                            if let Some(v33) = v32 {
                                let v40 = constructor_uload16_sym(ctx, v26);
                                if let Some(v41) = v40 {
                                    let v16 = C::put_in_reg(ctx, arg1);
                                    let v42 = &constructor_sink_uload16(ctx, v41);
                                    let v43 = &constructor_icmpu_mem_zext16(ctx, v4, v16, v42);
                                    // Rule at src/isa/s390x/lower.isle line 3420.
                                    return v43.clone();
                                }
                            }
                        }
                        &Opcode::Uload32 => {
                            let v32 = C::bigendian(ctx, v30);
                            if let Some(v33) = v32 {
                                let v16 = C::put_in_reg(ctx, arg1);
                                let v44 = &constructor_sink_uload32(ctx, v26);
                                let v45 = &constructor_icmpu_mem_zext32(ctx, v4, v16, v44);
                                // Rule at src/isa/s390x/lower.isle line 3424.
                                return v45.clone();
                            }
                        }
                        _ => {}
                    }
                }
            }
        }
        let v19 = C::u32_from_value(ctx, arg2);
        if let Some(v20) = v19 {
            let v6 = constructor_ty_ext32(ctx, v4);
            let v7 = constructor_put_in_reg_zext32(ctx, arg1);
            let v21 = &constructor_icmpu_uimm32(ctx, v6, v7, v20);
            // Rule at src/isa/s390x/lower.isle line 3402.
            return v21.clone();
        }
        let v10 = C::def_inst(ctx, arg2);
        if let Some(v11) = v10 {
            let v12 = &C::inst_data(ctx, v11);
            if let &InstructionData::Unary {
                opcode: ref v13,
                arg: v14,
            } = v12
            {
                if let &Opcode::Uextend = v13 {
                    let v15 = C::value_type(ctx, v14);
                    if v15 == I32 {
                        let v16 = C::put_in_reg(ctx, arg1);
                        let v17 = C::put_in_reg(ctx, v14);
                        let v18 = &constructor_icmpu_reg_zext32(ctx, v4, v16, v17);
                        // Rule at src/isa/s390x/lower.isle line 3398.
                        return v18.clone();
                    }
                }
            }
        }
        let v6 = constructor_ty_ext32(ctx, v4);
        let v7 = constructor_put_in_reg_zext32(ctx, arg1);
        let v8 = constructor_put_in_reg_zext32(ctx, arg2);
        let v9 = &constructor_icmpu_reg(ctx, v6, v7, v8);
        // Rule at src/isa/s390x/lower.isle line 3394.
        return v9.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "icmpu_val", "src/isa/s390x/lower.isle line 3391"
    )
}

// Generated as internal constructor for term fcmp_val.
pub fn constructor_fcmp_val<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Value,
    arg2: Value,
) -> ProducesBool {
    let v4 = C::put_in_reg(ctx, arg1);
    let v5 = C::put_in_reg(ctx, arg2);
    let v2 = C::value_type(ctx, arg1);
    let v6 = &constructor_fcmp_reg(ctx, v2, v4, v5);
    let v7 = &C::floatcc_as_cond(ctx, arg0);
    let v8 = &constructor_bool(ctx, v6, v7);
    // Rule at src/isa/s390x/lower.isle line 3494.
    return v8.clone();
}

// Generated as internal constructor for term vall_true_val.
pub fn constructor_vall_true_val<C: Context>(ctx: &mut C, arg0: Value) -> ProducesBool {
    let v9 = C::def_inst(ctx, arg0);
    if let Some(v10) = v9 {
        let v11 = C::first_result(ctx, v10);
        if let Some(v12) = v11 {
            let v14 = &C::inst_data(ctx, v10);
            match v14 {
                &InstructionData::FloatCompare {
                    opcode: ref v42,
                    args: ref v43,
                    cond: ref v44,
                } => {
                    if let &Opcode::Fcmp = v42 {
                        match v44 {
                            &FloatCC::Equal => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v50 = &constructor_vec_fcmpeqs(ctx, v13, v48, v49);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v51 = &constructor_bool(ctx, v50, v25);
                                // Rule at src/isa/s390x/lower.isle line 3577.
                                return v51.clone();
                            }
                            &FloatCC::GreaterThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v53 = &constructor_vec_fcmphs(ctx, v13, v48, v49);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v54 = &constructor_bool(ctx, v53, v25);
                                // Rule at src/isa/s390x/lower.isle line 3583.
                                return v54.clone();
                            }
                            &FloatCC::GreaterThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v56 = &constructor_vec_fcmphes(ctx, v13, v48, v49);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v57 = &constructor_bool(ctx, v56, v25);
                                // Rule at src/isa/s390x/lower.isle line 3589.
                                return v57.clone();
                            }
                            &FloatCC::LessThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v61 = &constructor_vec_fcmphs(ctx, v13, v59, v60);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v62 = &constructor_bool(ctx, v61, v25);
                                // Rule at src/isa/s390x/lower.isle line 3595.
                                return v62.clone();
                            }
                            &FloatCC::LessThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v64 = &constructor_vec_fcmphes(ctx, v13, v59, v60);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v65 = &constructor_bool(ctx, v64, v25);
                                // Rule at src/isa/s390x/lower.isle line 3601.
                                return v65.clone();
                            }
                            &FloatCC::NotEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v50 = &constructor_vec_fcmpeqs(ctx, v13, v48, v49);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v52 = &constructor_bool(ctx, v50, v7);
                                // Rule at src/isa/s390x/lower.isle line 3580.
                                return v52.clone();
                            }
                            &FloatCC::UnorderedOrGreaterThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v64 = &constructor_vec_fcmphes(ctx, v13, v59, v60);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v66 = &constructor_bool(ctx, v64, v7);
                                // Rule at src/isa/s390x/lower.isle line 3604.
                                return v66.clone();
                            }
                            &FloatCC::UnorderedOrGreaterThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v61 = &constructor_vec_fcmphs(ctx, v13, v59, v60);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v63 = &constructor_bool(ctx, v61, v7);
                                // Rule at src/isa/s390x/lower.isle line 3598.
                                return v63.clone();
                            }
                            &FloatCC::UnorderedOrLessThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v56 = &constructor_vec_fcmphes(ctx, v13, v48, v49);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v58 = &constructor_bool(ctx, v56, v7);
                                // Rule at src/isa/s390x/lower.isle line 3592.
                                return v58.clone();
                            }
                            &FloatCC::UnorderedOrLessThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v53 = &constructor_vec_fcmphs(ctx, v13, v48, v49);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v55 = &constructor_bool(ctx, v53, v7);
                                // Rule at src/isa/s390x/lower.isle line 3586.
                                return v55.clone();
                            }
                            _ => {}
                        }
                    }
                }
                &InstructionData::IntCompare {
                    opcode: ref v15,
                    args: ref v16,
                    cond: ref v17,
                } => {
                    if let &Opcode::Icmp = v15 {
                        match v17 {
                            &IntCC::Equal => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v23 = &constructor_vec_cmpeqs(ctx, v13, v21, v22);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v26 = &constructor_bool(ctx, v23, v25);
                                // Rule at src/isa/s390x/lower.isle line 3545.
                                return v26.clone();
                            }
                            &IntCC::NotEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v23 = &constructor_vec_cmpeqs(ctx, v13, v21, v22);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v27 = &constructor_bool(ctx, v23, v7);
                                // Rule at src/isa/s390x/lower.isle line 3548.
                                return v27.clone();
                            }
                            &IntCC::SignedGreaterThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v28 = &constructor_vec_cmphs(ctx, v13, v21, v22);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v29 = &constructor_bool(ctx, v28, v25);
                                // Rule at src/isa/s390x/lower.isle line 3551.
                                return v29.clone();
                            }
                            &IntCC::SignedGreaterThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v33 = &constructor_vec_cmphs(ctx, v13, v31, v32);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v35 = &constructor_bool(ctx, v33, v7);
                                // Rule at src/isa/s390x/lower.isle line 3560.
                                return v35.clone();
                            }
                            &IntCC::SignedLessThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v33 = &constructor_vec_cmphs(ctx, v13, v31, v32);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v34 = &constructor_bool(ctx, v33, v25);
                                // Rule at src/isa/s390x/lower.isle line 3557.
                                return v34.clone();
                            }
                            &IntCC::SignedLessThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v28 = &constructor_vec_cmphs(ctx, v13, v21, v22);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v30 = &constructor_bool(ctx, v28, v7);
                                // Rule at src/isa/s390x/lower.isle line 3554.
                                return v30.clone();
                            }
                            &IntCC::UnsignedGreaterThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v36 = &constructor_vec_cmphls(ctx, v13, v21, v22);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v37 = &constructor_bool(ctx, v36, v25);
                                // Rule at src/isa/s390x/lower.isle line 3563.
                                return v37.clone();
                            }
                            &IntCC::UnsignedGreaterThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v39 = &constructor_vec_cmphls(ctx, v13, v31, v32);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v41 = &constructor_bool(ctx, v39, v7);
                                // Rule at src/isa/s390x/lower.isle line 3572.
                                return v41.clone();
                            }
                            &IntCC::UnsignedLessThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v39 = &constructor_vec_cmphls(ctx, v13, v31, v32);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v40 = &constructor_bool(ctx, v39, v25);
                                // Rule at src/isa/s390x/lower.isle line 3569.
                                return v40.clone();
                            }
                            &IntCC::UnsignedLessThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v36 = &constructor_vec_cmphls(ctx, v13, v21, v22);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v38 = &constructor_bool(ctx, v36, v7);
                                // Rule at src/isa/s390x/lower.isle line 3566.
                                return v38.clone();
                            }
                            _ => {}
                        }
                    }
                }
                _ => {}
            }
        }
    }
    let v2 = C::put_in_reg(ctx, arg0);
    let v1 = C::value_type(ctx, arg0);
    let v4 = constructor_vec_imm(ctx, v1, 0x0);
    let v5 = &constructor_vec_cmpeqs(ctx, v1, v2, v4);
    let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
    let v8 = &constructor_bool(ctx, v5, v7);
    // Rule at src/isa/s390x/lower.isle line 3540.
    return v8.clone();
}

// Generated as internal constructor for term vany_true_val.
pub fn constructor_vany_true_val<C: Context>(ctx: &mut C, arg0: Value) -> ProducesBool {
    let v9 = C::def_inst(ctx, arg0);
    if let Some(v10) = v9 {
        let v11 = C::first_result(ctx, v10);
        if let Some(v12) = v11 {
            let v14 = &C::inst_data(ctx, v10);
            match v14 {
                &InstructionData::FloatCompare {
                    opcode: ref v42,
                    args: ref v43,
                    cond: ref v44,
                } => {
                    if let &Opcode::Fcmp = v42 {
                        match v44 {
                            &FloatCC::Equal => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v50 = &constructor_vec_fcmpeqs(ctx, v13, v48, v49);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v51 = &constructor_bool(ctx, v50, v25);
                                // Rule at src/isa/s390x/lower.isle line 3655.
                                return v51.clone();
                            }
                            &FloatCC::GreaterThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v53 = &constructor_vec_fcmphs(ctx, v13, v48, v49);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v54 = &constructor_bool(ctx, v53, v25);
                                // Rule at src/isa/s390x/lower.isle line 3661.
                                return v54.clone();
                            }
                            &FloatCC::GreaterThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v56 = &constructor_vec_fcmphes(ctx, v13, v48, v49);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v57 = &constructor_bool(ctx, v56, v25);
                                // Rule at src/isa/s390x/lower.isle line 3667.
                                return v57.clone();
                            }
                            &FloatCC::LessThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v61 = &constructor_vec_fcmphs(ctx, v13, v59, v60);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v62 = &constructor_bool(ctx, v61, v25);
                                // Rule at src/isa/s390x/lower.isle line 3673.
                                return v62.clone();
                            }
                            &FloatCC::LessThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v64 = &constructor_vec_fcmphes(ctx, v13, v59, v60);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v65 = &constructor_bool(ctx, v64, v25);
                                // Rule at src/isa/s390x/lower.isle line 3679.
                                return v65.clone();
                            }
                            &FloatCC::NotEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v50 = &constructor_vec_fcmpeqs(ctx, v13, v48, v49);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v52 = &constructor_bool(ctx, v50, v7);
                                // Rule at src/isa/s390x/lower.isle line 3658.
                                return v52.clone();
                            }
                            &FloatCC::UnorderedOrGreaterThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v64 = &constructor_vec_fcmphes(ctx, v13, v59, v60);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v66 = &constructor_bool(ctx, v64, v7);
                                // Rule at src/isa/s390x/lower.isle line 3682.
                                return v66.clone();
                            }
                            &FloatCC::UnorderedOrGreaterThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v61 = &constructor_vec_fcmphs(ctx, v13, v59, v60);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v63 = &constructor_bool(ctx, v61, v7);
                                // Rule at src/isa/s390x/lower.isle line 3676.
                                return v63.clone();
                            }
                            &FloatCC::UnorderedOrLessThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v56 = &constructor_vec_fcmphes(ctx, v13, v48, v49);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v58 = &constructor_bool(ctx, v56, v7);
                                // Rule at src/isa/s390x/lower.isle line 3670.
                                return v58.clone();
                            }
                            &FloatCC::UnorderedOrLessThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v53 = &constructor_vec_fcmphs(ctx, v13, v48, v49);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v55 = &constructor_bool(ctx, v53, v7);
                                // Rule at src/isa/s390x/lower.isle line 3664.
                                return v55.clone();
                            }
                            _ => {}
                        }
                    }
                }
                &InstructionData::IntCompare {
                    opcode: ref v15,
                    args: ref v16,
                    cond: ref v17,
                } => {
                    if let &Opcode::Icmp = v15 {
                        match v17 {
                            &IntCC::Equal => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v23 = &constructor_vec_cmpeqs(ctx, v13, v21, v22);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v26 = &constructor_bool(ctx, v23, v25);
                                // Rule at src/isa/s390x/lower.isle line 3623.
                                return v26.clone();
                            }
                            &IntCC::NotEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v23 = &constructor_vec_cmpeqs(ctx, v13, v21, v22);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v27 = &constructor_bool(ctx, v23, v7);
                                // Rule at src/isa/s390x/lower.isle line 3626.
                                return v27.clone();
                            }
                            &IntCC::SignedGreaterThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v28 = &constructor_vec_cmphs(ctx, v13, v21, v22);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v29 = &constructor_bool(ctx, v28, v25);
                                // Rule at src/isa/s390x/lower.isle line 3629.
                                return v29.clone();
                            }
                            &IntCC::SignedGreaterThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v33 = &constructor_vec_cmphs(ctx, v13, v31, v32);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v35 = &constructor_bool(ctx, v33, v7);
                                // Rule at src/isa/s390x/lower.isle line 3638.
                                return v35.clone();
                            }
                            &IntCC::SignedLessThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v33 = &constructor_vec_cmphs(ctx, v13, v31, v32);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v34 = &constructor_bool(ctx, v33, v25);
                                // Rule at src/isa/s390x/lower.isle line 3635.
                                return v34.clone();
                            }
                            &IntCC::SignedLessThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v28 = &constructor_vec_cmphs(ctx, v13, v21, v22);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v30 = &constructor_bool(ctx, v28, v7);
                                // Rule at src/isa/s390x/lower.isle line 3632.
                                return v30.clone();
                            }
                            &IntCC::UnsignedGreaterThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v36 = &constructor_vec_cmphls(ctx, v13, v21, v22);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v37 = &constructor_bool(ctx, v36, v25);
                                // Rule at src/isa/s390x/lower.isle line 3641.
                                return v37.clone();
                            }
                            &IntCC::UnsignedGreaterThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v39 = &constructor_vec_cmphls(ctx, v13, v31, v32);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v41 = &constructor_bool(ctx, v39, v7);
                                // Rule at src/isa/s390x/lower.isle line 3650.
                                return v41.clone();
                            }
                            &IntCC::UnsignedLessThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v39 = &constructor_vec_cmphls(ctx, v13, v31, v32);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v40 = &constructor_bool(ctx, v39, v25);
                                // Rule at src/isa/s390x/lower.isle line 3647.
                                return v40.clone();
                            }
                            &IntCC::UnsignedLessThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v36 = &constructor_vec_cmphls(ctx, v13, v21, v22);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v38 = &constructor_bool(ctx, v36, v7);
                                // Rule at src/isa/s390x/lower.isle line 3644.
                                return v38.clone();
                            }
                            _ => {}
                        }
                    }
                }
                _ => {}
            }
        }
    }
    let v2 = C::put_in_reg(ctx, arg0);
    let v1 = C::value_type(ctx, arg0);
    let v4 = constructor_vec_imm(ctx, v1, 0x0);
    let v5 = &constructor_vec_cmpeqs(ctx, v1, v2, v4);
    let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
    let v8 = &constructor_bool(ctx, v5, v7);
    // Rule at src/isa/s390x/lower.isle line 3618.
    return v8.clone();
}

// Generated as internal constructor for term value_nonzero.
pub fn constructor_value_nonzero<C: Context>(ctx: &mut C, arg0: Value) -> ProducesBool {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data(ctx, v2);
        match v3 {
            &InstructionData::FloatCompare {
                opcode: ref v12,
                args: ref v13,
                cond: ref v14,
            } => {
                if let &Opcode::Fcmp = v12 {
                    let v15 = C::unpack_value_array_2(ctx, v13);
                    let v18 = &constructor_fcmp_val(ctx, v14, v15.0, v15.1);
                    // Rule at src/isa/s390x/lower.isle line 3756.
                    return v18.clone();
                }
            }
            &InstructionData::IntCompare {
                opcode: ref v4,
                args: ref v5,
                cond: ref v6,
            } => {
                if let &Opcode::Icmp = v4 {
                    let v7 = C::unpack_value_array_2(ctx, v5);
                    let v11 = &constructor_icmp_val(ctx, false, v6, v7.0, v7.1);
                    // Rule at src/isa/s390x/lower.isle line 3755.
                    return v11.clone();
                }
            }
            _ => {}
        }
    }
    let v19 = C::value_type(ctx, arg0);
    let v20 = C::gpr32_ty(ctx, v19);
    if let Some(v21) = v20 {
        let v23 = constructor_put_in_reg_sext32(ctx, arg0);
        let v25 = &constructor_icmps_simm16(ctx, I32, v23, 0x0);
        let v27 = &C::intcc_as_cond(ctx, &IntCC::NotEqual);
        let v28 = &constructor_bool(ctx, v25, v27);
        // Rule at src/isa/s390x/lower.isle line 3757.
        return v28.clone();
    }
    let v29 = C::gpr64_ty(ctx, v19);
    if let Some(v30) = v29 {
        let v32 = C::put_in_reg(ctx, arg0);
        let v33 = &constructor_icmps_simm16(ctx, I64, v32, 0x0);
        let v27 = &C::intcc_as_cond(ctx, &IntCC::NotEqual);
        let v34 = &constructor_bool(ctx, v33, v27);
        // Rule at src/isa/s390x/lower.isle line 3760.
        return v34.clone();
    }
    let v35 = C::vr128_ty(ctx, v19);
    if let Some(v36) = v35 {
        let v32 = C::put_in_reg(ctx, arg0);
        let v39 = constructor_vec_imm(ctx, I64X2, 0x0);
        let v40 = &constructor_vec_cmpeqs(ctx, I64X2, v32, v39);
        let v42 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
        let v43 = &constructor_bool(ctx, v40, v42);
        // Rule at src/isa/s390x/lower.isle line 3763.
        return v43.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "value_nonzero", "src/isa/s390x/lower.isle line 3754"
    )
}

// Generated as internal constructor for term lower_call_args.
pub fn constructor_lower_call_args<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: Range,
    arg2: ValueSlice,
) -> CallArgList {
    let v3 = &C::args_builder_new(ctx);
    let v4 = constructor_lower_call_args_buffer(ctx, arg0, arg1, arg2);
    let v5 = constructor_lower_call_args_slots(ctx, arg0, v3, arg1, arg2);
    let v6 = constructor_lower_call_ret_arg(ctx, arg0, v3);
    let v7 = &C::args_builder_finish(ctx, v3);
    // Rule at src/isa/s390x/lower.isle line 3981.
    return v7.clone();
}

// Generated as internal constructor for term lower_call_args_buffer.
pub fn constructor_lower_call_args_buffer<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: Range,
    arg2: ValueSlice,
) -> InstOutput {
    let v2 = &C::range_view(ctx, arg1);
    match v2 {
        &RangeView::Empty => {
            let v4 = C::output_none(ctx);
            // Rule at src/isa/s390x/lower.isle line 3990.
            return v4;
        }
        &RangeView::NonEmpty {
            index: v5,
            rest: v6,
        } => {
            let v8 = &C::abi_get_arg(ctx, arg0, v5);
            let v9 = C::value_slice_get(ctx, arg2, v5);
            let v10 = constructor_copy_to_buffer(ctx, 0x0, v8, v9);
            let v11 = constructor_lower_call_args_buffer(ctx, arg0, v6, arg2);
            // Rule at src/isa/s390x/lower.isle line 3991.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_call_args_buffer", "src/isa/s390x/lower.isle line 3989"
    )
}

// Generated as internal constructor for term lower_call_args_slots.
pub fn constructor_lower_call_args_slots<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: &CallArgListBuilder,
    arg2: Range,
    arg3: ValueSlice,
) -> InstOutput {
    let v3 = &C::range_view(ctx, arg2);
    match v3 {
        &RangeView::Empty => {
            let v5 = C::output_none(ctx);
            // Rule at src/isa/s390x/lower.isle line 3998.
            return v5;
        }
        &RangeView::NonEmpty {
            index: v6,
            rest: v7,
        } => {
            let v8 = &C::abi_lane_order(ctx, arg0);
            let v10 = &C::abi_get_arg(ctx, arg0, v6);
            let v11 = C::value_slice_get(ctx, arg3, v6);
            let v12 = constructor_copy_to_arg(ctx, arg1, v8, 0x0, v10, v11);
            let v13 = constructor_lower_call_args_slots(ctx, arg0, arg1, v7, arg3);
            // Rule at src/isa/s390x/lower.isle line 3999.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_call_args_slots", "src/isa/s390x/lower.isle line 3997"
    )
}

// Generated as internal constructor for term lower_call_ret_arg.
pub fn constructor_lower_call_ret_arg<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: &CallArgListBuilder,
) -> InstOutput {
    let v5 = &C::abi_ret_arg(ctx, arg0);
    if let Some(v6) = v5 {
        let v7 = &C::abi_arg_only_slot(ctx, v6);
        if let Some(v8) = v7 {
            let v9 = C::abi_sized_stack_arg_space(ctx, arg0);
            let v11 = &C::memarg_stack_off(ctx, v9, 0x0);
            let v12 = &C::abi_lane_order(ctx, arg0);
            let v13 = constructor_load_addr(ctx, v11);
            let v14 = constructor_copy_reg_to_arg_slot(ctx, arg1, v12, 0x0, v8, v13);
            // Rule at src/isa/s390x/lower.isle line 4008.
            return v14;
        }
    }
    let v1 = C::abi_no_ret_arg(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::output_none(ctx);
        // Rule at src/isa/s390x/lower.isle line 4007.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_call_ret_arg", "src/isa/s390x/lower.isle line 4006"
    )
}

// Generated as internal constructor for term lower_call_rets.
pub fn constructor_lower_call_rets<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: &CallRetList,
    arg2: Range,
    arg3: &InstOutputBuilder,
) -> InstOutput {
    let v3 = &C::range_view(ctx, arg2);
    match v3 {
        &RangeView::Empty => {
            let v5 = C::output_builder_finish(ctx, arg3);
            // Rule at src/isa/s390x/lower.isle line 4014.
            return v5;
        }
        &RangeView::NonEmpty {
            index: v6,
            rest: v7,
        } => {
            let v8 = &C::abi_lane_order(ctx, arg0);
            let v9 = C::abi_sized_stack_arg_space(ctx, arg0);
            let v10 = &C::abi_get_ret(ctx, arg0, v6);
            let v11 = constructor_copy_from_arg(ctx, arg1, v8, v9, v10);
            let v12 = C::output_builder_push(ctx, arg3, v11);
            let v13 = constructor_lower_call_rets(ctx, arg0, arg1, v7, arg3);
            // Rule at src/isa/s390x/lower.isle line 4015.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_call_rets", "src/isa/s390x/lower.isle line 4013"
    )
}
